cscope 15 $HOME/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos               0001724432
	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/feature_tracker/feature_tracker.cpp

29 
	~"„©uª_åackî.hµ
"

31 
	~<˛imôs
>

32 
	~<cÊﬂt
>

33 
	~<io°ªam
>

34 
	~<iom™ù
>

36 
	~<VX/vxu.h
>

37 
	~<NVX/nvx.h
>

39 
	~<OVX/UtûôyOVX.hµ
>

46 
	g«me•a˚


52 ˛as†
	cFótuªTøckîIm∂
 : 
public
 
nvx
::
FótuªTøckî


54 
public
:

55 
FótuªTøckîIm∂
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
P¨ams
& 
∑øms
);

56 ~
FótuªTøckîIm∂
();

58 
öô
(
vx_image
 
fú°Føme
, vx_imagê
mask
);

59 
åack
(
vx_image
 
√wFøme
, vx_imagê
mask
);

61 
vx_¨øy
 
gëPªvFótuªs
() const;

62 
vx_¨øy
 
gëCuºFótuªs
() const;

64 
¥ötPîfs
() const;

66 
	g¥iv©e
:

67 
¸óãD©aObje˘s
();

69 
¥o˚ssFú°Føme
(
vx_image
 
‰ame
, vx_imagê
mask
);

70 
¸óãMaöGøph
(
vx_image
 
‰ame
, vx_imagê
mask
);

72 
ªÀa£
();

74 
P¨ams
 
	g∑øms_
;

76 
vx_c⁄ãxt
 
	gc⁄ãxt_
;

79 
vx_df_image
 
	gf‹m©_
;

80 
vx_uöt32
 
	gwidth_
;

81 
vx_uöt32
 
	gheight_
;

84 
vx_dñay
 
	gpyr_dñay_
;

87 
vx_dñay
 
	g±s_dñay_
;

90 
vx_¨øy
 
	gkp_cuº_li°_
;

93 
vx_gøph
 
	gmaö_gøph_
;

96 
vx_node
 
	gcvt_cﬁ‹_node_
;

97 
vx_node
 
	gpyr_node_
;

98 
vx_node
 
	g›t_Êow_node_
;

99 
vx_node
 
	g„©uª_åack_node_
;

102 
	gFótuªTøckîIm∂
::
	$FótuªTøckîIm∂
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
P¨ams
& 
∑øms
) :

103 
	$∑øms_
(
∑øms
)

105 
c⁄ãxt_
 = 
c⁄ãxt
;

107 
f‹m©_
 = 
VX_DF_IMAGE_VIRT
;

108 
width_
 = 0;

109 
height_
 = 0;

111 
pyr_dñay_
 = 
nuŒ±r
;

112 
±s_dñay_
 = 
nuŒ±r
;

113 
kp_cuº_li°_
 = 
nuŒ±r
;

115 
maö_gøph_
 = 
nuŒ±r
;

116 
cvt_cﬁ‹_node_
 = 
nuŒ±r
;

117 
pyr_node_
 = 
nuŒ±r
;

118 
›t_Êow_node_
 = 
nuŒ±r
;

119 
„©uª_åack_node_
 = 
nuŒ±r
;

120 
	}
}

122 
	gFótuªTøckîIm∂
::~
	$FótuªTøckîIm∂
()

124 
	`ªÀa£
();

125 
	}
}

127 
	gFótuªTøckîIm∂
::
	$öô
(
vx_image
 
fú°Føme
, vx_imagê
mask
)

131 
vx_df_image
 
f‹m©
 = 
VX_DF_IMAGE_VIRT
;

132 
vx_uöt32
 
width
 = 0;

133 
vx_uöt32
 
height
 = 0;

135 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
fú°Føme
, 
VX_IMAGE_ATTRIBUTE_FORMAT
, &
f‹m©
, (format)) );

136 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
fú°Føme
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
width
, (width)) );

137 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
fú°Føme
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
height
, (height)) );

139 
	`NVXIO_ASSERT
(
f‹m©
 =
VX_DF_IMAGE_RGBX
);

141 i‡(
mask
)

143 
vx_df_image
 
mask_f‹m©
 = 
VX_DF_IMAGE_VIRT
;

144 
vx_uöt32
 
mask_width
 = 0;

145 
vx_uöt32
 
mask_height
 = 0;

147 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
mask
, 
VX_IMAGE_ATTRIBUTE_FORMAT
, &
mask_f‹m©
, (mask_format)) );

148 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
mask
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
mask_width
, (mask_width)) );

149 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
mask
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
mask_height
, (mask_height)) );

151 
	`NVXIO_ASSERT
(
mask_f‹m©
 =
VX_DF_IMAGE_U8
);

152 
	`NVXIO_ASSERT
(
mask_width
 =
width
);

153 
	`NVXIO_ASSERT
(
mask_height
 =
height
);

158 i‡(
width
 !
width_
 || 
height
 !
height_
)

160 
	`ªÀa£
();

162 
f‹m©_
 = 
f‹m©
;

163 
width_
 = 
width
;

164 
height_
 = 
height
;

166 
	`¸óãD©aObje˘s
();

168 
	`¸óãMaöGøph
(
fú°Føme
, 
mask
);

173 
	`¥o˚ssFú°Føme
(
fú°Føme
, 
mask
);

174 
	}
}

184 
	gFótuªTøckîIm∂
::
	$åack
(
vx_image
 
√wFøme
, vx_imagê
mask
)

188 
vx_df_image
 
f‹m©
 = 
VX_DF_IMAGE_VIRT
;

189 
vx_uöt32
 
width
 = 0;

190 
vx_uöt32
 
height
 = 0;

192 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
√wFøme
, 
VX_IMAGE_ATTRIBUTE_FORMAT
, &
f‹m©
, (format)) );

193 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
√wFøme
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
width
, (width)) );

194 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
√wFøme
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
height
, (height)) );

196 
	`NVXIO_ASSERT
(
f‹m©
 =
f‹m©_
);

197 
	`NVXIO_ASSERT
(
width
 =
width_
);

198 
	`NVXIO_ASSERT
(
height
 =
height_
);

200 i‡(
mask
)

202 
vx_df_image
 
mask_f‹m©
 = 
VX_DF_IMAGE_VIRT
;

203 
vx_uöt32
 
mask_width
 = 0;

204 
vx_uöt32
 
mask_height
 = 0;

206 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
mask
, 
VX_IMAGE_ATTRIBUTE_FORMAT
, &
mask_f‹m©
, (mask_format)) );

207 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
mask
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
mask_width
, (mask_width)) );

208 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
mask
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
mask_height
, (mask_height)) );

210 
	`NVXIO_ASSERT
(
mask_f‹m©
 =
VX_DF_IMAGE_U8
);

211 
	`NVXIO_ASSERT
(
mask_width
 =
width_
);

212 
	`NVXIO_ASSERT
(
mask_height
 =
height_
);

216 
	`NVXIO_SAFE_CALL
–
	`vxSëP¨amëîByIndex
(
cvt_cﬁ‹_node_
, 0, (
vx_ª„ªn˚
)
√wFøme
) );

217 
	`NVXIO_SAFE_CALL
–
	`vxSëP¨amëîByIndex
(
„©uª_åack_node_
, 2, (
vx_ª„ªn˚
)
mask
) );

220 
	`NVXIO_SAFE_CALL
–
	`vxAgeDñay
(
pyr_dñay_
) );

221 
	`NVXIO_SAFE_CALL
–
	`vxAgeDñay
(
±s_dñay_
) );

224 
	`NVXIO_SAFE_CALL
–
	`vxPro˚ssGøph
(
maö_gøph_
) );

225 
	}
}

227 
vx_¨øy
 
	gFótuªTøckîIm∂
::
	$gëPªvFótuªs
() const

229  (
vx_¨øy
)
	`vxGëRe„ªn˚FromDñay
(
±s_dñay_
, -1);

230 
	}
}

232 
vx_¨øy
 
	gFótuªTøckîIm∂
::
	$gëCuºFótuªs
() const

234  
kp_cuº_li°_
;

235 
	}
}

237 
	gFótuªTøckîIm∂
::
	$¥ötPîfs
() const

239 
vx_size
 
num_ôems
 = 0;

240 
	`NVXIO_SAFE_CALL
–
	`vxQuîyAºay
((
vx_¨øy
)
	`vxGëRe„ªn˚FromDñay
(
±s_dñay_
, -1), 
VX_ARRAY_ATTRIBUTE_NUMITEMS
, &
num_ôems
, (num_items)) );

241 #ifde‡
__ANDROID__


242 
	`NVXIO_LOGI
("FótuªTøckî", "Found " 
VX_FMT_SIZE
 " Fótuªs", 
num_ôems
);

244 
°d
::
cout
 << "Found " << 
num_ôems
 << " Fótuªs" << std::
ídl
;

247 
ovxio
::
	`¥ötPîf
(
maö_gøph_
, "Feature Tracker");

248 
ovxio
::
	`¥ötPîf
(
cvt_cﬁ‹_node_
, "Color Convert");

249 
ovxio
::
	`¥ötPîf
(
pyr_node_
, "Pyramid");

250 
ovxio
::
	`¥ötPîf
(
„©uª_åack_node_
, "Feature Track");

251 
ovxio
::
	`¥ötPîf
(
›t_Êow_node_
, "Optical Flow");

252 
	}
}

254 
	gFótuªTøckîIm∂
::
	$ªÀa£
()

256 
f‹m©_
 = 
VX_DF_IMAGE_VIRT
;

257 
width_
 = 0;

258 
height_
 = 0;

260 
	`vxRñó£Dñay
(&
pyr_dñay_
);

261 
	`vxRñó£Dñay
(&
±s_dñay_
);

262 
	`vxRñó£Aºay
(&
kp_cuº_li°_
);

264 
	`vxRñó£Node
(&
cvt_cﬁ‹_node_
);

265 
	`vxRñó£Node
(&
pyr_node_
);

266 
	`vxRñó£Node
(&
›t_Êow_node_
);

267 
	`vxRñó£Node
(&
„©uª_åack_node_
);

269 
	`vxRñó£Gøph
(&
maö_gøph_
);

270 
	}
}

280 
	gFótuªTøckîIm∂
::
	$¸óãD©aObje˘s
()

287 
vx_pyømid
 
pyr_exem∂¨
 = 
	`vxCª©ePyømid
(
c⁄ãxt_
, 
∑øms_
.
pyr_Àvñs
, 
VX_SCALE_PYRAMID_HALF
, 
width_
, 
height_
, 
VX_DF_IMAGE_U8
);

288 
	`NVXIO_CHECK_REFERENCE
(
pyr_exem∂¨
);

289 
pyr_dñay_
 = 
	`vxCª©eDñay
(
c⁄ãxt_
, (
vx_ª„ªn˚
)
pyr_exem∂¨
, 2);

290 
	`NVXIO_CHECK_REFERENCE
(
pyr_dñay_
);

291 
	`vxRñó£Pyømid
(&
pyr_exem∂¨
);

298 
vx_¨øy
 
±s_exem∂¨
 = 
	`vxCª©eAºay
(
c⁄ãxt_
, 
NVX_TYPE_POINT2F
, 
∑øms_
.
¨øy_ˇ∑côy
);

299 
	`NVXIO_CHECK_REFERENCE
(
±s_exem∂¨
);

300 
±s_dñay_
 = 
	`vxCª©eDñay
(
c⁄ãxt_
, (
vx_ª„ªn˚
)
±s_exem∂¨
, 2);

301 
	`NVXIO_CHECK_REFERENCE
(
±s_dñay_
);

302 
	`vxRñó£Aºay
(&
±s_exem∂¨
);

308 
kp_cuº_li°_
 = 
	`vxCª©eAºay
(
c⁄ãxt_
, 
NVX_TYPE_POINT2F
, 
∑øms_
.
¨øy_ˇ∑côy
);

309 
	`NVXIO_CHECK_REFERENCE
(
kp_cuº_li°_
);

310 
	}
}

317 
	gFótuªTøckîIm∂
::
	$¥o˚ssFú°Føme
(
vx_image
 
‰ame
, vx_imagê
mask
)

319 
vx_image
 
‰ameGøy
 = 
	`vxCª©eImage
(
c⁄ãxt_
, 
width_
, 
height_
, 
VX_DF_IMAGE_U8
);

320 
	`NVXIO_CHECK_REFERENCE
(
‰ameGøy
);

322 
	`NVXIO_SAFE_CALL
–
	`vxuCﬁ‹C⁄vît
(
c⁄ãxt_
, 
‰ame
, 
‰ameGøy
) );

323 
	`NVXIO_SAFE_CALL
–
	`vxuGaussünPyømid
(
c⁄ãxt_
, 
‰ameGøy
, (
vx_pyømid
)
	`vxGëRe„ªn˚FromDñay
(
pyr_dñay_
, 0)) );

324 i‡(
∑øms_
.
u£_h¨ris_dëe˘‹
)

326 
	`NVXIO_SAFE_CALL
–
	`nvxuH¨risTøck
(
c⁄ãxt_
, 
‰ameGøy
,

327 (
vx_¨øy
)
	`vxGëRe„ªn˚FromDñay
(
±s_dñay_
, 0),

328 
mask
, 
nuŒ±r
,

329 
∑øms_
.
h¨ris_k
,Ö¨ams_.
h¨ris_thªsh
,

330 
∑øms_
.
dëe˘‹_˚Œ_size
, 
nuŒ±r
) );

334 
	`NVXIO_SAFE_CALL
–
	`nvxuFa°Tøck
(
c⁄ãxt_
, 
‰ameGøy
,

335 (
vx_¨øy
)
	`vxGëRe„ªn˚FromDñay
(
±s_dñay_
, 0),

336 
mask
, 
nuŒ±r
,

337 
∑øms_
.
Á°_ty≥
,Ö¨ams_.
Á°_thªsh
,

338 
∑øms_
.
dëe˘‹_˚Œ_size
, 
nuŒ±r
) );

341 
	`vxRñó£Image
(&
‰ameGøy
);

342 
	}
}

350 
	gFótuªTøckîIm∂
::
	$¸óãMaöGøph
(
vx_image
 
‰ame
, vx_imagê
mask
)

352 
maö_gøph_
 = 
	`vxCª©eGøph
(
c⁄ãxt_
);

353 
	`NVXIO_CHECK_REFERENCE
(
maö_gøph_
);

360 
vx_pyømid
 
pyrGøy
 = (vx_pyømid)
	`vxGëRe„ªn˚FromDñay
(
pyr_dñay_
, 0);

361 
	`NVXIO_CHECK_REFERENCE
(
pyrGøy
);

362 
vx_image
 
‰ameGøy
 = 
	`vxGëPyømidLevñ
(
pyrGøy
, 0);

363 
	`NVXIO_CHECK_REFERENCE
(
‰ameGøy
);

371 
vx_Êﬂt32
 
lk_ïsû⁄
 = 0.01f;

372 
vx_sˇœr
 
s_lk_ïsû⁄
 = 
	`vxCª©eSˇœr
(
c⁄ãxt_
, 
VX_TYPE_FLOAT32
, &
lk_ïsû⁄
);

373 
	`NVXIO_CHECK_REFERENCE
(
s_lk_ïsû⁄
);

375 
vx_sˇœr
 
s_lk_num_ôîs
 = 
	`vxCª©eSˇœr
(
c⁄ãxt_
, 
VX_TYPE_UINT32
, &
∑øms_
.
lk_num_ôîs
);

376 
	`NVXIO_CHECK_REFERENCE
(
s_lk_num_ôîs
);

378 
vx_boﬁ
 
lk_u£_öô_e°
 = 
vx_Ál£_e
;

379 
vx_sˇœr
 
s_lk_u£_öô_e°
 = 
	`vxCª©eSˇœr
(
c⁄ãxt_
, 
VX_TYPE_BOOL
, &
lk_u£_öô_e°
);

380 
	`NVXIO_CHECK_REFERENCE
(
s_lk_u£_öô_e°
);

386 
cvt_cﬁ‹_node_
 = 
	`vxCﬁ‹C⁄vîtNode
(
maö_gøph_
, 
‰ame
, 
‰ameGøy
);

387 
	`NVXIO_CHECK_REFERENCE
(
cvt_cﬁ‹_node_
);

393 
pyr_node_
 = 
	`vxGaussünPyømidNode
(
maö_gøph_
, 
‰ameGøy
, 
pyrGøy
);

394 
	`NVXIO_CHECK_REFERENCE
(
pyr_node_
);

402 
›t_Êow_node_
 = 
	`vxO±iˇlFlowPyrLKNode
(
maö_gøph_
,

403 (
vx_pyømid
)
	`vxGëRe„ªn˚FromDñay
(
pyr_dñay_
, -1),

404 (
vx_pyømid
)
	`vxGëRe„ªn˚FromDñay
(
pyr_dñay_
, 0),

405 (
vx_¨øy
)
	`vxGëRe„ªn˚FromDñay
(
±s_dñay_
, -1),

406 (
vx_¨øy
)
	`vxGëRe„ªn˚FromDñay
(
±s_dñay_
, -1),

407 
kp_cuº_li°_
,

408 
VX_TERM_CRITERIA_BOTH
,

409 
s_lk_ïsû⁄
,

410 
s_lk_num_ôîs
,

411 
s_lk_u£_öô_e°
,

412 
∑øms_
.
lk_wö_size
);

413 
	`NVXIO_CHECK_REFERENCE
(
›t_Êow_node_
);

416 i‡(
∑øms_
.
u£_h¨ris_dëe˘‹
)

418 
„©uª_åack_node_
 = 
	`nvxH¨risTøckNode
(
maö_gøph_
, 
‰ameGøy
,

419 (
vx_¨øy
)
	`vxGëRe„ªn˚FromDñay
(
±s_dñay_
, 0),

420 
mask
, 
kp_cuº_li°_
,

421 
∑øms_
.
h¨ris_k
,Ö¨ams_.
h¨ris_thªsh
,

422 
∑øms_
.
dëe˘‹_˚Œ_size
, 
nuŒ±r
);

426 
„©uª_åack_node_
 = 
	`nvxFa°TøckNode
(
maö_gøph_
, 
‰ameGøy
,

427 (
vx_¨øy
)
	`vxGëRe„ªn˚FromDñay
(
±s_dñay_
, 0),

428 
mask
, 
kp_cuº_li°_
,

429 
∑øms_
.
Á°_ty≥
,Ö¨ams_.
Á°_thªsh
,

430 
∑øms_
.
dëe˘‹_˚Œ_size
, 
nuŒ±r
);

432 
	`NVXIO_CHECK_REFERENCE
(
„©uª_åack_node_
);

435 c⁄° * 
›ti⁄
 = "-O3";

436 
	`NVXIO_SAFE_CALL
–
	`vxSëGøphAâribuã
(
maö_gøph_
, 
NVX_GRAPH_VERIFY_OPTIONS
, 
›ti⁄
, 
	`°æí
(option)) );

443 
	`NVXIO_SAFE_CALL
–
	`vxVîifyGøph
(
maö_gøph_
) );

445 
	`vxRñó£Sˇœr
(&
s_lk_ïsû⁄
);

446 
	`vxRñó£Sˇœr
(&
s_lk_num_ôîs
);

447 
	`vxRñó£Sˇœr
(&
s_lk_u£_öô_e°
);

448 
	`vxRñó£Image
(&
‰ameGøy
);

449 
	}
}

452 
	gnvx
::
FótuªTøckî
::
P¨ams
::
	$P¨ams
()

455 
pyr_Àvñs
 = 6;

456 
lk_num_ôîs
 = 5;

457 
lk_wö_size
 = 10;

460 
¨øy_ˇ∑côy
 = 2000;

461 
dëe˘‹_˚Œ_size
 = 18;

462 
u£_h¨ris_dëe˘‹
 = 
åue
;

465 
h¨ris_k
 = 0.04f;

466 
h¨ris_thªsh
 = 100.0f;

469 
Á°_ty≥
 = 9;

470 
Á°_thªsh
 = 25;

471 
	}
}

473 
	gnvx
::
FótuªTøckî
* 
nvx
::FótuªTøckî::
	$¸óã
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
P¨ams
& 
∑øms
)

475  
√w
 
	`FótuªTøckîIm∂
(
c⁄ãxt
, 
∑øms
);

476 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/feature_tracker/feature_tracker.hpp

29 #i‚de‡
__NVX_FEATURE_TRACKER_HPP__


30 
	#__NVX_FEATURE_TRACKER_HPP__


	)

32 
	~<VX/vx.h
>

34 
«me•a˚
 
	gnvx
 {

35 ˛as†
	cFótuªTøckî
 {

36 
	gpublic
:

37 
	sP¨ams
 {

39 
vx_uöt32
 
pyr_Àvñs
;

40 
vx_uöt32
 
	glk_num_ôîs
;

41 
vx_uöt32
 
	glk_wö_size
;

44 
vx_uöt32
 
	g¨øy_ˇ∑côy
;

45 
vx_uöt32
 
	gdëe˘‹_˚Œ_size
;

46 
boﬁ
 
	gu£_h¨ris_dëe˘‹
;

49 
vx_Êﬂt32
 
	gh¨ris_k
;

50 
vx_Êﬂt32
 
	gh¨ris_thªsh
;

53 
vx_uöt32
 
	gÁ°_ty≥
;

54 
vx_uöt32
 
	gÁ°_thªsh
;

57 
vx_íum
 
	gèrgëDevi˚
;

59 
P¨ams
();

62 
FótuªTøckî
* 
¸óã
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
P¨ams
& 
∑øms
 = Params());

64 
	gvútuÆ
 ~
FótuªTøckî
() {}

66 
vútuÆ
 
öô
(
vx_image
 
fú°Føme
, vx_imagê
mask
 = 0) = 0;

67 
vútuÆ
 
åack
(
vx_image
 
√wFøme
, vx_imagê
mask
 = 0) = 0;

70 
vútuÆ
 
vx_¨øy
 
gëPªvFótuªs
() const = 0;

73 
vútuÆ
 
vx_¨øy
 
gëCuºFótuªs
() const = 0;

75 
vútuÆ
 
¥ötPîfs
() const = 0;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/feature_tracker/main_feature_tracker.cpp

29 
	~<io°ªam
>

30 
	~<s°ªam
>

31 
	~<iom™ù
>

32 
	~<°rög
>

33 
	~<mem‹y
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/sysˇŒ.h
>

36 
	~<uni°d.h
>

38 
	~<NVX/nvx.h
>

39 
	~<NVX/nvx_timî.hµ
>

41 
	~"„©uª_åackî.hµ
"

42 
	~<NVX/Aµliˇti⁄.hµ
>

43 
	~<NVX/C⁄figP¨£r.hµ
>

44 
	~<OVX/FømeSour˚OVX.hµ
>

45 
	~<OVX/RídîOVX.hµ
>

46 
	~<NVX/SyncTimî.hµ
>

47 
	~<OVX/UtûôyOVX.hµ
>

50 
	~<libøry_öãrÁ˚.h
>

53 
	sEvítD©a


55 
EvítD©a
(): 
shouldSt›
(
Ál£
), 
∑u£
(false) {}

57 
boﬁ
 
	mshouldSt›
;

58 
boﬁ
 
	m∑u£
;

64 
EvítD©a
 
	mevítD©a
;

65 
	m°d
::
unique_±r
<
ovxio
::
Rídî
> 
ªndîî
;

66 
	m°d
::
unique_±r
<
ovxio
::
FømeSour˚
> 
sour˚
;

67 
vx_dñay
 
	m‰ame_dñay
;

68 
vx_image
 
	m‰ame
;

69 
vx_image
 
	m¥evFøme
;

70 
vx_image
 
	mmask
;

71 
	mnvx
::
FótuªTøckî
 *
åackî
;

72 
	movxio
::
C⁄ãxtGu¨d
 *
c⁄ãxt
;

73 } 
	tBíchm¨kSèã
;

75 
	$evítCÆlback
(* 
evítD©a
, 
vx_ch¨
 
key
, 
vx_uöt32
, vx_uint32)

77 
EvítD©a
* 
d©a
 = 
°©ic_ˇ°
<EvítD©a*>(
evítD©a
);

79 i‡(
key
 == 27)

81 
d©a
->
shouldSt›
 = 
åue
;

83 i‡(
key
 == 32)

85 
d©a
->
∑u£
 = !data->pause;

87 
	}
}

89 
	$di•œySèã
(
ovxio
::
Rídî
 *
ªndîî
,

90 c⁄° 
ovxio
::
FømeSour˚
::
P¨amëîs
 &
sour˚P¨ams
,

91 
nvx
::
FótuªTøckî
::
P¨ams
 &
c⁄fig
,

92 
¥oc_ms
, 
tŸÆ_ms
)

94 
°d
::
o°rög°ªam
 
txt
;

96 
txt
 << 
°d
::
fixed
 << std::
	`£çªcisi⁄
(1);

98 
ovxio
::
Rídî
::
TextBoxStyÀ
 
°yÀ
 = {{255, 255, 255, 255}, {0, 0, 0, 127}, {10, 10}};

100 
txt
 << "Sour˚ size: " << 
sour˚P¨ams
.
‰ameWidth
 << 'x' << sour˚P¨ams.
‰ameHeight
 << 
°d
::
ídl
;

101 
txt
 << "Dëe˘‹: " << (
c⁄fig
.
u£_h¨ris_dëe˘‹
 ? "H¨ris" : "FAST"Ë<< 
°d
::
ídl
;

102 
txt
 << "Alg‹ôhm: " << 
¥oc_ms
 << " m†/ " << 1000.0 /Öroc_m†<< " FPS" << 
°d
::
ídl
;

103 
txt
 << "Di•œy: " << 
tŸÆ_ms
 << " m†/ " << 1000.0 /ÅŸÆ_m†<< " FPS" << 
°d
::
ídl
;

105 
txt
 << 
°d
::
	`£çªcisi⁄
(6);

106 
txt
.
	`un£tf
(
°d
::
ios_ba£
::
Êﬂtfõld
);

107 
txt
 << "LIMITED TO " << 
nvxio
::
Aµliˇti⁄
::
	`gë
().
	`gëFPSLimô
(Ë<< " FPS FOR DISPLAY" << 
°d
::
ídl
;

109 
txt
 << "S∑˚ -Öau£/ªsume" << 
°d
::
ídl
;

110 
txt
 << "Esc - closeÅhe demo";

111 
ªndîî
->
	`putTextVõwp‹t
(
txt
.
	`°r
(), 
°yÀ
);

112 
	}
}

114 
boﬁ
 
	$ªad
(c⁄° 
°d
::
°rög
 & 
nf
, 
nvx
::
FótuªTøckî
::
P¨ams
 &
c⁄fig
, std::°rög &
mesßge
)

116 
°d
::
unique_±r
<
nvxio
::
C⁄figP¨£r
> 
	`·∑r£r
“vxio::
	`¸óãC⁄figP¨£r
());

118 
·∑r£r
->
	`addP¨amëî
("pyr_Àvñs", 
nvxio
::
O±i⁄H™dÀr
::
	`unsig√dI¡egî
(&
c⁄fig
.
pyr_Àvñs
,

119 
nvxio
::
ønges
::
	`©Ló°
(1u)

121 
nvxio
::
ønges
::
	`©Mo°
(8u)));

122 
·∑r£r
->
	`addP¨amëî
("lk_win_size",

123 
nvxio
::
O±i⁄H™dÀr
::
	`unsig√dI¡egî
(&
c⁄fig
.
lk_wö_size
,

124 
nvxio
::
ønges
::
	`©Ló°
(3u)

126 
nvxio
::
ønges
::
	`©Mo°
(32u)));

127 
·∑r£r
->
	`addP¨amëî
("lk_num_iters",

128 
nvxio
::
O±i⁄H™dÀr
::
	`unsig√dI¡egî
(&
c⁄fig
.
lk_num_ôîs
,

129 
nvxio
::
ønges
::
	`©Ló°
(1u)

131 
nvxio
::
ønges
::
	`©Mo°
(100u)));

132 
·∑r£r
->
	`addP¨amëî
("array_capacity",

133 
nvxio
::
O±i⁄H™dÀr
::
	`unsig√dI¡egî
(&
c⁄fig
.
¨øy_ˇ∑côy
,

134 
nvxio
::
ønges
::
	`©Ló°
(1u)));

135 
·∑r£r
->
	`addP¨amëî
("detector_cell_size",

136 
nvxio
::
O±i⁄H™dÀr
::
	`unsig√dI¡egî
(&
c⁄fig
.
dëe˘‹_˚Œ_size
,

137 
nvxio
::
ønges
::
	`©Ló°
(1u)));

138 
·∑r£r
->
	`addP¨amëî
("detector",

139 
nvxio
::
O±i⁄H™dÀr
::
	`⁄eOf
(&
c⁄fig
.
u£_h¨ris_dëe˘‹
,

140 { {"h¨ris", 
åue
},

141 {"Á°", 
Ál£
} }));

142 
·∑r£r
->
	`addP¨amëî
("harris_k",

143 
nvxio
::
O±i⁄H™dÀr
::
	`ªÆ
(&
c⁄fig
.
h¨ris_k
,

144 
nvxio
::
ønges
::
	`m‹eTh™
(0.0f)));

145 
·∑r£r
->
	`addP¨amëî
("harris_thresh",

146 
nvxio
::
O±i⁄H™dÀr
::
	`ªÆ
(&
c⁄fig
.
h¨ris_thªsh
,

147 
nvxio
::
ønges
::
	`m‹eTh™
(0.0f)));

148 
·∑r£r
->
	`addP¨amëî
("fast_type",

149 
nvxio
::
O±i⁄H™dÀr
::
	`unsig√dI¡egî
(&
c⁄fig
.
Á°_ty≥
,

150 
nvxio
::
ønges
::
	`©Ló°
(9u)

152 
nvxio
::
ønges
::
	`©Mo°
(12u)));

153 
·∑r£r
->
	`addP¨amëî
("fast_thresh",

154 
nvxio
::
O±i⁄H™dÀr
::
	`unsig√dI¡egî
(&
c⁄fig
.
Á°_thªsh
,

155 
nvxio
::
ønges
::
	`ÀssTh™
(255u)));

157 
mesßge
 = 
·∑r£r
->
	`∑r£
(
nf
);

159  
mesßge
.
	`em±y
();

160 
	}
}

162 
	$CÀ™up
(*
d©a
)

164 
Bíchm¨kSèã
 *
°©e
 = (Bíchm¨kSèã *)
d©a
;

165 i‡(
°©e
->
mask
Ë
	`vxRñó£Image
(&state->mask);

166 i‡(
°©e
->
‰ame_dñay
Ë
	`vxRñó£Dñay
(&state->frame_delay);

167 i‡(
°©e
->
ªndîî
Ë
dñëe
 sèã->ªndîî.
	`gë
();

168 i‡(
°©e
->
sour˚
Ë
dñëe
 sèã->sour˚.
	`gë
();

169 i‡(
°©e
->
åackî
Ë
dñëe
 state->tracker;

170 i‡(
°©e
->
c⁄ãxt
Ë
dñëe
 state->context;

171 
	`mem£t
(
°©e
, 0, (*state));

172 
	`‰ì
(
°©e
);

173 
	}
}

175 * 
	$Inôülize
(
Inôüliz©i⁄P¨amëîs
 *
∑øms
)

177 
Bíchm¨kSèã
 *
°©e
 = 
NULL
;

178 
°©e
 = (
Bíchm¨kSèã
 *Ë
	`mÆloc
((*state));

179 i‡(!
°©e
Ë 
NULL
;

180 
	`mem£t
(
°©e
, 0, (*state));

182 
nvxio
::
Aµliˇti⁄
 &
≠p
 =Çvxio::Aµliˇti⁄::
	`gë
();

186 
°d
::
°rög
 
sour˚Uri
 = 
≠p
.
	`födSam∂eFûeP©h
("cars.mp4");

187 
°d
::
°rög
 
c⁄figFûe
 = 
≠p
.
	`födSam∂eFûeP©h
("feature_tracker_demo_config.ini");

189 #i‡
deföed
 
USE_OPENCV
 || deföed 
USE_GSTREAMER


190 
°d
::
°rög
 
maskFûe
;

196 
≠p
.
	`öô
(1, 
NULL
);

199 
°©e
->
c⁄ãxt
 = 
√w
 
ovxio
::
C⁄ãxtGu¨d
;

200 
	`vxDúe˘ive
(*(
°©e
->
c⁄ãxt
), 
VX_DIRECTIVE_ENABLE_PERFORMANCE
);

204 
	`vxRegi°îLogCÆlback
(*(
°©e
->
c⁄ãxt
), &
ovxio
::
°doutLogCÆlback
, 
vx_Ál£_e
);

207 
nvx
::
FótuªTøckî
::
P¨ams
 
·_∑øms
;

208 
°d
::
°rög
 
îr‹
;

209 i‡(!
	`ªad
(
c⁄figFûe
, 
·_∑øms
, 
îr‹
))

211 
°d
::
cout
<<
îr‹
;

212  
NULL
;

216 
°©e
->
sour˚
 = 
ovxio
::
	`¸óãDeÁu…FømeSour˚
(*(°©e->
c⁄ãxt
), 
sour˚Uri
);

218 i‡(!
°©e
->
sour˚
 || !°©e->sour˚->
	`›í
())

220 
°d
::
˚º
 << "Eº‹: C™'à›í sour˚ URI " << 
sour˚Uri
 << std::
ídl
;

221  
NULL
;

224 i‡(
°©e
->
sour˚
->
	`gëSour˚Ty≥
(Ë=
ovxio
::
FømeSour˚
::
SINGLE_IMAGE_SOURCE
)

226 
°d
::
˚º
 << "Eº‹: C™'àw‹k o¿®sögÀ image." << std::
ídl
;

227  
NULL
;

230 
ovxio
::
FømeSour˚
::
P¨amëîs
 
sour˚P¨ams
 = 
°©e
->
sour˚
->
	`gëC⁄figuøti⁄
();

233 
°©e
->
ªndîî
 = 
ovxio
::
	`¸óãDeÁu…Rídî
–*(°©e->
c⁄ãxt
), "Feature Tracker Demo",

234 
sour˚P¨ams
.
‰ameWidth
,

235 
sour˚P¨ams
.
‰ameHeight
);

237 i‡(!
°©e
->
ªndîî
)

239 
°d
::
˚º
 << "Eº‹: C™'à¸óãáÑídîî" << std::
ídl
;

240  
NULL
;

243 
°©e
->
evítD©a
 = 
	`EvítD©a
();

244 
°©e
->
ªndîî
->
	`£tOnKeybﬂrdEvítCÆlback
(
evítCÆlback
, &°©e->
evítD©a
);

247 
vx_image
 
‰ameExem∂¨
 = 
	`vxCª©eImage
(*(
°©e
->
c⁄ãxt
),

248 
sour˚P¨ams
.
‰ameWidth
, sour˚P¨ams.
‰ameHeight
, 
VX_DF_IMAGE_RGBX
);

249 
	`NVXIO_CHECK_REFERENCE
(
‰ameExem∂¨
);

250 
°©e
->
‰ame_dñay
 = 
	`vxCª©eDñay
(*(°©e->
c⁄ãxt
), (
vx_ª„ªn˚
)
‰ameExem∂¨
, 2);

251 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
‰ame_dñay
);

252 
	`vxRñó£Image
(&
‰ameExem∂¨
);

256 
°©e
->
¥evFøme
 = (
vx_image
)
	`vxGëRe„ªn˚FromDñay
(°©e->
‰ame_dñay
, -1);

257 
°©e
->
‰ame
 = (
vx_image
)
	`vxGëRe„ªn˚FromDñay
(°©e->
‰ame_dñay
, 0);

261 
°©e
->
mask
 = 
NULL
;

263 #i‡
deföed
 
USE_OPENCV
 || deföed 
USE_GSTREAMER


264 i‡(!
maskFûe
.
	`em±y
())

266 
°©e
->
mask
 = 
ovxio
::
	`lﬂdImageFromFûe
(*(°©e->
c⁄ãxt
), 
maskFûe
, 
VX_DF_IMAGE_U8
);

268 
vx_uöt32
 
mask_width
 = 0, 
mask_height
 = 0;

269 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
°©e
->
mask
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
mask_width
, (mask_width)) );

270 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
°©e
->
mask
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
mask_height
, (mask_height)) );

272 i‡(
mask_width
 !
sour˚P¨ams
.
‰ameWidth
 || 
mask_height
 !sour˚P¨ams.
‰ameHeight
)

274 
°d
::
˚º
 << "Eº‹: Thêmask mu° havêthêßmêsizêa†thêöpuàsour˚." << std::
ídl
;

275  
NULL
;

282 
°©e
->
åackî
 = 
nvx
::
FótuªTøckî
::
	`¸óã
(*(°©e->
c⁄ãxt
), 
·_∑øms
);

284 
ovxio
::
FømeSour˚
::
FømeSètus
 
‰ameSètus
;

292 
‰ameSètus
 = 
°©e
->
sour˚
->
	`„tch
(°©e->
‰ame
);

293 } 
‰ameSètus
 =
ovxio
::
FømeSour˚
::
TIMEOUT
);

295 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
CLOSED
)

297 
°d
::
˚º
 << "Eº‹: Sour˚ ha†nÿ‰ames" << std::
ídl
;

298  
NULL
;

301 
°©e
->
åackî
->
	`öô
(°©e->
‰ame
, sèã->
mask
);

303 
	`vxAgeDñay
(
°©e
->
‰ame_dñay
);

308  
°©e
;

309 
	}
}

311 
	$C›yIn
(*
d©a
)

314 
	}
}

316 
	$Execuã
(*
d©a
)

318 
åy


327 
Bíchm¨kSèã
 *
°©e
 = (Bíchm¨kSèã *)
d©a
;

329 
ovxio
::
FømeSour˚
::
FømeSètus
 
‰ameSètus
;

330 i‡(!
°©e
->
evítD©a
.
∑u£
)

332 
nvx
::
Timî
 
¥ocTimî
;

333 
‰ameSètus
 = 
°©e
->
sour˚
->
	`„tch
(°©e->
‰ame
);

335 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
TIMEOUT
)

339 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
CLOSED
)

341 i‡(!
°©e
->
sour˚
->
	`›í
())

343 
°d
::
˚º
 << "Eº‹: FaûedÅÿª›íÅhêsour˚" << std::
ídl
;

350 
°©e
->
åackî
->
	`åack
(°©e->
‰ame
, sèã->
mask
);

354 
°©e
->
ªndîî
->
	`putImage
(°©e->
¥evFøme
);

357 
ovxio
::
Rídî
::
FótuªStyÀ
 
„©uªStyÀ
 = { { 255, 0, 0, 255 }, 4.0f };

358 
ovxio
::
Rídî
::
LöeStyÀ
 
¨rowStyÀ
 = {{0, 255, 0, 255}, 1};

360 
vx_¨øy
 
ﬁd_poöts
 = 
°©e
->
åackî
->
	`gëPªvFótuªs
();

361 
vx_¨øy
 
√w_poöts
 = 
°©e
->
åackî
->
	`gëCuºFótuªs
();

363 
°©e
->
ªndîî
->
	`putAºows
(
ﬁd_poöts
, 
√w_poöts
, 
¨rowStyÀ
);

364 
°©e
->
ªndîî
->
	`putFótuªs
(
ﬁd_poöts
, 
„©uªStyÀ
);

366 i‡(!
°©e
->
ªndîî
->
	`Êush
())

368 
°©e
->
evítD©a
.
shouldSt›
 = 
åue
;

370 i‡(!
°©e
->
evítD©a
.
∑u£
)

372 
	`vxAgeDñay
(
°©e
->
‰ame_dñay
);

375 
	`ˇtch
 (c⁄° 
°d
::
ex˚±i⁄
& 
e
)

377 
°d
::
˚º
 << "Eº‹: " << 
e
.
	`wh©
(Ë<< std::
ídl
;

381 
	}
}

383 
	$C›yOut
(*
d©a
, 
TimögInf‹m©i⁄
 *
times
)

385 
times
->
kî√l_cou¡
 = 0;

387 
	}
}

389 c⁄° * 
	$GëName
()

392 
	}
}

396 
	$Regi°îFun˘i⁄s
(
Bíchm¨kLibøryFun˘i⁄s
 *
fun˘i⁄s
)

398 
fun˘i⁄s
->
öôülize
 = 
Inôülize
;

399 
fun˘i⁄s
->
c›y_ö
 = 
C›yIn
;

400 
fun˘i⁄s
->
execuã
 = 
Execuã
;

401 
fun˘i⁄s
->
c›y_out
 = 
C›yOut
;

402 
fun˘i⁄s
->
˛ónup
 = 
CÀ™up
;

403 
fun˘i⁄s
->
gë_«me
 = 
GëName
;

405 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/hough_transform/main_hough_transform.cpp

29 
	~<cm©h
>

30 
	~<io°ªam
>

31 
	~<s°ªam
>

32 
	~<iom™ù
>

33 
	~<°rög
>

34 
	~<sys/ty≥s.h
>

35 
	~<uni°d.h
>

36 
	~<sys/sysˇŒ.h
>

37 
	~<mem‹y
>

39 
	~<NVX/nvx.h
>

40 
	~<NVX/nvx_timî.hµ
>

42 
	~<NVX/Aµliˇti⁄.hµ
>

43 
	~<NVX/C⁄figP¨£r.hµ
>

44 
	~<OVX/FømeSour˚OVX.hµ
>

45 
	~<OVX/RídîOVX.hµ
>

46 
	~<NVX/SyncTimî.hµ
>

47 
	~<OVX/UtûôyOVX.hµ
>

50 
	~<libøry_öãrÁ˚.h
>

52 
	g«me•a˚


56 
	sHoughTønsf‹mDemoP¨ams


58 
vx_uöt32
 
	gswôchPîiod
;

59 
vx_Êﬂt32
 
	gsˇÀFa˘‹
;

60 
vx_íum
 
	gsˇÀTy≥
;

61 
vx_öt32
 
	gC™nyLowîThªsh
;

62 
vx_öt32
 
	gC™nyUµîThªsh
;

63 
vx_Êﬂt32
 
	gdp
;

64 
vx_Êﬂt32
 
	gmöDi°
;

65 
vx_uöt32
 
	gmöRadius
;

66 
vx_uöt32
 
	gmaxRadius
;

67 
vx_uöt32
 
	gaccThªshﬁd
;

68 
vx_uöt32
 
	gcú˛esC≠acôy
;

69 
vx_Êﬂt32
 
	grho
;

70 
vx_Êﬂt32
 
	gthëa
;

71 
vx_uöt32
 
	gvŸesThªshﬁd
;

72 
vx_uöt32
 
	gmöLöeLígth
;

73 
vx_uöt32
 
	gmaxLöeG≠
;

74 
vx_uöt32
 
	glöesC≠acôy
;

76 
HoughTønsf‹mDemoP¨ams
()

77 : 
swôchPîiod
(400),

78 
sˇÀFa˘‹
(.5f),

79 
sˇÀTy≥
(
VX_INTERPOLATION_TYPE_BILINEAR
),

80 
C™nyLowîThªsh
(230),

81 
C™nyUµîThªsh
(250),

82 
dp
(2.f),

83 
möDi°
(10.f),

84 
möRadius
(1),

85 
maxRadius
(25),

86 
accThªshﬁd
(110),

87 
cú˛esC≠acôy
(300),

88 
rho
(1.f),

89 
thëa
(1.f),

90 
vŸesThªshﬁd
(100),

91 
möLöeLígth
(25),

92 
maxLöeG≠
(2),

93 
löesC≠acôy
(300) {}

97 
	sEvítD©a


99 
EvítD©a
(): 
showSour˚
(
åue
), 
°›
(
Ál£
), 
∑u£
(false) {}

101 
boﬁ
 
	gshowSour˚
;

102 
boﬁ
 
	g°›
;

103 
boﬁ
 
	g∑u£
;

108 
	govxio
::
C⁄ãxtGu¨d
 *
c⁄ãxt
;

109 
	g°d
::
unique_±r
<
ovxio
::
FømeSour˚
> 
‰ameSour˚
;

110 
	g°d
::
unique_±r
<
ovxio
::
Rídî
> 
ªndîî
;

111 
EvítD©a
 
	gevítD©a
;

112 
vx_image
 
	g‰ame
;

113 
vx_image
 
	gedges
;

114 
vx_¨øy
 
	gcú˛es
;

115 
vx_¨øy
 
	glöes
;

116 
vx_öt32
 
	gnumFømes
;

117 
vx_node
 
	gcvtNode
;

118 
vx_node
 
	gsˇÀDownNode
;

119 
vx_node
 
	gmedün3x3Node
;

120 
vx_node
 
	gequÆizeHi°Node
;

121 
vx_node
 
	gC™nyNode
;

122 
vx_node
 
	gsˇÀUpNode
;

123 
vx_node
 
	gSobñ3x3Node
;

124 
vx_node
 
	gHoughCú˛esNode
;

125 
vx_node
 
	gHoughSegmítsNode
;

126 
vx_gøph
 
	ggøph
;

127 
HoughTønsf‹mDemoP¨ams
 
	ght_∑øms
;

128 } 
	tBíchm¨kSèã
;

130 
boﬁ
 
checkP¨ams
(
vx_öt32
& 
C™nyLowîThªsh
, vx_öt32& 
C™nyUµîThªsh
,

131 
vx_uöt32
& 
möRadius
, vx_uöt32& 
maxRadius
, 
°d
::
°rög
 & 
îr‹
)

133 i‡(
C™nyLowîThªsh
 > 
C™nyUµîThªsh
)

135 
îr‹
 = "Inconsistent values ofÜoweránd upper CannyÅhresholds";

138 i‡(
	gmöRadius
 > 
	gmaxRadius
)

140 
	gîr‹
 = "Inconsistent minimumánd maximum circleÑadius values";

143  
	gîr‹
.
em±y
();

147 
boﬁ
 
ªad
(c⁄° 
°d
::
°rög
 &
c⁄figFûe
, 
HoughTønsf‹mDemoP¨ams
 &
c⁄fig
, std::°rög &
îr‹
)

149 c⁄° 
°d
::
unique_±r
<
nvxio
::
C⁄figP¨£r
> 
∑r£r
“vxio::
¸óãC⁄figP¨£r
());

151 
	g∑r£r
->
addP¨amëî
("swôchPîiod", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(

152 &
c⁄fig
.
swôchPîiod
));

153 
	g∑r£r
->
addP¨amëî
("sˇÀFa˘‹", 
nvxio
::
O±i⁄H™dÀr
::
ªÆ
(

154 &
c⁄fig
.
sˇÀFa˘‹
,

155 
nvxio
::
ønges
::
m‹eTh™
(0.f)

157 
nvxio
::
ønges
::
©Mo°
(1.f)));

158 
	g∑r£r
->
addP¨amëî
("sˇÀTy≥", 
nvxio
::
O±i⁄H™dÀr
::
⁄eOf
(

159 &
c⁄fig
.
sˇÀTy≥
,

161 
VX_INTERPOLATION_TYPE_NEAREST_NEIGHBOR
},

163 
VX_INTERPOLATION_TYPE_BILINEAR
},

165 
VX_INTERPOLATION_TYPE_AREA
},

167 
	g∑r£r
->
addP¨amëî
("C™nyLowîThªsh", 
nvxio
::
O±i⁄H™dÀr
::
öãgî
(

168 &
c⁄fig
.
C™nyLowîThªsh
,

169 
nvxio
::
ønges
::
m‹eTh™
(0)));

170 
	g∑r£r
->
addP¨amëî
("C™nyUµîThªsh", 
nvxio
::
O±i⁄H™dÀr
::
öãgî
(

171 &
c⁄fig
.
C™nyUµîThªsh
,

172 
nvxio
::
ønges
::
m‹eTh™
(0)));

173 
	g∑r£r
->
addP¨amëî
("dp", 
nvxio
::
O±i⁄H™dÀr
::
ªÆ
–&
c⁄fig
.
dp
,

174 
nvxio
::
ønges
::
©Ló°
(1.f)));

175 
	g∑r£r
->
addP¨amëî
("möDi°", 
nvxio
::
O±i⁄H™dÀr
::
ªÆ
–&
c⁄fig
.
möDi°
,

176 
nvxio
::
ønges
::
m‹eTh™
(0.f)));

177 
	g∑r£r
->
addP¨amëî
("möRadius", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(

178 &
c⁄fig
.
möRadius
));

179 
	g∑r£r
->
addP¨amëî
("maxRadius", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(

180 &
c⁄fig
.
maxRadius
,

181 
nvxio
::
ønges
::
m‹eTh™
(0u)));

182 
	g∑r£r
->
addP¨amëî
("accThªshﬁd", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(

183 &
c⁄fig
.
accThªshﬁd
,

184 
nvxio
::
ønges
::
m‹eTh™
(0u)));

185 
	g∑r£r
->
addP¨amëî
("circlesCapacity",

186 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(

187 &
c⁄fig
.
cú˛esC≠acôy
,

188 
nvxio
::
ønges
::
m‹eTh™
(0u)

190 
nvxio
::
ønges
::
©Mo°
(1000u)));

191 
	g∑r£r
->
addP¨amëî
("rho", 
nvxio
::
O±i⁄H™dÀr
::
ªÆ
–&
c⁄fig
.
rho
,

192 
nvxio
::
ønges
::
m‹eTh™
(0.f)));

193 
	g∑r£r
->
addP¨amëî
("thëa", 
nvxio
::
O±i⁄H™dÀr
::
ªÆ
–&
c⁄fig
.
thëa
,

194 
nvxio
::
ønges
::
m‹eTh™
(0.f)

196 
nvxio
::
ønges
::
©Mo°
(180.f)));

197 
	g∑r£r
->
addP¨amëî
("votesThreshold",

198 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(

199 &
c⁄fig
.
vŸesThªshﬁd
,

200 
nvxio
::
ønges
::
m‹eTh™
(0u)));

201 
	g∑r£r
->
addP¨amëî
("möLöeLígth", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(

202 &
c⁄fig
.
möLöeLígth
,

203 
nvxio
::
ønges
::
m‹eTh™
(0u)));

204 
	g∑r£r
->
addP¨amëî
("maxLöeG≠", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(

205 &
c⁄fig
.
maxLöeG≠
));

206 
	g∑r£r
->
addP¨amëî
("löesC≠acôy", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(

207 &
c⁄fig
.
löesC≠acôy
,

208 
nvxio
::
ønges
::
m‹eTh™
(0u)

210 
nvxio
::
ønges
::
©Mo°
(1000u)));

212 
	gîr‹
 = 
∑r£r
->
∑r£
(
c⁄figFûe
);

214 i‡(!
	gîr‹
.
em±y
())

216  
	gÁl£
;

219  
checkP¨ams
(
c⁄fig
.
C™nyLowîThªsh
, c⁄fig.
C™nyUµîThªsh
,

220 
c⁄fig
.
möRadius
, c⁄fig.
maxRadius
, 
îr‹
);

224 
keybﬂrdEvítCÆlback
(* 
evítD©a
, 
vx_ch¨
 
key
, 
vx_uöt32
 , vx_uint32 )

226 
EvítD©a
* 
	gd©a
 = 
°©ic_ˇ°
<EvítD©a*>(
evítD©a
);

227 i‡(
	gkey
 == 27)

229 
d©a
->
°›
 = 
åue
;

231 i‡(
	gkey
 == 'm')

233 
d©a
->
showSour˚
 = !data->showSource;

235 i‡(
	gkey
 == 32)

237 
d©a
->
∑u£
 = !data->pause;

243 
	$CÀ™up
(*
d©a
)

245 
Bíchm¨kSèã
 *
°©e
 = (Bíchm¨kSèã *)
d©a
;

246 i‡(
°©e
->
cvtNode
Ë
	`vxRñó£Node
(&state->cvtNode);

247 i‡(
°©e
->
sˇÀDownNode
Ë
	`vxRñó£Node
(&state->scaleDownNode);

248 i‡(
°©e
->
medün3x3Node
Ë
	`vxRñó£Node
(&state->median3x3Node);

249 i‡(
°©e
->
equÆizeHi°Node
Ë
	`vxRñó£Node
(&state->equalizeHistNode);

250 i‡(
°©e
->
C™nyNode
Ë
	`vxRñó£Node
(&state->CannyNode);

251 i‡(
°©e
->
sˇÀUpNode
Ë
	`vxRñó£Node
(&state->scaleUpNode);

252 i‡(
°©e
->
Sobñ3x3Node
Ë
	`vxRñó£Node
(&state->Sobel3x3Node);

253 i‡(
°©e
->
HoughCú˛esNode
Ë
	`vxRñó£Node
(&state->HoughCirclesNode);

254 i‡(
°©e
->
HoughSegmítsNode
Ë
	`vxRñó£Node
(&state->HoughSegmentsNode);

255 i‡(
°©e
->
gøph
Ë
	`vxRñó£Gøph
(&state->graph);

256 i‡(
°©e
->
‰ame
Ë
	`vxRñó£Image
(&state->frame);

257 i‡(
°©e
->
edges
Ë
	`vxRñó£Image
(&state->edges);

258 i‡(
°©e
->
cú˛es
Ë
	`vxRñó£Aºay
(&state->circles);

259 i‡(
°©e
->
löes
Ë
	`vxRñó£Aºay
(&state->lines);

260 i‡(
°©e
->
‰ameSour˚
Ë
dñëe
 sèã->‰ameSour˚.
	`gë
();

261 i‡(
°©e
->
ªndîî
Ë
dñëe
 sèã->ªndîî.
	`gë
();

262 i‡(
°©e
->
c⁄ãxt
Ë
dñëe
 state->context;

263 
	`mem£t
(
°©e
, 0, (*state));

264 
	`‰ì
(
°©e
);

265 
	}
}

267 * 
	$Inôülize
(
Inôüliz©i⁄P¨amëîs
 *
∑øms
)

269 
Bíchm¨kSèã
 *
°©e
 = 
NULL
;

270 
°©e
 = (
Bíchm¨kSèã
 *Ë
	`mÆloc
((*state));

271 i‡(!
°©e
Ë 
NULL
;

272 
	`mem£t
(
°©e
, 0, (*state));

274 
nvxio
::
Aµliˇti⁄
 &
≠p
 =Çvxio::Aµliˇti⁄::
	`gë
();

278 
°d
::
°rög
 
sour˚Uri
 = 
≠p
.
	`födSam∂eFûeP©h
("signs.avi");

280 
°d
::
°rög
 
c⁄figFûe
 = 
≠p
.
	`födSam∂eFûeP©h
("hough_transform_demo_config.ini");

282 
≠p
.
	`öô
(1, 
NULL
);

284 
°©e
->
ht_∑øms
 = 
	`HoughTønsf‹mDemoP¨ams
();

286 
°d
::
°rög
 
îr‹
;

287 i‡(!
	`ªad
(
c⁄figFûe
, 
°©e
->
ht_∑øms
, 
îr‹
))

289 
°d
::
˚º
 << 
îr‹
 << std::
ídl
;

290  
NULL
;

293 
°©e
->
ht_∑øms
.
thëa
 *
ovxio
::
PI_F
 / 180.0f;

300 
°©e
->
c⁄ãxt
 = 
√w
 
ovxio
::
C⁄ãxtGu¨d
;

301 
	`vxDúe˘ive
(*(
°©e
->
c⁄ãxt
), 
VX_DIRECTIVE_ENABLE_PERFORMANCE
);

305 
	`vxRegi°îLogCÆlback
(*(
°©e
->
c⁄ãxt
), &
ovxio
::
°doutLogCÆlback
, 
vx_Ál£_e
);

309 
°©e
->
‰ameSour˚
 = 
ovxio
::
	`¸óãDeÁu…FømeSour˚
(*(°©e->
c⁄ãxt
), 
sour˚Uri
);

311 i‡(!
°©e
->
‰ameSour˚
 || !°©e->‰ameSour˚->
	`›í
())

313 
°d
::
˚º
 << "Eº‹: C™'à›í sour˚ URI " << 
sour˚Uri
 << std::
ídl
;

314  
NULL
;

317 
ovxio
::
FømeSour˚
::
P¨amëîs
 
‰ameC⁄fig
 = 
°©e
->
‰ameSour˚
->
	`gëC⁄figuøti⁄
();

319 i‡((
‰ameC⁄fig
.
‰ameWidth
 * 
°©e
->
ht_∑øms
.
sˇÀFa˘‹
 < 16) ||

320 (
‰ameC⁄fig
.
‰ameHeight
 * 
°©e
->
ht_∑øms
.
sˇÀFa˘‹
 < 16))

322 
°d
::
˚º
 << "Eº‹: SˇÀ fa˘‹ i†toÿsmÆl" << std::
ídl
;

323  
NULL
;

328 
°©e
->
ªndîî
 = 
ovxio
::
	`¸óãDeÁu…Rídî
(*(°©e->
c⁄ãxt
), "Hough Tønsf‹m Demo", 
‰ameC⁄fig
.
‰ameWidth
, fømeC⁄fig.
‰ameHeight
);

330 i‡(!
°©e
->
ªndîî
)

332 
°d
::
˚º
 << "Eº‹: C™nŸ cª©êªndî!" << std::
ídl
;

333  
NULL
;

339 
°©e
->
evítD©a
.
∑u£
 = 
Ál£
;

340 
°©e
->
evítD©a
.
°›
 = 
Ál£
;

341 
°©e
->
evítD©a
.
showSour˚
 = 
åue
;

342 
°©e
->
ªndîî
->
	`£tOnKeybﬂrdEvítCÆlback
(
keybﬂrdEvítCÆlback
, &°©e->
evítD©a
);

348 
°©e
->
‰ame
 = 
	`vxCª©eImage
(*(°©e->
c⁄ãxt
), 
‰ameC⁄fig
.
‰ameWidth
, fømeC⁄fig.
‰ameHeight
, 
VX_DF_IMAGE_RGBX
);

349 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
‰ame
);

351 
°©e
->
edges
 = 
	`vxCª©eImage
(*(°©e->
c⁄ãxt
), 
‰ameC⁄fig
.
‰ameWidth
, fømeC⁄fig.
‰ameHeight
, 
VX_DF_IMAGE_U8
);

352 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
edges
);

357 
°©e
->
cú˛es
 = 
	`vxCª©eAºay
(*(°©e->
c⁄ãxt
), 
NVX_TYPE_POINT3F
, sèã->
ht_∑øms
.
cú˛esC≠acôy
);

358 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
cú˛es
);

360 
°©e
->
löes
 = 
	`vxCª©eAºay
(*(°©e->
c⁄ãxt
), 
NVX_TYPE_POINT4F
, sèã->
ht_∑øms
.
löesC≠acôy
);

361 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
löes
);

365 
vx_thªshﬁd
 
C™nyThªshﬁd
 = 
	`vxCª©eThªshﬁd
(*(
°©e
->
c⁄ãxt
), 
VX_THRESHOLD_TYPE_RANGE
, 
VX_TYPE_INT32
);

366 
	`NVXIO_CHECK_REFERENCE
(
C™nyThªshﬁd
);

367 
	`NVXIO_SAFE_CALL
–
	`vxSëThªshﬁdAâribuã
(
C™nyThªshﬁd
, 
VX_THRESHOLD_ATTRIBUTE_THRESHOLD_LOWER
,

368 &
°©e
->
ht_∑øms
.
C™nyLowîThªsh
, (state->ht_params.CannyLowerThresh)) );

369 
	`NVXIO_SAFE_CALL
–
	`vxSëThªshﬁdAâribuã
(
C™nyThªshﬁd
, 
VX_THRESHOLD_ATTRIBUTE_THRESHOLD_UPPER
,

370 &
°©e
->
ht_∑øms
.
C™nyUµîThªsh
, (state->ht_params.CannyUpperThresh)) );

374 
°©e
->
gøph
 = 
	`vxCª©eGøph
(*(°©e->
c⁄ãxt
));

375 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
gøph
);

379 
vx_image
 
vút_U8
 = 
	`vxCª©eVútuÆImage
(
°©e
->
gøph
, 0, 0, 
VX_DF_IMAGE_U8
);

380 
	`NVXIO_CHECK_REFERENCE
(
vút_U8
);

382 
vx_image
 
vút_sˇÀd
 = 
	`vxCª©eVútuÆImage
(
°©e
->
gøph
, 
°©ic_ˇ°
<
vx_uöt32
>(
‰ameC⁄fig
.
‰ameWidth
 * sèã->
ht_∑øms
.
sˇÀFa˘‹
),

383 
°©ic_ˇ°
<
vx_uöt32
>(
‰ameC⁄fig
.
‰ameHeight
 * 
°©e
->
ht_∑øms
.
sˇÀFa˘‹
), 
VX_DF_IMAGE_U8
);

384 
	`NVXIO_CHECK_REFERENCE
(
vút_sˇÀd
);

386 
vx_image
 
vút_bluºed
 = 
	`vxCª©eVútuÆImage
(
°©e
->
gøph
, 0, 0, 
VX_DF_IMAGE_U8
);

387 
	`NVXIO_CHECK_REFERENCE
(
vút_bluºed
);

389 
vx_image
 
vút_equÆized
 = 
	`vxCª©eVútuÆImage
(
°©e
->
gøph
, 0, 0, 
VX_DF_IMAGE_U8
);

390 
	`NVXIO_CHECK_REFERENCE
(
vút_equÆized
);

392 
vx_image
 
vút_edges
 = 
	`vxCª©eVútuÆImage
(
°©e
->
gøph
, 0, 0, 
VX_DF_IMAGE_U8
);

393 
	`NVXIO_CHECK_REFERENCE
(
vút_edges
);

395 
vx_image
 
vút_dx
 = 
	`vxCª©eVútuÆImage
(
°©e
->
gøph
, 0, 0, 
VX_DF_IMAGE_S16
);

396 
	`NVXIO_CHECK_REFERENCE
(
vút_dx
);

398 
vx_image
 
vút_dy
 = 
	`vxCª©eVútuÆImage
(
°©e
->
gøph
, 0, 0, 
VX_DF_IMAGE_S16
);

399 
	`NVXIO_CHECK_REFERENCE
(
vút_dy
);

411 
°©e
->
cvtNode
 = 
	`vxCﬁ‹C⁄vîtNode
(°©e->
gøph
, sèã->
‰ame
, 
vút_U8
);

412 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
cvtNode
);

414 
°©e
->
sˇÀDownNode
 = 
	`vxSˇÀImageNode
(°©e->
gøph
, 
vút_U8
, 
vút_sˇÀd
, sèã->
ht_∑øms
.
sˇÀTy≥
);

415 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
sˇÀDownNode
);

417 
°©e
->
medün3x3Node
 = 
	`vxMedün3x3Node
(°©e->
gøph
, 
vút_sˇÀd
, 
vút_bluºed
);

418 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
medün3x3Node
);

420 
°©e
->
equÆizeHi°Node
 = 
	`vxEquÆizeHi°Node
(°©e->
gøph
, 
vút_bluºed
, 
vút_equÆized
);

421 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
equÆizeHi°Node
);

423 
°©e
->
C™nyNode
 = 
	`vxC™nyEdgeDëe˘‹Node
(°©e->
gøph
, 
vút_equÆized
, 
C™nyThªshﬁd
, 3, 
VX_NORM_L1
, 
vút_edges
);

424 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
C™nyNode
);

426 
°©e
->
sˇÀUpNode
 = 
	`vxSˇÀImageNode
(°©e->
gøph
, 
vút_edges
, sèã->
edges
, sèã->
ht_∑øms
.
sˇÀTy≥
);

427 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
sˇÀUpNode
);

429 
°©e
->
Sobñ3x3Node
 = 
	`vxSobñ3x3Node
(°©e->
gøph
, 
vút_equÆized
, 
vút_dx
, 
vút_dy
);

430 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
Sobñ3x3Node
);

432 
°©e
->
HoughCú˛esNode
 = 
	`nvxHoughCú˛esNode
(°©e->
gøph
, 
vút_edges
, 
vút_dx
, 
vút_dy
,

433 
°©e
->
cú˛es
, 
nuŒ±r
, sèã->
ht_∑øms
.
dp
, sèã->ht_∑øms.
möDi°
,

434 
°©e
->
ht_∑øms
.
möRadius
, sèã->ht_∑øms.
maxRadius
, sèã->ht_∑øms.
accThªshﬁd
);

435 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
HoughCú˛esNode
);

437 
°©e
->
HoughSegmítsNode
 = 
	`nvxHoughSegmítsNode
(°©e->
gøph
, 
vút_edges
, sèã->
löes
, sèã->
ht_∑øms
.
rho
, sèã->ht_∑øms.
thëa
,

438 
°©e
->
ht_∑øms
.
vŸesThªshﬁd
, sèã->ht_∑øms.
möLöeLígth
,

439 
°©e
->
ht_∑øms
.
maxLöeG≠
, 
nuŒ±r
);

440 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
HoughSegmítsNode
);

444 
	`vxRñó£Image
(&
vút_U8
);

445 
	`vxRñó£Image
(&
vút_sˇÀd
);

446 
	`vxRñó£Image
(&
vút_bluºed
);

447 
	`vxRñó£Image
(&
vút_equÆized
);

448 
	`vxRñó£Image
(&
vút_edges
);

449 
	`vxRñó£Image
(&
vút_dx
);

450 
	`vxRñó£Image
(&
vút_dy
);

454 
	`vxRñó£Thªshﬁd
(&
C™nyThªshﬁd
);

458 c⁄° * 
›ti⁄
 = "-O3";

459 
	`NVXIO_SAFE_CALL
–
	`vxSëGøphAâribuã
(
°©e
->
gøph
, 
NVX_GRAPH_VERIFY_OPTIONS
, 
›ti⁄
, 
	`°æí
(option)) );

463 
vx_°©us
 
vîify_°©us
 = 
	`vxVîifyGøph
(
°©e
->
gøph
);

464 i‡(
vîify_°©us
 !
VX_SUCCESS
)

466 
°d
::
˚º
 << "Eº‹: Gøph vîifiˇti⁄ faûed. SìÅhêNVX LOG f‹Éx∂™©i⁄." << std::
ídl
;

467  
NULL
;

470  
°©e
;

471 
	}
}

473 
	$C›yIn
(*
d©a
)

476 
	}
}

482 
	$Execuã
(*
d©a
)

484 
åy


486 
Bíchm¨kSèã
 *
°©e
 = (Bíchm¨kSèã *)
d©a
;

489 i‡(!
°©e
->
evítD©a
.
∑u£
)

496 
ovxio
::
FømeSour˚
::
FømeSètus
 
‰ameSètus
 = 
°©e
->
‰ameSour˚
->
	`„tch
(°©e->
‰ame
);

498 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
TIMEOUT
)

500 
°d
::
˚º
 << "Eº‹: fømêsour˚ fótch TIMEOUT" << std::
ídl
;

504 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
CLOSED
)

506 i‡(!
°©e
->
‰ameSour˚
->
	`›í
())

508 
°d
::
˚º
 << "Eº‹: FaûedÅÿª›íÅhêsour˚" << std::
ídl
;

511 
‰ameSètus
 = 
°©e
->
‰ameSour˚
->
	`„tch
(°©e->
‰ame
);

512 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
TIMEOUT
 ||

513 
‰ameSètus
 =
ovxio
::
FømeSour˚
::
CLOSED
)

515 
°d
::
˚º
 << "Eº‹: fømêsour˚ fótch TIMEOUT o∏CLOSED" << std::
ídl
;

521 
	`NVXIO_SAFE_CALL
–
	`vxPro˚ssGøph
(
°©e
->
gøph
) );

524 
vx_size
 
num_cú˛es
 = 0;

525 
	`NVXIO_SAFE_CALL
–
	`vxQuîyAºay
(
°©e
->
cú˛es
, 
VX_ARRAY_ATTRIBUTE_NUMITEMS
, &
num_cú˛es
, (num_circles)) );

527 i‡(
num_cú˛es
 > 0)

529 
vx_m≠_id
 
m≠_id
;

530 *
±r
;

531 
vx_size
 
°ride
;

532 
	`NVXIO_SAFE_CALL
–
	`vxM≠AºayR™ge
(
°©e
->
cú˛es
, 0, 
num_cú˛es
, &
m≠_id
, &
°ride
, &
±r
, 
VX_READ_AND_WRITE
, 
VX_MEMORY_TYPE_HOST
, 0) );

534 
vx_size
 
i
 = 0; i < 
num_cú˛es
; ++i)

536 
nvx_poöt3f_t
 *
c
 = (nvx_poöt3f_à*)
	`vxF‹m©AºayPoöãr
(
±r
, 
i
, 
°ride
);

537 
c
->
x
 /
°©e
->
ht_∑øms
.
sˇÀFa˘‹
;

538 
c
->
y
 /
°©e
->
ht_∑øms
.
sˇÀFa˘‹
;

539 
c
->
z
 /
°©e
->
ht_∑øms
.
sˇÀFa˘‹
;

542 
	`NVXIO_SAFE_CALL
–
	`vxUnm≠AºayR™ge
(
°©e
->
cú˛es
, 
m≠_id
) );

546 
vx_size
 
löes_cou¡
 = 0;

547 
	`NVXIO_SAFE_CALL
–
	`vxQuîyAºay
(
°©e
->
löes
, 
VX_ARRAY_ATTRIBUTE_NUMITEMS
, &
löes_cou¡
, (lines_count)) );

549 i‡(
löes_cou¡
 > 0)

551 
vx_m≠_id
 
m≠_id
;

552 
vx_size
 
°ride
;

553 *
±r
;

554 
	`NVXIO_SAFE_CALL
–
	`vxM≠AºayR™ge
(
°©e
->
löes
, 0, 
löes_cou¡
, &
m≠_id
, &
°ride
, &
±r
, 
VX_READ_AND_WRITE
, 
VX_MEMORY_TYPE_HOST
, 0) );

556 
vx_size
 
i
 = 0; i < 
löes_cou¡
; ++i)

558 
nvx_poöt4f_t
 *
co‹d
 = (nvx_poöt4f_à*)
	`vxF‹m©AºayPoöãr
(
±r
, 
i
, 
°ride
);

560 
co‹d
->
x
 /
°©e
->
ht_∑øms
.
sˇÀFa˘‹
;

561 
co‹d
->
y
 /
°©e
->
ht_∑øms
.
sˇÀFa˘‹
;

562 
co‹d
->
z
 /
°©e
->
ht_∑øms
.
sˇÀFa˘‹
;

563 
co‹d
->
w
 /
°©e
->
ht_∑øms
.
sˇÀFa˘‹
;

566 
	`NVXIO_SAFE_CALL
–
	`vxUnm≠AºayR™ge
(
°©e
->
löes
, 
m≠_id
) );

570 i‡(
°©e
->
ht_∑øms
.
swôchPîiod
 > 0)

572 
°©e
->
numFømes
++;

573 i‡(
°©e
->
numFømes
 % sèã->
ht_∑øms
.
swôchPîiod
 == 0)

575 
°©e
->
evítD©a
.
showSour˚
 = !state->eventData.showSource;

582 i‡(
°©e
->
evítD©a
.
showSour˚
)

584 
°©e
->
ªndîî
->
	`putImage
(°©e->
‰ame
);

588 
°©e
->
ªndîî
->
	`putImage
(°©e->
edges
);

592 
ovxio
::
Rídî
::
Cú˛eStyÀ
 
cú˛eStyÀ
 = { { 255u, 0u, 255u, 255u}, 2 };

593 
°©e
->
ªndîî
->
	`putCú˛es
(°©e->
cú˛es
, 
cú˛eStyÀ
);

596 
ovxio
::
Rídî
::
LöeStyÀ
 
löeStyÀ
 = { { 0u, 255u, 255u, 255u}, 2 };

597 
°©e
->
ªndîî
->
	`putLöes
(°©e->
löes
, 
löeStyÀ
);

600 i‡(!
°©e
->
ªndîî
->
	`Êush
())

602 
°©e
->
evítD©a
.
°›
 = 
åue
;

605 
	`ˇtch
 (c⁄° 
°d
::
ex˚±i⁄
& 
e
)

607 
°d
::
˚º
 << "Eº‹: " << 
e
.
	`wh©
(Ë<< std::
ídl
;

612 
	}
}

614 
	$C›yOut
(*
d©a
, 
TimögInf‹m©i⁄
 *
times
)

616 
times
->
kî√l_cou¡
 = 0;

618 
	}
}

620 c⁄° * 
	$GëName
()

623 
	}
}

627 
	$Regi°îFun˘i⁄s
(
Bíchm¨kLibøryFun˘i⁄s
 *
fun˘i⁄s
)

629 
fun˘i⁄s
->
öôülize
 = 
Inôülize
;

630 
fun˘i⁄s
->
c›y_ö
 = 
C›yIn
;

631 
fun˘i⁄s
->
execuã
 = 
Execuã
;

632 
fun˘i⁄s
->
c›y_out
 = 
C›yOut
;

633 
fun˘i⁄s
->
˛ónup
 = 
CÀ™up
;

634 
fun˘i⁄s
->
gë_«me
 = 
GëName
;

636 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/motion_estimation/iterative_motion_estimator.cpp

29 
	~"ôî©ive_mŸi⁄_e°im©‹.hµ
"

31 
	~<io°ªam
>

32 
	~<iom™ù
>

33 
	~<ve˘‹
>

35 
	~<NVX/nvx.h
>

37 
	~"OVX/UtûôyOVX.hµ
"

39 
	sSize


41 
vx_öt32
 
	mwidth
, 
	mheight
;

44 c⁄° 
vx_öt32
 
	gNUM_LEVELS
 = 3;

46 c⁄° 
Size
 
	gwöSizePîLevñ
[
NUM_LEVELS
] = {

52 c⁄° 
vx_öt32
 
	gnumIãrsPîLevñ
[
NUM_LEVELS
] = {

58 
	gIãøtiveMŸi⁄E°im©‹
::
P¨ams
::
	$P¨ams
()

60 
büsWeight
 = 1.0f;

61 
mvDivFa˘‹
 = 4;

62 
smoŸh√ssFa˘‹
 = 1.0f;

63 
	}
}

65 
	gIãøtiveMŸi⁄E°im©‹
::
	$IãøtiveMŸi⁄E°im©‹
(
vx_c⁄ãxt
 
c⁄ãxt
)

67 
c⁄ãxt_
 = 
c⁄ãxt
;

68 
	`NVXIO_SAFE_CALL
–
	`vxRëaöRe„ªn˚
((
vx_ª„ªn˚
)
c⁄ãxt_
) );

70 
f‹m©_
 = 
VX_DF_IMAGE_VIRT
;

71 
width_
 = 0;

72 
height_
 = 0;

74 
mfOut_
 = 
nuŒ±r
;

76 
widthROI_
 = 0;

77 
heightROI_
 = 0;

78 
¥evFømeROI_
 = 
nuŒ±r
;

79 
cuºFømeROI_
 = 
nuŒ±r
;

80 
mfOutROI_
 = 
nuŒ±r
;

82 
pyr_dñay_
 = 
nuŒ±r
;

84 
gøph_
 = 
nuŒ±r
;

86 
cvt_cﬁ‹_node_
 = 
nuŒ±r
;

87 
pyømid_node_
 = 
nuŒ±r
;

88 
	}
}

90 
	gIãøtiveMŸi⁄E°im©‹
::~
	$IãøtiveMŸi⁄E°im©‹
()

92 
	`ªÀa£
();

94 
	`vxRñó£C⁄ãxt
(&
c⁄ãxt_
);

95 
	}
}

97 
	gIãøtiveMŸi⁄E°im©‹
::
	$öô
(
vx_image
 
¥evFømeRGBX
, vx_imagê
cuºFømeRGBX
, c⁄° 
P¨ams
& 
∑øms
)

101 
vx_df_image
 
f‹m©
 = 
VX_DF_IMAGE_VIRT
;

102 
vx_uöt32
 
width
 = 0;

103 
vx_uöt32
 
height
 = 0;

105 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
¥evFømeRGBX
, 
VX_IMAGE_ATTRIBUTE_FORMAT
, &
f‹m©
, (format)) );

106 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
¥evFømeRGBX
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
width
, (width)) );

107 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
¥evFømeRGBX
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
height
, (height)) );

109 
	`NVXIO_ASSERT
(
f‹m©
 =
VX_DF_IMAGE_RGBX
);

110 
	`NVXIO_ASSERT
(
width
 >32 && 
height
 >= 32);

114 
	`ªÀa£
();

116 
∑øms_
 = 
∑øms
;

118 
f‹m©_
 = 
f‹m©
;

119 
width_
 = 
width
;

120 
height_
 = 
height
;

122 
	`¸óãD©aObje˘s
(
¥evFømeRGBX
, 
cuºFømeRGBX
);

123 
	`¸óãMaöGøph
();

124 
	`¥o˚ssInôülFøme
();

125 
	}
}

127 
	gIãøtiveMŸi⁄E°im©‹
::
	$ªÀa£
()

129 
f‹m©_
 = 
VX_DF_IMAGE_VIRT
;

130 
width_
 = 0;

131 
height_
 = 0;

133 
	`vxRñó£Image
(&
mfOut_
);

135 
	`vxRñó£Image
(&
¥evFømeROI_
);

136 
	`vxRñó£Image
(&
cuºFømeROI_
);

137 
	`vxRñó£Image
(&
mfOutROI_
);

139 
	`vxRñó£Dñay
(&
pyr_dñay_
);

141 
	`vxRñó£Gøph
(&
gøph_
);

142 
	}
}

145 
	gIãøtiveMŸi⁄E°im©‹
::
	$¸óãD©aObje˘s
(
vx_image
 
¥evFømeRGBX
, vx_imagê
cuºFømeRGBX
)

151 
vx_uöt32
 
mf_width
 = (
width_
 + 1) / 2;

152 
vx_uöt32
 
mf_height
 = (
height_
 + 1) / 2;

154 
mfOut_
 = 
	`vxCª©eImage
(
c⁄ãxt_
, 
mf_width
, 
mf_height
, 
NVX_DF_IMAGE_2F32
);

155 
	`NVXIO_CHECK_REFERENCE
(
mfOut_
);

160 
vx_imagï©ch_addªssög_t
 
addr
;

161 
addr
.
dim_x
 = 
mf_width
;

162 
addr
.
dim_y
 = 
mf_height
;

163 
addr
.
°ride_x
 = 2*(
vx_Êﬂt32
);

164 
addr
.
°ride_y
 =áddr.
°ride_x
*addr.
dim_x
;

165 
°d
::
ve˘‹
<
vx_Êﬂt32
> 
	`buf
(
mf_width
*
mf_height
*2, 0.0f);

166 
	`NVXIO_SAFE_CALL
–
	`vxC›yImageP©ch
(
mfOut_
, 
NULL
, 0, &
addr
, 
buf
.
	`d©a
(), 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
) );

171 
widthROI_
 = (
width_
 / 32) * 32;

172 
heightROI_
 = (
height_
 / 32) * 32;

174 
vx_ª˘™gÀ_t
 
‰ame_ª˘
 = {

176 
widthROI_
, 
heightROI_


179 
¥evFømeROI_
 = 
	`vxCª©eImageFromROI
(
¥evFømeRGBX
, &
‰ame_ª˘
);

180 
	`NVXIO_CHECK_REFERENCE
(
¥evFømeROI_
);

182 
cuºFømeROI_
 = 
	`vxCª©eImageFromROI
(
cuºFømeRGBX
, &
‰ame_ª˘
);

183 
	`NVXIO_CHECK_REFERENCE
(
cuºFømeROI_
);

185 
vx_ª˘™gÀ_t
 
mf_ª˘
 = {

187 
	`vx_uöt32
(
widthROI_
 / 2),

188 
	`vx_uöt32
(
heightROI_
 / 2)

191 
mfOutROI_
 = 
	`vxCª©eImageFromROI
(
mfOut_
, &
mf_ª˘
);

192 
	`NVXIO_CHECK_REFERENCE
(
mfOutROI_
);

197 
vx_pyømid
 
pyr_exem∂¨
 = 
	`vxCª©ePyømid
(
c⁄ãxt_
, 
NUM_LEVELS
, 
VX_SCALE_PYRAMID_HALF
, 
widthROI_
, 
heightROI_
, 
VX_DF_IMAGE_U8
);

198 
	`NVXIO_CHECK_REFERENCE
(
pyr_exem∂¨
);

200 
pyr_dñay_
 = 
	`vxCª©eDñay
(
c⁄ãxt_
, (
vx_ª„ªn˚
)
pyr_exem∂¨
, 2);

201 
	`NVXIO_CHECK_REFERENCE
(
pyr_dñay_
);

203 
	`vxRñó£Pyømid
(&
pyr_exem∂¨
);

204 
	}
}

209 
	gIãøtiveMŸi⁄E°im©‹
::
	$¸óãMaöGøph
()

211 
gøph_
 = 
	`nvxCª©eSåómGøph
(
c⁄ãxt_
);

212 
	`NVXIO_CHECK_REFERENCE
(
gøph_
);

214 
vx_pyømid
 
¥ev_pyr
 = (vx_pyømid)
	`vxGëRe„ªn˚FromDñay
(
pyr_dñay_
, -1);

215 
vx_pyømid
 
cuº_pyr
 = (vx_pyømid)
	`vxGëRe„ªn˚FromDñay
(
pyr_dñay_
, 0);

219 
vx_image
 
‰ame_gøy
 = 
	`vxCª©eVútuÆImage
(
gøph_
, 0, 0, 
VX_DF_IMAGE_U8
);

220 
	`NVXIO_CHECK_REFERENCE
(
‰ame_gøy
);

222 
cvt_cﬁ‹_node_
 = 
	`vxCﬁ‹C⁄vîtNode
(
gøph_
, 
cuºFømeROI_
, 
‰ame_gøy
);

223 
	`NVXIO_CHECK_REFERENCE
(
cvt_cﬁ‹_node_
);

227 
pyømid_node_
 = 
	`vxGaussünPyømidNode
(
gøph_
, 
‰ame_gøy
, 
cuº_pyr
);

228 
	`NVXIO_CHECK_REFERENCE
(
pyømid_node_
);

230 
	`vxRñó£Image
(&
‰ame_gøy
);

258 
vx_image
 
ßd_èbÀ_buf
 = 
	`vxCª©eVútuÆImage
(
gøph_
,

259 (
widthROI_
 / 8Ë* 
wöSizePîLevñ
[
NUM_LEVELS
 - 1].
width
 * wöSizePîLevñ[NUM_LEVELS - 1].
height
,

260 
heightROI_
 / 8,

261 
VX_DF_IMAGE_U32
);

262 
	`NVXIO_CHECK_REFERENCE
(
ßd_èbÀ_buf
);

264 
vx_image
 
mf_bufs
[4];

266 
mf_bufs
[0] = 
	`vxCª©eVútuÆImage
(
gøph_
, 
widthROI_
 / 4, 
heightROI_
 / 4, 
NVX_DF_IMAGE_2S16
);

267 
	`NVXIO_CHECK_REFERENCE
(
mf_bufs
[0]);

269 
mf_bufs
[1] = 
	`vxCª©eVútuÆImage
(
gøph_
, 
widthROI_
 / 4, 
heightROI_
 / 4, 
NVX_DF_IMAGE_2S16
);

270 
	`NVXIO_CHECK_REFERENCE
(
mf_bufs
[1]);

272 
mf_bufs
[2] = 
	`vxCª©eVútuÆImage
(
gøph_
, 
widthROI_
 / 4, 
heightROI_
 / 4, 
NVX_DF_IMAGE_2S16
);

273 
	`NVXIO_CHECK_REFERENCE
(
mf_bufs
[2]);

275 
mf_bufs
[3] = 
	`vxCª©eVútuÆImage
(
gøph_
, 
widthROI_
 / 2, 
heightROI_
 / 2, 
NVX_DF_IMAGE_2S16
);

276 
	`NVXIO_CHECK_REFERENCE
(
mf_bufs
[3]);

280 
¸óã_mf_nodes_
.
	`ªsize
(
NUM_LEVELS
);

281 
ªföe_mf_nodes_
.
	`ªsize
(
NUM_LEVELS
);

282 
∑πôi⁄_mf_nodes_
.
	`ªsize
(
NUM_LEVELS
 + 1);

283 
mu…_mf_nodes_
.
	`ªsize
(
NUM_LEVELS
);

285 
vx_image
 
¥ev_lvl_mf
 = 
nuŒ±r
;

287 
vx_öt32
 
Àvñ
 = 
NUM_LEVELS
 - 1;Üevel >= 0; --level)

289 
vx_image
 
¥ev_‰ame
 = 
	`vxGëPyømidLevñ
(
¥ev_pyr
, 
Àvñ
);

290 
vx_image
 
cuº_‰ame
 = 
	`vxGëPyømidLevñ
(
cuº_pyr
, 
Àvñ
);

292 
vx_uöt32
 
cur_lvl_width
 = 0u, 
cur_Àvñ_height
 = 0u;

293 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
¥ev_‰ame
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
cur_lvl_width
, (cur_lvl_width)) );

294 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
¥ev_‰ame
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
cur_Àvñ_height
, (cur_level_height)) );

296 
Size
 
wöSize
 = 
wöSizePîLevñ
[
Àvñ
];

297 
vx_öt32
 
numIãrs
 = 
numIãrsPîLevñ
[
Àvñ
];

301 
vx_ª˘™gÀ_t
 
mf_8x8_roi
 = {

303 
	`vx_uöt32
(
cur_lvl_width
 / 8),

304 
	`vx_uöt32
(
cur_Àvñ_height
 / 8)

307 
vx_image
 
mf_0
 = 
	`vxCª©eImageFromROI
(
mf_bufs
[0], &
mf_8x8_roi
);

308 
	`NVXIO_CHECK_REFERENCE
(
mf_0
);

310 
vx_image
 
mf_1
 = 
	`vxCª©eImageFromROI
(
mf_bufs
[1], &
mf_8x8_roi
);

311 
	`NVXIO_CHECK_REFERENCE
(
mf_1
);

313 
vx_ª˘™gÀ_t
 
ßd_èbÀ_roi
 = {

315 
	`vx_uöt32
((
cur_lvl_width
 / 8Ë* 
wöSize
.
width
 * wöSize.
height
),

316 
	`vx_uöt32
(
cur_Àvñ_height
 / 8)

319 
vx_image
 
ßd_èbÀ
 = 
	`vxCª©eImageFromROI
(
ßd_èbÀ_buf
, &
ßd_èbÀ_roi
);

320 
	`NVXIO_CHECK_REFERENCE
(
ßd_èbÀ
);

322 
¸óã_mf_nodes_
[
Àvñ
] = 
	`nvxCª©eMŸi⁄FõldNode
(
gøph_
,

323 
¥ev_‰ame
, 
cuº_‰ame
,

324 
¥ev_lvl_mf
 ,Örev_lvl_mf ,

325 
mf_0
, 
mf_1
,

326 
ßd_èbÀ
,

328 
wöSize
.
width
, wöSize.
height
,

329 
∑øms_
.
büsWeight
,

330 
∑øms_
.
mvDivFa˘‹
);

331 
	`NVXIO_CHECK_REFERENCE
(
¸óã_mf_nodes_
[
Àvñ
]);

333 
	`vxRñó£Image
(&
¥ev_lvl_mf
);

337 
vx_image
 
mf_ªföe_0
 = 
	`vxCª©eImageFromROI
(
mf_bufs
[2], &
mf_8x8_roi
);

338 
	`NVXIO_CHECK_REFERENCE
(
mf_ªföe_0
);

340 
vx_image
 
mf_ªföe_1
 = 
	`vxCª©eImageFromROI
(
mf_bufs
[3], &
mf_8x8_roi
);

341 
	`NVXIO_CHECK_REFERENCE
(
mf_ªföe_1
);

343 
ªföe_mf_nodes_
[
Àvñ
] = 
	`nvxReföeMŸi⁄FõldNode
(
gøph_
,

344 
mf_0
, 
mf_1
,

345 
ßd_èbÀ
,

346 
mf_ªföe_0
, 
mf_ªföe_1
,

347 
wöSize
.
width
, wöSize.
height
,

348 
numIãrs
,

349 
∑øms_
.
smoŸh√ssFa˘‹
,

350 
∑øms_
.
mvDivFa˘‹
);

351 
	`NVXIO_CHECK_REFERENCE
(
ªföe_mf_nodes_
[
Àvñ
]);

353 
	`vxRñó£Image
(&
mf_0
);

354 
	`vxRñó£Image
(&
mf_1
);

355 
	`vxRñó£Image
(&
ßd_èbÀ
);

359 
vx_ª˘™gÀ_t
 
mf_4x4_roi
 = {

361 
	`vx_uöt32
(
cur_lvl_width
 / 4),

362 
	`vx_uöt32
(
cur_Àvñ_height
 / 4)

365 
vx_image
 
mf_∑πôi⁄_0
 = 
	`vxCª©eImageFromROI
(
mf_bufs
[0], &
mf_4x4_roi
);

366 
	`NVXIO_CHECK_REFERENCE
(
mf_∑πôi⁄_0
);

368 
vx_image
 
mf_∑πôi⁄_1
 = 
	`vxCª©eImageFromROI
(
mf_bufs
[1], &
mf_4x4_roi
);

369 
	`NVXIO_CHECK_REFERENCE
(
mf_∑πôi⁄_1
);

371 
∑πôi⁄_mf_nodes_
[
Àvñ
 + 1] = 
	`nvxP¨tôi⁄MŸi⁄FõldNode
(
gøph_
,

372 
¥ev_‰ame
, 
cuº_‰ame
,

373 
mf_ªföe_0
, 
mf_ªföe_1
,

374 
mf_∑πôi⁄_0
, 
mf_∑πôi⁄_1
,

375 
∑øms_
.
smoŸh√ssFa˘‹
,

376 
∑øms_
.
mvDivFa˘‹
);

377 
	`NVXIO_CHECK_REFERENCE
(
∑πôi⁄_mf_nodes_
[
Àvñ
 + 1]);

379 
	`vxRñó£Image
(&
mf_ªföe_0
);

380 
	`vxRñó£Image
(&
mf_ªföe_1
);

382 i‡(
Àvñ
 > 0)

386 
¥ev_lvl_mf
 = 
	`vxCª©eImageFromROI
(
mf_bufs
[2], &
mf_4x4_roi
);

387 
	`NVXIO_CHECK_REFERENCE
(
¥ev_lvl_mf
);

389 
mu…_mf_nodes_
[
Àvñ
] = 
	`nvxMu…ùlyBySˇœrNode
(
gøph_
, 
mf_∑πôi⁄_0
, 
¥ev_lvl_mf
, 2.0f);

390 
	`NVXIO_CHECK_REFERENCE
(
mu…_mf_nodes_
[
Àvñ
]);

392 
	`vxRñó£Image
(&
mf_∑πôi⁄_0
);

393 
	`vxRñó£Image
(&
mf_∑πôi⁄_1
);

399 
vx_ª˘™gÀ_t
 
mf_2x2_roi
 = {

401 
	`vx_uöt32
(
cur_lvl_width
 / 2),

402 
	`vx_uöt32
(
cur_Àvñ_height
 / 2)

405 
¥ev_lvl_mf
 = 
	`vxCª©eImageFromROI
(
mf_bufs
[3], &
mf_2x2_roi
);

406 
	`NVXIO_CHECK_REFERENCE
(
¥ev_lvl_mf
);

408 
∑πôi⁄_mf_nodes_
[
Àvñ
] = 
	`nvxP¨tôi⁄MŸi⁄FõldNode
(
gøph_
,

409 
¥ev_‰ame
, 
cuº_‰ame
,

410 
mf_∑πôi⁄_0
, 
mf_∑πôi⁄_1
,

411 
¥ev_lvl_mf
, 
nuŒ±r
,

412 
∑øms_
.
smoŸh√ssFa˘‹
,

413 
∑øms_
.
mvDivFa˘‹
);

415 
	`NVXIO_CHECK_REFERENCE
(
∑πôi⁄_mf_nodes_
[
Àvñ
]);

417 
	`vxRñó£Image
(&
mf_∑πôi⁄_0
);

418 
	`vxRñó£Image
(&
mf_∑πôi⁄_1
);

421 
	`vxRñó£Image
(&
¥ev_‰ame
);

422 
	`vxRñó£Image
(&
cuº_‰ame
);

425 
	`vxRñó£Image
(&
ßd_èbÀ_buf
);

427 
	`vxRñó£Image
(&
mf_bufs
[0]);

428 
	`vxRñó£Image
(&
mf_bufs
[1]);

429 
	`vxRñó£Image
(&
mf_bufs
[2]);

430 
	`vxRñó£Image
(&
mf_bufs
[3]);

434 
mu…_mf_nodes_
[0] = 
	`nvxMu…ùlyBySˇœrNode
(
gøph_
, 
¥ev_lvl_mf
, 
mfOutROI_
, 0.25f);

435 
	`NVXIO_CHECK_REFERENCE
(
mu…_mf_nodes_
[0]);

437 
	`vxRñó£Image
(&
¥ev_lvl_mf
);

440 c⁄° * 
›ti⁄
 = "-O3";

441 
	`NVXIO_SAFE_CALL
–
	`vxSëGøphAâribuã
(
gøph_
, 
NVX_GRAPH_VERIFY_OPTIONS
, 
›ti⁄
, 
	`°æí
(option)) );

445 
	`NVXIO_SAFE_CALL
–
	`vxRegi°îAutoAgög
(
gøph_
, 
pyr_dñay_
) );

447 
	`NVXIO_SAFE_CALL
–
	`vxVîifyGøph
(
gøph_
) );

448 
	}
}

450 
	gIãøtiveMŸi⁄E°im©‹
::
	$¥o˚ssInôülFøme
()

452 
vx_pyømid
 
¥ev_pyr
 = (vx_pyømid)
	`vxGëRe„ªn˚FromDñay
(
pyr_dñay_
, -1);

454 
vx_image
 
‰ame_gøy
 = 
	`vxCª©eImage
(
c⁄ãxt_
, 
widthROI_
, 
heightROI_
, 
VX_DF_IMAGE_U8
);

455 
	`NVXIO_CHECK_REFERENCE
(
‰ame_gøy
);

457 
	`NVXIO_SAFE_CALL
–
	`vxuCﬁ‹C⁄vît
(
c⁄ãxt_
, 
¥evFømeROI_
, 
‰ame_gøy
) );

458 
	`NVXIO_SAFE_CALL
–
	`vxuGaussünPyømid
(
c⁄ãxt_
, 
‰ame_gøy
, 
¥ev_pyr
) );

460 
	`vxRñó£Image
(&
‰ame_gøy
);

461 
	}
}

463 
	gIãøtiveMŸi⁄E°im©‹
::
	$¥o˚ss
()

466 
	`NVXIO_SAFE_CALL
–
	`vxPro˚ssGøph
(
gøph_
) );

467 
	}
}

469 
vx_image
 
	gIãøtiveMŸi⁄E°im©‹
::
	$gëMŸi⁄Fõld
() const

471  
mfOut_
;

472 
	}
}

474 
	gIãøtiveMŸi⁄E°im©‹
::
	$¥ötPîfs
() const

476 
vx_≥rf_t
 
≥rf
;

478 
	`NVXIO_SAFE_CALL
–
	`vxQuîyGøph
(
gøph_
, 
VX_GRAPH_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

479 
°d
::
cout
 << "Gøph Timê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

481 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
cvt_cﬁ‹_node_
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

482 
°d
::
cout
 << "\àCﬁ‹ C⁄vîàTimê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

484 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
pyømid_node_
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

485 
°d
::
cout
 << "\àPyømid Timê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

487 
vx_uöt64
 
¸óã_mf_tŸÆ
 = 0;

488 
vx_uöt64
 
ªföe_mf_tŸÆ
 = 0;

489 
vx_uöt64
 
∑πôi⁄_mf_tŸÆ
 = 0;

490 
vx_uöt64
 
sˇÀ_mf_tŸÆ
 = 0;

492 
vx_öt32
 
i
 = 0; i < 
NUM_LEVELS
; ++i)

494 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
¸óã_mf_nodes_
[
i
], 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

495 
¸óã_mf_tŸÆ
 +
≥rf
.
tmp
;

497 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
ªföe_mf_nodes_
[
i
], 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

498 
ªföe_mf_tŸÆ
 +
≥rf
.
tmp
;

500 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
∑πôi⁄_mf_nodes_
[
i
], 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

501 
∑πôi⁄_mf_tŸÆ
 +
≥rf
.
tmp
;

503 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
mu…_mf_nodes_
[
i
], 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

504 
sˇÀ_mf_tŸÆ
 +
≥rf
.
tmp
;

507 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
∑πôi⁄_mf_nodes_
[
NUM_LEVELS
], 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

508 
∑πôi⁄_mf_tŸÆ
 +
≥rf
.
tmp
;

510 
°d
::
cout
 << "\àCª©êMŸi⁄ Fõld (x " << 
NUM_LEVELS
 << "ËTimê: " << 
¸óã_mf_tŸÆ
 / 1000000.0 << " ms" << std::
ídl
;

511 
°d
::
cout
 << "\àReföêMŸi⁄ Fõld (x " << 
NUM_LEVELS
 << "ËTimê: " << 
ªföe_mf_tŸÆ
 / 1000000.0 << " ms" << std::
ídl
;

512 
°d
::
cout
 << "\àP¨tôi⁄ MŸi⁄ Fõld (x " << 
NUM_LEVELS
 + 1 << "ËTimê: " << 
∑πôi⁄_mf_tŸÆ
 / 1000000.0 << " ms" << std::
ídl
;

513 
°d
::
cout
 << "\àSˇÀ MŸi⁄ Fõld (x " << 
NUM_LEVELS
 << "ËTimê: " << 
sˇÀ_mf_tŸÆ
 / 1000000.0 << " ms" << std::
ídl
;

514 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/motion_estimation/iterative_motion_estimator.hpp

29 #i‚de‡
ITERATIVE_MOTION_ESTIMATOR_HPP


30 
	#ITERATIVE_MOTION_ESTIMATOR_HPP


	)

32 
	~<ve˘‹
>

33 
	~<VX/vx.h
>

35 ˛as†
	cIãøtiveMŸi⁄E°im©‹


37 
	mpublic
:

38 
	sP¨ams


40 
vx_Êﬂt32
 
büsWeight
;

41 
vx_öt32
 
	mmvDivFa˘‹
;

42 
vx_Êﬂt32
 
	msmoŸh√ssFa˘‹
;

45 
vx_íum
 
	mèrgëDevi˚
;

47 
P¨ams
();

50 
ex∂icô
 
IãøtiveMŸi⁄E°im©‹
(
vx_c⁄ãxt
 
c⁄ãxt
);

51 ~
IãøtiveMŸi⁄E°im©‹
();

53 
öô
(
vx_image
 
¥evFømeRGBX
, vx_imagê
cuºFømeRGBX
, c⁄° 
P¨ams
& 
∑øms
 = Params());

54 
ªÀa£
();

56 
¥o˚ss
();

58 
vx_image
 
	$gëMŸi⁄Fõld
() const;

60 
	$¥ötPîfs
() const;

62 
¥iv©e
:

63 
	`¸óãD©aObje˘s
(
vx_image
 
¥evFømeRGBX
, vx_imagê
cuºFømeRGBX
);

64 
	`¥o˚ssInôülFøme
();

65 
	`¸óãMaöGøph
();

67 
¥iv©e
:

68 
vx_c⁄ãxt
 
c⁄ãxt_
;

70 
P¨ams
 
∑øms_
;

73 
vx_df_image
 
f‹m©_
;

74 
vx_uöt32
 
width_
;

75 
vx_uöt32
 
height_
;

78 
vx_image
 
mfOut_
;

81 
vx_uöt32
 
widthROI_
;

82 
vx_uöt32
 
heightROI_
;

83 
vx_image
 
¥evFømeROI_
;

84 
vx_image
 
cuºFømeROI_
;

85 
vx_image
 
mfOutROI_
;

88 
vx_dñay
 
pyr_dñay_
;

91 
vx_gøph
 
gøph_
;

94 
vx_node
 
cvt_cﬁ‹_node_
;

95 
vx_node
 
pyømid_node_
;

96 
°d
::
ve˘‹
<
vx_node
> 
¸óã_mf_nodes_
;

97 
°d
::
ve˘‹
<
vx_node
> 
ªföe_mf_nodes_
;

98 
°d
::
ve˘‹
<
vx_node
> 
∑πôi⁄_mf_nodes_
;

99 
°d
::
ve˘‹
<
vx_node
> 
mu…_mf_nodes_
;

100 
	}
};

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/motion_estimation/main_motion_estimation.cpp

29 
	~<io°ªam
>

30 
	~<s°ªam
>

31 
	~<iom™ù
>

32 
	~<°rög
>

33 
	~<mem‹y
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/sysˇŒ.h
>

36 
	~<uni°d.h
>

38 
	~<NVX/nvx.h
>

39 
	~<NVX/nvx_timî.hµ
>

41 
	~"NVX/Aµliˇti⁄.hµ
"

42 
	~"NVX/C⁄figP¨£r.hµ
"

43 
	~"OVX/FømeSour˚OVX.hµ
"

44 
	~"OVX/RídîOVX.hµ
"

45 
	~"NVX/SyncTimî.hµ
"

46 
	~"OVX/UtûôyOVX.hµ
"

48 
	~"ôî©ive_mŸi⁄_e°im©‹.hµ
"

51 
	~<libøry_öãrÁ˚.h
>

54 
	sEvítD©a


56 
EvítD©a
(Ë: 
°›
(
Ál£
), 
∑u£
(false) {}

58 
boﬁ
 
	m°›
;

59 
boﬁ
 
	m∑u£
;

64 
	mIãøtiveMŸi⁄E°im©‹
::
P¨ams
 
me_∑øms
;

65 
	movxio
::
C⁄ãxtGu¨d
 *
c⁄ãxt
;

66 
	m°d
::
unique_±r
<
ovxio
::
FømeSour˚
> 
‰ameSour˚
;

67 
IãøtiveMŸi⁄E°im©‹
 *
	mime
;

68 
EvítD©a
 
	mevítD©a
;

69 
	m°d
::
unique_±r
<
ovxio
::
Rídî
> 
ªndîî
;

70 
vx_dñay
 
	m‰ame_dñay
;

71 
vx_image
 
	m¥evFøme
;

72 
vx_image
 
	mcuºFøme
;

73 } 
	tBíchm¨kSèã
;

75 
	$keybﬂrdEvítCÆlback
(* 
evítD©a
, 
vx_ch¨
 
key
, 
vx_uöt32
, vx_uint32)

77 
EvítD©a
* 
d©a
 = 
°©ic_ˇ°
<EvítD©a*>(
evítD©a
);

79 i‡(
key
 == 27)

81 
d©a
->
°›
 = 
åue
;

83 i‡(
key
 == ' ')

85 
d©a
->
∑u£
 = !data->pause;

87 
	}
}

90 
boﬁ
 
	$ªad
(c⁄° 
°d
::
°rög
& 
c⁄figFûe
,

91 
IãøtiveMŸi⁄E°im©‹
::
P¨ams
& 
∑øms
,

92 
°d
::
°rög
& 
mesßge
)

94 
°d
::
unique_±r
<
nvxio
::
C⁄figP¨£r
> 
	`∑r£r
“vxio::
	`¸óãC⁄figP¨£r
());

96 
∑r£r
->
	`addP¨amëî
("biasWeight",

97 
nvxio
::
O±i⁄H™dÀr
::
	`ªÆ
(&
∑øms
.
büsWeight
,

98 
nvxio
::
ønges
::
	`©Ló°
(0.0f)));

99 
∑r£r
->
	`addP¨amëî
("mvDivFactor",

100 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
(&
∑øms
.
mvDivFa˘‹
,

101 
nvxio
::
ønges
::
	`©Ló°
(0)

103 
nvxio
::
ønges
::
	`©Mo°
(16)));

104 
∑r£r
->
	`addP¨amëî
("smoothnessFactor",

105 
nvxio
::
O±i⁄H™dÀr
::
	`ªÆ
(&
∑øms
.
smoŸh√ssFa˘‹
,

106 
nvxio
::
ønges
::
	`©Ló°
(0.0f)));

108 
mesßge
 = 
∑r£r
->
	`∑r£
(
c⁄figFûe
);

110  
mesßge
.
	`em±y
();

111 
	}
}

113 
	$CÀ™up
(*
d©a
) {

115 
Bíchm¨kSèã
 *
°©e
 = (Bíchm¨kSèã *)
d©a
;

116 i‡(
°©e
->
‰ame_dñay
Ë
	`vxRñó£Dñay
(&state->frame_delay);

117 i‡(
°©e
->
ªndîî
Ë
dñëe
 sèã->ªndîî.
	`gë
();

118 i‡(
°©e
->
‰ameSour˚
Ë
dñëe
 sèã->‰ameSour˚.
	`gë
();

119 i‡(
°©e
->
ime
Ë
dñëe
 state->ime;

120 i‡(
°©e
->
c⁄ãxt
Ë
dñëe
 state->context;

121 
	`mem£t
(
°©e
, 0, (*state));

122 
	`‰ì
(
°©e
);

123 
	}
}

126 * 
	$Inôülize
(
Inôüliz©i⁄P¨amëîs
 *
∑øms
) {

127 
Bíchm¨kSèã
 *
°©e
 = 
NULL
;

128 
°©e
 = (
Bíchm¨kSèã
 *Ë
	`mÆloc
((*state));

129 i‡(!
°©e
Ë 
NULL
;

130 
	`mem£t
(
°©e
, 0, (*state));

132 
nvxio
::
Aµliˇti⁄
 &
≠p
 =Çvxio::Aµliˇti⁄::
	`gë
();

135 
°d
::
°rög
 
sour˚Uri
 = 
≠p
.
	`födSam∂eFûeP©h
("pedestrians.mp4");

136 
°d
::
°rög
 
c⁄figFûe
 = 
≠p
.
	`födSam∂eFûeP©h
("motion_estimation_demo_config.ini");

138 
≠p
.
	`öô
(1, 
NULL
);

141 
°©e
->
me_∑øms
 = 
IãøtiveMŸi⁄E°im©‹
::
	`P¨ams
();

142 
°d
::
°rög
 
îr‹
;

143 i‡(!
	`ªad
(
c⁄figFûe
, 
°©e
->
me_∑øms
, 
îr‹
))

145 
°d
::
cout
 << 
îr‹
;

146  
NULL
;

150 
°©e
->
c⁄ãxt
 = 
√w
 
ovxio
::
C⁄ãxtGu¨d
;

151 
	`vxDúe˘ive
(*(
°©e
->
c⁄ãxt
), 
VX_DIRECTIVE_ENABLE_PERFORMANCE
);

154 
	`vxRegi°îLogCÆlback
(*(
°©e
->
c⁄ãxt
), &
ovxio
::
°doutLogCÆlback
, 
vx_Ál£_e
);

157 
°©e
->
‰ameSour˚
 = 
ovxio
::
	`¸óãDeÁu…FømeSour˚
(*(°©e->
c⁄ãxt
), 
sour˚Uri
);

159 i‡(!
°©e
->
‰ameSour˚
 || !°©e->‰ameSour˚->
	`›í
())

161 
°d
::
˚º
 << "Eº‹: c™nŸ o≥¿‰amêsour˚!" << std::
ídl
;

162  
NULL
;

165 i‡(
°©e
->
‰ameSour˚
->
	`gëSour˚Ty≥
(Ë=
ovxio
::
FømeSour˚
::
SINGLE_IMAGE_SOURCE
)

167 
°d
::
˚º
 << "C™'àw‹k o¿®sögÀ image." << std::
ídl
;

168  
NULL
;

171 
ovxio
::
FømeSour˚
::
P¨amëîs
 
‰ameC⁄fig
 = 
°©e
->
‰ameSour˚
->
	`gëC⁄figuøti⁄
();

174 
°©e
->
ªndîî
 = 
ovxio
::
	`¸óãDeÁu…Rídî
(*(°©e->
c⁄ãxt
), "Motion Estimation Demo",

175 
‰ameC⁄fig
.
‰ameWidth
, fømeC⁄fig.
‰ameHeight
);

177 i‡(!
°©e
->
ªndîî
)

179 
°d
::
˚º
 << "Eº‹: C™nŸ cª©ê°©e->ªndîî!" << std::
ídl
;

180  
NULL
;

183 
°©e
->
ªndîî
->
	`£tOnKeybﬂrdEvítCÆlback
(
keybﬂrdEvítCÆlback
, &°©e->
evítD©a
);

187 
vx_image
 
‰ameExem∂¨
 = 
	`vxCª©eImage
(*(
°©e
->
c⁄ãxt
),

188 
‰ameC⁄fig
.
‰ameWidth
, fømeC⁄fig.
‰ameHeight
, 
VX_DF_IMAGE_RGBX
);

189 
	`NVXIO_CHECK_REFERENCE
(
‰ameExem∂¨
);

190 
°©e
->
‰ame_dñay
 = 
	`vxCª©eDñay
(*(°©e->
c⁄ãxt
), (
vx_ª„ªn˚
)
‰ameExem∂¨
, 2);

191 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
‰ame_dñay
);

192 
	`vxRñó£Image
(&
‰ameExem∂¨
);

194 
°©e
->
¥evFøme
 = (
vx_image
)
	`vxGëRe„ªn˚FromDñay
(°©e->
‰ame_dñay
, -1);

195 
°©e
->
cuºFøme
 = (
vx_image
)
	`vxGëRe„ªn˚FromDñay
(°©e->
‰ame_dñay
, 0);

198 
°©e
->
ime
 = 
√w
 
	`IãøtiveMŸi⁄E°im©‹
(*(°©e->
c⁄ãxt
));

200 
ovxio
::
FømeSour˚
::
FømeSètus
 
‰ameSètus
;

203 
‰ameSètus
 = 
°©e
->
‰ameSour˚
->
	`„tch
(°©e->
¥evFøme
);

204 } 
‰ameSètus
 =
ovxio
::
FømeSour˚
::
TIMEOUT
);

205 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
CLOSED
)

207 
°d
::
˚º
 << "Sour˚ ha†nÿ‰ames" << std::
ídl
;

208  
NULL
;

211 
°©e
->
ime
->
	`öô
(°©e->
¥evFøme
, sèã->
cuºFøme
, sèã->
me_∑øms
);

213  
°©e
;

214 
	}
}

216 
	$C›yIn
(*
d©a
) {

218 
	}
}

222 
	$Execuã
(*
d©a
)

224 
åy


226 
Bíchm¨kSèã
 *
°©e
 = (Bíchm¨kSèã *)
d©a
;

227 
ovxio
::
FømeSour˚
::
FømeSètus
 
‰ameSètus
;

228 
lo›
:

229 i‡(!
°©e
->
evítD©a
.
∑u£
)

233 
‰ameSètus
 = 
°©e
->
‰ameSour˚
->
	`„tch
(°©e->
cuºFøme
);

235 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
TIMEOUT
)

237 
°d
::
˚º
 << "Eº‹: fømêsour˚ fótch TIMEOUT" << std::
ídl
;

241 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
CLOSED
)

243 i‡(!
°©e
->
‰ameSour˚
->
	`›í
())

245 
°d
::
˚º
 << "FaûedÅÿª›íÅhêsour˚" << std::
ídl
;

251 
‰ameSètus
 = 
°©e
->
‰ameSour˚
->
	`„tch
(°©e->
¥evFøme
);

252 } 
‰ameSètus
 =
ovxio
::
FømeSour˚
::
TIMEOUT
);

254 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
CLOSED
)

256 
°d
::
˚º
 << "Sour˚ ha†nÿ‰ames" << std::
ídl
;

260 
°©e
->
ime
->
	`öô
(°©e->
¥evFøme
, sèã->
cuºFøme
, sèã->
me_∑øms
);

261 
lo›
;

265 
°©e
->
ime
->
	`¥o˚ss
();

269 
°©e
->
ªndîî
->
	`putImage
(°©e->
¥evFøme
);

271 
ovxio
::
Rídî
::
MŸi⁄FõldStyÀ
 
mfStyÀ
 = {

275 
°©e
->
ªndîî
->
	`putMŸi⁄Fõld
(°©e->
ime
->
	`gëMŸi⁄Fõld
(), 
mfStyÀ
);

277 i‡(!
°©e
->
ªndîî
->
	`Êush
())

279 
°©e
->
evítD©a
.
°›
 = 
åue
;

282 i‡(!
°©e
->
evítD©a
.
∑u£
)

284 
	`vxAgeDñay
(
°©e
->
‰ame_dñay
);

288 
	`ˇtch
 (c⁄° 
°d
::
ex˚±i⁄
& 
e
)

290 
°d
::
˚º
 << "Eº‹: " << 
e
.
	`wh©
(Ë<< std::
ídl
;

295 
	}
}

297 
	$C›yOut
(*
d©a
, 
TimögInf‹m©i⁄
 *
times
) {

298 
times
->
kî√l_öfo
 = 
NULL
;

300 
	}
}

302 c⁄° * 
	$GëName
() {

304 
	}
}

308 
	$Regi°îFun˘i⁄s
(
Bíchm¨kLibøryFun˘i⁄s
 *
fun˘i⁄s
) {

309 
fun˘i⁄s
->
öôülize
 = 
Inôülize
;

310 
fun˘i⁄s
->
c›y_ö
 = 
C›yIn
;

311 
fun˘i⁄s
->
execuã
 = 
Execuã
;

312 
fun˘i⁄s
->
c›y_out
 = 
C›yOut
;

313 
fun˘i⁄s
->
˛ónup
 = 
CÀ™up
;

314 
fun˘i⁄s
->
gë_«me
 = 
GëName
;

316 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/stereo_matching/color_disparity_graph.cpp

29 
	~<Æg‹ôhm
>

31 
	~<OVX/UtûôyOVX.hµ
>

33 
	~"cﬁ‹_di•¨ôy_gøph.hµ
"

35 
	gCﬁ‹Di•¨ôyGøph
::
	$Cﬁ‹Di•¨ôyGøph
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
di•¨ôy
, vx_imagê
ouçut
, 
vx_öt32
 
ndi•
) :

36 
	$gøph_
(
nuŒ±r
)

38 
	`NVXIO_ASSERT
(
ndi•
 <= 256);

40 
vx_lut
 
r_lut
 = 
	`vxCª©eLUT
(
c⁄ãxt
, 
VX_TYPE_UINT8
, 256);

41 
vx_lut
 
g_lut
 = 
	`vxCª©eLUT
(
c⁄ãxt
, 
VX_TYPE_UINT8
, 256);

42 
vx_lut
 
b_lut
 = 
	`vxCª©eLUT
(
c⁄ãxt
, 
VX_TYPE_UINT8
, 256);

43 
	`fûlLUT
(
r_lut
, 
g_lut
, 
b_lut
, 
ndi•
);

45 
gøph_
 = 
	`vxCª©eGøph
(
c⁄ãxt
);

47 
vx_image
 
r_img
 = 
	`vxCª©eVútuÆImage
(
gøph_
, 0, 0, 
VX_DF_IMAGE_U8
);

48 
vx_image
 
g_img
 = 
	`vxCª©eVútuÆImage
(
gøph_
, 0, 0, 
VX_DF_IMAGE_U8
);

49 
vx_image
 
b_img
 = 
	`vxCª©eVútuÆImage
(
gøph_
, 0, 0, 
VX_DF_IMAGE_U8
);

51 
lut_node_
[0] = 
	`vxTabÀLookupNode
(
gøph_
, 
di•¨ôy
, 
r_lut
, 
r_img
);

52 
lut_node_
[1] = 
	`vxTabÀLookupNode
(
gøph_
, 
di•¨ôy
, 
g_lut
, 
g_img
);

53 
lut_node_
[2] = 
	`vxTabÀLookupNode
(
gøph_
, 
di•¨ôy
, 
b_lut
, 
b_img
);

55 
comböe_node_
 = 
	`vxCh™√lComböeNode
(
gøph_
, 
r_img
, 
g_img
, 
b_img
, 
nuŒ±r
, 
ouçut
);

57 
	`NVXIO_SAFE_CALL
–
	`vxVîifyGøph
(
gøph_
) );

59 
	`vxRñó£Image
(&
r_img
);

60 
	`vxRñó£Image
(&
g_img
);

61 
	`vxRñó£Image
(&
b_img
);

63 
	`vxRñó£LUT
(&
r_lut
);

64 
	`vxRñó£LUT
(&
g_lut
);

65 
	`vxRñó£LUT
(&
b_lut
);

66 
	}
}

68 
	gCﬁ‹Di•¨ôyGøph
::
	$fûlLUT
(
vx_lut
 
r_lut
, vx_luà
g_lut
, vx_luà
b_lut
, 
vx_öt32
 
ndi•
)

70 
vx_m≠_id
 
r_lut_m≠_id
;

71 
vx_m≠_id
 
g_lut_m≠_id
;

72 
vx_m≠_id
 
b_lut_m≠_id
;

73 
vx_uöt8
* 
r_lut_±r
;

74 
vx_uöt8
* 
g_lut_±r
;

75 
vx_uöt8
* 
b_lut_±r
;

76 
	`NVXIO_SAFE_CALL
–
	`vxM≠LUT
(
r_lut
, &
r_lut_m≠_id
, (**)&
r_lut_±r
, 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
, 0) );

77 
	`NVXIO_SAFE_CALL
–
	`vxM≠LUT
(
g_lut
, &
g_lut_m≠_id
, (**)&
g_lut_±r
, 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
, 0) );

78 
	`NVXIO_SAFE_CALL
–
	`vxM≠LUT
(
b_lut
, &
b_lut_m≠_id
, (**)&
b_lut_±r
, 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
, 0) );

80 
vx_öt32
 
d
 = 0; d < 256; ++d)

82 
vx_öt32
 
H
 = ((
ndi•
 - 
d
) * 240) /Çdisp;

83 
vx_Êﬂt32
 
S
 = 1.0f;

84 
vx_Êﬂt32
 
V
 = 1.0f;

86 
vx_öt32
 
hi
 = (
H
 / 60) % 6;

87 
vx_Êﬂt32
 
f
 = 
H
 / 60.0f - H / 60;

88 
vx_Êﬂt32
 
p
 = 
V
 * (1.0‡- 
S
);

89 
vx_Êﬂt32
 
q
 = 
V
 * (1.0‡- 
f
 * 
S
);

90 
vx_Êﬂt32
 
t
 = 
V
 * (1.0‡- (1 - 
f
Ë* 
S
);

92 
vx_Êﬂt32
 
rvÆ
 = 0.0f, 
gvÆ
 = 0.0f, 
bvÆ
 = 0.0f;

94 i‡(
hi
 == 0)

96 
bvÆ
 = 
p
;

97 
gvÆ
 = 
t
;

98 
rvÆ
 = 
V
;

100 i‡(
hi
 == 1)

102 
bvÆ
 = 
p
;

103 
gvÆ
 = 
V
;

104 
rvÆ
 = 
q
;

106 i‡(
hi
 == 2)

108 
bvÆ
 = 
t
;

109 
gvÆ
 = 
V
;

110 
rvÆ
 = 
p
;

112 i‡(
hi
 == 3)

114 
bvÆ
 = 
V
;

115 
gvÆ
 = 
q
;

116 
rvÆ
 = 
p
;

118 i‡(
hi
 == 4)

120 
bvÆ
 = 
V
;

121 
gvÆ
 = 
p
;

122 
rvÆ
 = 
t
;

124 i‡(
hi
 == 5)

126 
bvÆ
 = 
q
;

127 
gvÆ
 = 
p
;

128 
rvÆ
 = 
V
;

131 
r_lut_±r
[
d
] = 
°d
::
	`max
(0.f, std::
	`mö
(
rvÆ
, 1.f)) * 255.f;

132 
g_lut_±r
[
d
] = 
°d
::
	`max
(0.f, std::
	`mö
(
gvÆ
, 1.f)) * 255.f;

133 
b_lut_±r
[
d
] = 
°d
::
	`max
(0.f, std::
	`mö
(
bvÆ
, 1.f)) * 255.f;

136 
	`vxUnm≠LUT
(
r_lut
, 
r_lut_m≠_id
);

137 
	`vxUnm≠LUT
(
g_lut
, 
g_lut_m≠_id
);

138 
	`vxUnm≠LUT
(
b_lut
, 
b_lut_m≠_id
);

139 
	}
}

141 
	gCﬁ‹Di•¨ôyGøph
::~
	$Cﬁ‹Di•¨ôyGøph
()

143 
	`vxRñó£Gøph
(&
gøph_
);

144 
	}
}

146 
	gCﬁ‹Di•¨ôyGøph
::
	$¥o˚ss
()

148 
	`NVXIO_SAFE_CALL
–
	`vxPro˚ssGøph
(
gøph_
) );

149 
	}
}

151 
	gCﬁ‹Di•¨ôyGøph
::
	$¥ötPîfs
()

153 
ovxio
::
	`¥ötPîf
(
gøph_
, "Color Disparity");

154 
ovxio
::
	`¥ötPîf
(
lut_node_
[0], "Red Channel Table Lookup");

155 
ovxio
::
	`¥ötPîf
(
lut_node_
[1], "Green Channel Table Lookup");

156 
ovxio
::
	`¥ötPîf
(
lut_node_
[2], "Blue Channel Table Lookup");

157 
ovxio
::
	`¥ötPîf
(
comböe_node_
, "Channel Combine");

158 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/stereo_matching/color_disparity_graph.hpp

29 #i‚de‡
COLOR_DISPARITY_GRAPH_HPP


30 
	#COLOR_DISPARITY_GRAPH_HPP


	)

32 
	~<VX/vx.h
>

34 ˛as†
	cCﬁ‹Di•¨ôyGøph


36 
	mpublic
:

37 
Cﬁ‹Di•¨ôyGøph
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
di•¨ôy
, vx_imagê
ouçut
, 
vx_öt32
 
ndi•
);

38 ~
Cﬁ‹Di•¨ôyGøph
();

40 
¥o˚ss
();

41 
¥ötPîfs
();

43 
	m¥iv©e
:

44 
fûlLUT
(
vx_lut
 
r_lut
, vx_luà
g_lut
, vx_luà
b_lut
, 
vx_öt32
 
ndi•
);

46 
vx_gøph
 
	mgøph_
;

47 
vx_node
 
	mlut_node_
[3];

48 
vx_node
 
	mcomböe_node_
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/stereo_matching/main_stereo_matching.cpp

29 
	~<io°ªam
>

30 
	~<s°ªam
>

31 
	~<iom™ù
>

32 
	~<°rög
>

33 
	~<mem‹y
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/sysˇŒ.h
>

36 
	~<uni°d.h
>

38 
	~<NVX/nvx.h
>

39 
	~<NVX/nvx_timî.hµ
>

41 
	~<NVX/Aµliˇti⁄.hµ
>

42 
	~<NVX/C⁄figP¨£r.hµ
>

43 
	~<OVX/FømeSour˚OVX.hµ
>

44 
	~<OVX/RídîOVX.hµ
>

45 
	~<NVX/SyncTimî.hµ
>

46 
	~<OVX/UtûôyOVX.hµ
>

48 
	~"°îeo_m©chög.hµ
"

49 
	~"cﬁ‹_di•¨ôy_gøph.hµ
"

52 
	~<libøry_öãrÁ˚.h
>

55 
	$di•œySèã
(
ovxio
::
Rídî
 *
ªndîî
,

56 c⁄° 
ovxio
::
FømeSour˚
::
P¨amëîs
 &
sour˚P¨ams
,

57 
¥oc_ms
, 
tŸÆ_ms
)

59 
°d
::
o°rög°ªam
 
txt
;

61 
txt
 << 
°d
::
fixed
 << std::
	`£çªcisi⁄
(1);

63 
ovxio
::
Rídî
::
TextBoxStyÀ
 
°yÀ
 = {{255, 255, 255, 255}, {0, 0, 0, 127}, {10, 10}};

65 
txt
 << "Sour˚ size: " << 
sour˚P¨ams
.
‰ameWidth
 << 'x' << sour˚P¨ams.
‰ameHeight
 / 2 << 
°d
::
ídl
;

66 
txt
 << "Alg‹ôhm: " << 
¥oc_ms
 << " m†/ " << 1000.0 /Öroc_m†<< " FPS" << 
°d
::
ídl
;

67 
txt
 << "Di•œy: " << 
tŸÆ_ms
 << " m†/ " << 1000.0 /ÅŸÆ_m†<< " FPS" << 
°d
::
ídl
;

69 
txt
 << 
°d
::
	`£çªcisi⁄
(6);

70 
txt
.
	`un£tf
(
°d
::
ios_ba£
::
Êﬂtfõld
);

71 
txt
 << "LIMITED TO " << 
nvxio
::
Aµliˇti⁄
::
	`gë
().
	`gëFPSLimô
(Ë<< " FPS FOR DISPLAY" << 
°d
::
ídl
;

72 
txt
 << "S - swôch Fømê/ Di•¨ôy / Cﬁ‹ ouçut" << 
°d
::
ídl
;

73 
txt
 << "S∑˚ -Öau£/ªsume" << 
°d
::
ídl
;

74 
txt
 << "Es¯- clo£Åhêdemo" << 
°d
::
ídl
;

75 
ªndîî
->
	`putTextVõwp‹t
(
txt
.
	`°r
(), 
°yÀ
);

76 
	}
}

78 
boﬁ
 
	$ªad
(c⁄° 
°d
::
°rög
 &
nf
, 
SãªoM©chög
::
SãªoM©chögP¨ams


79 &
c⁄fig
, 
°d
::
°rög
 &
mesßge
) {

80 
°d
::
unique_±r
<
nvxio
::
C⁄figP¨£r
> 
	`∑r£r
“vxio::
	`¸óãC⁄figP¨£r
());

81 
∑r£r
->
	`addP¨amëî
("mö_di•¨ôy", 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
(

82 &
c⁄fig
.
mö_di•¨ôy
,

83 
nvxio
::
ønges
::
	`©Ló°
(0)

85 
nvxio
::
ønges
::
	`©Mo°
(256)));

86 
∑r£r
->
	`addP¨amëî
("max_di•¨ôy", 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
(

87 &
c⁄fig
.
max_di•¨ôy
,

88 
nvxio
::
ønges
::
	`©Ló°
(0)

90 
nvxio
::
ønges
::
	`©Mo°
(256)));

91 
∑r£r
->
	`addP¨amëî
("P1", 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
–&
c⁄fig
.
P1
,

92 
nvxio
::
ønges
::
	`©Ló°
(0)

94 
nvxio
::
ønges
::
	`©Mo°
(256)));

95 
∑r£r
->
	`addP¨amëî
("P2", 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
–&
c⁄fig
.
P2
,

96 
nvxio
::
ønges
::
	`©Ló°
(0)

98 
nvxio
::
ønges
::
	`©Mo°
(256)));

99 
∑r£r
->
	`addP¨amëî
("ßd", 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
–&
c⁄fig
.
ßd
,

100 
nvxio
::
ønges
::
	`©Ló°
(0)

102 
nvxio
::
ønges
::
	`©Mo°
(31)));

103 
∑r£r
->
	`addP¨amëî
("bt_˛ù_vÆue", 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
(

104 &
c⁄fig
.
bt_˛ù_vÆue
,

105 
nvxio
::
ønges
::
	`©Ló°
(15)

107 
nvxio
::
ønges
::
	`©Mo°
(95)));

108 
∑r£r
->
	`addP¨amëî
("max_diff", 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
(

109 &
c⁄fig
.
max_diff
));

110 
∑r£r
->
	`addP¨amëî
("uniquíess_øtio", 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
(

111 &
c⁄fig
.
uniquíess_øtio
,

112 
nvxio
::
ønges
::
	`©Ló°
(0)

114 
nvxio
::
ønges
::
	`©Mo°
(100)));

115 
∑r£r
->
	`addP¨amëî
("sˇ∆öes_mask", 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
(

116 &
c⁄fig
.
sˇ∆öes_mask
,

117 
nvxio
::
ønges
::
	`©Ló°
(0)

119 
nvxio
::
ønges
::
	`©Mo°
(256)));

120 
∑r£r
->
	`addP¨amëî
("Êags", 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
–&
c⁄fig
.
Êags
,

121 
nvxio
::
ønges
::
	`©Ló°
(0)

123 
nvxio
::
ønges
::
	`©Mo°
(3)));

124 
∑r£r
->
	`addP¨amëî
("˘_wö_size", 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
(

125 &
c⁄fig
.
˘_wö_size
,

126 
nvxio
::
ønges
::
	`©Ló°
(0)

128 
nvxio
::
ønges
::
	`©Mo°
(5)));

129 
∑r£r
->
	`addP¨amëî
("hc_wö_size", 
nvxio
::
O±i⁄H™dÀr
::
	`öãgî
(

130 &
c⁄fig
.
hc_wö_size
,

131 
nvxio
::
ønges
::
	`©Ló°
(0)

133 
nvxio
::
ønges
::
	`©Mo°
(5)));

135 
mesßge
 = 
∑r£r
->
	`∑r£
(
nf
);

137  
mesßge
.
	`em±y
();

138 
	}
}

141 
	eOUTPUT_IMAGE


143 
	mORIG_FRAME
,

144 
	mORIG_DISPARITY
,

145 
	mCOLOR_OUTPUT


148 
	sEvítD©a


150 
EvítD©a
(Ë: 
shouldSt›
(
Ál£
), 
ouçutImg
(
COLOR_OUTPUT
), 
∑u£
(false) {}

152 
boﬁ
 
	mshouldSt›
;

153 
OUTPUT_IMAGE
 
	mouçutImg
;

154 
boﬁ
 
	m∑u£
;

157 
	$evítCÆlback
(* 
evítD©a
, 
vx_ch¨
 
key
, 
vx_uöt32
, vx_uint32)

159 
EvítD©a
* 
d©a
 = 
°©ic_ˇ°
<EvítD©a*>(
evítD©a
);

161 i‡(
key
 == 27)

163 
d©a
->
shouldSt›
 = 
åue
;

165 i‡(
key
 == 's')

167 
d©a
->
ouçutImg
)

169 
ORIG_FRAME
:

170 
d©a
->
ouçutImg
 = 
ORIG_DISPARITY
;

173 
ORIG_DISPARITY
:

174 
d©a
->
ouçutImg
 = 
COLOR_OUTPUT
;

177 
COLOR_OUTPUT
:

178 
d©a
->
ouçutImg
 = 
ORIG_FRAME
;

182 i‡(
key
 == 32)

184 
d©a
->
∑u£
 = !data->pause;

186 
	}
}

190 
	movxio
::
C⁄ãxtGu¨d
 *
c⁄ãxt
;

191 
	m°d
::
unique_±r
<
ovxio
::
FømeSour˚
> 
sour˚
;

192 
	m°d
::
unique_±r
<
ovxio
::
Rídî
> 
ªndîî
;

193 
EvítD©a
 
	mevítD©a
;

194 
vx_image
 
	mt›_bŸtom
;

195 
vx_image
 
	mÀ·
;

196 
vx_image
 
	mright
;

197 
vx_image
 
	mdi•¨ôy
;

198 
vx_image
 
	mcﬁ‹_ouçut
;

199 
	m°d
::
unique_±r
<
SãªoM©chög
> 
°îeo
;

200 
Cﬁ‹Di•¨ôyGøph
 *
	mcﬁ‹_di•_gøph
;

201 } 
	tBíchm¨kSèã
;

203 
	$CÀ™up
(*
d©a
) {

205 
Bíchm¨kSèã
 *
°©e
 = (Bíchm¨kSèã *)
d©a
;

206 i‡(
°©e
->
ªndîî
Ë
dñëe
 sèã->ªndîî.
	`gë
();

207 i‡(
°©e
->
sour˚
Ë
dñëe
 sèã->sour˚.
	`gë
();

208 i‡(
°©e
->
t›_bŸtom
Ë
	`vxRñó£Image
(&state->top_bottom);

209 i‡(
°©e
->
À·
Ë
	`vxRñó£Image
(&state->left);

210 i‡(
°©e
->
right
Ë
	`vxRñó£Image
(&state->right);

211 i‡(
°©e
->
di•¨ôy
Ë
	`vxRñó£Image
(&state->disparity);

212 i‡(
°©e
->
cﬁ‹_ouçut
Ë
	`vxRñó£Image
(&state->color_output);

213 i‡(
°©e
->
°îeo
Ë
dñëe
 sèã->°îeo.
	`gë
();

214 i‡(
°©e
->
c⁄ãxt
Ë
dñëe
 state->context;

215 
	`mem£t
(
°©e
, 0, (*state));

216 
	`‰ì
(
°©e
);

217 
	}
}

220 * 
	$Inôülize
(
Inôüliz©i⁄P¨amëîs
 *
∑øms
) {

221 
Bíchm¨kSèã
 *
°©e
 = 
NULL
;

222 
°©e
 = (
Bíchm¨kSèã
 *Ë
	`mÆloc
((*state));

223 i‡(!
°©e
Ë 
NULL
;

224 
	`mem£t
(
°©e
, 0, (*state));

226 
nvxio
::
Aµliˇti⁄
 &
≠p
 =Çvxio::Aµliˇti⁄::
	`gë
();

229 
°d
::
°rög
 
sour˚Uri
 = 
≠p
.
	`födSam∂eFûeP©h
("left_right.mp4");

230 
°d
::
°rög
 
c⁄figFûe
 = 
≠p
.
	`födSam∂eFûeP©h
("stereo_matching_demo_config.ini");

232 
SãªoM©chög
::
SãªoM©chögP¨ams
 
sm_∑øms
;

233 
SãªoM©chög
::
Im∂emíèti⁄Ty≥
 
im∂emíèti⁄Ty≥
 = SãªoM©chög::
HIGH_LEVEL_API
;

235 
≠p
.
	`öô
(1, 
NULL
);

238 
°d
::
°rög
 
îr‹
;

239 i‡(!
	`ªad
(
c⁄figFûe
, 
sm_∑øms
, 
îr‹
))

241 
°d
::
˚º
 << 
îr‹
;

242  
NULL
;

246 
°©e
->
c⁄ãxt
 = 
√w
 
ovxio
::
C⁄ãxtGu¨d
;

247 
	`vxDúe˘ive
(*(
°©e
->
c⁄ãxt
), 
VX_DIRECTIVE_ENABLE_PERFORMANCE
);

251 
	`vxRegi°îLogCÆlback
(*(
°©e
->
c⁄ãxt
), &
ovxio
::
°doutLogCÆlback
, 
vx_Ál£_e
);

254 
°©e
->
sour˚
 = 
ovxio
::
	`¸óãDeÁu…FømeSour˚
(*(°©e->
c⁄ãxt
), 
sour˚Uri
);

256 i‡(!
°©e
->
sour˚
 || !°©e->sour˚->
	`›í
())

258 
°d
::
˚º
 << "Eº‹: C™'à›í sour˚ URI " << 
sour˚Uri
 << std::
ídl
;

259  
NULL
;

262 
ovxio
::
FømeSour˚
::
P¨amëîs
 
sour˚P¨ams
 = 
°©e
->
sour˚
->
	`gëC⁄figuøti⁄
();

264 i‡(
sour˚P¨ams
.
‰ameHeight
 % 2 != 0)

266 
°d
::
˚º
 << "\"" << 
sour˚Uri
.
	`c_°r
()

267 << "\" ha†odd heighà(" << 
sour˚P¨ams
.
‰ameHeight


268 << "). Thi†demÿªquúe†thêsour˚'†heighàtÿbêeví." << 
°d
::
ídl
;

269  
NULL
;

273 
°©e
->
ªndîî
 = 
ovxio
::
	`¸óãDeÁu…Rídî
(*(°©e->
c⁄ãxt
), "SãªÿM©chög Demo", 
sour˚P¨ams
.
‰ameWidth
, sour˚P¨ams.
‰ameHeight
 / 2);

275 i‡(!
°©e
->
ªndîî
)

277 
°d
::
˚º
 << "Eº‹: C™'à¸óãá sèã->ªndîî" << std::
ídl
;

278  
NULL
;

283 
°©e
->
evítD©a
 = 
	`EvítD©a
();

284 
°©e
->
ªndîî
->
	`£tOnKeybﬂrdEvítCÆlback
(
evítCÆlback
, &°©e->
evítD©a
);

291 
°©e
->
t›_bŸtom
 = 
vxCª©eImage


292 (*(
°©e
->
c⁄ãxt
), 
sour˚P¨ams
.
‰ameWidth
, sour˚P¨ams.
‰ameHeight
, 
VX_DF_IMAGE_RGBX
);

293 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
t›_bŸtom
);

295 
vx_ª˘™gÀ_t
 
À·_ª˘
 { 0, 0, 
sour˚P¨ams
.
‰ameWidth
, sour˚P¨ams.
‰ameHeight
 / 2 };

296 
°©e
->
À·
 = 
	`vxCª©eImageFromROI
(°©e->
t›_bŸtom
, &
À·_ª˘
);

297 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
À·
);

298 
vx_ª˘™gÀ_t
 
right_ª˘
 { 0, 
sour˚P¨ams
.
‰ameHeight
 / 2, sour˚P¨ams.
‰ameWidth
, sourceParams.frameHeight };

299 
°©e
->
right
 = 
	`vxCª©eImageFromROI
(°©e->
t›_bŸtom
, &
right_ª˘
);

300 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
right
);

304 
°©e
->
di•¨ôy
 = 
vxCª©eImage


305 (*(
°©e
->
c⁄ãxt
), 
sour˚P¨ams
.
‰ameWidth
, sour˚P¨ams.
‰ameHeight
 / 2, 
VX_DF_IMAGE_U8
);

306 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
di•¨ôy
);

313 
°©e
->
cﬁ‹_ouçut
 = 
vxCª©eImage


314 (*(
°©e
->
c⁄ãxt
), 
sour˚P¨ams
.
‰ameWidth
, sour˚P¨ams.
‰ameHeight
 / 2, 
VX_DF_IMAGE_RGB
);

323 
°©e
->
°îeo
 = 
°d
::
unique_±r
<
SãªoM©chög
>(SãªoM©chög::
	`¸óãSãªoM©chög
–*(°©e->
c⁄ãxt
), 
sm_∑øms
, 
im∂emíèti⁄Ty≥
, sèã->
À·
, sèã->
right
, sèã->
di•¨ôy
));

328 
°©e
->
cﬁ‹_di•_gøph
 = 
√w
 
	`Cﬁ‹Di•¨ôyGøph
(*(°©e->
c⁄ãxt
), sèã->
di•¨ôy
, sèã->
cﬁ‹_ouçut
, 
sm_∑øms
.
max_di•¨ôy
);

330  
°©e
;

331 
	}
}

333 
	$C›yIn
(*
d©a
) {

335 
	}
}

345 
	$Execuã
(*
d©a
)

347 
åy


349 
Bíchm¨kSèã
 *
°©e
 = (Bíchm¨kSèã *)
d©a
;

350 
boﬁ
 
cﬁ‹_di•_upd©e
 = 
åue
;

357 
lo›
:

358 i‡(!
°©e
->
evítD©a
.
∑u£
)

360 
ovxio
::
FømeSour˚
::
FømeSètus
 
‰ameSètus
;

364 
‰ameSètus
 = 
°©e
->
sour˚
->
	`„tch
(°©e->
t›_bŸtom
);

366 
‰ameSètus
 =
ovxio
::
FømeSour˚
::
TIMEOUT
);

368 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
CLOSED
)

370 i‡(!
°©e
->
sour˚
->
	`›í
())

372 
°d
::
˚º
 << "Eº‹: FaûedÅÿª›íÅhêsour˚" << std::
ídl
;

375 
lo›
;

379 
°©e
->
°îeo
->
	`run
();

382 
cﬁ‹_di•_upd©e
 = 
åue
;

385 
°©e
->
evítD©a
.
ouçutImg
)

387 
ORIG_FRAME
:

388 
°©e
->
ªndîî
->
	`putImage
(°©e->
À·
);

390 
ORIG_DISPARITY
:

391 
°©e
->
ªndîî
->
	`putImage
(°©e->
di•¨ôy
);

393 
COLOR_OUTPUT
:

394 i‡(
cﬁ‹_di•_upd©e
)

396 
°©e
->
cﬁ‹_di•_gøph
->
	`¥o˚ss
();

397 
cﬁ‹_di•_upd©e
 = 
Ál£
;

399 
°©e
->
ªndîî
->
	`putImage
(°©e->
cﬁ‹_ouçut
);

403 i‡(!
°©e
->
ªndîî
->
	`Êush
())

405 
°©e
->
evítD©a
.
shouldSt›
 = 
åue
;

408 
	`ˇtch
 (c⁄° 
°d
::
ex˚±i⁄
& 
e
)

410 
°d
::
˚º
 << "Eº‹: " << 
e
.
	`wh©
(Ë<< std::
ídl
;

415 
	}
}

417 
	$C›yOut
(*
d©a
, 
TimögInf‹m©i⁄
 *
times
) {

418 
times
->
kî√l_cou¡
 = 0;

420 
	}
}

422 c⁄° * 
	$GëName
() {

424 
	}
}

428 
	$Regi°îFun˘i⁄s
(
Bíchm¨kLibøryFun˘i⁄s
 *
fun˘i⁄s
) {

429 
fun˘i⁄s
->
öôülize
 = 
Inôülize
;

430 
fun˘i⁄s
->
c›y_ö
 = 
C›yIn
;

431 
fun˘i⁄s
->
execuã
 = 
Execuã
;

432 
fun˘i⁄s
->
c›y_out
 = 
C›yOut
;

433 
fun˘i⁄s
->
˛ónup
 = 
CÀ™up
;

434 
fun˘i⁄s
->
gë_«me
 = 
GëName
;

436 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/stereo_matching/stereo_matching.cpp

29 
	~"°îeo_m©chög.hµ
"

31 
	~<˛imôs
>

32 
	~<cÊﬂt
>

33 
	~<io°ªam
>

34 
	~<iom™ù
>

36 
	~<VX/vxu.h
>

37 
	~<NVX/nvx.h
>

39 
	~<OVX/UtûôyOVX.hµ
>

41 #ifde‡
__ANDROID__


42 
	#LOG_TAG
 "SGBM"

	)

65 
«me•a˚
 
	ghlsgm


73 ˛as†
	cSGBM
 : 
public
 
SãªoM©chög


75 
public
:

76 
SGBM
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
SãªoM©chögP¨ams
& 
∑øms
,

77 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
di•¨ôy
);

78 ~
SGBM
();

80 
vútuÆ
 
run
();

82 
¥ötPîfs
() const;

84 
	g¥iv©e
:

85 
vx_gøph
 
maö_gøph_
;

86 
vx_node
 
	gÀ·_cvt_cﬁ‹_node_
;

87 
vx_node
 
	gright_cvt_cﬁ‹_node_
;

88 
vx_node
 
	g£mi_globÆ_m©chög_node_
;

89 
vx_node
 
	gc⁄vît_dïth_node_
;

92 
	gSGBM
::
	$run
()

94 
	`NVXIO_SAFE_CALL
–
	`vxPro˚ssGøph
(
maö_gøph_
) );

95 
	}
}

97 
	gSGBM
::~
	$SGBM
()

99 
	`vxRñó£Gøph
(&
maö_gøph_
);

100 
	}
}

102 
	gSGBM
::
	$SGBM
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
SãªoM©chögP¨ams
& 
∑øms
,

103 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
di•¨ôy
)

104 : 
	$maö_gøph_
(
nuŒ±r
)

106 
vx_df_image
 
f‹m©
 = 
VX_DF_IMAGE_VIRT
;

107 
vx_uöt32
 
width
 = 0;

108 
vx_uöt32
 
height
 = 0;

110 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
À·
, 
VX_IMAGE_ATTRIBUTE_FORMAT
, &
f‹m©
, (format)) );

111 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
À·
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
width
, (width)) );

112 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
À·
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
height
, (height)) );

114 
maö_gøph_
 = 
	`vxCª©eGøph
(
c⁄ãxt
);

115 
	`NVXIO_CHECK_REFERENCE
(
maö_gøph_
);

118 
vx_image
 
À·_gøy
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
, 
height
, 
VX_DF_IMAGE_U8
);

119 
	`NVXIO_CHECK_REFERENCE
(
À·_gøy
);

121 
vx_image
 
right_gøy
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
, 
height
, 
VX_DF_IMAGE_U8
);

122 
	`NVXIO_CHECK_REFERENCE
(
right_gøy
);

124 
À·_cvt_cﬁ‹_node_
 = 
	`vxCﬁ‹C⁄vîtNode
(
maö_gøph_
, 
À·
, 
À·_gøy
);

125 
	`NVXIO_CHECK_REFERENCE
(
À·_cvt_cﬁ‹_node_
);

127 
right_cvt_cﬁ‹_node_
 = 
	`vxCﬁ‹C⁄vîtNode
(
maö_gøph_
, 
right
, 
right_gøy
);

128 
	`NVXIO_CHECK_REFERENCE
(
right_cvt_cﬁ‹_node_
);

131 
vx_image
 
di•¨ôy_sh‹t
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
, 
height
, 
VX_DF_IMAGE_S16
);

132 
	`NVXIO_CHECK_REFERENCE
(
di•¨ôy_sh‹t
);

148 
£mi_globÆ_m©chög_node_
 = 
	`nvxSemiGlobÆM©chögNode
(

149 
maö_gøph_
,

150 
À·_gøy
,

151 
right_gøy
,

152 
di•¨ôy_sh‹t
,

153 
∑øms
.
mö_di•¨ôy
,

154 
∑øms
.
max_di•¨ôy
,

155 
∑øms
.
P1
,

156 
∑øms
.
P2
,

157 
∑øms
.
ßd
,

158 
∑øms
.
˘_wö_size
,

159 
∑øms
.
hc_wö_size
,

160 
∑øms
.
bt_˛ù_vÆue
,

161 
∑øms
.
max_diff
,

162 
∑øms
.
uniquíess_øtio
,

163 
∑øms
.
sˇ∆öes_mask
,

164 
∑øms
.
Êags
);

165 
	`NVXIO_CHECK_REFERENCE
(
£mi_globÆ_m©chög_node_
);

168 
vx_öt32
 
shi·
 = 4;

169 
vx_sˇœr
 
s_shi·
 = 
	`vxCª©eSˇœr
(
c⁄ãxt
, 
VX_TYPE_INT32
, &
shi·
);

170 
	`NVXIO_CHECK_REFERENCE
(
s_shi·
);

171 
c⁄vît_dïth_node_
 = 
	`vxC⁄vîtDïthNode
(
maö_gøph_
, 
di•¨ôy_sh‹t
, 
di•¨ôy
, 
VX_CONVERT_POLICY_SATURATE
, 
s_shi·
);

172 
	`vxRñó£Sˇœr
(&
s_shi·
);

173 
	`NVXIO_CHECK_REFERENCE
(
c⁄vît_dïth_node_
);

176 
	`NVXIO_SAFE_CALL
–
	`vxVîifyGøph
(
maö_gøph_
) );

179 
	`vxRñó£Image
(&
À·_gøy
);

180 
	`vxRñó£Image
(&
right_gøy
);

182 
	`vxRñó£Image
(&
di•¨ôy_sh‹t
);

183 
	}
}

185 
	gSGBM
::
	$¥ötPîfs
() const

187 
ovxio
::
	`¥ötPîf
(
maö_gøph_
, "Stereo");

188 
ovxio
::
	`¥ötPîf
(
À·_cvt_cﬁ‹_node_
, "Left Color Convert");

189 
ovxio
::
	`¥ötPîf
(
right_cvt_cﬁ‹_node_
, "Right Color Convert");

190 
ovxio
::
	`¥ötPîf
(
£mi_globÆ_m©chög_node_
, "SGBM");

191 
ovxio
::
	`¥ötPîf
(
c⁄vît_dïth_node_
, "Convert Depth");

192 
	}
}

195 
«me•a˚
 
	gŒsgm


208 ˛as†
	cSGBM
 : 
public
 
SãªoM©chög


210 
public
:

211 
SGBM
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
SãªoM©chögP¨ams
& 
∑øms
,

212 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
di•¨ôy
);

213 ~
SGBM
();

215 
vútuÆ
 
run
();

217 
¥ötPîfs
() const;

219 
	g¥iv©e
:

220 
vx_gøph
 
maö_gøph_
;

221 
vx_node
 
	gcompuã_co°_node_
;

222 
vx_node
 
	gc⁄vﬁve_co°_node_
;

223 
vx_node
 
	gaggªg©e_co°_sˇ∆öes_node_
;

224 
vx_node
 
	gcompuã_di•¨ôy_node_
;

225 
vx_node
 
	gÀ·_cvt_cﬁ‹_node_
;

226 
vx_node
 
	gright_cvt_cﬁ‹_node_
;

227 
vx_node
 
	gc⁄vît_dïth_node_
;

228 
vx_node
 
	gÀ·_˚nsus_node_
;

229 
vx_node
 
	gright_˚nsus_node_
;

232 
	gSGBM
::
	$run
()

234 
	`NVXIO_SAFE_CALL
–
	`vxPro˚ssGøph
(
maö_gøph_
) );

235 
	}
}

237 
	gSGBM
::~
	$SGBM
()

239 
	`vxRñó£Gøph
(&
maö_gøph_
);

240 
	}
}

242 
	gSGBM
::
	$SGBM
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
SãªoM©chögP¨ams
& 
∑øms
,

243 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
di•¨ôy
)

245 
vx_df_image
 
f‹m©
 = 
VX_DF_IMAGE_VIRT
;

246 
vx_uöt32
 
width
 = 0;

247 
vx_uöt32
 
height
 = 0;

248 
vx_uöt32
 
D
 = 
∑øms
.
max_di•¨ôy
 -Ö¨ams.
mö_di•¨ôy
;

250 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
À·
, 
VX_IMAGE_ATTRIBUTE_FORMAT
, &
f‹m©
, (format)) );

251 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
À·
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
width
, (width)) );

252 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
À·
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
height
, (height)) );

254 
maö_gøph_
 = 
	`vxCª©eGøph
(
c⁄ãxt
);

255 
	`NVXIO_CHECK_REFERENCE
(
maö_gøph_
);

257 
vx_image
 
À·_gøy
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
, 
height
, 
VX_DF_IMAGE_U8
);

258 
	`NVXIO_CHECK_REFERENCE
(
À·_gøy
);

260 
vx_image
 
right_gøy
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
, 
height
, 
VX_DF_IMAGE_U8
);

261 
	`NVXIO_CHECK_REFERENCE
(
right_gøy
);

263 
À·_cvt_cﬁ‹_node_
 = 
	`vxCﬁ‹C⁄vîtNode
(
maö_gøph_
, 
À·
, 
À·_gøy
);

264 
	`NVXIO_CHECK_REFERENCE
(
À·_cvt_cﬁ‹_node_
);

266 
right_cvt_cﬁ‹_node_
 = 
	`vxCﬁ‹C⁄vîtNode
(
maö_gøph_
, 
right
, 
right_gøy
);

267 
	`NVXIO_CHECK_REFERENCE
(
right_cvt_cﬁ‹_node_
);

269 
vx_image
 
À·_˚nsus
 = 
NULL
, 
right_˚nsus
 = NULL;

272 i‡(
∑øms
.
˘_wö_size
 > 1)

274 
À·_˚nsus
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
, 
height
, 
VX_DF_IMAGE_U32
);

275 
	`NVXIO_CHECK_REFERENCE
(
À·_˚nsus
);

276 
right_˚nsus
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
, 
height
, 
VX_DF_IMAGE_U32
);

277 
	`NVXIO_CHECK_REFERENCE
(
right_˚nsus
);

279 
À·_˚nsus_node_
 = 
	`nvxCísusTønsf‹mNode
(
maö_gøph_
, 
À·_gøy
, 
À·_˚nsus
, 
∑øms
.
˘_wö_size
);

280 
	`NVXIO_CHECK_REFERENCE
(
À·_˚nsus_node_
);

281 
right_˚nsus_node_
 = 
	`nvxCísusTønsf‹mNode
(
maö_gøph_
, 
right_gøy
, 
right_˚nsus
, 
∑øms
.
˘_wö_size
);

282 
	`NVXIO_CHECK_REFERENCE
(
right_˚nsus_node_
);

286 
À·_˚nsus_node_
 = 
NULL
;

287 
right_˚nsus_node_
 = 
NULL
;

290 
vx_image
 
c⁄vﬁved_co°
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
 * 
D
, 
height
, 
VX_DF_IMAGE_U8
);

291 
	`NVXIO_CHECK_REFERENCE
(
c⁄vﬁved_co°
);

296 
vx_öt32
 
ßd
 = 
∑øms
.sad;

297 i‡(
ßd
 > 1)

299 
vx_image
 
co°
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
 * 
D
, 
height
, 
VX_DF_IMAGE_U8
);

300 
	`NVXIO_CHECK_REFERENCE
(
co°
);

303 i‡(
∑øms
.
˘_wö_size
 > 1)

305 
compuã_co°_node_
 = 
	`nvxCompuãCo°HammögNode
(
maö_gøph_
, 
À·_˚nsus
, 
right_˚nsus
, 
co°
,

306 
∑øms
.
mö_di•¨ôy
,Ö¨ams.
max_di•¨ôy
,

307 
∑øms
.
hc_wö_size
);

311 
compuã_co°_node_
 = 
	`nvxCompuãModifõdCo°BTNode
(
maö_gøph_
, 
À·_gøy
, 
right_gøy
, 
co°
,

312 
∑øms
.
mö_di•¨ôy
,Ö¨ams.
max_di•¨ôy
,

313 
∑øms
.
bt_˛ù_vÆue
);

315 
	`NVXIO_CHECK_REFERENCE
(
compuã_co°_node_
);

317 
c⁄vﬁve_co°_node_
 = 
	`nvxC⁄vﬁveCo°Node
(
maö_gøph_
, 
co°
, 
c⁄vﬁved_co°
,

318 
D
, 
ßd
);

319 
	`NVXIO_CHECK_REFERENCE
(
c⁄vﬁve_co°_node_
);

321 
	`vxRñó£Image
(&
co°
);

325 i‡(
∑øms
.
˘_wö_size
 > 1)

327 
compuã_co°_node_
 = 
	`nvxCompuãCo°HammögNode
(
maö_gøph_
, 
À·_˚nsus
, 
right_˚nsus
, 
c⁄vﬁved_co°
,

328 
∑øms
.
mö_di•¨ôy
,Ö¨ams.
max_di•¨ôy
,

333 
compuã_co°_node_
 = 
	`nvxCompuãModifõdCo°BTNode
(
maö_gøph_
, 
À·_gøy
, 
right_gøy
, 
c⁄vﬁved_co°
,

334 
∑øms
.
mö_di•¨ôy
,Ö¨ams.
max_di•¨ôy
,

335 
∑øms
.
bt_˛ù_vÆue
);

337 
	`NVXIO_CHECK_REFERENCE
(
compuã_co°_node_
);

339 
c⁄vﬁve_co°_node_
 = 
NULL
;

342 
vx_image
 
aggªg©ed_co°
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
 * 
D
, 
height
, 
VX_DF_IMAGE_S16
);

343 
	`NVXIO_CHECK_REFERENCE
(
aggªg©ed_co°
);

345 
aggªg©e_co°_sˇ∆öes_node_
 = 
	`nvxAggªg©eCo°Sˇ∆öesNode
(
maö_gøph_
, 
c⁄vﬁved_co°
, 
aggªg©ed_co°
,

346 
D
, 
∑øms
.
P1
,Ö¨ams.
P2
,Ö¨ams.
sˇ∆öes_mask
);

347 
	`NVXIO_CHECK_REFERENCE
(
aggªg©e_co°_sˇ∆öes_node_
);

349 
vx_image
 
di•¨ôy_sh‹t
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
, 
height
, 
VX_DF_IMAGE_S16
);

350 
	`NVXIO_CHECK_REFERENCE
(
di•¨ôy_sh‹t
);

352 
compuã_di•¨ôy_node_
 = 
	`nvxCompuãDi•¨ôyNode
(
maö_gøph_
, 
aggªg©ed_co°
, 
di•¨ôy_sh‹t
,

353 
∑øms
.
mö_di•¨ôy
,Ö¨ams.
max_di•¨ôy
,

354 
∑øms
.
uniquíess_øtio
,Ö¨ams.
max_diff
);

355 
	`NVXIO_CHECK_REFERENCE
(
compuã_di•¨ôy_node_
);

357 
vx_öt32
 
shi·
 = 4;

358 
vx_sˇœr
 
s_shi·
 = 
	`vxCª©eSˇœr
(
c⁄ãxt
, 
VX_TYPE_INT32
, &
shi·
);

359 
	`NVXIO_CHECK_REFERENCE
(
s_shi·
);

360 
c⁄vît_dïth_node_
 = 
	`vxC⁄vîtDïthNode
(
maö_gøph_
, 
di•¨ôy_sh‹t
, 
di•¨ôy
, 
VX_CONVERT_POLICY_SATURATE
, 
s_shi·
);

361 
	`NVXIO_CHECK_REFERENCE
(
c⁄vît_dïth_node_
);

363 
	`vxRñó£Sˇœr
(&
s_shi·
);

364 
	`vxRñó£Image
(&
di•¨ôy_sh‹t
);

365 
	`vxRñó£Image
(&
aggªg©ed_co°
);

366 
	`vxRñó£Image
(&
c⁄vﬁved_co°
);

367 
	`vxRñó£Image
(&
right_˚nsus
);

368 
	`vxRñó£Image
(&
À·_˚nsus
);

369 
	`vxRñó£Image
(&
right_gøy
);

370 
	`vxRñó£Image
(&
À·_gøy
);

372 
	`NVXIO_SAFE_CALL
–
	`vxVîifyGøph
(
maö_gøph_
) );

373 
	}
}

375 
	gSGBM
::
	$¥ötPîfs
() const

377 
ovxio
::
	`¥ötPîf
(
maö_gøph_
, "Stereo");

378 
ovxio
::
	`¥ötPîf
(
À·_cvt_cﬁ‹_node_
, "Left Color Convert");

379 
ovxio
::
	`¥ötPîf
(
right_cvt_cﬁ‹_node_
, "Right Color Convert");

380 i‡(
À·_˚nsus_node_
Ë
ovxio
::
	`¥ötPîf
(left_census_node_, "Left Census Transform");

381 i‡(
right_˚nsus_node_
Ë
ovxio
::
	`¥ötPîf
(right_census_node_, "Right Census Transform");

382 
ovxio
::
	`¥ötPîf
(
compuã_co°_node_
, "Compute Cost");

383 i‡(
c⁄vﬁve_co°_node_
Ë
ovxio
::
	`¥ötPîf
(convolve_cost_node_, "Convolve Cost");

384 
ovxio
::
	`¥ötPîf
(
aggªg©e_co°_sˇ∆öes_node_
, "Aggregate Scanlines");

385 
ovxio
::
	`¥ötPîf
(
compuã_di•¨ôy_node_
, "Compute Disparity");

386 
ovxio
::
	`¥ötPîf
(
c⁄vît_dïth_node_
, "Convert Depth");

387 
	}
}

390 
«me•a˚
 
	gpsgm


406 c⁄° 
	gpyr_Àvñs
 = 3;

407 c⁄° 
	gD_divis‹s
[
pyr_Àvñs
] = { 4, 2, 1 };

409 ˛as†
	cSGBM
 : 
public
 
SãªoM©chög


411 
public
:

412 
SGBM
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
SãªoM©chögP¨ams
& 
∑øms
,

413 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
di•¨ôy
);

414 ~
SGBM
();

416 
vútuÆ
 
run
();

418 
¥ötPîfs
() const;

420 
	g¥iv©e
:

421 
vx_gøph
 
maö_gøph_
;

422 
vx_node
 
	gÀ·_cvt_cﬁ‹_node_
;

423 
vx_node
 
	gright_cvt_cﬁ‹_node_
;

425 
vx_image
 
	gdi•¨ôy_sh‹t_
[
pyr_Àvñs
];

426 
vx_image
 
	gaggªg©ed_co°_
[
pyr_Àvñs
];

427 
vx_image
 
	gco°_
[
pyr_Àvñs
];

428 
vx_image
 
	gc⁄vﬁved_co°_
[
pyr_Àvñs
];

430 
vx_image
 
	gfuŒ_À·_gøy_
;

431 
vx_image
 
	gfuŒ_right_gøy_
;

433 
vx_image
 
	gfuŒ_aggªg©ed_co°_
;

434 
vx_image
 
	gfuŒ_co°_
;

435 
vx_image
 
	gfuŒ_c⁄vﬁved_co°_
;

438 
	gSGBM
::
	$run
()

440 
	`NVXIO_SAFE_CALL
–
	`vxPro˚ssGøph
(
maö_gøph_
) );

441 
	}
}

443 
	gSGBM
::~
	$SGBM
()

445 
	`vxRñó£Gøph
(&
maö_gøph_
);

446 
	}
}

448 
	gSGBM
::
	$SGBM
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
SãªoM©chögP¨ams
& 
∑øms
,

449 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
di•¨ôy
)

451 
vx_df_image
 
f‹m©
 = 
VX_DF_IMAGE_VIRT
;

452 
vx_uöt32
 
fuŒ_width
 = 0;

453 
vx_uöt32
 
fuŒ_height
 = 0;

454 
vx_uöt32
 
fuŒ_D
 = 
∑øms
.
max_di•¨ôy
 -Ö¨ams.
mö_di•¨ôy
;

455 
vx_öt32
 
ßd
 = 
∑øms
.sad;

457 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
À·
, 
VX_IMAGE_ATTRIBUTE_FORMAT
, &
f‹m©
, (format)) );

458 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
À·
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
fuŒ_width
, (full_width)) );

459 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
À·
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
fuŒ_height
, (full_height)) );

476 
maö_gøph_
 = 
	`nvxCª©eSåómGøph
(
c⁄ãxt
);

477 
	`NVXIO_CHECK_REFERENCE
(
maö_gøph_
);

481 
fuŒ_À·_gøy_
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
fuŒ_width
, 
fuŒ_height
, 
VX_DF_IMAGE_U8
);

482 
	`NVXIO_CHECK_REFERENCE
(
fuŒ_À·_gøy_
);

484 
fuŒ_right_gøy_
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
fuŒ_width
, 
fuŒ_height
, 
VX_DF_IMAGE_U8
);

485 
	`NVXIO_CHECK_REFERENCE
(
fuŒ_right_gøy_
);

487 
fuŒ_c⁄vﬁved_co°_
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
fuŒ_width
 * 
fuŒ_D
 / 4, 
fuŒ_height
, 
VX_DF_IMAGE_U8
);

488 
	`NVXIO_CHECK_REFERENCE
(
fuŒ_c⁄vﬁved_co°_
);

490 i‡(
ßd
 > 1)

492 
fuŒ_co°_
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
fuŒ_width
 * 
fuŒ_D
 / 4, 
fuŒ_height
, 
VX_DF_IMAGE_U8
);

493 
	`NVXIO_CHECK_REFERENCE
(
fuŒ_co°_
);

496 
fuŒ_aggªg©ed_co°_
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
fuŒ_width
 * 
fuŒ_D
 / 4, 
fuŒ_height
, 
VX_DF_IMAGE_S16
);

497 
	`NVXIO_CHECK_REFERENCE
(
fuŒ_aggªg©ed_co°_
);

499 
i
 = 0; i < 
pyr_Àvñs
; i++)

501 
divis‹
 = 1 << 
i
;

502 
di•¨ôy_sh‹t_
[
i
] = 
	`vxCª©eVútuÆImage
(
maö_gøph_
,

503 
fuŒ_width
 / 
divis‹
,

504 
fuŒ_height
 / 
divis‹
,

505 
VX_DF_IMAGE_S16
);

506 
	`NVXIO_CHECK_REFERENCE
(
di•¨ôy_sh‹t_
[
i
]);

510 
À·_cvt_cﬁ‹_node_
 = 
	`vxCﬁ‹C⁄vîtNode
(
maö_gøph_
, 
À·
, 
fuŒ_À·_gøy_
);

511 
	`NVXIO_CHECK_REFERENCE
(
À·_cvt_cﬁ‹_node_
);

513 
right_cvt_cﬁ‹_node_
 = 
	`vxCﬁ‹C⁄vîtNode
(
maö_gøph_
, 
right
, 
fuŒ_right_gøy_
);

514 
	`NVXIO_CHECK_REFERENCE
(
right_cvt_cﬁ‹_node_
);

516 
i
 = 
pyr_Àvñs
 - 1; i >= 0; i--)

518 
divis‹
 = 1 << 
i
;

520 
width
 = 
fuŒ_width
 / 
divis‹
;

521 
height
 = 
fuŒ_height
 / 
divis‹
;

522 
D
 = 
fuŒ_D
 / 
D_divis‹s
[
i
];

524 
vx_image
 
À·_gøy
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
, 
height
, 
VX_DF_IMAGE_U8
);

525 
	`NVXIO_CHECK_REFERENCE
(
À·_gøy
);

527 
vx_image
 
right_gøy
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
, 
height
, 
VX_DF_IMAGE_U8
);

528 
	`NVXIO_CHECK_REFERENCE
(
À·_gøy
);

530 
vx_node
 
À·_downsˇÀ_node
 = 
	`vxSˇÀImageNode
(
maö_gøph_
, 
fuŒ_À·_gøy_
, 
À·_gøy
, 
VX_INTERPOLATION_TYPE_BILINEAR
);

531 
	`NVXIO_CHECK_REFERENCE
(
À·_downsˇÀ_node
);

533 
vx_node
 
right_downsˇÀ_node
 = 
	`vxSˇÀImageNode
(
maö_gøph_
, 
fuŒ_right_gøy_
, 
right_gøy
, 
VX_INTERPOLATION_TYPE_BILINEAR
);

534 
	`NVXIO_CHECK_REFERENCE
(
right_downsˇÀ_node
);

537 
vx_image
 
À·_˚nsus
 = 
NULL
, 
right_˚nsus
 = NULL;

538 i‡(
∑øms
.
˘_wö_size
 > 1)

540 
À·_˚nsus
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
, 
height
, 
VX_DF_IMAGE_U32
);

541 
	`NVXIO_CHECK_REFERENCE
(
À·_˚nsus
);

542 
right_˚nsus
 = 
	`vxCª©eVútuÆImage
(
maö_gøph_
, 
width
, 
height
, 
VX_DF_IMAGE_U32
);

543 
	`NVXIO_CHECK_REFERENCE
(
right_˚nsus
);

545 
vx_node
 
À·_˚nsus_node
 = 
	`nvxCísusTønsf‹mNode
(
maö_gøph_
, 
À·_gøy
, 
À·_˚nsus
, 
∑øms
.
˘_wö_size
);

546 
	`NVXIO_CHECK_REFERENCE
(
À·_˚nsus_node
);

547 
vx_node
 
right_˚nsus_node
 = 
	`nvxCísusTønsf‹mNode
(
maö_gøph_
, 
right_gøy
, 
right_˚nsus
, 
∑øms
.
˘_wö_size
);

548 
	`NVXIO_CHECK_REFERENCE
(
right_˚nsus_node
);

551 
vx_ª˘™gÀ_t
 
co°_ª˘
 { 0, 0, 
°©ic_ˇ°
<
vx_uöt32
>(
width
 * 
D
), sètic_ˇ°<vx_uöt32>(
height
) };

552 
c⁄vﬁved_co°_
[
i
] = 
	`vxCª©eImageFromROI
(
fuŒ_c⁄vﬁved_co°_
, &
co°_ª˘
);

553 
	`NVXIO_CHECK_REFERENCE
(
c⁄vﬁved_co°_
[
i
]);

555 i‡(
ßd
 > 1)

557 
co°_
[
i
] = 
	`vxCª©eImageFromROI
(
fuŒ_co°_
, &
co°_ª˘
);

558 
	`NVXIO_CHECK_REFERENCE
(
co°_
[
i
]);

561 
vx_node
 
compuã_co°_node
 = 
NULL
;

562 i‡(
∑øms
.
˘_wö_size
 > 1)

564 
compuã_co°_node
 = 
nvxCompuãCo°HammögNode


565 (
maö_gøph_
, 
À·_˚nsus
, 
right_˚nsus
,

566 
co°_
[
i
],

567 
∑øms
.
mö_di•¨ôy
 / 
D_divis‹s
[
i
],Ö¨ams.
max_di•¨ôy
 / D_divisors[i],

568 
∑øms
.
hc_wö_size
);

572 
compuã_co°_node
 = 
nvxCompuãModifõdCo°BTNode


573 (
maö_gøph_
, 
À·_gøy
, 
right_gøy
,

574 
co°_
[
i
],

575 
∑øms
.
mö_di•¨ôy
 / 
D_divis‹s
[
i
],Ö¨ams.
max_di•¨ôy
 / D_divisors[i],

576 
∑øms
.
bt_˛ù_vÆue
);

578 
	`NVXIO_CHECK_REFERENCE
(
compuã_co°_node
);

580 
vx_node
 
c⁄vﬁve_co°_node
 = 
nvxC⁄vﬁveCo°Node


581 (
maö_gøph_
,

582 
co°_
[
i
], 
c⁄vﬁved_co°_
[i],

583 
D
, 
ßd
);

584 
	`NVXIO_CHECK_REFERENCE
(
c⁄vﬁve_co°_node
);

588 
vx_node
 
compuã_co°_node
 = 
NULL
;

589 i‡(
∑øms
.
˘_wö_size
 > 1)

591 
compuã_co°_node
 = 
nvxCompuãCo°HammögNode


592 (
maö_gøph_
, 
À·_˚nsus
, 
right_˚nsus
,

593 
c⁄vﬁved_co°_
[
i
],

594 
∑øms
.
mö_di•¨ôy
 / 
D_divis‹s
[
i
],Ö¨ams.
max_di•¨ôy
 / D_divisors[i],

595 
∑øms
.
hc_wö_size
);

599 
compuã_co°_node
 = 
nvxCompuãModifõdCo°BTNode


600 (
maö_gøph_
, 
À·_gøy
, 
right_gøy
,

601 
c⁄vﬁved_co°_
[
i
],

602 
∑øms
.
mö_di•¨ôy
 / 
D_divis‹s
[
i
],Ö¨ams.
max_di•¨ôy
 / D_divisors[i],

603 
∑øms
.
bt_˛ù_vÆue
);

605 
	`NVXIO_CHECK_REFERENCE
(
compuã_co°_node
);

608 i‡(
i
 < 
pyr_Àvñs
 - 1)

610 
vx_node
 
co°_¥i‹_node
 = 
nvxPSGMCo°Pri‹Node


611 (
maö_gøph_
, 
di•¨ôy_sh‹t_
[
i
+1],

612 
c⁄vﬁved_co°_
[
i
],

613 
D
);

614 
	`NVXIO_CHECK_REFERENCE
(
co°_¥i‹_node
);

617 
aggªg©ed_co°_
[
i
] = 
	`vxCª©eImageFromROI
(
fuŒ_aggªg©ed_co°_
, &
co°_ª˘
);

618 
	`NVXIO_CHECK_REFERENCE
(
aggªg©ed_co°_
[
i
]);

620 
vx_node
 
aggªg©e_co°_sˇ∆öes_node
 = 
nvxAggªg©eCo°Sˇ∆öesNode


621 (
maö_gøph_
,

622 
c⁄vﬁved_co°_
[
i
], 
aggªg©ed_co°_
[i],

623 
D
, 
∑øms
.
P1
,Ö¨ams.
P2
,Ö¨ams.
sˇ∆öes_mask
);

624 
	`NVXIO_CHECK_REFERENCE
(
aggªg©e_co°_sˇ∆öes_node
);

626 
vx_node
 
compuã_di•¨ôy_node
 = 
nvxCompuãDi•¨ôyNode


627 (
maö_gøph_
,

628 
aggªg©ed_co°_
[
i
],

629 
di•¨ôy_sh‹t_
[
i
],

630 
∑øms
.
mö_di•¨ôy
 / 
D_divis‹s
[
i
],Ö¨ams.
max_di•¨ôy
 / D_divisors[i],

631 
∑øms
.
uniquíess_øtio
,Ö¨ams.
max_diff
);

632 
	`NVXIO_CHECK_REFERENCE
(
compuã_di•¨ôy_node
);

634 i‡(
i
 < 
pyr_Àvñs
 - 1)

636 
vx_node
 
di•¨ôy_mîge_node
 = 
nvxPSGMDi•¨ôyMîgeNode


637 (
maö_gøph_
,

638 
di•¨ôy_sh‹t_
[
i
+1],

639 
di•¨ôy_sh‹t_
[
i
], 
D
);

640 
	`NVXIO_CHECK_REFERENCE
(
di•¨ôy_mîge_node
);

644 
vx_öt32
 
shi·
 = 4;

645 
vx_sˇœr
 
s_shi·
 = 
	`vxCª©eSˇœr
(
c⁄ãxt
, 
VX_TYPE_INT32
, &
shi·
);

646 
	`NVXIO_CHECK_REFERENCE
(
s_shi·
);

647 
vx_node
 
c⁄vît_dïth_node
 = 
vxC⁄vîtDïthNode


648 (
maö_gøph_
, 
di•¨ôy_sh‹t_
[0],

649 
di•¨ôy
, 
VX_CONVERT_POLICY_SATURATE
, 
s_shi·
);

650 
	`vxRñó£Sˇœr
(&
s_shi·
);

651 
	`NVXIO_CHECK_REFERENCE
(
c⁄vît_dïth_node
);

653 
	`NVXIO_SAFE_CALL
–
	`vxVîifyGøph
(
maö_gøph_
) );

654 
	}
}

656 
	gSGBM
::
	$¥ötPîfs
() const

658 
	}
}

661 
SãªoM©chög
* SãªoM©chög::
	$¸óãSãªoM©chög
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
SãªoM©chögP¨ams
& 
∑øms
,

662 
Im∂emíèti⁄Ty≥
 
im∂
,

663 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
di•¨ôy
)

665 
im∂
)

667 
HIGH_LEVEL_API
:

668  
√w
 
hlsgm
::
	`SGBM
(
c⁄ãxt
, 
∑øms
, 
À·
, 
right
, 
di•¨ôy
);

669 
LOW_LEVEL_API
:

670  
√w
 
Œsgm
::
	`SGBM
(
c⁄ãxt
, 
∑øms
, 
À·
, 
right
, 
di•¨ôy
);

671 
LOW_LEVEL_API_PYRAMIDAL
:

672  
√w
 
psgm
::
	`SGBM
(
c⁄ãxt
, 
∑øms
, 
À·
, 
right
, 
di•¨ôy
);

675 
	}
}

677 
	gSãªoM©chög
::
SãªoM©chögP¨ams
::
	$SãªoM©chögP¨ams
()

679 
mö_di•¨ôy
 = 0;

680 
max_di•¨ôy
 = 64;

681 
P1
 = 8;

682 
P2
 = 109;

683 
ßd
 = 5;

684 
bt_˛ù_vÆue
 = 31;

685 
max_diff
 = 32000;

686 
uniquíess_øtio
 = 0;

687 
sˇ∆öes_mask
 = 85;

688 
˘_wö_size
 = 0;

689 
hc_wö_size
 = 1;

690 
Êags
 = 
NVX_SGM_PYRAMIDAL_STEREO
;

691 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/stereo_matching/stereo_matching.hpp

29 #i‚de‡
__NVX_STEREO_HPP__


30 
	#__NVX_STEREO_HPP__


	)

32 
	~<VX/vx.h
>

34 ˛as†
	cSãªoM©chög


36 
	mpublic
:

38 
	eIm∂emíèti⁄Ty≥


40 
HIGH_LEVEL_API
,

41 
	mLOW_LEVEL_API
,

42 
	mLOW_LEVEL_API_PYRAMIDAL


45 
	sSãªoM©chögP¨ams


48 
vx_öt32
 
	gmö_di•¨ôy
;

49 
vx_öt32
 
	gmax_di•¨ôy
;

52 
vx_öt32
 
	gP1
;

53 
vx_öt32
 
	gP2
;

56 
vx_öt32
 
	gßd
;

59 
vx_öt32
 
	g˘_wö_size
;

62 
vx_öt32
 
	ghc_wö_size
;

65 
vx_öt32
 
	gbt_˛ù_vÆue
;

68 
vx_öt32
 
	gmax_diff
;

69 
vx_öt32
 
	guniquíess_øtio
;

71 
vx_íum
 
	gsˇ∆öes_mask
;

73 
vx_íum
 
	gÊags
;

75 
SãªoM©chögP¨ams
();

78 
SãªoM©chög
* 
¸óãSãªoM©chög
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
SãªoM©chögP¨ams
& 
∑øms
,

79 
Im∂emíèti⁄Ty≥
 
im∂
,

80 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
di•¨ôy
);

82 
	gvútuÆ
 ~
	$SãªoM©chög
(Ë{
	}
}

84 
vútuÆ
 
run
() = 0;

86 
vútuÆ
 
	$¥ötPîfs
() const = 0;

87 
	}
};

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/homography_filter_node.cpp

29 
	~"v°ab_nodes.hµ
"

31 
	~<Eigí/SVD
>

33 c⁄° 
	gKERNEL_HOMOGRAPHY_FILTER_NAME
[
VX_MAX_KERNEL_NAME
] = "example.nvx.homography_filter";

36 
vx_°©us
 
VX_CALLBACK
 
	$homogøphyFûãr_kî√l
(
vx_node
, c⁄° 
vx_ª„ªn˚
 *
∑ømëîs
, 
vx_uöt32
 
num
)

38 i‡(
num
 != 4)

39  
VX_FAILURE
;

41 
vx_°©us
 
°©us
 = 
VX_SUCCESS
;

43 
vx_m©rix
 
öput
 = (vx_m©rix)
∑ømëîs
[0];

44 
vx_m©rix
 
homogøphy
 = (vx_m©rix)
∑ømëîs
[1];

45 
vx_image
 
image
 = (vx_image)
∑ømëîs
[2];

46 
vx_¨øy
 
mask
 = (vx_¨øy)
∑ømëîs
[3];

49 
vx_Êﬂt32
 
öçutD©a
[9] = {0};

50 
°©us
 |
	`vxC›yM©rix
(
öput
, 
öçutD©a
, 
VX_READ_ONLY
, 
VX_MEMORY_TYPE_HOST
);

51 
°©us
 |
	`vxC›yM©rix
(
homogøphy
, 
öçutD©a
, 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
);

53 
vx_uöt32
 
width
 = 0, 
height
 = 0;

54 
°©us
 |
	`vxQuîyImage
(
image
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
width
, (width));

55 
°©us
 |
	`vxQuîyImage
(
image
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
height
, (height));

57 
vx_size
 
nPoöts
;

58 
°©us
 |
	`vxQuîyAºay
(
mask
, 
VX_ARRAY_ATTRIBUTE_NUMITEMS
, &
nPoöts
, (nPoints));

60 
vx_öt32
 
nI∆õrs
 = 0;

61 i‡(
nPoöts
 > 0)

63 
vx_m≠_id
 
m≠_id
;

64 
vx_size
 
°ride
;

65 * 
±r
;

66 
°©us
 |
	`vxM≠AºayR™ge
(
mask
, 0, 
nPoöts
, &
m≠_id
, &
°ride
, &
±r
, 
VX_READ_ONLY
, 
VX_MEMORY_TYPE_HOST
, 0);

68 
vx_size
 
i
 = 0; i < 
nPoöts
; i++)

70 
vx_uöt8
 
v
 = 
	`vxAºayIãm
(vx_uöt8, 
±r
, 
i
, 
°ride
);

71 i‡(
v
 != 0)

72 ++
nI∆õrs
;

75 
°©us
 |
	`vxUnm≠AºayR™ge
(
mask
, 
m≠_id
);

78 
ölõrThªsh
 = 
°d
::
	`max
(15, 
°©ic_ˇ°
<>(0.1 * 
nPoöts
));

79 
M©rix3x3f_rm
 
eye3x3
 = M©rix3x3f_rm::
	`Idítôy
();

81 i‡(
nI∆õrs
 < 
ölõrThªsh
)

83 
°©us
 |
	`vxC›yM©rix
(
homogøphy
, 
eye3x3
.
	`d©a
(), 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
);

84  
°©us
;

87 
vx_Êﬂt32
 
d©a
[9];

88 
°©us
 |
	`vxC›yM©rix
(
homogøphy
, 
d©a
, 
VX_READ_ONLY
, 
VX_MEMORY_TYPE_HOST
);

90 
M©rix3x3f_rm
 
M
 = M©rix3x3f_rm::
	`M≠
(
d©a
, 3, 3);

91 
M
.
	`å™•o£InPœ˚
();

94 
M©rix3x4f_rm
 
vîti˚s
 = M©rix3x4f_rm::
	`Zîo
();

96 
i
=0; i<4; ++i)

97 
	`vîti˚s
(2, 
i
) = 1.0f;

99 
	`vîti˚s
(0, 1Ë
°©ic_ˇ°
<>(
width
);

100 
	`vîti˚s
(0, 2Ë
°©ic_ˇ°
<>(
width
);

101 
	`vîti˚s
(1, 2Ë
°©ic_ˇ°
<>(
height
);

102 
	`vîti˚s
(1, 3Ë
°©ic_ˇ°
<>(
height
);

104 
M©rix3x4f_rm
 
d°Vîti˚s
 = 
M
 * 
vîti˚s
;

105 
i
=0; i<4; ++i)

107 
	`d°Vîti˚s
(0,
i
) /= dstVertices(2,i);

108 
	`d°Vîti˚s
(1,
i
) /= dstVertices(2,i);

109 
	`d°Vîti˚s
(2,
i
) = 1.0f;

112 
dügLíGﬁd
 = 
°d
::
	`sqπ
(
°©ic_ˇ°
<>(
width
*width + 
height
*height));

114 
dx
 = 
	`d°Vîti˚s
(0,0) - dstVertices(0,2);

115 
dy
 = 
	`d°Vîti˚s
(1,0) - dstVertices(1,2);

116 
ÀnDüg1
 = 
	`sqπ
(
dx
*dx + 
dy
*dy);

118 
dx
 = 
	`d°Vîti˚s
(0,1) - dstVertices(0,3);

119 
dy
 = 
	`d°Vîti˚s
(1,1) - dstVertices(1,3);

120 
ÀnDüg2
 = 
	`sqπ
(
dx
*dx + 
dy
*dy);

122 
avîDügLí
 = (
ÀnDüg1
 + 
ÀnDüg2
) / 2;

123 
dügR©io1
 = 
°d
::
	`mö
(
dügLíGﬁd
, 
avîDügLí
Ë/ std::
	`max
(diagLenGold,áverDiagLen);

124 i‡(
dügR©io1
 < 0.5f)

126 
°©us
 |
	`vxC›yM©rix
(
homogøphy
, 
eye3x3
.
	`d©a
(), 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
);

127  
°©us
;

130 
maxDüg
 = 
°d
::
	`max
(
ÀnDüg1
, 
ÀnDüg2
);

131 i‡(
maxDüg
 > 0.0f)

133 
dügR©io2
 = 
°d
::
	`mö
(
ÀnDüg1
, 
ÀnDüg2
Ë/ 
maxDüg
;

134 i‡(
dügR©io2
 < 0.25f)

136 
°©us
 |
	`vxC›yM©rix
(
homogøphy
, 
eye3x3
.
	`d©a
(), 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
);

137  
°©us
;

142 
°©us
 |
	`vxC›yM©rix
(
homogøphy
, 
eye3x3
.
	`d©a
(), 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
);

143  
°©us
;

147 
Eigí
::
	tJacobiSVD
<
	tM©rix3x3f_rm
> JacobiSVD;

149 
JacobiSVD
 
	`svd
(
M
);

150 
JacobiSVD
::
SöguœrVÆuesTy≥
 
sögVÆues
 = 
svd
.
	`söguœrVÆues
();

152 i‡(
	`sögVÆues
(2) < 1e-4f)

154 
°©us
 |
	`vxC›yM©rix
(
homogøphy
, 
eye3x3
.
	`d©a
(), 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
);

155  
°©us
;

158  
°©us
;

159 
	}
}

162 
vx_°©us
 
VX_CALLBACK
 
	$homogøphyFûãr_vÆid©e
(
vx_node
, c⁄° 
vx_ª„ªn˚
 
∑ømëîs
[],

163 
vx_uöt32
 
numP¨ams
, 
vx_mëa_f‹m©
 
mëas
[])

165 i‡(
numP¨ams
 !4Ë 
VX_ERROR_INVALID_PARAMETERS
;

167 
vx_m©rix
 
öput
 = (vx_m©rix)
∑ømëîs
[0];

168 
vx_¨øy
 
mask
 = (vx_¨øy)
∑ømëîs
[3];

170 
vx_°©us
 
°©us
 = 
VX_SUCCESS
;

172 
vx_íum
 
öputD©aTy≥
 = 0;

173 
vx_size
 
öputRows
 = 0ul, 
öputCﬁs
 = 0ul;

174 
	`vxQuîyM©rix
(
öput
, 
VX_MATRIX_ATTRIBUTE_TYPE
, &
öputD©aTy≥
, (inputDataType));

175 
	`vxQuîyM©rix
(
öput
, 
VX_MATRIX_ATTRIBUTE_ROWS
, &
öputRows
, (inputRows));

176 
	`vxQuîyM©rix
(
öput
, 
VX_MATRIX_ATTRIBUTE_COLUMNS
, &
öputCﬁs
, (inputCols));

178 
vx_íum
 
maskTy≥
 = 0;

179 
	`vxQuîyAºay
(
mask
, 
VX_ARRAY_ATTRIBUTE_ITEMTYPE
, &
maskTy≥
, (maskType));

181 i‡(
öputD©aTy≥
 !
VX_TYPE_FLOAT32
 || 
öputCﬁs
 !3 || 
öputRows
 != 3)

183 
°©us
 = 
VX_ERROR_INVALID_PARAMETERS
;

186 i‡(
maskTy≥
 !
VX_TYPE_UINT8
)

188 
°©us
 = 
VX_ERROR_INVALID_TYPE
;

191 
vx_mëa_f‹m©
 
homogøphyMëa
 = 
mëas
[1];

193 
vx_íum
 
homogøphyTy≥
 = 
VX_TYPE_FLOAT32
;

194 
vx_size
 
homogøphyRows
 = 3;

195 
vx_size
 
homogøphyCﬁs
 = 3;

197 
	`vxSëMëaF‹m©Aâribuã
(
homogøphyMëa
, 
VX_MATRIX_ATTRIBUTE_TYPE
, &
homogøphyTy≥
, (homographyType));

198 
	`vxSëMëaF‹m©Aâribuã
(
homogøphyMëa
, 
VX_MATRIX_ATTRIBUTE_ROWS
, &
homogøphyRows
, (homographyRows));

199 
	`vxSëMëaF‹m©Aâribuã
(
homogøphyMëa
, 
VX_MATRIX_ATTRIBUTE_COLUMNS
, &
homogøphyCﬁs
, (homographyCols));

201  
°©us
;

202 
	}
}

205 
vx_°©us
 
	$ªgi°îHomogøphyFûãrKî√l
(
vx_c⁄ãxt
 
c⁄ãxt
)

207 
vx_°©us
 
°©us
 = 
VX_SUCCESS
;

209 
vx_íum
 
id
;

210 
°©us
 = 
	`vxAŒoˇãU£rKî√lId
(
c⁄ãxt
, &
id
);

211 i‡(
°©us
 !
VX_SUCCESS
)

213 
	`vxAddLogE¡ry
((
vx_ª„ªn˚
)
c⁄ãxt
, 
°©us
, "[%s:%u] FailedÅoállocateán ID forÅhe HomographyFilter kernel",

214 
__FUNCTION__
, 
__LINE__
);

215  
°©us
;

218 
vx_kî√l
 
kî√l
 = 
	`vxAddU£rKî√l
(
c⁄ãxt
, 
KERNEL_HOMOGRAPHY_FILTER_NAME
,

219 
id
,

220 
homogøphyFûãr_kî√l
,

222 
homogøphyFûãr_vÆid©e
,

223 
NULL
,

224 
NULL


227 
°©us
 = 
	`vxGëSètus
((
vx_ª„ªn˚
)
kî√l
);

228 i‡(
°©us
 !
VX_SUCCESS
)

230 
	`vxAddLogE¡ry
((
vx_ª„ªn˚
)
c⁄ãxt
, 
°©us
, "[%s:%u] FaûedÅÿ¸óã HomogøphyFûã∏Kî√l", 
__FUNCTION__
, 
__LINE__
);

231  
°©us
;

234 
°©us
 |
	`vxAddP¨amëîToKî√l
(
kî√l
, 0, 
VX_INPUT
, 
VX_TYPE_MATRIX
, 
VX_PARAMETER_STATE_REQUIRED
);

235 
°©us
 |
	`vxAddP¨amëîToKî√l
(
kî√l
, 1, 
VX_OUTPUT
, 
VX_TYPE_MATRIX
, 
VX_PARAMETER_STATE_REQUIRED
);

236 
°©us
 |
	`vxAddP¨amëîToKî√l
(
kî√l
, 2, 
VX_INPUT
, 
VX_TYPE_IMAGE
, 
VX_PARAMETER_STATE_REQUIRED
);

237 
°©us
 |
	`vxAddP¨amëîToKî√l
(
kî√l
, 3, 
VX_INPUT
, 
VX_TYPE_ARRAY
, 
VX_PARAMETER_STATE_REQUIRED
);

239 i‡(
°©us
 !
VX_SUCCESS
)

241 
	`vxRñó£Kî√l
(&
kî√l
);

242 
	`vxAddLogE¡ry
((
vx_ª„ªn˚
)
c⁄ãxt
, 
°©us
, "[%s:%u] FaûedÅÿöôülizêHomogøphyFûã∏Kî√»∑ømëîs", 
__FUNCTION__
, 
__LINE__
);

243  
VX_FAILURE
;

246 
°©us
 = 
	`vxFöÆizeKî√l
(
kî√l
);

247 
	`vxRñó£Kî√l
(&
kî√l
);

249 i‡(
°©us
 !
VX_SUCCESS
)

251 
	`vxAddLogE¡ry
((
vx_ª„ªn˚
)
c⁄ãxt
, 
°©us
, "[%s:%u] FaûedÅÿföÆizêHomogøphyFûã∏Kî√l", 
__FUNCTION__
, 
__LINE__
);

252  
VX_FAILURE
;

255  
°©us
;

256 
	}
}

259 
vx_node
 
	$homogøphyFûãrNode
(
vx_gøph
 
gøph
, 
vx_m©rix
 
öput
, vx_m©rix 
homogøphy
, 
vx_image
 
image
, 
vx_¨øy
 
mask
)

261 
vx_node
 
node
 = 
NULL
;

263 
vx_kî√l
 
kî√l
 = 
	`vxGëKî√lByName
(
	`vxGëC⁄ãxt
((
vx_ª„ªn˚
)
gøph
), 
KERNEL_HOMOGRAPHY_FILTER_NAME
);

265 i‡(
	`vxGëSètus
((
vx_ª„ªn˚
)
kî√l
Ë=
VX_SUCCESS
)

267 
node
 = 
	`vxCª©eGíîicNode
(
gøph
, 
kî√l
);

268 
	`vxRñó£Kî√l
(&
kî√l
);

270 i‡(
	`vxGëSètus
((
vx_ª„ªn˚
)
node
Ë=
VX_SUCCESS
)

272 
	`vxSëP¨amëîByIndex
(
node
, 0, (
vx_ª„ªn˚
)
öput
);

273 
	`vxSëP¨amëîByIndex
(
node
, 1, (
vx_ª„ªn˚
)
homogøphy
);

274 
	`vxSëP¨amëîByIndex
(
node
, 2, (
vx_ª„ªn˚
)
image
);

275 
	`vxSëP¨amëîByIndex
(
node
, 3, (
vx_ª„ªn˚
)
mask
);

279  
node
;

280 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/main_video_stabilizer.cpp

29 
	~<io°ªam
>

30 
	~<s°ªam
>

31 
	~<iom™ù
>

32 
	~<°rög
>

33 
	~<mem‹y
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/sysˇŒ.h
>

36 
	~<uni°d.h
>

38 
	~<NVX/nvx.h
>

39 
	~<NVX/nvx_timî.hµ
>

41 
	~<NVX/Aµliˇti⁄.hµ
>

42 
	~<OVX/FømeSour˚OVX.hµ
>

43 
	~<OVX/RídîOVX.hµ
>

44 
	~<NVX/SyncTimî.hµ
>

45 
	~<OVX/UtûôyOVX.hµ
>

47 
	~"°abûizî.hµ
"

50 
	~<libøry_öãrÁ˚.h
>

52 
	sEvítD©a


54 
EvítD©a
(): 
shouldSt›
(
Ál£
), 
∑u£
(false) {}

55 
boﬁ
 
	mshouldSt›
;

56 
boﬁ
 
	m∑u£
;

61 
vx_image
 
	mdemoImg
;

62 
vx_image
 
	mÀ·Roi
;

63 
vx_image
 
	mrightRoi
;

64 
vx_image
 
	m‰ame
;

65 
vx_image
 
	mœ°Føme
;

66 
vx_dñay
 
	m‹ig_‰ame_dñay
;

67 
	movxio
::
C⁄ãxtGu¨d
 *
c⁄ãxt
;

68 
	m°d
::
unique_±r
<
ovxio
::
FømeSour˚
> 
sour˚
;

69 
	m°d
::
unique_±r
<
ovxio
::
Rídî
> 
ªndîî
;

70 
EvítD©a
 
	mevítD©a
;

71 
	mnvx
::
VideoSèbûizî
 *
°abûizî
;

72 } 
	tBíchm¨kSèã
;

74 
	$evítCÆlback
(* 
evítD©a
, 
vx_ch¨
 
key
, 
vx_uöt32
, vx_uint32)

76 
EvítD©a
* 
d©a
 = 
°©ic_ˇ°
<EvítD©a*>(
evítD©a
);

78 i‡(
key
 == 27)

80 
d©a
->
shouldSt›
 = 
åue
;

82 i‡(
key
 == 32)

84 
d©a
->
∑u£
 = !data->pause;

86 
	}
}

88 
	$di•œySèã
(
ovxio
::
Rídî
 *
ªndîî
,

89 c⁄° 
ovxio
::
FømeSour˚
::
P¨amëîs
 &
sour˚P¨ams
,

90 
¥oc_ms
, 
tŸÆ_ms
, 
¸›M¨gö
)

92 
vx_uöt32
 
ªndîWidth
 = 
ªndîî
->
	`gëVõwp‹tWidth
();

94 
°d
::
o°rög°ªam
 
txt
;

95 
txt
 << 
°d
::
fixed
 << std::
	`£çªcisi⁄
(1);

97 c⁄° 
vx_öt32
 
b‹dîSize
 = 10;

98 
ovxio
::
Rídî
::
TextBoxStyÀ
 
°yÀ
 = {{255, 255, 255, 255}, {0, 0, 0, 127}, {
ªndîWidth
 / 2 + 
b‹dîSize
, borderSize}};

100 
txt
 << "Sour˚ size: " << 
sour˚P¨ams
.
‰ameWidth
 << 'x' << sour˚P¨ams.
‰ameHeight
 << 
°d
::
ídl
;

101 
txt
 << "Alg‹ôhm: " << 
¥oc_ms
 << " m†/ " << 1000.0 /Öroc_m†<< " FPS" << 
°d
::
ídl
;

102 
txt
 << "Di•œy: " << 
tŸÆ_ms
 << " m†/ " << 1000.0 /ÅŸÆ_m†<< " FPS" << 
°d
::
ídl
;

104 
txt
 << 
°d
::
	`£çªcisi⁄
(6);

105 
txt
.
	`un£tf
(
°d
::
ios_ba£
::
Êﬂtfõld
);

106 
txt
 << "LIMITED TO " << 
nvxio
::
Aµliˇti⁄
::
	`gë
().
	`gëFPSLimô
(Ë<< " FPS FOR DISPLAY" << 
°d
::
ídl
;

107 
txt
 << "S∑˚ -Öau£/ªsume" << 
°d
::
ídl
;

108 
txt
 << "Esc - closeÅhe demo";

109 
ªndîî
->
	`putTextVõwp‹t
(
txt
.
	`°r
(), 
°yÀ
);

111 c⁄° 
vx_öt32
 
°abûizedLabñLíght
 = 100;

112 
°yÀ
.
‹igö
.
x
 = 
ªndîWidth
 - 
°abûizedLabñLíght
;

113 
°yÀ
.
‹igö
.
y
 = 
b‹dîSize
;

114 
ªndîî
->
	`putTextVõwp‹t
("°abûized", 
°yÀ
);

116 
°yÀ
.
‹igö
.
x
 = 
ªndîWidth
 / 2 - 
°abûizedLabñLíght
;

117 
ªndîî
->
	`putTextVõwp‹t
("‹igöÆ", 
°yÀ
);

119 i‡(
¸›M¨gö
 > 0)

121 
vx_uöt32
 
dx
 = 
°©ic_ˇ°
<vx_uöt32>(
¸›M¨gö
 * 
sour˚P¨ams
.
‰ameWidth
);

122 
vx_uöt32
 
dy
 = 
°©ic_ˇ°
<vx_uöt32>(
¸›M¨gö
 * 
sour˚P¨ams
.
‰ameHeight
);

123 
vx_ª˘™gÀ_t
 
ª˘
 = {
dx
, 
dy
, 
sour˚P¨ams
.
‰ameWidth
 - dx, sour˚P¨ams.
‰ameHeight
 - dy};

125 
ovxio
::
Rídî
::
Dëe˘edObje˘StyÀ
 
ª˘StyÀ
 = {{""}, {255, 255, 255, 255}, 2, 0, 
Ál£
};

126 
ªndîî
->
	`putObje˘Loˇti⁄
(
ª˘
, 
ª˘StyÀ
);

128 
	}
}

130 
	$CÀ™up
(*
d©a
) {

131 
Bíchm¨kSèã
 *
°©e
 = (Bíchm¨kSèã *)
d©a
;

132 i‡(
°©e
->
‹ig_‰ame_dñay
Ë
	`vxRñó£Dñay
(&state->orig_frame_delay);

133 i‡(
°©e
->
ªndîî
)

135 
°©e
->
ªndîî
->
	`˛o£
();

136 
dñëe
 
°©e
->
ªndîî
.
	`gë
();

138 i‡(
°©e
->
sour˚
Ë
dñëe
 sèã->sour˚.
	`gë
();

139 i‡(
°©e
->
demoImg
Ë
	`vxRñó£Image
(&state->demoImg);

140 i‡(
°©e
->
À·Roi
Ë
	`vxRñó£Image
(&state->leftRoi);

141 i‡(
°©e
->
rightRoi
Ë
	`vxRñó£Image
(&state->rightRoi);

142 i‡(
°©e
->
c⁄ãxt
Ë
dñëe
 state->context;

143 i‡(
°©e
->
°abûizî
Ë
dñëe
 state->stabilizer;

144 
	`mem£t
(
°©e
, 0, (*state));

145 
	`‰ì
(
°©e
);

146 
	}
}

148 * 
	$Inôülize
(
Inôüliz©i⁄P¨amëîs
 *
∑øms
) {

149 
Bíchm¨kSèã
 *
°©e
 = 
NULL
;

150 
°©e
 = (
Bíchm¨kSèã
 *Ë
	`mÆloc
((*state));

151 i‡(!
°©e
Ë 
NULL
;

152 
	`mem£t
(
°©e
, 0, (*state));

154 
nvxio
::
Aµliˇti⁄
 &
≠p
 =Çvxio::Aµliˇti⁄::
	`gë
();

157 
°d
::
°rög
 
videoFûeP©h
 = 
≠p
.
	`födSam∂eFûeP©h
("parking.avi");

158 
numOfSmoŸhögFømes
 = 5;

159 
¸›M¨gö
 = 0.07f;

161 
≠p
.
	`öô
(1, 
NULL
);

164 
°©e
->
c⁄ãxt
 = 
√w
 
ovxio
::
C⁄ãxtGu¨d
;

165 
	`vxRegi°îLogCÆlback
(*(
°©e
->
c⁄ãxt
), &
ovxio
::
°doutLogCÆlback
, 
vx_Ál£_e
);

166 
	`vxDúe˘ive
(*(
°©e
->
c⁄ãxt
), 
VX_DIRECTIVE_ENABLE_PERFORMANCE
);

169 
°©e
->
sour˚
 = 
ovxio
::
	`¸óãDeÁu…FømeSour˚
(*(°©e->
c⁄ãxt
), 
videoFûeP©h
);

171 i‡(!
°©e
->
sour˚
 || !°©e->sour˚->
	`›í
())

173 
°d
::
˚º
 << "Eº‹: C™'à›í sèã->sour˚ fûe: " << 
videoFûeP©h
 << std::
ídl
;

174  
NULL
;

177 i‡(
°©e
->
sour˚
->
	`gëSour˚Ty≥
(Ë=
ovxio
::
FømeSour˚
::
SINGLE_IMAGE_SOURCE
)

179 
°d
::
˚º
 << "Eº‹: C™'àw‹k o¿®sögÀ image." << std::
ídl
;

180  
NULL
;

183 
ovxio
::
FømeSour˚
::
P¨amëîs
 
sour˚P¨ams
 = 
°©e
->
sour˚
->
	`gëC⁄figuøti⁄
();

185 
vx_öt32
 
demoImgWidth
 = 2 * 
sour˚P¨ams
.
‰ameWidth
;

186 
vx_öt32
 
demoImgHeight
 = 
sour˚P¨ams
.
‰ameHeight
;

188 
°©e
->
ªndîî
 = 
ovxio
::
	`¸óãDeÁu…Rídî
(*(°©e->
c⁄ãxt
), "VideÿSèbûiz©i⁄ Demo", 
demoImgWidth
, 
demoImgHeight
);

190 i‡(!
°©e
->
ªndîî
)

192 
°d
::
˚º
 << "Eº‹: C™'à¸óãá sèã->ªndîî" << std::
ídl
;

193  
NULL
;

196 
°©e
->
evítD©a
 = 
	`EvítD©a
();

197 
°©e
->
ªndîî
->
	`£tOnKeybﬂrdEvítCÆlback
(
evítCÆlback
, &°©e->
evítD©a
);

200 
°©e
->
demoImg
 = 
	`vxCª©eImage
(*(°©e->
c⁄ãxt
), 
demoImgWidth
, 
demoImgHeight
, 
VX_DF_IMAGE_RGBX
);

201 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
demoImg
);

203 
vx_image
 
‰ameExem∂¨
 = 
	`vxCª©eImage
(*(
°©e
->
c⁄ãxt
), 
sour˚P¨ams
.
‰ameWidth
, sour˚P¨ams.
‰ameHeight
, 
VX_DF_IMAGE_RGBX
);

204 
vx_size
 
‹ig_‰ame_dñay_size
 = 
numOfSmoŸhögFømes
 + 2;

205 
°©e
->
‹ig_‰ame_dñay
 = 
	`vxCª©eDñay
(*(°©e->
c⁄ãxt
), (
vx_ª„ªn˚
)
‰ameExem∂¨
, 
‹ig_‰ame_dñay_size
);

206 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
‹ig_‰ame_dñay
);

207 
	`NVXIO_SAFE_CALL
–
nvx
::
	`öôDñayOfImages
(*(
°©e
->
c⁄ãxt
), sèã->
‹ig_‰ame_dñay
) );

208 
	`NVXIO_SAFE_CALL
(
	`vxRñó£Image
(&
‰ameExem∂¨
));

210 
°©e
->
‰ame
 = (
vx_image
)
	`vxGëRe„ªn˚FromDñay
(°©e->
‹ig_‰ame_dñay
, 0);

211 
°©e
->
œ°Føme
 = (
vx_image
)
	`vxGëRe„ªn˚FromDñay
(°©e->
‹ig_‰ame_dñay
, 1 - 
°©ic_ˇ°
<
vx_öt32
>(
‹ig_‰ame_dñay_size
));

214 
nvx
::
VideoSèbûizî
::
VideoSèbûizîP¨ams
 
vs_∑øms
;

215 
vs_∑øms
.
numOfSmoŸhögFømes_
 = 
numOfSmoŸhögFømes
;

216 
vs_∑øms
.
¸›M¨gö_
 = 
¸›M¨gö
;

217 
°©e
->
°abûizî
 = 
nvx
::
VideoSèbûizî
::
	`¸óãImageBa£dVSèb
(*(°©e->
c⁄ãxt
), 
vs_∑øms
);

219 
ovxio
::
FømeSour˚
::
FømeSètus
 
‰ameSètus
;

223 
‰ameSètus
 = 
°©e
->
sour˚
->
	`„tch
(°©e->
‰ame
);

224 } 
‰ameSètus
 =
ovxio
::
FømeSour˚
::
TIMEOUT
);

226 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
CLOSED
)

228 
°d
::
˚º
 << "Eº‹: Sour˚ ha†nÿ‰ames" << std::
ídl
;

229  
NULL
;

232 
°©e
->
°abûizî
->
	`öô
(°©e->
‰ame
);

234 
vx_ª˘™gÀ_t
 
À·Re˘
;

235 
	`NVXIO_SAFE_CALL
–
	`vxGëVÆidRegi⁄Image
(
°©e
->
‰ame
, &
À·Re˘
) );

237 
vx_ª˘™gÀ_t
 
rightRe˘
;

238 
rightRe˘
.
°¨t_x
 = 
À·Re˘
.
íd_x
;

239 
rightRe˘
.
°¨t_y
 = 
À·Re˘
.start_y;

240 
rightRe˘
.
íd_x
 = 2 * 
À·Re˘
.end_x;

241 
rightRe˘
.
íd_y
 = 
À·Re˘
.end_y;

243 
°©e
->
À·Roi
 = 
	`vxCª©eImageFromROI
(°©e->
demoImg
, &
À·Re˘
);

244 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
À·Roi
);

245 
°©e
->
rightRoi
 = 
	`vxCª©eImageFromROI
(°©e->
demoImg
, &
rightRe˘
);

246 
	`NVXIO_CHECK_REFERENCE
(
°©e
->
rightRoi
);

248  
°©e
;

249 
	}
}

251 
	$C›yIn
(*
d©a
) {

253 
	}
}

257 
	$Execuã
(*
d©a
)

259 
åy


261 
Bíchm¨kSèã
 *
°©e
 = (Bíchm¨kSèã *)
d©a
;

262 
ovxio
::
FømeSour˚
::
FømeSètus
 
‰ameSètus
;

263 
lo›
:

265 i‡(!
°©e
->
evítD©a
.
∑u£
)

268 
°©e
->
°abûizî
->
	`¥o˚ss
(°©e->
‰ame
);

270 
	`NVXIO_SAFE_CALL
–
	`vxAgeDñay
(
°©e
->
‹ig_‰ame_dñay
) );

272 
vx_image
 
°abImg
 = 
°©e
->
°abûizî
->
	`gëSèbûizedFøme
();

273 
	`NVXIO_SAFE_CALL
–
	`nvxuC›yImage
(*(
°©e
->
c⁄ãxt
), 
°abImg
, sèã->
rightRoi
) );

274 
	`NVXIO_SAFE_CALL
–
	`nvxuC›yImage
(*(
°©e
->
c⁄ãxt
), sèã->
œ°Føme
, sèã->
À·Roi
) );

277 
‰ameSètus
 = 
°©e
->
sour˚
->
	`„tch
(°©e->
‰ame
);

279 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
TIMEOUT
)

280 
lo›
;

281 i‡(
‰ameSètus
 =
ovxio
::
FømeSour˚
::
CLOSED
)

283 i‡(!
°©e
->
sour˚
->
	`›í
())

285 
°d
::
˚º
 << "Eº‹: FaûedÅÿª›íÅhê°©e->sour˚" << std::
ídl
;

291 
°©e
->
ªndîî
->
	`putImage
(°©e->
demoImg
);

293 i‡(!
°©e
->
ªndîî
->
	`Êush
())

295 
°©e
->
evítD©a
.
shouldSt›
 = 
åue
;

298 
	`ˇtch
 (c⁄° 
°d
::
ex˚±i⁄
& 
e
)

300 
°d
::
˚º
 << "Eº‹: " << 
e
.
	`wh©
(Ë<< std::
ídl
;

305 
	}
}

307 
	$C›yOut
(*
d©a
, 
TimögInf‹m©i⁄
 *
times
) {

308 
times
->
kî√l_cou¡
 = 0;

310 
	}
}

312 c⁄° * 
	$GëName
() {

314 
	}
}

318 
	$Regi°îFun˘i⁄s
(
Bíchm¨kLibøryFun˘i⁄s
 *
fun˘i⁄s
) {

319 
fun˘i⁄s
->
öôülize
 = 
Inôülize
;

320 
fun˘i⁄s
->
c›y_ö
 = 
C›yIn
;

321 
fun˘i⁄s
->
execuã
 = 
Execuã
;

322 
fun˘i⁄s
->
c›y_out
 = 
C›yOut
;

323 
fun˘i⁄s
->
˛ónup
 = 
CÀ™up
;

324 
fun˘i⁄s
->
gë_«me
 = 
GëName
;

326 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/smoother_node.cpp

29 
	~"v°ab_nodes.hµ
"

31 
	~<ve˘‹
>

33 c⁄° 
	gKERNEL_MATRIX_SMOOTHER_NAME
[
VX_MAX_KERNEL_NAME
] = "example.nvx.matrix_smoother";

39 
M©rix3x3f_rm
 
gëTønsf‹m©i⁄
(c⁄° 
°d
::
ve˘‹
<M©rix3x3f_rm>& 
m©s
, 
vx_öt32
 
‰om
, vx_öt32 
to
)

41 
M©rix3x3f_rm
 
	gM
 = M©rix3x3f_rm::
Idítôy
();

43 i‡(
	gto
 > 
	g‰om
)

45 
vx_öt32
 
	gi
 = 
‰om
; i < 
	gto
; ++i)

46 
	gM
 = 
M
 * 
m©s
[
i
];

48 i‡(
	gto
 < 
	g‰om
)

50 
vx_öt32
 
	gi
 = 
to
; i < 
	g‰om
; ++i)

51 
	gM
 = 
M
 * 
m©s
[
i
];

53 
	gM
 = 
M©rix3x3f_rm
(
M
.
övî£
());

56  
	gM
;

59 
gëCom≥nßtögTønsf‹m©i⁄
(c⁄° 
°d
::
ve˘‹
<
vx_m©rix
>& 
å™sf‹ms
, 
vx_öt32
 
idx
,

60 
vx_öt32
 
smoŸhögWödow
, 
vx_m©rix
 
å™sf‹m
)

62 
vx_öt32
 
	gnum
 = 
°©ic_ˇ°
<vx_öt32>(
å™sf‹ms
.
size
());

64 
	g°d
::
ve˘‹
<
vx_Êﬂt32
> 
gaussWeights
(
num
);

65 
vx_Êﬂt32
 
	gsigma
 = 
smoŸhögWödow
 * 0.7f;

66 
vx_öt32
 
	gi
 = -
smoŸhögWödow
; i < 
	gnum
-
	gsmoŸhögWödow
; ++i)

68 
	ggaussWeights
[
i
+
smoŸhögWödow
] = 
exp
–- i * i / (2.‡* 
sigma
 * sigma) );

71 
vx_Êﬂt32
 
	gsum
 = 0.0f;

72 
vx_öt32
 
	gi
 = 0; i < 
	gnum
; ++i)

73 
	gsum
 +
gaussWeights
[
i
];

75 
vx_öt32
 
	gi
 = 0; i < 
	gnum
; ++i)

76 
	ggaussWeights
[
i
] /
sum
;

78 
	g°d
::
ve˘‹
<
M©rix3x3f_rm
> 
m©s
;

79 
	gm©s
.
ª£rve
(
num
);

81 
vx_Êﬂt32
 
	gd©a
[9];

82 
vx_öt32
 
	gi
 = 0; i < 
	gnum
; ++i)

84 
vxC›yM©rix
(
å™sf‹ms
[
i
], 
d©a
, 
VX_READ_ONLY
, 
VX_MEMORY_TYPE_HOST
);

85 
	gm©s
.
push_back
–
M©rix3x3f_rm
::
M≠
(
d©a
, 3, 3) );

88 
M©rix3x3f_rm
 
	gavg
 = M©rix3x3f_rm::
Zîo
();

89 
vx_öt32
 
	gi
 = 
idx
-
smoŸhögWödow
; i <= idx+smoothingWindow; ++i)

90 
	gavg
 +
gaussWeights
[
i
 - 
idx
 + 
smoŸhögWödow
] * 
gëTønsf‹m©i⁄
(
m©s
, idx, i);

92 
vxC›yM©rix
(
å™sf‹m
, 
avg
.
d©a
(), 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
);

96 
vx_°©us
 
VX_CALLBACK
 
	$m©rixSmoŸhî_kî√l
(
vx_node
, c⁄° 
vx_ª„ªn˚
 *
∑ømëîs
, 
vx_uöt32
)

98 
vx_dñay
 
dñay
 = (vx_dñay)
∑ømëîs
[0];

99 
vx_size
 
numI≈utP¨ams
;

100 
	`vxQuîyDñay
(
dñay
, 
VX_DELAY_ATTRIBUTE_SLOTS
, &
numI≈utP¨ams
, (numInputParams));

102 
°d
::
ve˘‹
<
vx_m©rix
> 
	`m©ri˚s
(
numI≈utP¨ams
);

103 
vx_size
 
i
=0; i<
numI≈utP¨ams
; ++i)

105 
m©ri˚s
[
i
] = (
vx_m©rix
)
	`vxGëRe„ªn˚FromDñay
(
dñay
, i + 1 - (
vx_öt32
)
numI≈utP¨ams
);

108 
vx_m©rix
 
ouçut
 = (vx_m©rix)
∑ømëîs
[1];

110 
vx_öt32
 
smoŸhögWödow
 = 
numI≈utP¨ams
 / 2;

111 
vx_öt32
 
idx
 = 
smoŸhögWödow
;

113 
	`gëCom≥nßtögTønsf‹m©i⁄
(
m©ri˚s
, 
idx
, 
smoŸhögWödow
, 
ouçut
);

115  
VX_SUCCESS
;

116 
	}
}

119 
vx_°©us
 
VX_CALLBACK
 
	$m©rixSmoŸhî_vÆid©e
(
vx_node
, c⁄° 
vx_ª„ªn˚
 
∑ømëîs
[],

120 
vx_uöt32
 
numP¨ams
, 
vx_mëa_f‹m©
 
mëas
[])

122 i‡(
numP¨ams
 !2Ë 
VX_ERROR_INVALID_PARAMETERS
;

124 
vx_dñay
 
m©ri˚s
 = (vx_dñay)
∑ømëîs
[0];

126 
vx_íum
 
m©ri˚sTy≥
 = 
VX_TYPE_INVALID
;

127 
	`vxQuîyDñay
(
m©ri˚s
, 
VX_DELAY_ATTRIBUTE_TYPE
, &
m©ri˚sTy≥
, (matricesType));

129 
vx_°©us
 
°©us
 = 
VX_SUCCESS
;

131 i‡(
m©ri˚sTy≥
 =
VX_TYPE_MATRIX
)

133 
vx_m©rix
 
m©rix
 = (vx_m©rix)
	`vxGëRe„ªn˚FromDñay
(
m©ri˚s
, 0);

134 
vx_íum
 
ty≥
 = 0;

135 
	`vxQuîyM©rix
(
m©rix
, 
VX_MATRIX_ATTRIBUTE_TYPE
, &
ty≥
, (type));

136 
vx_size
 
cﬁs
 = 0, 
rows
 = 0;

137 
	`vxQuîyM©rix
(
m©rix
, 
VX_MATRIX_ATTRIBUTE_COLUMNS
, &
cﬁs
, (cols));

138 
	`vxQuîyM©rix
(
m©rix
, 
VX_MATRIX_ATTRIBUTE_ROWS
, &
rows
, (rows));

140 i‡(
ty≥
 !
VX_TYPE_FLOAT32
 || 
cﬁs
 !3 || 
rows
 != 3)

142 
°©us
 = 
VX_ERROR_INVALID_PARAMETERS
;

147 
°©us
 = 
VX_ERROR_INVALID_TYPE
;

150 
vx_mëa_f‹m©
 
smoŸhedMëa
 = 
mëas
[1];

152 
vx_íum
 
smoŸhedTy≥
 = 
VX_TYPE_FLOAT32
;

153 
vx_size
 
smoŸhedCﬁs
 = 3, 
smoŸhedRows
 = 3;

155 
	`vxSëMëaF‹m©Aâribuã
(
smoŸhedMëa
, 
VX_MATRIX_ATTRIBUTE_TYPE
, &
smoŸhedTy≥
, (smoothedType) );

156 
	`vxSëMëaF‹m©Aâribuã
(
smoŸhedMëa
, 
VX_MATRIX_ATTRIBUTE_ROWS
, &
smoŸhedRows
, (smoothedRows) );

157 
	`vxSëMëaF‹m©Aâribuã
(
smoŸhedMëa
, 
VX_MATRIX_ATTRIBUTE_COLUMNS
, &
smoŸhedCﬁs
, (smoothedCols) );

159  
°©us
;

160 
	}
}

163 
vx_°©us
 
	$ªgi°îM©rixSmoŸhîKî√l
(
vx_c⁄ãxt
 
c⁄ãxt
)

165 
vx_°©us
 
°©us
 = 
VX_SUCCESS
;

167 
vx_íum
 
id
;

168 
°©us
 = 
	`vxAŒoˇãU£rKî√lId
(
c⁄ãxt
, &
id
);

169 i‡(
°©us
 !
VX_SUCCESS
)

171 
	`vxAddLogE¡ry
((
vx_ª„ªn˚
)
c⁄ãxt
, 
°©us
, "[%s:%u] FailedÅoállocateán ID forÅhe MatrixSmoother kernel",

172 
__FUNCTION__
, 
__LINE__
);

173  
°©us
;

176 
vx_kî√l
 
kî√l
 = 
	`vxAddU£rKî√l
(
c⁄ãxt
, 
KERNEL_MATRIX_SMOOTHER_NAME
,

177 
id
,

178 
m©rixSmoŸhî_kî√l
,

180 
m©rixSmoŸhî_vÆid©e
,

181 
NULL
,

182 
NULL


185 
°©us
 = 
	`vxGëSètus
((
vx_ª„ªn˚
)
kî√l
);

186 i‡(
°©us
 !
VX_SUCCESS
)

188 
	`vxAddLogE¡ry
((
vx_ª„ªn˚
)
c⁄ãxt
, 
°©us
, "[%s:%u] FaûedÅÿ¸óã M©rixSmoŸhî Kî√l", 
__FUNCTION__
, 
__LINE__
);

189  
°©us
;

192 
°©us
 |
	`vxAddP¨amëîToKî√l
(
kî√l
, 0, 
VX_INPUT
, 
VX_TYPE_DELAY
, 
VX_PARAMETER_STATE_REQUIRED
);

193 
°©us
 |
	`vxAddP¨amëîToKî√l
(
kî√l
, 1, 
VX_OUTPUT
, 
VX_TYPE_MATRIX
, 
VX_PARAMETER_STATE_REQUIRED
);

195 i‡(
°©us
 !
VX_SUCCESS
)

197 
	`vxRñó£Kî√l
(&
kî√l
);

198 
	`vxAddLogE¡ry
((
vx_ª„ªn˚
)
c⁄ãxt
, 
°©us
, "[%s:%u] FaûedÅÿöôülizêM©rixSmoŸhî Kî√»∑ømëîs", 
__FUNCTION__
, 
__LINE__
);

199  
VX_FAILURE
;

202 
°©us
 = 
	`vxFöÆizeKî√l
(
kî√l
);

203 
	`vxRñó£Kî√l
(&
kî√l
);

205 i‡(
°©us
 !
VX_SUCCESS
)

207 
	`vxAddLogE¡ry
((
vx_ª„ªn˚
)
c⁄ãxt
, 
°©us
, "[%s:%u] FaûedÅÿföÆizêM©rixSmoŸhî Kî√l", 
__FUNCTION__
, 
__LINE__
);

208  
VX_FAILURE
;

211  
°©us
;

212 
	}
}

215 
vx_node
 
	$m©rixSmoŸhîNode
(
vx_gøph
 
gøph
, 
vx_dñay
 
m©ri˚s
, 
vx_m©rix
 
smoŸhed
)

217 
vx_node
 
node
 = 
NULL
;

219 
vx_kî√l
 
kî√l
 = 
	`vxGëKî√lByName
(
	`vxGëC⁄ãxt
((
vx_ª„ªn˚
)
gøph
), 
KERNEL_MATRIX_SMOOTHER_NAME
);

221 i‡(
	`vxGëSètus
((
vx_ª„ªn˚
)
kî√l
Ë=
VX_SUCCESS
)

223 
node
 = 
	`vxCª©eGíîicNode
(
gøph
, 
kî√l
);

224 
	`vxRñó£Kî√l
(&
kî√l
);

226 i‡(
	`vxGëSètus
((
vx_ª„ªn˚
)
node
Ë=
VX_SUCCESS
)

228 
	`vxSëP¨amëîByIndex
(
node
, 0, (
vx_ª„ªn˚
)
m©ri˚s
);

229 
	`vxSëP¨amëîByIndex
(
node
, 1, (
vx_ª„ªn˚
)
smoŸhed
);

233  
node
;

234 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/stabilizer.cpp

29 
	~"°abûizî.hµ
"

31 
	~<˛imôs
>

32 
	~<cÊﬂt
>

33 
	~<io°ªam
>

34 
	~<iom™ù
>

36 
	~<VX/vxu.h
>

37 
	~<NVX/nvx.h
>

39 
	~<OVX/UtûôyOVX.hµ
>

41 
	~"v°ab_nodes.hµ
"

43 
	g«me•a˚


45 ˛as†
	cImageBa£dVideoSèbûizî
 : 
public
 
nvx
::
VideoSèbûizî


47 
public
:

48 
ImageBa£dVideoSèbûizî
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
VideoSèbûizîP¨ams
& 
∑øms
);

49 ~
ImageBa£dVideoSèbûizî
();

51 
öô
(
vx_image
 
fú°Føme
);

52 
¥o˚ss
(
vx_image
 
√wFøme
);

54 
vx_image
 
gëSèbûizedFøme
() const;

56 
¥ötPîfs
() const;

58 
	g¥iv©e
:

60 
	sH¨risPyrLKP¨ams


62 
vx_size
 
pyr_Àvñs
;

64 
vx_Êﬂt32
 
	gh¨ris_k
;

65 
vx_Êﬂt32
 
	gh¨ris_thªsh
;

66 
vx_uöt32
 
	gh¨ris_˚Œ_size
;

68 
vx_uöt32
 
	glk_num_ôîs
;

69 
vx_size
 
	glk_wö_size
;

71 
H¨risPyrLKP¨ams
();

74 
¥o˚ssFú°Føme
(
vx_image
 
‰ame
);

75 
¸óãMaöGøph
(
vx_image
 
‰ame
);

77 
¸óãD©aObje˘s
(
vx_image
 
‰ame
);

78 
ªÀa£
();

80 
VideoSèbûizîP¨ams
 
	gv°abP¨ams_
;

81 
H¨risPyrLKP¨ams
 
	gh¨risP¨ams_
;

83 
vx_gøph
 
	ggøph_
;

84 
vx_c⁄ãxt
 
	gc⁄ãxt_
;

87 
vx_df_image
 
	gf‹m©_
;

88 
vx_uöt32
 
	gwidth_
;

89 
vx_uöt32
 
	gheight_
;

92 
vx_node
 
	gc⁄vît_to_gøy_node_
;

93 
vx_node
 
	gc›y_node_
;

94 
vx_node
 
	gpyr_node_
;

95 
vx_node
 
	g›t_Êow_node_
;

96 
vx_node
 
	g„©uª_åack_node_
;

97 
vx_node
 
	gföd_homogøphy_node_
;

98 
vx_node
 
	ghomogøphy_fûãr_node_
;

99 
vx_node
 
	gm©rix_smoŸhî_node_
;

100 
vx_node
 
	gåunˇã_°ab_å™sf‹m_node_
;

101 
vx_node
 
	gw¨p_≥r•e˘ive_node_
;

103 
vx_dñay
 
	gpyr_dñay_
;

104 
vx_dñay
 
	g±s_dñay_
;

105 
vx_dñay
 
	gm©ri˚s_dñay_
;

106 
vx_dñay
 
	g‰ames_RGBX_dñay_
;

108 
vx_m©rix
 
	gsmoŸhed_
;

110 
vx_image
 
	g°abûized_RGBX_‰ame_
;

112 
vx_sˇœr
 
	gs_lk_ïsû⁄_
;

113 
vx_sˇœr
 
	gs_lk_num_ôîs_
;

114 
vx_sˇœr
 
	gs_lk_u£_öô_e°_
;

115 
vx_sˇœr
 
	gs_¸›_m¨gö_
;

117 
vx_size
 
	gm©ri˚s_dñay_size_
;

118 
vx_size
 
	g‰ames_dñay_size_
;

121 
	gImageBa£dVideoSèbûizî
::
	$ImageBa£dVideoSèbûizî
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
VideoSèbûizîP¨ams
 &
∑øms
):

122 
	$v°abP¨ams_
(
∑øms
)

124 
c⁄ãxt_
 = 
c⁄ãxt
;

125 
gøph_
 = 0;

127 
f‹m©_
 = 
VX_DF_IMAGE_VIRT
;

128 
width_
 = 0;

129 
height_
 = 0;

131 
c⁄vît_to_gøy_node_
 = 0;

132 
c›y_node_
 = 0;

133 
pyr_node_
 = 0;

134 
›t_Êow_node_
 = 0;

135 
„©uª_åack_node_
 = 0;

136 
föd_homogøphy_node_
 = 0;

137 
homogøphy_fûãr_node_
 = 0;

138 
m©rix_smoŸhî_node_
 = 0;

139 
åunˇã_°ab_å™sf‹m_node_
 = 0;

140 
w¨p_≥r•e˘ive_node_
 = 0;

142 
pyr_dñay_
 = 0;

143 
±s_dñay_
 = 0;

144 
m©ri˚s_dñay_
 = 0;

145 
‰ames_RGBX_dñay_
 = 0;

147 
smoŸhed_
 = 0;

148 
°abûized_RGBX_‰ame_
 = 0;

150 
s_lk_ïsû⁄_
 = 0;

151 
s_lk_num_ôîs_
 = 0;

152 
s_lk_u£_öô_e°_
 = 0;

153 
s_¸›_m¨gö_
 = 0;

155 
m©ri˚s_dñay_size_
 = 0;

156 
‰ames_dñay_size_
 = 0;

157 
	}
}

159 
	gImageBa£dVideoSèbûizî
::
	$öô
(
vx_image
 
fú°Føme
)

161 
vx_df_image
 
f‹m©
 = 
VX_DF_IMAGE_VIRT
;

162 
vx_uöt32
 
width
 = 0;

163 
vx_uöt32
 
height
 = 0;

165 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
fú°Føme
, 
VX_IMAGE_ATTRIBUTE_FORMAT
, &
f‹m©
, (format)) );

166 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
fú°Føme
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
width
, (width)) );

167 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
fú°Føme
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
height
, (height)) );

169 
	`NVXIO_ASSERT
(
f‹m©
 =
VX_DF_IMAGE_RGBX
);

171 
	`ªÀa£
();

173 
f‹m©_
 = 
f‹m©
;

174 
width_
 = 
width
;

175 
height_
 = 
height
;

177 
	`¸óãD©aObje˘s
(
fú°Føme
);

178 
	`¸óãMaöGøph
(
fú°Føme
);

180 
	`¥o˚ssFú°Føme
(
fú°Føme
);

181 
	}
}

183 
	gImageBa£dVideoSèbûizî
::
	$¥o˚ssFú°Føme
(
vx_image
 
‰ame
)

185 
vx_image
 
gøy
 = 
	`vxCª©eImage
(
c⁄ãxt_
, 
width_
, 
height_
, 
VX_DF_IMAGE_U8
);

186 
	`NVXIO_CHECK_REFERENCE
(
gøy
);

188 
	`NVXIO_SAFE_CALL
–
	`vxuCﬁ‹C⁄vît
(
c⁄ãxt_
, 
‰ame
, 
gøy
) );

189 
	`NVXIO_SAFE_CALL
–
	`nvxuC›yImage
(
c⁄ãxt_
, 
‰ame
, (
vx_image
)
	`vxGëRe„ªn˚FromDñay
(
‰ames_RGBX_dñay_
, 0)) );

191 
	`NVXIO_SAFE_CALL
–
	`vxuGaussünPyømid
(
c⁄ãxt_
, 
gøy
,

192 (
vx_pyømid
)
	`vxGëRe„ªn˚FromDñay
(
pyr_dñay_
, 0)) );

193 
	`NVXIO_SAFE_CALL
–
	`nvxuH¨risTøck
(
c⁄ãxt_
, 
gøy
,

194 (
vx_¨øy
)
	`vxGëRe„ªn˚FromDñay
(
±s_dñay_
, 0), 
NULL
, 0,

195 
h¨risP¨ams_
.
h¨ris_k
, h¨risP¨ams_.
h¨ris_thªsh
, h¨risP¨ams_.
h¨ris_˚Œ_size
, 
NULL
) );

197 
	`vxRñó£Image
(&
gøy
);

198 
	}
}

200 
	gImageBa£dVideoSèbûizî
::
	$¥o˚ss
(
vx_image
 
√wFøme
)

203 
vx_df_image
 
f‹m©
 = 
VX_DF_IMAGE_VIRT
;

204 
vx_uöt32
 
width
 = 0;

205 
vx_uöt32
 
height
 = 0;

207 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
√wFøme
, 
VX_IMAGE_ATTRIBUTE_FORMAT
, &
f‹m©
, (format)) );

208 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
√wFøme
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
width
, (width)) );

209 
	`NVXIO_SAFE_CALL
–
	`vxQuîyImage
(
√wFøme
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
height
, (height)) );

211 
	`NVXIO_ASSERT
(
f‹m©
 =
f‹m©_
);

212 
	`NVXIO_ASSERT
(
width
 =
width_
);

213 
	`NVXIO_ASSERT
(
height
 =
height_
);

216 
	`NVXIO_SAFE_CALL
–
	`vxAgeDñay
(
pyr_dñay_
) );

217 
	`NVXIO_SAFE_CALL
–
	`vxAgeDñay
(
±s_dñay_
) );

218 
	`NVXIO_SAFE_CALL
–
	`vxAgeDñay
(
m©ri˚s_dñay_
) );

219 
	`NVXIO_SAFE_CALL
–
	`vxAgeDñay
(
‰ames_RGBX_dñay_
) );

222 
	`NVXIO_SAFE_CALL
–
	`vxSëP¨amëîByIndex
(
c⁄vît_to_gøy_node_
, 0, (
vx_ª„ªn˚
)
√wFøme
) );

223 
	`NVXIO_SAFE_CALL
–
	`vxSëP¨amëîByIndex
(
c›y_node_
, 0, (
vx_ª„ªn˚
)
√wFøme
) );

225 
	`NVXIO_SAFE_CALL
–
	`vxPro˚ssGøph
(
gøph_
) );

226 
	}
}

228 
	gImageBa£dVideoSèbûizî
::
	$¸óãMaöGøph
(
vx_image
 
‰ame
)

230 
	`NVXIO_SAFE_CALL
–
	`ªgi°îM©rixSmoŸhîKî√l
(
c⁄ãxt_
) );

231 
	`NVXIO_SAFE_CALL
–
	`ªgi°îHomogøphyFûãrKî√l
(
c⁄ãxt_
) );

232 
	`NVXIO_SAFE_CALL
–
	`ªgi°îTrunˇãSèbTønsf‹mKî√l
(
c⁄ãxt_
) );

234 
gøph_
 = 
	`vxCª©eGøph
(
c⁄ãxt_
);

235 
	`NVXIO_CHECK_REFERENCE
(
gøph_
);

237 
vx_image
 
gøy
 = 
	`vxCª©eVútuÆImage
(
gøph_
, 0, 0, 
VX_DF_IMAGE_U8
);

238 
	`NVXIO_CHECK_REFERENCE
(
gøy
);

241 
c⁄vît_to_gøy_node_
 = 
	`vxCﬁ‹C⁄vîtNode
(
gøph_
, 
‰ame
, 
gøy
);

242 
	`NVXIO_CHECK_REFERENCE
(
c⁄vît_to_gøy_node_
);

245 
c›y_node_
 = 
	`nvxC›yImageNode
(
gøph_
, 
‰ame
, (
vx_image
)
	`vxGëRe„ªn˚FromDñay
(
‰ames_RGBX_dñay_
, 0));

246 
	`NVXIO_CHECK_REFERENCE
(
c›y_node_
);

249 
pyr_node_
 = 
	`vxGaussünPyømidNode
(
gøph_
, 
gøy
,

250 (
vx_pyømid
)
	`vxGëRe„ªn˚FromDñay
(
pyr_dñay_
, 0));

251 
	`NVXIO_CHECK_REFERENCE
(
pyr_node_
);

253 
vx_¨øy
 
kp_cuº_li°
 = 
	`vxCª©eVútuÆAºay
(
gøph_
, 
NVX_TYPE_POINT2F
, 1000);

254 
	`NVXIO_CHECK_REFERENCE
(
kp_cuº_li°
);

257 
›t_Êow_node_
 = 
	`vxO±iˇlFlowPyrLKNode
(
gøph_
,

258 (
vx_pyømid
)
	`vxGëRe„ªn˚FromDñay
(
pyr_dñay_
, -1), (vx_pyramid)vxGetReferenceFromDelay(pyr_delay_, 0),

259 (
vx_¨øy
)
	`vxGëRe„ªn˚FromDñay
(
±s_dñay_
, -1), (vx_array)vxGetReferenceFromDelay(pts_delay_, -1),

260 
kp_cuº_li°
, 
VX_TERM_CRITERIA_BOTH
, 
s_lk_ïsû⁄_
, 
s_lk_num_ôîs_
, 
s_lk_u£_öô_e°_
, 
h¨risP¨ams_
.
lk_wö_size
);

261 
	`NVXIO_CHECK_REFERENCE
(
›t_Êow_node_
);

264 
vx_m©rix
 
homogøphy
 = 
	`vxCª©eM©rix
(
c⁄ãxt_
, 
VX_TYPE_FLOAT32
, 3, 3);

265 
vx_¨øy
 
mask
 = 
	`vxCª©eVútuÆAºay
(
gøph_
, 
VX_TYPE_UINT8
, 1000);

266 
föd_homogøphy_node_
 = 
	`nvxFödHomogøphyNode
(
gøph_
, (
vx_¨øy
)
	`vxGëRe„ªn˚FromDñay
(
±s_dñay_
, -1),

267 
kp_cuº_li°
,

268 
homogøphy
,

269 
NVX_FIND_HOMOGRAPHY_METHOD_RANSAC
, 3.0f,

272 
mask
);

273 
	`NVXIO_CHECK_REFERENCE
(
föd_homogøphy_node_
);

277 
homogøphy_fûãr_node_
 = 
	`homogøphyFûãrNode
(
gøph_
, 
homogøphy
,

278 (
vx_m©rix
)
	`vxGëRe„ªn˚FromDñay
(
m©ri˚s_dñay_
, 0),

279 
‰ame
, 
mask
);

280 
	`NVXIO_CHECK_REFERENCE
(
homogøphy_fûãr_node_
);

283 
m©rix_smoŸhî_node_
 = 
	`m©rixSmoŸhîNode
(
gøph_
, 
m©ri˚s_dñay_
, 
smoŸhed_
);

284 
	`NVXIO_CHECK_REFERENCE
(
m©rix_smoŸhî_node_
);

287 
vx_m©rix
 
åunˇãd
 = 
	`vxCª©eM©rix
(
c⁄ãxt_
, 
VX_TYPE_FLOAT32
, 3, 3);

288 
åunˇã_°ab_å™sf‹m_node_
 = 
	`åunˇãSèbTønsf‹mNode
(
gøph_
, 
smoŸhed_
, 
åunˇãd
, 
‰ame
, 
s_¸›_m¨gö_
);

289 
	`NVXIO_CHECK_REFERENCE
(
åunˇã_°ab_å™sf‹m_node_
);

292 
w¨p_≥r•e˘ive_node_
 = 
	`vxW¨pPî•e˘iveNode
(
gøph_
,

293 (
vx_image
)
	`vxGëRe„ªn˚FromDñay
(
‰ames_RGBX_dñay_
, 1 - 
°©ic_ˇ°
<
vx_öt32
>(
‰ames_dñay_size_
)),

294 
åunˇãd
,

295 
VX_INTERPOLATION_TYPE_BILINEAR
, 
°abûized_RGBX_‰ame_
);

296 
	`NVXIO_CHECK_REFERENCE
(
w¨p_≥r•e˘ive_node_
);

299 
„©uª_åack_node_
 = 
	`nvxH¨risTøckNode
(
gøph_
, 
gøy
,

300 (
vx_¨øy
)
	`vxGëRe„ªn˚FromDñay
(
±s_dñay_
, 0), 
NULL
,

301 
kp_cuº_li°
, 
h¨risP¨ams_
.
h¨ris_k
, h¨risP¨ams_.
h¨ris_thªsh
, h¨risP¨ams_.
h¨ris_˚Œ_size
, 
NULL
);

302 
	`NVXIO_CHECK_REFERENCE
(
„©uª_åack_node_
);

305 c⁄° * 
›ti⁄
 = "-O3";

306 
	`NVXIO_SAFE_CALL
–
	`vxSëGøphAâribuã
(
gøph_
, 
NVX_GRAPH_VERIFY_OPTIONS
, 
›ti⁄
, 
	`°æí
(option)) );

308 
	`NVXIO_SAFE_CALL
–
	`vxVîifyGøph
(
gøph_
) );

310 
	`vxRñó£M©rix
(&
homogøphy
);

311 
	`vxRñó£M©rix
(&
åunˇãd
);

313 
	`vxRñó£Aºay
(&
kp_cuº_li°
);

314 
	`vxRñó£Aºay
(&
mask
);

315 
	`vxRñó£Image
(&
gøy
);

316 
	}
}

319 
	gImageBa£dVideoSèbûizî
::
	$¥ötPîfs
() const

321 
vx_≥rf_t
 
≥rf
;

323 
	`NVXIO_SAFE_CALL
–
	`vxQuîyGøph
(
gøph_
, 
VX_GRAPH_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

324 
°d
::
cout
 << "Gøph Timê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

326 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
c⁄vît_to_gøy_node_
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

327 
°d
::
cout
 << "\àRGBÅÿgøyÅimê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

329 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
c›y_node_
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

330 
°d
::
cout
 << "\àC›yÅimê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

332 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
pyr_node_
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

333 
°d
::
cout
 << "\àPyømidÅimê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

335 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
›t_Êow_node_
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

336 
°d
::
cout
 << "\àO±iˇ»FlowÅimê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

338 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
föd_homogøphy_node_
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

339 
°d
::
cout
 << "\àFöd HomogøphyÅimê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

341 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
homogøphy_fûãr_node_
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

342 
°d
::
cout
 << "\àHomogøphy Fûã∏timê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

344 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
m©rix_smoŸhî_node_
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

345 
°d
::
cout
 << "\àM©ri˚†SmoŸhögÅimê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

347 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
åunˇã_°ab_å™sf‹m_node_
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

348 
°d
::
cout
 << "\àTrunˇã Sèb Tønsf‹mÅimê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

350 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
w¨p_≥r•e˘ive_node_
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

351 
°d
::
cout
 << "\àW¨∞Pî•e˘ivêtime: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

353 
	`NVXIO_SAFE_CALL
–
	`vxQuîyNode
(
„©uª_åack_node_
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

354 
°d
::
cout
 << "\àFótuª TøckÅimê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << std::
ídl
;

355 
	}
}

357 
vx_°©us
 
	$öôDñayOfM©ri˚s
(
vx_dñay
 
dñayOfM©ri˚s
)

359 
vx_°©us
 
°©us
 = 
VX_SUCCESS
;

361 
vx_íum
 
ty≥
 = 0;

362 
°©us
 |
	`vxQuîyDñay
(
dñayOfM©ri˚s
, 
VX_DELAY_ATTRIBUTE_TYPE
, &
ty≥
, (type));

363 
	`NVXIO_ASSERT
(
ty≥
 =
VX_TYPE_MATRIX
);

365 
vx_size
 
size
 = 0;

366 
°©us
 |
	`vxQuîyDñay
(
dñayOfM©ri˚s
, 
VX_DELAY_ATTRIBUTE_SLOTS
, &
size
, (size));

368 
vx_Êﬂt32
 
eye
[9] = {1,0,0, 0,1,0, 0,0,1};

369 
vx_öt32
 
i
 = 1 - 
°©ic_ˇ°
<vx_öt32>(
size
); i <0 && 
°©us
 =
VX_SUCCESS
; ++i)

371 
vx_m©rix
 
m©
 = (vx_m©rix)
	`vxGëRe„ªn˚FromDñay
(
dñayOfM©ri˚s
, 
i
);

372 
°©us
 |
	`vxC›yM©rix
(
m©
, 
eye
, 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
);

374  
°©us
;

375 
	}
}

377 
vx_°©us
 
	gnvx
::
	$öôDñayOfImages
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_dñay
 
dñayOfImages
)

379 
vx_°©us
 
°©us
 = 
VX_SUCCESS
;

381 
vx_íum
 
ty≥
 = 0;

382 
°©us
 |
	`vxQuîyDñay
(
dñayOfImages
, 
VX_DELAY_ATTRIBUTE_TYPE
, &
ty≥
, (type));

383 
	`NVXIO_ASSERT
(
ty≥
 =
VX_TYPE_IMAGE
);

385 
vx_size
 
size
 = 0;

386 
°©us
 |
	`vxQuîyDñay
(
dñayOfImages
, 
VX_DELAY_ATTRIBUTE_SLOTS
, &
size
, (size));

387 i‡(
size
 > 0)

389 
vx_df_image
 
f‹m©
 = 
VX_DF_IMAGE_VIRT
;

390 
vx_uöt32
 
width
 = 0, 
height
 = 0;

392 
vx_image
 
img0
 = (vx_image)
	`vxGëRe„ªn˚FromDñay
(
dñayOfImages
, 0);

393 
°©us
 |
	`vxQuîyImage
(
img0
, 
VX_IMAGE_ATTRIBUTE_FORMAT
, &
f‹m©
, (format));

394 
°©us
 |
	`vxQuîyImage
(
img0
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
width
, (width));

395 
°©us
 |
	`vxQuîyImage
(
img0
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
height
, (height));

397 
	`NVXIO_ASSERT
(
f‹m©
 =
VX_DF_IMAGE_RGBX
);

399 
vx_pixñ_vÆue_t
 
öôVÆ
;

400 
öôVÆ
.
RGBX
[0] = 0;

401 
öôVÆ
.
RGBX
[1] = 0;

402 
öôVÆ
.
RGBX
[2] = 0;

403 
öôVÆ
.
RGBX
[3] = 0;

404 
vx_image
 
bœckImg
 = 
	`vxCª©eUnif‹mImage
(
c⁄ãxt
, 
width
, 
height
, 
f‹m©
, &
öôVÆ
);

405 
	`NVXIO_CHECK_REFERENCE
(
bœckImg
);

407 
vx_öt32
 
i
 = 1 - 
°©ic_ˇ°
<vx_öt32>(
size
); i < 0 && 
°©us
 =
VX_SUCCESS
; ++i)

409 
vx_image
 
img
 = (vx_image)
	`vxGëRe„ªn˚FromDñay
(
dñayOfImages
, 
i
);

410 
°©us
 |
	`nvxuC›yImage
(
c⁄ãxt
, 
bœckImg
, 
img
);

412 
	`vxRñó£Image
(&
bœckImg
);

415  
°©us
;

416 
	}
}

418 
	gImageBa£dVideoSèbûizî
::
	$¸óãD©aObje˘s
(
vx_image
 
‰ame
)

420 
vx_pyømid
 
pyr_exem∂¨
 = 
	`vxCª©ePyømid
(
c⁄ãxt_
, 
h¨risP¨ams_
.
pyr_Àvñs
, 
VX_SCALE_PYRAMID_HALF
, 
width_
, 
height_
, 
VX_DF_IMAGE_U8
);

421 
	`NVXIO_CHECK_REFERENCE
(
pyr_exem∂¨
);

422 
vx_¨øy
 
±s_exem∂¨
 = 
	`vxCª©eAºay
(
c⁄ãxt_
, 
NVX_TYPE_POINT2F
, 1000);

423 
	`NVXIO_CHECK_REFERENCE
(
±s_exem∂¨
);

425 
pyr_dñay_
 = 
	`vxCª©eDñay
(
c⁄ãxt_
, (
vx_ª„ªn˚
)
pyr_exem∂¨
, 2);

426 
	`NVXIO_CHECK_REFERENCE
(
pyr_dñay_
);

428 
±s_dñay_
 = 
	`vxCª©eDñay
(
c⁄ãxt_
, (
vx_ª„ªn˚
)
±s_exem∂¨
, 2);

429 
	`NVXIO_CHECK_REFERENCE
(
±s_dñay_
);

431 
	`vxRñó£Pyømid
(&
pyr_exem∂¨
);

432 
	`vxRñó£Aºay
(&
±s_exem∂¨
);

434 
smoŸhed_
 = 
	`vxCª©eM©rix
(
c⁄ãxt_
, 
VX_TYPE_FLOAT32
, 3, 3);

435 
	`NVXIO_CHECK_REFERENCE
(
smoŸhed_
);

437 
m©ri˚s_dñay_size_
 = 2 * 
v°abP¨ams_
.
numOfSmoŸhögFømes_
 + 1;

438 
m©ri˚s_dñay_
 = 
	`vxCª©eDñay
(
c⁄ãxt_
, (
vx_ª„ªn˚
)
smoŸhed_
, 
m©ri˚s_dñay_size_
);

439 
	`NVXIO_CHECK_REFERENCE
(
m©ri˚s_dñay_
);

440 
	`NVXIO_SAFE_CALL
–
	`öôDñayOfM©ri˚s
(
m©ri˚s_dñay_
) );

442 
vx_image
 
image_exem∂¨
 = 
	`vxCª©eImage
(
c⁄ãxt_
, 
width_
, 
height_
, 
VX_DF_IMAGE_U8
);

445 
‰ames_dñay_size_
 = 
v°abP¨ams_
.
numOfSmoŸhögFømes_
 + 2;

447 
‰ames_RGBX_dñay_
 = 
	`vxCª©eDñay
(
c⁄ãxt_
, (
vx_ª„ªn˚
)
‰ame
, 
‰ames_dñay_size_
);

448 
	`NVXIO_CHECK_REFERENCE
(
‰ames_RGBX_dñay_
);

449 
	`NVXIO_SAFE_CALL
–
nvx
::
	`öôDñayOfImages
(
c⁄ãxt_
, 
‰ames_RGBX_dñay_
) );

451 
	`vxRñó£Image
(&
image_exem∂¨
);

453 
°abûized_RGBX_‰ame_
 = 
	`vxCª©eImage
(
c⁄ãxt_
, 
width_
, 
height_
, 
VX_DF_IMAGE_RGBX
);

454 
	`NVXIO_CHECK_REFERENCE
(
°abûized_RGBX_‰ame_
);

456 
vx_Êﬂt32
 
lk_ïsû⁄
 = 0.01f;

457 
s_lk_ïsû⁄_
 = 
	`vxCª©eSˇœr
(
c⁄ãxt_
, 
VX_TYPE_FLOAT32
, &
lk_ïsû⁄
);

458 
	`NVXIO_CHECK_REFERENCE
(
s_lk_ïsû⁄_
);

460 
s_lk_num_ôîs_
 = 
	`vxCª©eSˇœr
(
c⁄ãxt_
, 
VX_TYPE_UINT32
, &
h¨risP¨ams_
.
lk_num_ôîs
);

461 
	`NVXIO_CHECK_REFERENCE
(
s_lk_num_ôîs_
);

463 
vx_boﬁ
 
lk_u£_öô_e°
 = 
vx_Ál£_e
;

464 
s_lk_u£_öô_e°_
 = 
	`vxCª©eSˇœr
(
c⁄ãxt_
, 
VX_TYPE_BOOL
, &
lk_u£_öô_e°
);

465 
	`NVXIO_CHECK_REFERENCE
(
s_lk_u£_öô_e°_
);

467 
s_¸›_m¨gö_
 = 
	`vxCª©eSˇœr
(
c⁄ãxt_
, 
VX_TYPE_FLOAT32
, &
v°abP¨ams_
.
¸›M¨gö_
);

468 
	`NVXIO_CHECK_REFERENCE
(
s_¸›_m¨gö_
);

469 
	}
}

471 
	gImageBa£dVideoSèbûizî
::
	$ªÀa£
()

473 
f‹m©_
 = 
VX_DF_IMAGE_VIRT
;

474 
width_
 = 0;

475 
height_
 = 0;

477 
	`vxRñó£Dñay
(&
pyr_dñay_
);

478 
	`vxRñó£Dñay
(&
±s_dñay_
);

480 
	`vxRñó£Node
(&
pyr_node_
);

481 
	`vxRñó£Node
(&
›t_Êow_node_
);

482 
	`vxRñó£Node
(&
„©uª_åack_node_
);

483 
	`vxRñó£Node
(&
föd_homogøphy_node_
);

484 
	`vxRñó£Node
(&
homogøphy_fûãr_node_
);

485 
	`vxRñó£Node
(&
m©rix_smoŸhî_node_
);

486 
	`vxRñó£Node
(&
åunˇã_°ab_å™sf‹m_node_
);

487 
	`vxRñó£Node
(&
w¨p_≥r•e˘ive_node_
);

489 
	`vxRñó£Dñay
(&
m©ri˚s_dñay_
);

490 
	`vxRñó£Dñay
(&
‰ames_RGBX_dñay_
);

491 
	`vxRñó£M©rix
(&
smoŸhed_
);

493 
	`vxRñó£Node
(&
c⁄vît_to_gøy_node_
);

494 
	`vxRñó£Node
(&
c›y_node_
);

496 
	`vxRñó£Image
(&
°abûized_RGBX_‰ame_
);

497 
	`vxRñó£Sˇœr
(&
s_lk_ïsû⁄_
);

498 
	`vxRñó£Sˇœr
(&
s_lk_num_ôîs_
);

499 
	`vxRñó£Sˇœr
(&
s_lk_u£_öô_e°_
);

500 
	`vxRñó£Sˇœr
(&
s_¸›_m¨gö_
);

502 
	`vxRñó£Gøph
(&
gøph_
);

503 
	}
}

505 
	gnvx
::
VideoSèbûizî
::
VideoSèbûizîP¨ams
::
	$VideoSèbûizîP¨ams
()

507 
numOfSmoŸhögFømes_
 = 5;

508 
¸›M¨gö_
 = 0.05f;

509 
	}
}

511 
	gImageBa£dVideoSèbûizî
::
H¨risPyrLKP¨ams
::
	$H¨risPyrLKP¨ams
()

513 
pyr_Àvñs
 = 6;

515 
h¨ris_k
 = 0.04f;

516 
h¨ris_thªsh
 = 100.0f;

517 
h¨ris_˚Œ_size
 = 18;

519 
lk_num_ôîs
 = 5;

520 
lk_wö_size
 = 10;

521 
	}
}

523 
	gnvx
::
VideoSèbûizî
* 
nvx
::VideoSèbûizî::
	$¸óãImageBa£dVSèb
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
VideoSèbûizîP¨ams
 &
∑øms
)

525  
√w
 
	`ImageBa£dVideoSèbûizî
(
c⁄ãxt
, 
∑øms
);

526 
	}
}

528 
vx_image
 
	gImageBa£dVideoSèbûizî
::
	$gëSèbûizedFøme
() const

530  
°abûized_RGBX_‰ame_
;

531 
	}
}

533 
	gImageBa£dVideoSèbûizî
::~
	$ImageBa£dVideoSèbûizî
()

535 
	`ªÀa£
();

536 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/stabilizer.hpp

29 #i‚de‡
NVX_STABILIZER_HPP


30 
	#NVX_STABILIZER_HPP


	)

32 
	~<VX/vx.h
>

34 
«me•a˚
 
	gnvx


36 ˛as†
	cVideoSèbûizî


38 
	gpublic
:

40 
	sVideoSèbûizîP¨ams


43 
vx_size
 
numOfSmoŸhögFømes_
;

45 
vx_Êﬂt32
 
	g¸›M¨gö_
;

47 
VideoSèbûizîP¨ams
();

50 
VideoSèbûizî
* 
¸óãImageBa£dVSèb
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
VideoSèbûizîP¨ams
& 
∑øms
 = VideoStabilizerParams());

52 
	gvútuÆ
 ~
VideoSèbûizî
() {}

54 
vútuÆ
 
öô
(
vx_image
 
fú°Føme
) = 0;

55 
vútuÆ
 
¥o˚ss
(
vx_image
 
√wFøme
) = 0;

57 
vútuÆ
 
vx_image
 
gëSèbûizedFøme
() const = 0;

59 
vútuÆ
 
¥ötPîfs
() const = 0;

62 
vx_°©us
 
öôDñayOfImages
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_dñay
 
dñayOfImages
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/truncate_transform_node.cpp

29 
	~"v°ab_nodes.hµ
"

35 
	gEigí
::
	tVe˘‹4f
 
	tRe˘™gÀf
;

39 
	gEigí
::
	tVe˘‹2f
 
	tPoöt2f
;

41 c⁄° 
	gKERNEL_TRUNCATE_STAB_TRANSFORM_NAME
[
VX_MAX_KERNEL_NAME
] = "example.nvx.truncate_stab_transform";

43 
	$å™sf‹mPoöt
(c⁄° 
M©rix3x3f_rm
 &
H
, c⁄° 
Poöt2f
 & 
p
, Poöt2‡& 
√wP
)

45 
x
 = 
	`H
(0, 0Ë* 
	`p
(0) + H(0, 1) *Ö(1) + H(0, 2);

46 
y
 = 
	`H
(1, 0Ë* 
	`p
(0) + H(1, 1) *Ö(1) + H(1, 2);

47 
z
 = 
	`H
(2, 0Ë* 
	`p
(0) + H(2, 1) *Ö(1) + H(2, 2);

49 
	`√wP
(0Ë
x
 / 
z
;

50 
	`√wP
(1Ë
y
 / 
z
;

51 
	}
}

53 
boﬁ
 
	$ª˘C⁄èös
(c⁄° 
Re˘™gÀf
 & 
ª˘
, c⁄° 
Poöt2f
 & 
±
)

55  
	`ª˘
(0Ë<
	`±
(0) &&Öt(0) <Ñect(0) +Ñect(2) &&

56 
	`ª˘
(1Ë<
	`±
(1) &&Öt(1) <Ñect(1) +Ñect(3);

57 
	}
}

59 
boﬁ
 
	$isPoötInsideCr›pögRe˘
(c⁄° 
Re˘™gÀf
 & 
ª˘
, c⁄° 
M©rix3x3f_rm
 & 
H
, c⁄° 
Poöt2f
 & 
p
)

61 
Poöt2f
 
√wP
;

62 
	`å™sf‹mPoöt
(
H
, 
p
, 
√wP
);

64  
	`ª˘C⁄èös
(
ª˘
, 
√wP
);

65 
	}
}

67 
boﬁ
 
	$isMŸi⁄Good
(c⁄° 
M©rix3x3f_rm
 & 
å™sf‹m
,

68 
‰ameWidth
, 
‰ameHeight
,

69 c⁄° 
M©rix3x3f_rm
 & 
ªsizeM©
, 
Á˘‹
)

71 
Re˘™gÀf
 
ª˘
;

72 
ª˘
 << 0.0f, 0.0f,

73 
°©ic_ˇ°
<>(
‰ameWidth
 - 1),

74 
°©ic_ˇ°
<>(
‰ameHeight
 - 1);

76 
M©rix3x3f_rm
 
H
 = (1 - 
Á˘‹
Ë* 
å™sf‹m
 + fa˘‹ * 
ªsizeM©
;

78 
Poöt2f
 
p1
, 
p2
, 
p3
, 
p4
;

79 
p1
 << 0.0f, 0.0f;

80 
p2
 << 
°©ic_ˇ°
<>(
‰ameWidth
 - 1), 0.0f;

81 
p3
 << 
°©ic_ˇ°
<>(
‰ameWidth
 - 1), sètic_ˇ°<>(
‰ameHeight
 - 1);

82 
p4
 << 0.0f, 
°©ic_ˇ°
<>(
‰ameHeight
 - 1);

84  
	`isPoötInsideCr›pögRe˘
(
ª˘
, 
H
, 
p1
Ë&& isPoötInsideCr›pögRe˘‘e˘, H, 
p2
) &&

85 
	`isPoötInsideCr›pögRe˘
(
ª˘
, 
H
, 
p3
Ë&& isPoötInsideCr›pögRe˘‘e˘, H, 
p4
);

86 
	}
}

88 
boﬁ
 
	$åunˇãTønsf‹m
(c⁄° 
M©rix3x3f_rm
 & 
å™sf‹m
, 
‰ameWidth
, 
‰ameHeight
,

89 c⁄° 
M©rix3x3f_rm
 & 
ªsizeM©
, M©rix3x3f_rm & 
åunˇãdTønsf‹m
)

91 
t
 = 0;

92 i‡–
	`isMŸi⁄Good
(
å™sf‹m
, 
‰ameWidth
, 
‰ameHeight
, 
ªsizeM©
, 
t
) )

94  
Ál£
;

97 
l
 = 0, 
r
 = 1;

98 
r
 - 
l
 > 1e-2f)

100 
t
 = (
l
 + 
r
) * 0.5f;

101 i‡–
	`isMŸi⁄Good
(
å™sf‹m
, 
‰ameWidth
, 
‰ameHeight
, 
ªsizeM©
, 
t
) )

102 
r
 = 
t
;

104 
l
 = 
t
;

107 
åunˇãdTønsf‹m
 = (1 - 
t
Ë* 
å™sf‹m
 +Å * 
ªsizeM©
;

109  
åue
;

110 
	}
}

113 
vx_°©us
 
VX_CALLBACK
 
	$åunˇãSèbTønsf‹m_kî√l
(
vx_node
, c⁄° 
vx_ª„ªn˚
 *
∑ømëîs
, 
vx_uöt32
 
num
)

115 i‡(
num
 != 4)

116  
VX_FAILURE
;

118 
vx_°©us
 
°©us
 = 
VX_SUCCESS
;

120 
vx_m©rix
 
vxSèbTønsf‹m
 = (vx_m©rix)
∑ømëîs
[0];

121 
vx_m©rix
 
vxTrunˇãdTønsf‹m
 = (vx_m©rix)
∑ømëîs
[1];

122 
vx_image
 
image
 = (vx_image)
∑ømëîs
[2];

123 
vx_sˇœr
 
sCr›M¨gö
 = (vx_sˇœr)
∑ømëîs
[3];

125 
vx_Êﬂt32
 
°abTønsf‹mD©a
[9] = {0};

126 
°©us
 |
	`vxC›yM©rix
(
vxSèbTønsf‹m
, 
°abTønsf‹mD©a
, 
VX_READ_ONLY
, 
VX_MEMORY_TYPE_HOST
);

127 
M©rix3x3f_rm
 
°abTønsf‹m
 = M©rix3x3f_rm::
	`M≠
(
°abTønsf‹mD©a
, 3, 3), 
övSèbTønsf‹m
;

129 
vx_Êﬂt32
 
¸›M¨gö
;

130 
°©us
 |
	`vxC›ySˇœr
(
sCr›M¨gö
, &
¸›M¨gö
, 
VX_READ_ONLY
, 
VX_MEMORY_TYPE_HOST
);

132 i‡(
¸›M¨gö
 < 0)

134 
övSèbTønsf‹m
 = 
°abTønsf‹m
.
	`övî£
();

135 
°©us
 |
	`vxC›yM©rix
(
vxTrunˇãdTønsf‹m
, 
övSèbTønsf‹m
.
	`d©a
(), 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
);

136  
°©us
;

139 
vx_uöt32
 
width
 = 0, 
height
 = 0;

140 
°©us
 |
	`vxQuîyImage
(
image
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, &
width
, (width));

141 
°©us
 |
	`vxQuîyImage
(
image
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, &
height
, (height));

143 
M©rix3x3f_rm
 
ªsizeM©
 = M©rix3x3f_rm::
	`Idítôy
();

144 
sˇÀ
 = 1.0‡/ (1.0‡- 2 * 
¸›M¨gö
);

145 
	`ªsizeM©
(0, 0ËªsizeM©(1, 1Ë
sˇÀ
;

146 
	`ªsizeM©
(0, 2Ë- 
sˇÀ
 * 
width
 * 
¸›M¨gö
;

147 
	`ªsizeM©
(1, 2Ë- 
sˇÀ
 * 
height
 * 
¸›M¨gö
;

149 
°abTønsf‹m
.
	`å™•o£InPœ˚
();

150 
°abTønsf‹m
 = 
ªsizeM©
 * stabTransform;

152 
övSèbTønsf‹m
 = 
°abTønsf‹m
.
	`övî£
();

153 
M©rix3x3f_rm
 
övResizeM©
 = 
ªsizeM©
.
	`övî£
();

155 
M©rix3x3f_rm
 
övTrunˇãdTønsf‹m
;

156 
boﬁ
 
isTrunˇãd
 = 
	`åunˇãTønsf‹m
(
övSèbTønsf‹m
, 
width
, 
height
, 
övResizeM©
, 
övTrunˇãdTønsf‹m
);

158 i‡(
isTrunˇãd
)

160 
°abTønsf‹m
 = 
övTrunˇãdTønsf‹m
.
	`övî£
();

163 
°abTønsf‹m
.
	`å™•o£InPœ˚
();

164 
övSèbTønsf‹m
 = 
°abTønsf‹m
.
	`övî£
();

165 
°©us
 |
	`vxC›yM©rix
(
vxTrunˇãdTønsf‹m
, 
övSèbTønsf‹m
.
	`d©a
(), 
VX_WRITE_ONLY
, 
VX_MEMORY_TYPE_HOST
);

167  
°©us
;

168 
	}
}

171 
vx_°©us
 
VX_CALLBACK
 
	$åunˇãSèbTønsf‹m_vÆid©e
(
vx_node
, c⁄° 
vx_ª„ªn˚
 
∑ømëîs
[],

172 
vx_uöt32
 
numP¨ams
, 
vx_mëa_f‹m©
 
mëas
[])

174 i‡(
numP¨ams
 !4Ë 
VX_ERROR_INVALID_PARAMETERS
;

176 
vx_m©rix
 
°abTønsf‹m
 = (vx_m©rix)
∑ømëîs
[0];

177 
vx_sˇœr
 
¸›M¨gö
 = (vx_sˇœr)
∑ømëîs
[3];

179 
vx_íum
 
°abTønsf‹mD©aTy≥
 = 0;

180 
vx_size
 
°abTønsf‹mRows
 = 0ul, 
°abTønsf‹mCﬁs
 = 0ul;

181 
	`vxQuîyM©rix
(
°abTønsf‹m
, 
VX_MATRIX_ATTRIBUTE_TYPE
, &
°abTønsf‹mD©aTy≥
, (stabTransformDataType));

182 
	`vxQuîyM©rix
(
°abTønsf‹m
, 
VX_MATRIX_ATTRIBUTE_ROWS
, &
°abTønsf‹mRows
, (stabTransformRows));

183 
	`vxQuîyM©rix
(
°abTønsf‹m
, 
VX_MATRIX_ATTRIBUTE_COLUMNS
, &
°abTønsf‹mCﬁs
, (stabTransformCols));

185 
vx_íum
 
¸›M¨göTy≥
 = 0;

186 
	`vxQuîySˇœr
(
¸›M¨gö
, 
VX_SCALAR_ATTRIBUTE_TYPE
, &
¸›M¨göTy≥
, (cropMarginType));

188 
vx_°©us
 
°©us
 = 
VX_SUCCESS
;

190 i‡(
°abTønsf‹mD©aTy≥
 !
VX_TYPE_FLOAT32
 || 
°abTønsf‹mCﬁs
 !3 || 
°abTønsf‹mRows
 != 3)

192 
°©us
 = 
VX_ERROR_INVALID_PARAMETERS
;

195 i‡(
¸›M¨göTy≥
 =
VX_TYPE_FLOAT32
)

197 
vx_Êﬂt32
 
vÆ
 = 0;

198 
	`vxC›ySˇœr
(
¸›M¨gö
, &
vÆ
, 
VX_READ_ONLY
, 
VX_MEMORY_TYPE_HOST
);

199 i‡–
vÆ
 >= 0.5 )

201 
°©us
 = 
VX_ERROR_INVALID_VALUE
;

206 
°©us
 = 
VX_ERROR_INVALID_TYPE
;

209 
vx_mëa_f‹m©
 
åunˇãdTønsf‹mMëa
 = 
mëas
[1];

211 
vx_íum
 
åunˇãdTønsf‹mTy≥
 = 
VX_TYPE_FLOAT32
;

212 
vx_size
 
åunˇãdTønsf‹mRows
 = 3;

213 
vx_size
 
åunˇãdTønsf‹mCﬁs
 = 3;

215 
	`vxSëMëaF‹m©Aâribuã
(
åunˇãdTønsf‹mMëa
, 
VX_MATRIX_ATTRIBUTE_TYPE
, &
åunˇãdTønsf‹mTy≥
, (truncatedTransformType));

216 
	`vxSëMëaF‹m©Aâribuã
(
åunˇãdTønsf‹mMëa
, 
VX_MATRIX_ATTRIBUTE_ROWS
, &
åunˇãdTønsf‹mRows
, (truncatedTransformRows));

217 
	`vxSëMëaF‹m©Aâribuã
(
åunˇãdTønsf‹mMëa
, 
VX_MATRIX_ATTRIBUTE_COLUMNS
, &
åunˇãdTønsf‹mCﬁs
, (truncatedTransformCols));

219  
°©us
;

220 
	}
}

223 
vx_°©us
 
	$ªgi°îTrunˇãSèbTønsf‹mKî√l
(
vx_c⁄ãxt
 
c⁄ãxt
)

225 
vx_°©us
 
°©us
 = 
VX_SUCCESS
;

227 
vx_íum
 
id
;

228 
°©us
 = 
	`vxAŒoˇãU£rKî√lId
(
c⁄ãxt
, &
id
);

229 i‡(
°©us
 !
VX_SUCCESS
)

231 
	`vxAddLogE¡ry
((
vx_ª„ªn˚
)
c⁄ãxt
, 
°©us
, "[%s:%u] FailedÅoállocateán ID forÅhe TruncateStabTransform kernel",

232 
__FUNCTION__
, 
__LINE__
);

233  
°©us
;

236 
vx_kî√l
 
kî√l
 = 
	`vxAddU£rKî√l
(
c⁄ãxt
, 
KERNEL_TRUNCATE_STAB_TRANSFORM_NAME
,

237 
id
,

238 
åunˇãSèbTønsf‹m_kî√l
,

240 
åunˇãSèbTønsf‹m_vÆid©e
,

241 
NULL
,

242 
NULL


245 
°©us
 = 
	`vxGëSètus
((
vx_ª„ªn˚
)
kî√l
);

246 i‡(
°©us
 !
VX_SUCCESS
)

248 
	`vxAddLogE¡ry
((
vx_ª„ªn˚
)
c⁄ãxt
, 
°©us
, "[%s:%u] FaûedÅÿ¸óã TrunˇãSèbTønsf‹m Kî√l", 
__FUNCTION__
, 
__LINE__
);

249  
°©us
;

252 
°©us
 |
	`vxAddP¨amëîToKî√l
(
kî√l
, 0, 
VX_INPUT
, 
VX_TYPE_MATRIX
, 
VX_PARAMETER_STATE_REQUIRED
);

253 
°©us
 |
	`vxAddP¨amëîToKî√l
(
kî√l
, 1, 
VX_OUTPUT
, 
VX_TYPE_MATRIX
, 
VX_PARAMETER_STATE_REQUIRED
);

254 
°©us
 |
	`vxAddP¨amëîToKî√l
(
kî√l
, 2, 
VX_INPUT
, 
VX_TYPE_IMAGE
, 
VX_PARAMETER_STATE_REQUIRED
);

255 
°©us
 |
	`vxAddP¨amëîToKî√l
(
kî√l
, 3, 
VX_INPUT
, 
VX_TYPE_SCALAR
, 
VX_PARAMETER_STATE_REQUIRED
);

257 i‡(
°©us
 !
VX_SUCCESS
)

259 
	`vxRñó£Kî√l
(&
kî√l
);

260 
	`vxAddLogE¡ry
((
vx_ª„ªn˚
)
c⁄ãxt
, 
°©us
, "[%s:%u] FaûedÅÿöôülizêTrunˇãSèbTønsf‹m Kî√»∑ømëîs", 
__FUNCTION__
, 
__LINE__
);

261  
VX_FAILURE
;

264 
°©us
 = 
	`vxFöÆizeKî√l
(
kî√l
);

265 
	`vxRñó£Kî√l
(&
kî√l
);

267 i‡(
°©us
 !
VX_SUCCESS
)

269 
	`vxAddLogE¡ry
((
vx_ª„ªn˚
)
c⁄ãxt
, 
°©us
, "[%s:%u] FaûedÅÿföÆizêTrunˇãSèbTønsf‹m Kî√l", 
__FUNCTION__
, 
__LINE__
);

270  
VX_FAILURE
;

273  
°©us
;

274 
	}
}

276 
vx_node
 
	$åunˇãSèbTønsf‹mNode
(
vx_gøph
 
gøph
, 
vx_m©rix
 
°abTønsf‹m
, vx_m©rix 
åunˇãdTønsf‹m
, 
vx_image
 
image
, 
vx_sˇœr
 
¸›M¨gö
)

278 
vx_node
 
node
 = 
NULL
;

280 
vx_kî√l
 
kî√l
 = 
	`vxGëKî√lByName
(
	`vxGëC⁄ãxt
((
vx_ª„ªn˚
)
gøph
), 
KERNEL_TRUNCATE_STAB_TRANSFORM_NAME
);

282 i‡(
	`vxGëSètus
((
vx_ª„ªn˚
)
kî√l
Ë=
VX_SUCCESS
)

284 
node
 = 
	`vxCª©eGíîicNode
(
gøph
, 
kî√l
);

285 
	`vxRñó£Kî√l
(&
kî√l
);

287 i‡(
	`vxGëSètus
((
vx_ª„ªn˚
)
node
Ë=
VX_SUCCESS
)

289 
	`vxSëP¨amëîByIndex
(
node
, 0, (
vx_ª„ªn˚
)
°abTønsf‹m
);

290 
	`vxSëP¨amëîByIndex
(
node
, 1, (
vx_ª„ªn˚
)
åunˇãdTønsf‹m
);

291 
	`vxSëP¨amëîByIndex
(
node
, 2, (
vx_ª„ªn˚
)
image
);

292 
	`vxSëP¨amëîByIndex
(
node
, 3, (
vx_ª„ªn˚
)
¸›M¨gö
);

296  
node
;

297 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/vstab_nodes.hpp

29 #i‚de‡
NVX_VSTAB_NODES_HPP


30 
	#NVX_VSTAB_NODES_HPP


	)

32 
	~<NVX/nvx.h
>

34 
	~<Æg‹ôhm
>

35 
	~<Eigí/Dí£
>

38 
	gEigí
::
	tM©rix
<
	tvx_Êﬂt32
, 3, 3, 
	tEigí
::
	tRowMaj‹
> 
	tM©rix3x3f_rm
;

39 
	gEigí
::
	tM©rix
<
	tvx_Êﬂt32
, 3, 4, 
	tEigí
::
	tRowMaj‹
> 
	tM©rix3x4f_rm
;

42 
vx_°©us
 
ªgi°îHomogøphyFûãrKî√l
(
vx_c⁄ãxt
 
c⁄ãxt
);

45 
vx_node
 
homogøphyFûãrNode
(
vx_gøph
 
gøph
, 
vx_m©rix
 
öput
,

46 
vx_m©rix
 
homogøphy
, 
vx_image
 
image
,

47 
vx_¨øy
 
mask
);

51 
vx_°©us
 
ªgi°îM©rixSmoŸhîKî√l
(
vx_c⁄ãxt
 
c⁄ãxt
);

54 
vx_node
 
m©rixSmoŸhîNode
(
vx_gøph
 
gøph
,

55 
vx_dñay
 
m©ri˚s
, 
vx_m©rix
 
smoŸhed
);

59 
vx_°©us
 
ªgi°îTrunˇãSèbTønsf‹mKî√l
(
vx_c⁄ãxt
 
c⁄ãxt
);

66 
vx_node
 
åunˇãSèbTønsf‹mNode
(
vx_gøph
 
gøph
, 
vx_m©rix
 
°abTønsf‹m
, vx_m©rix 
åunˇãdTønsf‹m
,

67 
vx_image
 
image
, 
vx_sˇœr
 
¸›M¨gö
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/Application.hpp

29 #i‚de‡
NVXIO_APPLICATION_HPP


30 
	#NVXIO_APPLICATION_HPP


	)

32 
	~<öôülizî_li°
>

33 
	~<limôs
>

34 
	~<mem‹y
>

35 
	~<°rög
>

36 
	~<ve˘‹
>

38 
	~"O±i⁄H™dÀr.hµ
"

49 
«me•a˚
 
	gnvxio


62 ˛as†
	cNVXIO_EXPORT
 
	gAµliˇti⁄


64 
	gpublic
:

68 
	eAµliˇti⁄ExôCode


71 
APP_EXIT_CODE_SUCCESS
 = 0,

73 
	gAPP_EXIT_CODE_ERROR
 = 1,

75 
	gAPP_EXIT_CODE_NO_MEMORY
 = 2,

77 
	gAPP_EXIT_CODE_NO_RESOURCE
 = 3,

79 
	gAPP_EXIT_CODE_NO_FRAMESOURCE
 = 4,

81 
	gAPP_EXIT_CODE_NO_RENDER
 = 5,

83 
	gAPP_EXIT_CODE_INVALID_GRAPH
 = 6,

86 
	gAPP_EXIT_CODE_INVALID_VALUE
 = 7,

89 
	gAPP_EXIT_CODE_INVALID_DIMENSIONS
 = 8,

91 
	gAPP_EXIT_CODE_INVALID_FORMAT
 = 9,

93 
	gAPP_EXIT_CODE_CAN_NOT_CREATE
 = 10,

106 
	gAµliˇti⁄
 &
gë
();

111 
	gvútuÆ
 ~
Aµliˇti⁄
();

125 
vútuÆ
 
addBoﬁónO±i⁄
(
sh‹tName
, c⁄° 
°d
::
°rög
 &
l⁄gName
,

126 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
,

127 
boﬁ
 *
ªsu…
) = 0;

143 
vútuÆ
 
addO±i⁄
(
sh‹tName
, c⁄° 
°d
::
°rög
 &
l⁄gName
,

144 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
,

145 
O±i⁄H™dÀr
::
±r
 
h™dÀr
) = 0;

158 
vútuÆ
 
ÆlowPosôi⁄ÆP¨amëîs
(c⁄° 
°d
::
°rög
 &
∂a˚hﬁdî
,

159 
°d
::
ve˘‹
<°d::
°rög
> *
ªsu…
) = 0;

169 
vútuÆ
 
£tDes¸ùti⁄
(c⁄° 
°d
::
°rög
 &
des¸ùti⁄
) = 0;

183 
vútuÆ
 
öô
(
¨gc
, **
¨gv
) = 0;

184 
vútuÆ
 
boﬁ
 
öôGui
() = 0;

186 
vútuÆ
 
	g°d
::
°rög
 
gëS˚«rioName
() const = 0;

187 
vútuÆ
 
gëS˚«rioLo›Cou¡
() const = 0;

188 
vútuÆ
 
	g°d
::
°rög
 
gëEvítLogName
() const = 0;

189 
vútuÆ
 
boﬁ
 
gëEvítLogDumpFømesFœg
() const = 0;

190 
vútuÆ
 
boﬁ
 
gëVîbo£Fœg
() const = 0;

191 
vútuÆ
 
boﬁ
 
gëFuŒS¸ìnFœg
() const = 0;

192 
vútuÆ
 
	g°d
::
°rög
 
gëPª„ºedRídîName
() const = 0;

208 
vútuÆ
 
	g°d
::
°rög
 
födSam∂eFûeP©h
(c⁄° 
°d
::°rög& 
fûíame
) const = 0;

230 
vútuÆ
 
	g°d
::
°rög
 
födLibøryFûeP©h
(c⁄° 
°d
::°rög& 
fûíame
) const = 0;

232 
vútuÆ
 
gëSour˚DeÁu…Timeout
() const = 0;

233 
vútuÆ
 
£tSour˚DeÁu…Timeout
(
timeout
) = 0;

239 
vútuÆ
 
gëFPSLimô
() const = 0;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/ConfigParser.hpp

29 #i‚de‡
NVXIO_CONFIGPARSER_HPP


30 
	#NVXIO_CONFIGPARSER_HPP


	)

32 
	~<°rög
>

33 
	~<mem‹y
>

35 
	~"NVX/O±i⁄H™dÀr.hµ
"

42 
«me•a˚
 
	gnvxio


67 ˛as†
	cNVXIO_EXPORT
 
	gC⁄figP¨£r


69 
	gpublic
:

73 
vútuÆ
 ~
C⁄figP¨£r
(){}

81 
vútuÆ
 
addP¨amëî
(c⁄° 
°d
::
°rög
 &
∑ømName
, 
O±i⁄H™dÀr
::
±r
 
h™dÀr
)=0;

93 
vútuÆ
 
	g°d
::
°rög
 
∑r£
(c⁄° 
°d
::°rög &
∑thToC⁄figFûe
)=0;

104 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
C⁄figP¨£r
> 
¸óãC⁄figP¨£r
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/Export.hpp

2 #i‚de‡
NVXIO_EXPORT_H


3 
	#NVXIO_EXPORT_H


	)

5 #ifde‡
NVXIO_STATIC_DEFINE


6 
	#NVXIO_EXPORT


	)

7 
	#NVXIO_NO_EXPORT


	)

9 #i‚de‡
NVXIO_EXPORT


10 #ifde‡
nvxio_EXPORTS


12 
	#NVXIO_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

15 
	#NVXIO_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

19 #i‚de‡
NVXIO_NO_EXPORT


20 
	#NVXIO_NO_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

24 #i‚de‡
NVXIO_DEPRECATED


25 
	#NVXIO_DEPRECATED
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

26 
	#NVXIO_DEPRECATED_EXPORT
 
NVXIO_EXPORT
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

27 
	#NVXIO_DEPRECATED_NO_EXPORT
 
NVXIO_NO_EXPORT
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

30 
	#DEFINE_NO_DEPRECATED
 0

	)

31 #i‡
DEFINE_NO_DEPRECATED


32 
	#NVXIO_NO_DEPRECATED


	)

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/FrameSource.hpp

29 #i‚de‡
NVXCUIO_FRAMESOURCE_HPP


30 
	#NVXCUIO_FRAMESOURCE_HPP


	)

32 
	~<mem‹y
>

33 
	~<°rög
>

35 
	~<NVX/nvxcu.h
>

36 
	~<NVX/Exp‹t.hµ
>

47 
«me•a˚
 
	gnvxio


69 ˛as†
	cNVXIO_EXPORT
 
	gFømeSour˚


71 
	gpublic
:

75 
	sP¨amëîs


77 
uöt32_t
 
‰ameWidth
;

78 
uöt32_t
 
	g‰ameHeight
;

83 
nvxcu_df_image_e
 
	gf‹m©
;

84 
uöt32_t
 
	gÂs
;

86 
P¨amëîs
():

87 
‰ameWidth
(-1),

88 
‰ameHeight
(-1),

89 
f‹m©
((
nvxcu_df_image_e
)0),

90 
Âs
(-1)

97 
	eSour˚Ty≥


99 
	gUNKNOWN_SOURCE
,

100 
	gSINGLE_IMAGE_SOURCE
,

101 
	gIMAGE_SEQUENCE_SOURCE
,

102 
	gVIDEO_SOURCE
,

103 
	gCAMERA_SOURCE


109 
	eFømeSètus


111 
	gOK
,

112 
	gTIMEOUT
,

113 
	gCLOSED


119 
vútuÆ
 
boﬁ
 
›í
() = 0;

131 
vútuÆ
 
	gFømeSour˚
::
FømeSètus
 
„tch
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
image
, 
uöt32_t
 
timeout
 = 5 ) = 0;

138 
vútuÆ
 
	gFømeSour˚
::
P¨amëîs
 
gëC⁄figuøti⁄
() = 0;

157 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
) = 0;

162 
vútuÆ
 
˛o£
() = 0;

167 
	gvútuÆ
 ~
FømeSour˚
()

175 
	gFømeSour˚
::
Sour˚Ty≥
 
gëSour˚Ty≥
() const

177  
sour˚Ty≥
;

185 
	g°d
::
°rög
 
gëSour˚Name
() const

187  
sour˚Name
;

190 
	g¥Ÿe˘ed
:

191 
FømeSour˚
(FømeSour˚::
Sour˚Ty≥
 
ty≥
 = FømeSour˚::
UNKNOWN_SOURCE
, c⁄° 
°d
::
°rög
 & 
«me
 = "Undefined"):

192 
sour˚Ty≥
(
ty≥
),

193 
sour˚Name
(
«me
)

196 c⁄° 
	gFømeSour˚
::
Sour˚Ty≥
 
sour˚Ty≥
;

197 c⁄° 
	g°d
::
°rög
 
sour˚Name
;

218 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
FømeSour˚
> 
¸óãDeÁu…FømeSour˚
(c⁄° 
°d
::
°rög
& 
uri
);

232 
NVXIO_EXPORT
 
nvxcu_pôch_löór_image_t
 
lﬂdImageFromFûe
(c⁄° 
°d
::
°rög
& 
fûeName
, 
nvxcu_df_image_e
 
f‹m©
 = 
NVXCU_DF_IMAGE_RGB
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/OptionHandler.hpp

29 #i‚de‡
NVXIO_OPTIONHANDLER_HPP


30 
	#NVXIO_OPTIONHANDLER_HPP


	)

32 
	~<NVX/Exp‹t.hµ
>

34 
	~"R™ge.hµ
"

41 
«me•a˚
 
	gnvxio


52 ˛as†
	cNVXIO_EXPORT
 
	gO±i⁄H™dÀr


54 
	g¥iv©e
:

55 
ãm∂©e
 <
ty≥«me
 
T
>

56 
	sPaúLi°


58 
°d
::
	töôülizî_li°
<
	t°d
::
	t∑ú
<°d::
	t°rög
, 
	tT
>> 
	tty≥
;

61 
	gpublic
:

62 
°d
::
	tunique_±r
<
	tO±i⁄H™dÀr
> 
	t±r
;

64 
	gvútuÆ
 ~
O±i⁄H™dÀr
();

70 
vútuÆ
 
	g°d
::
°rög
 
gëPœ˚hﬁdî
() const = 0;

76 
vútuÆ
 
	g°d
::
°rög
 
gëC⁄°øötSåög
() const;

82 
vútuÆ
 
	g°d
::
°rög
 
gëDeÁu…Såög
() const = 0;

89 
vútuÆ
 
	g°d
::
°rög
 
¥o˚ssVÆue
(c⁄° 
°d
::°rög &
vÆueSå
) const = 0;

100 
±r
 
°rög
(
°d
::°rög *
ªsu…
);

112 
±r
 
öãgî
(*
ªsu…
, c⁄° 
R™ge
<> &
vÆidR™ge
 = 
ønges
::
Æl
<>());

121 
±r
 
unsig√dI¡egî
(*
ªsu…
, c⁄° 
R™ge
<> &
vÆidR™ge
 = 
ønges
::
Æl
<>());

130 
±r
 
ªÆ
(*
ªsu…
, c⁄° 
R™ge
<> &
vÆidR™ge
 = 
ønges
::
Æl
<>());

139 
±r
 
ªÆ
(*
ªsu…
, c⁄° 
R™ge
<> &
vÆidR™ge
 = 
ønges
::
Æl
<>());

151 
±r
 
⁄eOf
(
°d
::
°rög
 *
ªsu…
, std::
öôülizî_li°
<°d::°rög> 
ÆlowedVÆues
);

161 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gIt
>

162 
±r
 
⁄eOf
(
T
 *
ªsu…
, 
It
 
fú°
, Ià
œ°
);

181 
	gãm∂©e
 <
ty≥«me
 
	gT
>

182 
±r
 
⁄eOf
(
T
 *
ªsu…
, 
ty≥«me
 
PaúLi°
<T>::
ty≥
 
ÆlowedVÆues
);

187 
	~"dëaû/O±i⁄H™dÀr.hµ
"

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/ProfilerRange.hpp

29 #i‚de‡
NVXIO_PROFILERRANGE_HPP


30 
	#NVXIO_PROFILERRANGE_HPP


	)

32 
	~<°döt.h
>

33 
	~<NVX/Exp‹t.hµ
>

45 
«me•a˚
 
	gnvxio
 {

52 ˛as†
	cNVXIO_EXPORT
 
	gProfûîR™ge


54 
	gpublic
:

60 
ProfûîR™ge
(
uöt32_t
 
cﬁ‹
, c⁄° * 
mesßge
);

65 ~
ProfûîR™ge
();

67 
ProfûîR™ge
(c⁄° ProfûîR™ge&Ë
dñëe
;

68 
	gProfûîR™ge
& 
	g›î©‹
 =(c⁄° 
ProfûîR™ge
&Ë
dñëe
;

74 c⁄° 
uöt32_t
 
	gCOLOR_ARGB_FUSCHIA
 = 0xFFCC0066;

79 c⁄° 
uöt32_t
 
	gCOLOR_ARGB_ORANGE
 = 0xFFCC6600;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/Range.hpp

29 #i‚de‡
NVXIO_RANGE_HPP


30 
	#NVXIO_RANGE_HPP


	)

32 
	~<limôs
>

39 
«me•a˚
 
	gnvxio


55 
	gãm∂©e
 <
ty≥«me
 
	gT
>

56 
	sR™ge


58 
T
 
	glow
;

59 
T
 
	ghigh
;

60 
boﬁ
 
	glowIn˛usive
;

61 
boﬁ
 
	ghighIn˛usive
;

68 
boﬁ
 
lowC⁄°øöed
() const;

75 
boﬁ
 
highC⁄°øöed
() const;

81 
boﬁ
 
c⁄èös
(
T
 
x
) const;

84 
	gãm∂©e
 <
ty≥«me
 
	gT
>

85 
ölöe
 
boﬁ
 
	gR™ge
<
	gT
>::
lowC⁄°øöed
() const

87  
low
 !
°d
::
numîic_limôs
<
T
>::
lowe°
(Ë|| !
lowIn˛usive
;

90 
	gãm∂©e
 <
ty≥«me
 
	gT
>

91 
ölöe
 
boﬁ
 
	gR™ge
<
	gT
>::
highC⁄°øöed
() const

93  
high
 !
°d
::
numîic_limôs
<
T
>::
max
(Ë|| !
highIn˛usive
;

96 
	gãm∂©e
 <
ty≥«me
 
	gT
>

97 
ölöe
 
boﬁ
 
	gR™ge
<
	gT
>::
c⁄èös
(
T
 
x
) const

99 
boﬁ
 
lowOk
 = 
lowIn˛usive
 ? 
x
 >
low
 : x >Üow;

100 
boﬁ
 
	ghighOk
 = 
highIn˛usive
 ? 
x
 <
high
 : x < high;

101  
	glowOk
 && 
	ghighOk
;

111 
	gãm∂©e
 <
ty≥«me
 
	gT
>

112 
ölöe
 
	gR™ge
<
	gT
> 
	g›î©‹
 & (c⁄° R™ge<T> &
	gr1
, c⁄° R™ge<T> &
	gr2
)

114 
	gR™ge
<
	gT
> 
	gªsu…
;

116 i‡(
	gr1
.
	glow
 < 
	gr2
.low)

118 
	gªsu…
.
	glow
 = 
r2
.
low
;

119 
	gªsu…
.
	glowIn˛usive
 = 
r2
.
lowIn˛usive
;

121 i‡(
	gr1
.
	glow
 > 
	gr2
.low)

123 
	gªsu…
.
	glow
 = 
r1
.
low
;

124 
	gªsu…
.
	glowIn˛usive
 = 
r1
.
lowIn˛usive
;

128 
	gªsu…
.
	glow
 = 
r1
.
low
;

129 
	gªsu…
.
	glowIn˛usive
 = 
r1
.
lowIn˛usive
 && 
r2
.lowInclusive;

132 i‡(
	gr1
.
	ghigh
 < 
	gr2
.high)

134 
	gªsu…
.
	ghigh
 = 
r1
.
high
;

135 
	gªsu…
.
	ghighIn˛usive
 = 
r1
.
highIn˛usive
;

137 i‡(
	gr1
.
	ghigh
 > 
	gr2
.high)

139 
	gªsu…
.
	ghigh
 = 
r2
.
high
;

140 
	gªsu…
.
	ghighIn˛usive
 = 
r2
.
highIn˛usive
;

144 
	gªsu…
.
	ghigh
 = 
r2
.
high
;

145 
	gªsu…
.
	ghighIn˛usive
 = 
r1
.
highIn˛usive
 && 
r2
.highInclusive;

148  
	gªsu…
;

155 
«me•a˚
 
	gønges


162 
	gãm∂©e
 <
ty≥«me
 
	gT
>

163 
ölöe
 
	gR™ge
<
	gT
> 
Æl
() {

164  { 
	g°d
::
numîic_limôs
<
T
>::
lowe°
(), std::numîic_limôs<T>::
max
(), 
	gåue
,Årue };

173 
	gãm∂©e
 <
ty≥«me
 
	gT
>

174 
ölöe
 
	gR™ge
<
	gT
> 
ÀssTh™
(
T
 
x
) {

175  { 
	g°d
::
numîic_limôs
<
T
>::
lowe°
(), 
	gx
, 
	gåue
, 
	gÁl£
 };

184 
	gãm∂©e
 <
ty≥«me
 
	gT
>

185 
ölöe
 
	gR™ge
<
	gT
> 
m‹eTh™
(
T
 
x
) {

186  { 
	gx
, 
	g°d
::
numîic_limôs
<
T
>::
max
(), 
	gÁl£
, 
	gåue
 };

195 
	gãm∂©e
 <
ty≥«me
 
	gT
>

196 
ölöe
 
	gR™ge
<
	gT
> 
©Ló°
(
T
 
x
) {

197  { 
	gx
, 
	g°d
::
numîic_limôs
<
T
>::
max
(), 
	gåue
,Årue };

206 
	gãm∂©e
 <
ty≥«me
 
	gT
>

207 
ölöe
 
	gR™ge
<
	gT
> 
©Mo°
(
T
 
x
) {

208  { 
	g°d
::
numîic_limôs
<
T
>::
lowe°
(), 
	gx
, 
	gåue
,Årue };

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/Render.hpp

29 #i‚de‡
NVXCUIO_RENDER_HPP


30 
	#NVXCUIO_RENDER_HPP


	)

32 
	~<mem‹y
>

33 
	~<°rög
>

35 
	~<NVX/nvxcu.h
>

36 
	~<NVX/Exp‹t.hµ
>

38 #i‚de‡
__ANDROID__


39 
	~<NVX/Aµliˇti⁄.hµ
>

47 
«me•a˚
 
	gnvxio


69 ˛as†
	cNVXIO_EXPORT
 
	gRídî


71 
	gpublic
:

76 
	eT¨gëTy≥


78 
UNKNOWN_RENDER
,

79 
	gWINDOW_RENDER
,

80 
	gVIDEO_RENDER
,

81 
	gIMAGE_RENDER


87 
	sTextBoxStyÀ


89 
uöt8_t
 
	gcﬁ‹
[4];

90 
uöt8_t
 
	gbgcﬁ‹
[4];

91 
nvxcu_co‹dö©es2d_t
 
	g‹igö
;

97 
	sFótuªStyÀ


99 
uöt8_t
 
	gcﬁ‹
[4];

100 
	gødius
;

106 
	sLöeStyÀ


108 
uöt8_t
 
	gcﬁ‹
[4];

109 
öt32_t
 
	gthick√ss
;

115 
	sMŸi⁄FõldStyÀ


117 
uöt8_t
 
	gcﬁ‹
[4];

124 
	sDëe˘edObje˘StyÀ


127 
	g°d
::
°rög
 
œbñ
;

129 
uöt8_t
 
	gcﬁ‹
[4];

131 
uöt8_t
 
	gthick√ss
;

133 
uöt8_t
 
	gødius
;

135 
boﬁ
 
	gisHÆfTøn•¨ít
;

141 
	sCú˛eStyÀ


143 
uöt8_t
 
	gcﬁ‹
[4];

144 
öt32_t
 
	gthick√ss
;

147 #i‚de‡
__ANDROID__


151 
	eMou£Buâ⁄Evít


153 
	gLe·Buâ⁄Down
,

154 
	gLe·Buâ⁄Up
,

155 
	gMiddÀBuâ⁄Down
,

156 
	gMiddÀBuâ⁄Up
,

157 
	gRightBuâ⁄Down
,

158 
	gRightBuâ⁄Up
,

159 
	gMou£Move


169 (*
	gOnKeybﬂrdEvítCÆlback
)(* 
	tc⁄ãxt
, 
	tkey
, 
	tuöt32_t
 
	tx
, uöt32_à
	ty
);

178 (*
	gOnMou£EvítCÆlback
)(* 
	tc⁄ãxt
, 
	tMou£Buâ⁄Evít
 
	tevít
, 
	tuöt32_t
 
	tx
, uöt32_à
	ty
);

185 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
) = 0;

192 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
) = 0;

199 
vútuÆ
 
putImage
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
image
) = 0;

206 
vútuÆ
 
putTextVõwp‹t
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
TextBoxStyÀ
& 
°yÀ
) = 0;

213 
vútuÆ
 
putFótuªs
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
loˇti⁄
, c⁄° 
FótuªStyÀ
& 
°yÀ
) = 0;

223 
vútuÆ
 
putFótuªs
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
loˇti⁄
, c⁄°Çvxcu_∂aö_¨øy_à& 
°yÀs
) = 0;

230 
vútuÆ
 
putLöes
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
löes
, c⁄° 
LöeStyÀ
& 
°yÀ
) = 0;

237 
vútuÆ
 
putC⁄vexPﬁyg⁄
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
vîti˚s
, c⁄° 
LöeStyÀ
& 
°yÀ
) = 0;

244 
vútuÆ
 
putMŸi⁄Fõld
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
fõld
, c⁄° 
MŸi⁄FõldStyÀ
& 
°yÀ
) = 0;

251 
vútuÆ
 
putObje˘Loˇti⁄
(c⁄° 
nvxcu_ª˘™gÀ_t
 & 
loˇti⁄
, c⁄° 
Dëe˘edObje˘StyÀ
& 
°yÀ
) = 0;

258 
vútuÆ
 
putCú˛es
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
cú˛es
, c⁄° 
Cú˛eStyÀ
& 
°yÀ
) = 0;

266 
vútuÆ
 
putAºows
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
ﬁd_poöts
, c⁄°Çvxcu_∂aö_¨øy_à& 
√w_poöts
,

267 c⁄° 
LöeStyÀ
& 
°yÀ
) = 0;

269 #i‚de‡
__ANDROID__


275 
vútuÆ
 
boﬁ
 
Êush
() = 0;

280 
vútuÆ
 
˛o£
() = 0;

287 
T¨gëTy≥
 
gëT¨gëTy≥
() const

289  
	gèrgëTy≥
;

296 
	g°d
::
°rög
 
gëRídîName
() const

298  
ªndîName
;

305 
vútuÆ
 
uöt32_t
 
gëVõwp‹tWidth
() const = 0;

311 
vútuÆ
 
uöt32_t
 
gëVõwp‹tHeight
() const = 0;

316 
	gvútuÆ
 ~
Rídî
()

319 
	g¥Ÿe˘ed
:

321 
Rídî
(
T¨gëTy≥
 
ty≥
 = Rídî::
UNKNOWN_RENDER
, 
°d
::
°rög
 
«me
 = "Undefined"):

322 
èrgëTy≥
(
ty≥
),

323 
ªndîName
(
«me
)

326 c⁄° 
T¨gëTy≥
 
	gèrgëTy≥
;

327 c⁄° 
	g°d
::
°rög
 
ªndîName
;

330 #ifde‡
__ANDROID__


342 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
Rídî
> 
¸óãRídî
(
uöt32_t
 
width
, uöt32_à
height
, 
boﬁ
 
doSˇÀ
 = 
åue
);

359 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
Rídî
> 
¸óãDeÁu…Rídî
(c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
,

360 
nvxcu_df_image_e
 
f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
, 
boﬁ
 
doSˇÀ
 = 
åue
,

361 
boﬁ
 
fuŒS¸ìn
 = 
nvxio
::
Aµliˇti⁄
::
gë
().
gëFuŒS¸ìnFœg
());

376 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
Rídî
> 
¸óãVideoRídî
(c⁄° 
°d
::
°rög
& 
∑th
, 
uöt32_t
 
width
,

377 
uöt32_t
 
height
, 
nvxcu_df_image_e
 
f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
);

394 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
Rídî
> 
¸óãWödowRídî
(c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
,

395 
nvxcu_df_image_e
 
f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
, 
boﬁ
 
doSˇÀ
 = 
åue
,

396 
boﬁ
 
fuŒs¸ìn
 = 
nvxio
::
Aµliˇti⁄
::
gë
().
gëFuŒS¸ìnFœg
());

409 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
Rídî
> 
¸óãImageRídî
(c⁄° 
°d
::
°rög
& 
∑th
, 
uöt32_t
 
width
, uöt32_à
height
,

410 
nvxcu_df_image_e
 
f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/Render3D.hpp

29 #i‚de‡
NVXCUIO_RENDER3D_HPP


30 
	#NVXCUIO_RENDER3D_HPP


	)

32 
	~<°rög
>

33 
	~<ve˘‹
>

35 
	~<NVX/nvxcu.h
>

37 
	~<NVX/Exp‹t.hµ
>

38 
	~<NVX/Rídî.hµ
>

45 
«me•a˚
 
	gnvxio
 {

60 ˛as†
	cNVXIO_EXPORT
 
	gRídî3D


62 
	gpublic
:

67 
	eT¨gëTy≥


69 
UNKNOWN_RENDER
,

70 
	gBASE_RENDER_3D


79 
	sPœ√StyÀ


81 
	gmöDi°™˚
;

82 
	gmaxDi°™˚
;

91 
	sPoötCloudStyÀ


93 
	gmöDi°™˚
;

94 
	gmaxDi°™˚
;

100 
	eMou£Buâ⁄Evít


102 
	gLe·Buâ⁄Down
,

103 
	gLe·Buâ⁄Up
,

104 
	gMiddÀBuâ⁄Down
,

105 
	gMiddÀBuâ⁄Up
,

106 
	gRightBuâ⁄Down
,

107 
	gRightBuâ⁄Up
,

108 
	gMou£Move


118 (*
	gOnKeybﬂrdEvítCÆlback
)(* 
	tc⁄ãxt
, 
	tkey
, 
	tuöt32_t
 
	tx
, uöt32_à
	ty
);

126 (*
	gOnMou£EvítCÆlback
)(* 
	tc⁄ãxt
, 
	tMou£Buâ⁄Evít
 
	tevít
, 
	tuöt32_t
 
	tx
, uöt32_à
	ty
);

133 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
) = 0;

139 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
) = 0;

149 
vútuÆ
 
putPœ√s
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
∂™es
, * 
modñ
, c⁄° 
Pœ√StyÀ
& 
°yÀ
) = 0;

157 
vútuÆ
 
putPoötCloud
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
poöts
, * 
modñ
, c⁄° 
PoötCloudStyÀ
& 
°yÀ
) = 0;

164 
vútuÆ
 
boﬁ
 
Êush
() = 0;

169 
vútuÆ
 
˛o£
() = 0;

176 
vútuÆ
 
£tVõwM©rix
(* 
võw
) = 0;

183 
vútuÆ
 
gëVõwM©rix
(* 
võw
) const = 0;

190 
vútuÆ
 
£tProje˘i⁄M©rix
(* 
¥oje˘i⁄
) = 0;

196 
vútuÆ
 
gëProje˘i⁄M©rix
(* 
¥oje˘i⁄
) const = 0;

202 
vútuÆ
 
£tDeÁu…FOV
(
fov
) = 0;

209 
vútuÆ
 
íabÀDeÁu…KeybﬂrdEvítCÆlback
() = 0;

213 
vútuÆ
 
dißbÀDeÁu…KeybﬂrdEvítCÆlback
() = 0;

218 
vútuÆ
 
boﬁ
 
u£DeÁu…KeybﬂrdEvítCÆlback
() = 0;

224 
vútuÆ
 
uöt32_t
 
gëWidth
() const = 0;

229 
vútuÆ
 
uöt32_t
 
gëHeight
() const = 0;

235 
vútuÆ
 
putImage
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
image
) = 0;

242 
vútuÆ
 
putText
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
nvxio
::
Rídî
::
TextBoxStyÀ
& 
°yÀ
) = 0;

248 
T¨gëTy≥
 
gëT¨gëTy≥
() const

250  
	gèrgëTy≥
;

257 
	g°d
::
°rög
 
gëRídîName
() const

259  
ªndîName
;

265 
	gvútuÆ
 ~
Rídî3D
()

268 
	g¥Ÿe˘ed
:

269 
Rídî3D
(
T¨gëTy≥
 
ty≥
 = Rídî3D::
UNKNOWN_RENDER
, c⁄° 
°d
::
°rög
& 
«me
 = "Undefined"):

270 
èrgëTy≥
(
ty≥
),

271 
ªndîName
(
«me
)

274 c⁄° 
T¨gëTy≥
 
	gèrgëTy≥
;

275 c⁄° 
	g°d
::
°rög
 
ªndîName
;

289 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
Rídî3D
> 
¸óãDeÁu…Rídî3D
(
öt32_t
 
xPos
, i¡32_à
yPos
, c⁄° 
°d
::
°rög
& 
tôÀ
,

290 
uöt32_t
 
width
, uöt32_à
height
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/SyncTimer.hpp

29 #i‚de‡
NVXIO_SYNCTIMER_HPP


30 
	#NVXIO_SYNCTIMER_HPP


	)

32 
	~<mem‹y
>

34 
	~<NVX/Exp‹t.hµ
>

47 
«me•a˚
 
	gnvxio
 {

53 ˛as†
	cNVXIO_EXPORT
 
	gSyncTimî


55 
	gpublic
:

56 
vútuÆ
 ~
SyncTimî
(){}

62 
vútuÆ
 
¨m
(
≥riodSec⁄ds
) = 0;

70 
vútuÆ
 
synchr⁄ize
() = 0;

79 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
SyncTimî
> 
¸óãSyncTimî
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/ThreadSafeQueue.hpp

29 #i‚de‡
NVXIO_THREADSAFEQUEUE_HPP


30 
	#NVXIO_THREADSAFEQUEUE_HPP


	)

32 
	~<ˇs£π
>

33 
	~<chr⁄o
>

34 
	~<c⁄dôi⁄_v¨übÀ
>

35 
	~<c°dlib
>

36 
	~<queue
>

37 
	~<muãx
>

44 
«me•a˚
 
	gnvxio


58 c⁄° 
	gTIMEOUT_INFINITE
 = 0xFFFFFFFF;

66 
	gãm∂©e
 <
ty≥«me
 
	gT
>

67 ˛as†
	cThªadSa„Queue


69 
	gpublic
:

76 
ex∂icô
 
ThªadSa„Queue
(
°d
::
size_t
 
maxSize
) : maxSize(maxSize)

88 
boﬁ
 
push
(c⁄° 
T
& 
ôem
, 
timeout
 = 1 )

90 
°d
::
unique_lock
<°d::
muãx
> 
lock
(mutex);

92 
boﬁ
 
	g°ûlFuŒ
 = !
c⁄dN⁄FuŒ
.
waô_f‹
(
lock
,

93 
°d
::
chr⁄o
::
mûli£c⁄ds
(
timeout
),

94 [
this
](Ë{  
queue
.
size
(Ë< 
maxSize
; });

96 i‡(
	g°ûlFuŒ
Ë 
	gÁl£
;

98 
	gqueue
.
push
(
ôem
);

99 
	gc⁄dN⁄Em±y
.
nŸify_Æl
();

101  
	gåue
;

113 
boﬁ
 
p›
(
T
& 
ôem
, 
timeout
 = 1 )

115 
°d
::
unique_lock
<°d::
muãx
> 
lock
(mutex);

117 
boﬁ
 
	g°ûlEm±y
 = !
c⁄dN⁄Em±y
.
waô_f‹
(
lock
,

118 
°d
::
chr⁄o
::
mûli£c⁄ds
(
timeout
),

119 [
this
](Ë{  !
queue
.
em±y
(); });

121 i‡(
	g°ûlEm±y
Ë 
	gÁl£
;

123 
	gôem
 = 
queue
.
‰⁄t
();

124 
	gqueue
.
p›
();

125 
	gc⁄dN⁄FuŒ
.
nŸify_Æl
();

127  
	gåue
;

133 
˛ór
()

135 
	g°d
::
lock_gu¨d
<
°d
::
muãx
> 
lock
(mutex);

137 !
	gqueue
.
em±y
())

138 
	gqueue
.
p›
();

140 
	gc⁄dN⁄FuŒ
.
nŸify_Æl
();

143 
	g¥Ÿe˘ed
:

144 
°d
::
queue
<
T
> queue;

145 
	g°d
::
size_t
 
maxSize
;

147 
	g°d
::
muãx
 mutex;

148 
	g°d
::
c⁄dôi⁄_v¨übÀ
 
c⁄dN⁄Em±y
, 
	gc⁄dN⁄FuŒ
;

150 
ThªadSa„Queue
(const ThreadSafeQueue&);

151 
	gThªadSa„Queue
& 
	g›î©‹
 =(c⁄° 
ThªadSa„Queue
&);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/Utility.hpp

29 #i‚de‡
NVXCUIO_UTILITY_HPP


30 
	#NVXCUIO_UTILITY_HPP


	)

32 
	~<io°ªam
>

33 
	~<mem‹y
>

34 
	~<s°ªam
>

35 
	~<°dex˚±
>

36 
	~<utûôy
>

37 
	~<ve˘‹
>

38 
	~<°rög
>

40 #ifde‡
__ANDROID__


41 
	~<™droid/log.h
>

44 
	~<NVX/nvx.h
>

45 
	~<NVX/Exp‹t.hµ
>

52 
	#NVXIO_THROW_EXCEPTION
(
msg
) \

54 
°d
::
o°rög°ªam
 
o°r_
; \

55 
o°r_
 << 
msg
; \

56 
throw
 
°d
::
	`ru¡ime_îr‹
(
o°r_
.
	`°r
()); \

57 } 0)

	)

59 
	#NVXIO_ASSERT
(
c⁄d
) \

62 i‡(!(
c⁄d
)) \

64 
	`NVXIO_THROW_EXCEPTION
(#c⁄d << " faûuª i¿fûê" << 
__FILE__
 << "Üöê" << 
__LINE__
); \

66 } 0)

	)

67 
	#THROW_EXCEPTION
(
msg
) \

69 
°d
::
o°rög°ªam
 
o°r_
; \

70 
o°r_
 << 
msg
; \

71 
throw
 
°d
::
	`ru¡ime_îr‹
(
o°r_
.
	`°r
()); \

72 } 0)

	)

74 
	#ASSERT
(
c⁄d
) \

77 
boﬁ
 
°©
 = (
c⁄d
); \

78 i‡(!
°©
) \

80 
	`THROW_EXCEPTION
(#c⁄d << " faûuª i¿fûê" << 
__FILE__
 << "Üöê" << 
__LINE__
); \

82 } 0)

	)

84 
	#NVXCU_SAFE_CALL
(
nvxcuOp
) \

87 
nvxcu_îr‹_°©us_e
 
°©
 = (
nvxcuOp
); \

88 i‡(
°©
 !
NVXCU_SUCCESS
) \

90 
	`THROW_EXCEPTION
(#nvxcuO∞<< " faûuª [°©u†" << 
°©
 << "]" << " i¿fûê" << 
__FILE__
 << "Üöê" << 
__LINE__
); \

92 } 0)

	)

94 
	#CUDA_SAFE_CALL
(
cudaOp
) \

97 
cudaEº‹_t
 
îr
 = (
cudaOp
); \

98 i‡(
îr
 !
cudaSuc˚ss
) \

100 
	`THROW_EXCEPTION
(#cudaO∞<< " faûuª [CUDAÉº‹ = " << 
îr
 << "]" << " i¿fûê" << 
__FILE__
 << "Üöê" << 
__LINE__
); \

102 } 0)

	)

104 
	#NVXIO_CUDA_SAFE_CALL
(
cudaOp
) \

107 
cudaEº‹_t
 
îr
 = (
cudaOp
); \

108 i‡(
îr
 !
cudaSuc˚ss
) \

110 
°d
::
o°rög°ªam
 
o°r
; \

111 
o°r
 << "CUDA Eº‹ i¿" << #cudaO∞<< 
__FILE__
 << " fûê" << 
__LINE__
 << "Üöê: " << 
	`cudaGëEº‹Såög
(
îr
); \

112 
throw
 
°d
::
	`ru¡ime_îr‹
(
o°r
.
	`°r
()); \

114 } 0)

	)

117 
«me•a˚
 
	gnvxio


124 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
... 
	gArgs
>

125 
	g°d
::
unique_±r
<
T
> 
makeUP
(
Args
 &&... 
¨gs
)

127  
°d
::
unique_±r
<
T
>(
√w
 T(°d::
f‹w¨d
<
Args
>(
¨gs
)...));

130 #i‚de‡
__ANDROID__


177 
NVXIO_EXPORT
 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
gëSuµ‹ãdFótuªs
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/detail/OptionHandler.hpp

29 #i‚de‡
NVXIO_DETAIL_OPTIONHANDLER_HPP


30 
	#NVXIO_DETAIL_OPTIONHANDLER_HPP


	)

32 
	~<Æg‹ôhm
>

33 
	~<ˇs£π
>

34 
	~<m≠
>

36 
	~"NVX/Utûôy.hµ
"

38 
«me•a˚
 
	gnvxio
 {Çame•a˚ 
	gdëaû
 {

40 
	gãm∂©e
 <
ty≥«me
 
	gT
>

41 ˛as†
	cO±i⁄H™dÀrO√Of
 : 
public
 
O±i⁄H™dÀr


43 
public
:

44 
ãm∂©e
 <
ty≥«me
 
It
>

45 
O±i⁄H™dÀrO√Of
(
T
 *
ªsu…
, 
It
 
fú°
, Ià
œ°
Ë:Ñesu…‘esu…), 
ÆlowedVÆues
(first,Üast)

47 
as£π
(!
ÆlowedVÆues
.
em±y
());

48 autÿ
	gdeÁu…It
 = 
°d
::
föd_if
(
ÆlowedVÆues
.
begö
(),áŒowedVÆues.
íd
(),

49 [
ªsu…
](c⁄° 
°d
::
∑ú
<°d::
°rög
, 
T
> &
p
Ë{ Ö.
£c⁄d
 == *result; });

50 
as£π
(
deÁu…It
 !
ÆlowedVÆues
.
íd
());

51 
	gdeÁu…Såög
 = 
°d
::
°rög
("\""Ë+ 
deÁu…It
->
fú°
 + std::string("\"");

54 
	g°d
::
°rög
 
gëPœ˚hﬁdî
() const {  "STRING"; }

56 
	g°d
::
°rög
 
gëDeÁu…Såög
(Ëc⁄° {  
deÁu…Såög
; }

58 
	g°d
::
°rög
 
gëC⁄°øötSåög
() const

60 
°d
::
°rög
 
c⁄°øöt
 = "must be one of \"";

61 autÿ
	gô
 = 
ÆlowedVÆues
.
begö
();

62 
	gc⁄°øöt
 +
ô
->
fú°
;

63 
	gc⁄°øöt
 += "\"";

65 ++
	gô
; ià!
ÆlowedVÆues
.
íd
(); ++it)

67 
	gc⁄°øöt
 += ", \"";

68 
	gc⁄°øöt
 +
ô
->
fú°
;

69 
	gc⁄°øöt
 += "\"";

72  
	gc⁄°øöt
;

75 
	g°d
::
°rög
 
¥o˚ssVÆue
(c⁄° 
°d
::°rög &
vÆueSå
) const {

76 autÿ
ô
 = 
ÆlowedVÆues
.
föd
(
vÆueSå
);

77 i‡(
	gô
 =
ÆlowedVÆues
.
íd
()Ë 
gëC⁄°øötSåög
();

78 *
	gªsu…
 = 
ô
->
£c⁄d
;

82 
	g¥iv©e
:

83 
T
 *
ªsu…
;

84 
	g°d
::
m≠
<
°d
::
°rög
, 
	gT
> 
	gÆlowedVÆues
;

85 
	g°d
::
°rög
 
deÁu…Såög
;

90 
	gãm∂©e
 <
ty≥«me
 
	gT
>

91 
	gnvxio
::
O±i⁄H™dÀr
::
±r
 
nvxio
::O±i⁄H™dÀr::
⁄eOf
(
T
 *
ªsu…
, 
ty≥«me
 
PaúLi°
<T>::
ty≥
 
ÆlowedVÆues
)

93  
nvxio
::
makeUP
<
dëaû
::
O±i⁄H™dÀrO√Of
<
T
>>(
ªsu…
, 
	gÆlowedVÆues
.
begö
(),áŒowedVÆues.
íd
());

96 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gIt
>

97 
	gnvxio
::
O±i⁄H™dÀr
::
±r
 
nvxio
::O±i⁄H™dÀr::
	$⁄eOf
(
T
 *
ªsu…
, 
It
 
fú°
, Ià
œ°
)

99 
ty≥«me
 
	tIt
::
	tvÆue_ty≥
 value_type;

101 
°d
::
ve˘‹
<°d::
∑ú
<
vÆue_ty≥
, vÆue_ty≥>> 
ÆlowedPaús
;

103 
It
 
begö
 = 
fú°
; begö !
œ°
; ++begin)

105 c⁄° 
vÆue_ty≥
 & 
v
 = *
begö
;

106 
ÆlowedPaús
.
	`em∂a˚_back
(
v
, v);

109  
nvxio
::
makeUP
<
dëaû
::
O±i⁄H™dÀrO√Of
<
T
>>(
ªsu…
, 
ÆlowedPaús
.
	`begö
(),áŒowedPaús.
	`íd
());

110 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/OVX/FrameSourceOVX.hpp

29 #i‚de‡
NVXIO_FRAMESOURCE_HPP


30 
	#NVXIO_FRAMESOURCE_HPP


	)

32 
	~<mem‹y
>

33 
	~<°rög
>

35 
	~<VX/vx.h
>

36 
	~<NVX/Exp‹t.hµ
>

43 
«me•a˚
 
	govxio


155 ˛as†
	cNVXIO_EXPORT
 
	gFømeSour˚


157 
	gpublic
:

161 
	sP¨amëîs


163 
vx_uöt32
 
‰ameWidth
;

164 
vx_uöt32
 
	g‰ameHeight
;

169 
vx_df_image
 
	gf‹m©
;

170 
vx_uöt32
 
	gÂs
;

172 
P¨amëîs
():

173 
‰ameWidth
(-1),

174 
‰ameHeight
(-1),

175 
f‹m©
(
VX_DF_IMAGE_VIRT
),

176 
Âs
(-1)

183 
	eSour˚Ty≥


185 
	gUNKNOWN_SOURCE
,

186 
	gSINGLE_IMAGE_SOURCE
,

187 
	gIMAGE_SEQUENCE_SOURCE
,

188 
	gVIDEO_SOURCE
,

189 
	gCAMERA_SOURCE


195 
	eFømeSètus


197 
	gOK
,

198 
	gTIMEOUT
,

199 
	gCLOSED


205 
vútuÆ
 
boﬁ
 
›í
() = 0;

217 
vútuÆ
 
	gFømeSour˚
::
FømeSètus
 
„tch
(
vx_image
 
image
, 
vx_uöt32
 
timeout
 = 5 ) = 0;

224 
vútuÆ
 
	gFømeSour˚
::
P¨amëîs
 
gëC⁄figuøti⁄
() = 0;

243 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
) = 0;

248 
vútuÆ
 
˛o£
() = 0;

253 
	gvútuÆ
 ~
FømeSour˚
()

261 
	gFømeSour˚
::
Sour˚Ty≥
 
gëSour˚Ty≥
() const

263  
sour˚Ty≥
;

271 
	g°d
::
°rög
 
gëSour˚Name
() const

273  
sour˚Name
;

276 
	g¥Ÿe˘ed
:

277 
FømeSour˚
(FømeSour˚::
Sour˚Ty≥
 
ty≥
 = FømeSour˚::
UNKNOWN_SOURCE
, c⁄° 
°d
::
°rög
 & 
«me
 = "Undefined"):

278 
sour˚Ty≥
(
ty≥
),

279 
sour˚Name
(
«me
)

282 c⁄° 
	gFømeSour˚
::
Sour˚Ty≥
 
sour˚Ty≥
;

283 c⁄° 
	g°d
::
°rög
 
sour˚Name
;

305 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
FømeSour˚
> 
¸óãDeÁu…FømeSour˚
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
°d
::
°rög
& 
uri
);

320 
NVXIO_EXPORT
 
vx_image
 
lﬂdImageFromFûe
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
°d
::
°rög
& 
fûeName
, 
vx_df_image
 
f‹m©
 = 
VX_DF_IMAGE_RGB
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/OVX/Render3DOVX.hpp

29 #i‚de‡
NVXIO_RENDER3D_HPP


30 
	#NVXIO_RENDER3D_HPP


	)

32 
	~<°rög
>

33 
	~<ve˘‹
>

35 
	~<VX/vx.h
>

36 
	~<NVX/Exp‹t.hµ
>

37 
	~<OVX/RídîOVX.hµ
>

44 
«me•a˚
 
	govxio
 {

67 ˛as†
	cNVXIO_EXPORT
 
	gRídî3D


69 
	gpublic
:

74 
	eT¨gëTy≥


76 
UNKNOWN_RENDER
,

77 
	gBASE_RENDER_3D


86 
	sPœ√StyÀ


88 
vx_Êﬂt32
 
	gmöDi°™˚
;

89 
vx_Êﬂt32
 
	gmaxDi°™˚
;

98 
	sPoötCloudStyÀ


100 
vx_Êﬂt32
 
	gmöDi°™˚
;

101 
vx_Êﬂt32
 
	gmaxDi°™˚
;

107 
	eMou£Buâ⁄Evít


109 
	gLe·Buâ⁄Down
,

110 
	gLe·Buâ⁄Up
,

111 
	gMiddÀBuâ⁄Down
,

112 
	gMiddÀBuâ⁄Up
,

113 
	gRightBuâ⁄Down
,

114 
	gRightBuâ⁄Up
,

115 
	gMou£Move


125 (*
	gOnKeybﬂrdEvítCÆlback
)(* 
	tc⁄ãxt
, 
	tvx_ch¨
 
	tkey
, 
	tvx_uöt32
 
	tx
, vx_uöt32 
	ty
);

133 (*
	gOnMou£EvítCÆlback
)(* 
	tc⁄ãxt
, 
	tMou£Buâ⁄Evít
 
	tevít
, 
	tvx_uöt32
 
	tx
, vx_uöt32 
	ty
);

140 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
) = 0;

146 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
) = 0;

156 
vútuÆ
 
putPœ√s
(
vx_¨øy
 
∂™es
, 
vx_m©rix
 
modñ
, c⁄° 
Pœ√StyÀ
& 
°yÀ
) = 0;

164 
vútuÆ
 
putPoötCloud
(
vx_¨øy
 
poöts
, 
vx_m©rix
 
modñ
, c⁄° 
PoötCloudStyÀ
& 
°yÀ
) = 0;

171 
vútuÆ
 
boﬁ
 
Êush
() = 0;

176 
vútuÆ
 
˛o£
() = 0;

183 
vútuÆ
 
£tVõwM©rix
(
vx_m©rix
 
võw
) = 0;

190 
vútuÆ
 
gëVõwM©rix
(
vx_m©rix
 
võw
) const = 0;

197 
vútuÆ
 
£tProje˘i⁄M©rix
(
vx_m©rix
 
¥oje˘i⁄
) = 0;

203 
vútuÆ
 
gëProje˘i⁄M©rix
(
vx_m©rix
 
¥oje˘i⁄
) const = 0;

209 
vútuÆ
 
£tDeÁu…FOV
(
fov
) = 0;

216 
vútuÆ
 
íabÀDeÁu…KeybﬂrdEvítCÆlback
() = 0;

220 
vútuÆ
 
dißbÀDeÁu…KeybﬂrdEvítCÆlback
() = 0;

225 
vútuÆ
 
boﬁ
 
u£DeÁu…KeybﬂrdEvítCÆlback
() = 0;

231 
vútuÆ
 
vx_uöt32
 
gëWidth
() const = 0;

236 
vútuÆ
 
vx_uöt32
 
gëHeight
() const = 0;

242 
vútuÆ
 
putImage
(
vx_image
 
image
) = 0;

249 
vútuÆ
 
putText
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
ovxio
::
Rídî
::
TextBoxStyÀ
& 
°yÀ
) = 0;

255 
T¨gëTy≥
 
gëT¨gëTy≥
() const

257  
	gèrgëTy≥
;

264 
	g°d
::
°rög
 
gëRídîName
() const

266  
ªndîName
;

272 
	gvútuÆ
 ~
Rídî3D
()

275 
	g¥Ÿe˘ed
:

276 
Rídî3D
(
T¨gëTy≥
 
ty≥
 = Rídî3D::
UNKNOWN_RENDER
, c⁄° 
°d
::
°rög
& 
«me
 = "Undefined"):

277 
èrgëTy≥
(
ty≥
),

278 
ªndîName
(
«me
)

281 c⁄° 
T¨gëTy≥
 
	gèrgëTy≥
;

282 c⁄° 
	g°d
::
°rög
 
ªndîName
;

297 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
Rídî3D
> 
¸óãDeÁu…Rídî3D
(
vx_c⁄ãxt
 
c⁄ãxt
, 
xPos
, 
yPos
,c⁄° 
°d
::
°rög
& 
tôÀ
,

298 
vx_uöt32
 
width
, vx_uöt32 
height
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/OVX/RenderOVX.hpp

29 #i‚de‡
NVXIO_RENDER_HPP


30 
	#NVXIO_RENDER_HPP


	)

32 
	~<mem‹y
>

33 
	~<°rög
>

35 
	~<VX/vx.h
>

36 
	~<NVX/Exp‹t.hµ
>

38 #i‚de‡
__ANDROID__


39 
	~<NVX/Aµliˇti⁄.hµ
>

47 
«me•a˚
 
	govxio


86 ˛as†
	cNVXIO_EXPORT
 
	gRídî


88 
	gpublic
:

93 
	eT¨gëTy≥


95 
UNKNOWN_RENDER
,

96 
	gWINDOW_RENDER
,

97 
	gVIDEO_RENDER
,

98 
	gIMAGE_RENDER


105 
	sTextBoxStyÀ


107 
vx_uöt8
 
	gcﬁ‹
[4];

108 
vx_uöt8
 
	gbgcﬁ‹
[4];

109 
vx_co‹dö©es2d_t
 
	g‹igö
;

116 
	sFótuªStyÀ


118 
vx_uöt8
 
	gcﬁ‹
[4];

119 
	gødius
;

125 
	sLöeStyÀ


127 
vx_uöt8
 
	gcﬁ‹
[4];

128 
	gthick√ss
;

134 
	sMŸi⁄FõldStyÀ


136 
vx_uöt8
 
	gcﬁ‹
[4];

143 
	sDëe˘edObje˘StyÀ


146 
	g°d
::
°rög
 
œbñ
;

148 
vx_uöt8
 
	gcﬁ‹
[4];

150 
vx_uöt8
 
	gthick√ss
;

152 
vx_uöt8
 
	gødius
;

154 
boﬁ
 
	gisHÆfTøn•¨ít
;

160 
	sCú˛eStyÀ


162 
vx_uöt8
 
	gcﬁ‹
[4];

163 
	gthick√ss
;

166 #i‚de‡
__ANDROID__


170 
	eMou£Buâ⁄Evít


172 
	gLe·Buâ⁄Down
,

173 
	gLe·Buâ⁄Up
,

174 
	gMiddÀBuâ⁄Down
,

175 
	gMiddÀBuâ⁄Up
,

176 
	gRightBuâ⁄Down
,

177 
	gRightBuâ⁄Up
,

178 
	gMou£Move


188 (*
	gOnKeybﬂrdEvítCÆlback
)(* 
	tc⁄ãxt
, 
	tvx_ch¨
 
	tkey
, 
	tvx_uöt32
 
	tx
, vx_uöt32 
	ty
);

197 (*
	gOnMou£EvítCÆlback
)(* 
	tc⁄ãxt
, 
	tMou£Buâ⁄Evít
 
	tevít
, 
	tvx_uöt32
 
	tx
, vx_uöt32 
	ty
);

204 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
) = 0;

211 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
) = 0;

218 
vútuÆ
 
putImage
(
vx_image
 
image
) = 0;

225 
vútuÆ
 
putTextVõwp‹t
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
TextBoxStyÀ
& 
°yÀ
) = 0;

232 
vútuÆ
 
putFótuªs
(
vx_¨øy
 
loˇti⁄
, c⁄° 
FótuªStyÀ
& 
°yÀ
) = 0;

242 
vútuÆ
 
putFótuªs
(
vx_¨øy
 
loˇti⁄
, vx_¨øy 
°yÀs
) = 0;

249 
vútuÆ
 
putLöes
(
vx_¨øy
 
löes
, c⁄° 
LöeStyÀ
& 
°yÀ
) = 0;

256 
vútuÆ
 
putC⁄vexPﬁyg⁄
(
vx_¨øy
 
vîti˚s
, c⁄° 
LöeStyÀ
& 
°yÀ
) = 0;

263 
vútuÆ
 
putMŸi⁄Fõld
(
vx_image
 
fõld
, c⁄° 
MŸi⁄FõldStyÀ
& 
°yÀ
) = 0;

270 
vútuÆ
 
putObje˘Loˇti⁄
(c⁄° 
vx_ª˘™gÀ_t
& 
loˇti⁄
, c⁄° 
Dëe˘edObje˘StyÀ
& 
°yÀ
) = 0;

277 
vútuÆ
 
putCú˛es
(
vx_¨øy
 
cú˛es
, c⁄° 
Cú˛eStyÀ
& 
°yÀ
) = 0;

285 
vútuÆ
 
putAºows
(
vx_¨øy
 
ﬁd_poöts
, vx_¨øy 
√w_poöts
,

286 c⁄° 
LöeStyÀ
& 
°yÀ
) = 0;

288 #i‚de‡
__ANDROID__


294 
vútuÆ
 
boﬁ
 
Êush
() = 0;

299 
vútuÆ
 
˛o£
() = 0;

306 
T¨gëTy≥
 
gëT¨gëTy≥
() const

308  
	gèrgëTy≥
;

315 
	g°d
::
°rög
 
gëRídîName
() const

317  
ªndîName
;

324 
vútuÆ
 
vx_uöt32
 
gëVõwp‹tWidth
() const = 0;

330 
vútuÆ
 
vx_uöt32
 
gëVõwp‹tHeight
() const = 0;

335 
	gvútuÆ
 ~
Rídî
()

338 
	g¥Ÿe˘ed
:

340 
Rídî
(
T¨gëTy≥
 
ty≥
 = Rídî::
UNKNOWN_RENDER
, 
°d
::
°rög
 
«me
 = "Undefined"):

341 
èrgëTy≥
(
ty≥
),

342 
ªndîName
(
«me
)

345 c⁄° 
T¨gëTy≥
 
	gèrgëTy≥
;

346 c⁄° 
	g°d
::
°rög
 
ªndîName
;

349 #ifde‡
__ANDROID__


362 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
Rídî
> 
¸óãRídî
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_uöt32
 
width
, vx_uöt32 
height
, 
boﬁ
 
doSˇÀ
 = 
åue
);

380 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
Rídî
> 
¸óãDeÁu…Rídî
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
°d
::
°rög
& 
tôÀ
, 
vx_uöt32
 
width
, vx_uöt32 
height
,

381 
vx_uöt32
 
f‹m©
 = 
VX_DF_IMAGE_RGBX
, 
boﬁ
 
doSˇÀ
 = 
åue
,

382 
boﬁ
 
fuŒS¸ìn
 = 
nvxio
::
Aµliˇti⁄
::
gë
().
gëFuŒS¸ìnFœg
());

398 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
Rídî
> 
¸óãVideoRídî
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
°d
::
°rög
& 
∑th
, 
vx_uöt32
 
width
,

399 
vx_uöt32
 
height
, vx_uöt32 
f‹m©
 = 
VX_DF_IMAGE_RGBX
);

417 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
Rídî
> 
¸óãWödowRídî
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
°d
::
°rög
& 
tôÀ
, 
vx_uöt32
 
width
, vx_uöt32 
height
,

418 
vx_uöt32
 
f‹m©
 = 
VX_DF_IMAGE_RGBX
, 
boﬁ
 
doSˇÀ
 = 
åue
,

419 
boﬁ
 
fuŒs¸ìn
 = 
nvxio
::
Aµliˇti⁄
::
gë
().
gëFuŒS¸ìnFœg
());

433 
NVXIO_EXPORT
 
	g°d
::
unique_±r
<
Rídî
> 
¸óãImageRídî
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
°d
::
°rög
& 
∑th
, 
vx_uöt32
 
width
, vx_uöt32 
height
,

434 
vx_uöt32
 
f‹m©
 = 
VX_DF_IMAGE_RGBX
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/OVX/UtilityOVX.hpp

29 #i‚de‡
NVXIO_UTILITY_HPP


30 
	#NVXIO_UTILITY_HPP


	)

32 
	~<io°ªam
>

33 
	~<mem‹y
>

34 
	~<s°ªam
>

35 
	~<°dex˚±
>

36 
	~<utûôy
>

37 
	~<ve˘‹
>

38 
	~<°rög
>

40 #ifde‡
__ANDROID__


41 
	~<™droid/log.h
>

44 
	~<NVX/nvx.h
>

45 
	~<NVX/Exp‹t.hµ
>

52 
«me•a˚
 
	govxio


66 #ifde‡
__ANDROID__


73 
	#NVXIO_LOGV
(
èg
, ...Ë(()
	`__™droid_log_¥öt
(
ANDROID_LOG_VERBOSE
,Åag, 
__VA_ARGS__
))

	)

80 
	#NVXIO_LOGD
(
èg
, ...Ë(()
	`__™droid_log_¥öt
(
ANDROID_LOG_DEBUG
,Åag, 
__VA_ARGS__
))

	)

87 
	#NVXIO_LOGI
(
èg
, ...Ë(()
	`__™droid_log_¥öt
(
ANDROID_LOG_INFO
,Åag, 
__VA_ARGS__
))

	)

94 
	#NVXIO_LOGW
(
èg
, ...Ë(()
	`__™droid_log_¥öt
(
ANDROID_LOG_WARN
,Åag, 
__VA_ARGS__
))

	)

101 
	#NVXIO_LOGE
(
èg
, ...Ë(()
	`__™droid_log_¥öt
(
ANDROID_LOG_ERROR
,Åag, 
__VA_ARGS__
))

	)

115 
	#NVXIO_THROW_EXCEPTION
(
msg
) \

117 
°d
::
o°rög°ªam
 
o°r_
; \

118 
o°r_
 << 
msg
; \

119 
throw
 
°d
::
	`ru¡ime_îr‹
(
o°r_
.
	`°r
()); \

120 } 0)

	)

129 
	#NVXIO_SAFE_CALL
(
vxOp
) \

132 
vx_°©us
 
°©us
 = (
vxOp
); \

133 i‡(
°©us
 !
VX_SUCCESS
) \

135 
	`NVXIO_THROW_EXCEPTION
(#vxO∞<< " faûuª [°©u†" << 
°©us
 << "]" << " i¿fûê" << 
__FILE__
 << "Üöê" << 
__LINE__
); \

137 } 0)

	)

145 
	#NVXIO_ASSERT
(
c⁄d
) \

148 i‡(!(
c⁄d
)) \

150 
	`NVXIO_THROW_EXCEPTION
(#c⁄d << " faûuª i¿fûê" << 
__FILE__
 << "Üöê" << 
__LINE__
); \

152 } 0)

	)

160 
	#NVXIO_CHECK_REFERENCE
(
ªf
) \

161 
	`NVXIO_ASSERT
(
ªf
 !0 && 
	`vxGëSètus
((
vx_ª„ªn˚
ÏefË=
VX_SUCCESS
)

	)

170 
	#NVXIO_CUDA_SAFE_CALL
(
cudaOp
) \

173 
cudaEº‹_t
 
îr
 = (
cudaOp
); \

174 i‡(
îr
 !
cudaSuc˚ss
) \

176 
°d
::
o°rög°ªam
 
o°r
; \

177 
o°r
 << "CUDA Eº‹ i¿" << #cudaO∞<< 
__FILE__
 << " fûê" << 
__LINE__
 << "Üöê: " << 
	`cudaGëEº‹Såög
(
îr
); \

178 
throw
 
°d
::
	`ru¡ime_îr‹
(
o°r
.
	`°r
()); \

180 } 0)

	)

187 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
vx_size
 
	gN
>

188 
vx_size
 
dimOf
(
T
 (&)[
N
]Ë{  
	gN
; }

199 c⁄° 
vx_Êﬂt64
 
	gPI
 = 3.1415926535897932;

205 c⁄° 
vx_Êﬂt32
 
	gPI_F
 = 3.14159265f;

211 #ifde‡
__ANDROID__


221 
NVXIO_EXPORT
 
VX_CALLBACK
 
™droidLogCÆlback
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_ª„ªn˚
 
ªf
, 
vx_°©us
 
°©us
, c⁄° 
vx_ch¨
 
°rög
[]);

232 
NVXIO_EXPORT
 
VX_CALLBACK
 
°doutLogCÆlback
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_ª„ªn˚
 
ªf
, 
vx_°©us
 
°©us
, c⁄° 
vx_ch¨
 
°rög
[]);

241 
NVXIO_EXPORT
 
¥ötPîf
(
vx_gøph
 
gøph
, c⁄° * 
œbñ
);

249 
NVXIO_EXPORT
 
¥ötPîf
(
vx_node
 
node
, c⁄° * 
œbñ
);

255 
NVXIO_EXPORT
 
¥ötVîsi⁄Info
();

263 
NVXIO_EXPORT
 
checkIfC⁄ãxtIsVÆid
(
vx_c⁄ãxt
 
c⁄ãxt
);

271 
NVXIO_EXPORT
 
	gC⁄ãxtGu¨d


273 
C⁄ãxtGu¨d
(Ë: 
c⁄ãxt
(
vxCª©eC⁄ãxt
()) {

274 
checkIfC⁄ãxtIsVÆid
(
c⁄ãxt
);

276 
C⁄ãxtGu¨d
(c⁄° C⁄ãxtGu¨d &Ë
dñëe
;

277 
	gC⁄ãxtGu¨d
 &
	g›î©‹
 = (c⁄° 
C⁄ãxtGu¨d
 &Ë
dñëe
;

278 ~
C⁄ãxtGu¨d
() {

279 
vxRñó£C⁄ãxt
(&
c⁄ãxt
);

282 
›î©‹
 
vx_c⁄ãxt
(Ëc⁄° {  
	gc⁄ãxt
; }

283 
›î©‹
 
vx_ª„ªn˚
(Ëc⁄° {  (
	gvx_ª„ªn˚
)
	gc⁄ãxt
; }

285 
	g¥iv©e
:

286 
vx_c⁄ãxt
 
c⁄ãxt
;

294 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
... 
	gArgs
>

295 
	g°d
::
unique_±r
<
T
> 
makeUP
(
Args
 &&... 
¨gs
)

297  
°d
::
unique_±r
<
T
>(
√w
 T(°d::
f‹w¨d
<
Args
>(
¨gs
)...));

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Application.cpp

29 
	~<c°dlib
>

30 
	~<c°rög
>

31 
	~<io°ªam
>

33 
	~<NVX/Aµliˇti⁄.hµ
>

35 
	~"ArgumítP¨£r.hµ
"

37 
	~<chr⁄o
>

38 
	~<thªad
>

40 #i‡
_WIN32


41 
	#NOMINMAX


	)

42 
	~<Wödows.h
>

44 
	~<sys/°©.h
>

45 
	~<uni°d.h
>

48 #ifde‡
USE_GUI


49 
	#GLFW_INCLUDE_NONE


	)

50 
	~<GLFW/glfw3.h
>

53 #ifde‡
USE_GSTREAMER


54 
	~<g°/g°.h
>

57 
	~"Priv©e/LogUtûs.hµ
"

59 c⁄° 
	gDEFAULT_FPS_LIMIT
 = 30;

61 
«me•a˚
 
	gnvxio
 {

63 
	g«me•a˚
 {

65 #ifde‡
_WIN32


67 ˛as†
	cTimîResﬁuti⁄Sëãr


69 
	gpublic
:

70 
TimîResﬁuti⁄Sëãr
(Ë: 
£tSuc˚ssfuŒy
(
Ál£
), 
≥riod
(0)

72 
TIMECAPS
 
	gˇps
;

73 i‡(
timeGëDevC≠s
(&
ˇps
, (ˇps)Ë!
MMSYSERR_NOERROR
) ;

74 
	g≥riod
 = 
ˇps
.
wPîiodMö
;

75 i‡(
timeBegöPîiod
(
≥riod
Ë!
TIMERR_NOERROR
) ;

76 
	g£tSuc˚ssfuŒy
 = 
åue
;

79 ~
TimîResﬁuti⁄Sëãr
()

81 i‡(
	g£tSuc˚ssfuŒy
Ë
timeEndPîiod
(
≥riod
);

84 
	g¥iv©e
:

85 
TimîResﬁuti⁄Sëãr
(const TimerResolutionSetter &);

86 
	gTimîResﬁuti⁄Sëãr
 &
	g›î©‹
 =(c⁄° 
TimîResﬁuti⁄Sëãr
 &);

88 
UINT
 
	g≥riod
;

89 
boﬁ
 
	g£tSuc˚ssfuŒy
;

94 ˛as†
	cAµliˇti⁄Im∂
 : 
public
 
Aµliˇti⁄


96 
public
:

97 
Aµliˇti⁄Im∂
();

98 ~
Aµliˇti⁄Im∂
();

100 
addBoﬁónO±i⁄
(
sh‹tName
, c⁄° 
°d
::
°rög
 &
l⁄gName
,

101 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
,

102 
boﬁ
 *
ªsu…
);

103 
addO±i⁄
(
sh‹tName
, c⁄° 
°d
::
°rög
 &
l⁄gName
,

104 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
,

105 
O±i⁄H™dÀr
::
±r
 
h™dÀr
);

106 
ÆlowPosôi⁄ÆP¨amëîs
(c⁄° 
°d
::
°rög
 &
∂a˚hﬁdî
,

107 
°d
::
ve˘‹
<°d::
°rög
> *
ªsu…
);

109 
£tDes¸ùti⁄
(c⁄° 
°d
::
°rög
 &
des¸ùti⁄
Ë{ 
this
->description = description; }

111 
öô
(
¨gc
, **
¨gv
);

112 
boﬁ
 
öôGui
();

114 
	g°d
::
°rög
 
gëS˚«rioName
(Ëc⁄° {  
s˚«rioFûeName
; }

115 
gëS˚«rioLo›Cou¡
(Ëc⁄° {  
	gs˚«rioLo›Cou¡
; }

116 
	g°d
::
°rög
 
gëEvítLogName
(Ëc⁄° {  
evítLogFûeName
; }

117 
boﬁ
 
gëEvítLogDumpFømesFœg
(Ëc⁄° {  
	gevítLogDumpFømes
; }

118 
boﬁ
 
gëVîbo£Fœg
(Ëc⁄° {  
	gvîbo£Fœg
; }

119 
boﬁ
 
gëFuŒS¸ìnFœg
(Ëc⁄° {  
	gfuŒS¸ìnFœg
; }

120 
	g°d
::
°rög
 
gëPª„ºedRídîName
(Ëc⁄° {  
¥e„ºedRídîName
; }

122 
	g°d
::
°rög
 
födSam∂eFûeP©h
(c⁄° 
°d
::°rög& 
fûíame
) const;

123 
	g°d
::
°rög
 
födLibøryFûeP©h
(c⁄° 
°d
::°rög& 
fûíame
) const;

125 
gëSour˚DeÁu…Timeout
(Ëc⁄° {  
	gsour˚DeÁu…Timeout
; }

126 
£tSour˚DeÁu…Timeout
(
timeout
Ë{ 
	gsour˚DeÁu…Timeout
 =Åimeout; }

128 
gëFPSLimô
(Ëc⁄° {  
	gÂsLimô
; }

129 
	g¥iv©e
:

131 #ifde‡
USE_GUI


132 
glfwEº‹CÆlback
(, c⁄° * 
des¸ùti⁄
);

135 
	g°d
::
°rög
 
des¸ùti⁄
;

136 
	g°d
::
°rög
 
evítLogFûeName
;

137 
	g°d
::
°rög
 
s˚«rioFûeName
;

138 
	g°d
::
°rög
 
¥e„ºedRídîName
;

139 
	gs˚«rioLo›Cou¡
;

140 
	gsour˚DeÁu…Timeout
;

141 
ArgumítP¨£r
 
	g∑r£r
;

142 
boﬁ
 
	ghñpReque°ed
, 
	gnvxioHñpReque°ed
, 
	gnvxioFótuªsReque°ed
;

143 
boﬁ
 
	gevítLogDumpFømes
, 
	gvîbo£Fœg
, 
	gfuŒS¸ìnFœg
;

144 
	g°d
::
°rög
 
posôi⁄ÆPœ˚hﬁdî
;

145 
boﬁ
 
	gglfwInôülized
;

147 
	gÂsLimô
;

149 #ifde‡
_WIN32


150 
TimîResﬁuti⁄Sëãr
 
	gås
;

154 
	gAµliˇti⁄Im∂
::
Aµliˇti⁄Im∂
()

155 : 
evítLogFûeName
(""), 
s˚«rioFûeName
(""), 
¥e„ºedRídîName
("default"),

156 
s˚«rioLo›Cou¡
(1), 
sour˚DeÁu…Timeout
(60),

157 
hñpReque°ed
(
Ál£
), 
nvxioHñpReque°ed
(Ál£), 
nvxioFótuªsReque°ed
(false),

158 
evítLogDumpFømes
(
Ál£
), 
vîbo£Fœg
(Ál£), 
fuŒS¸ìnFœg
(false),

159 
glfwInôülized
(
Ál£
), 
ÂsLimô
(
DEFAULT_FPS_LIMIT
)

161 
	g∑r£r
.
addBoﬁónO±i⁄
('h', "hñp", "Di•œyÅhi†mesßge", &
hñpReque°ed
, 
Ál£
);

162 
	g∑r£r
.
addBoﬁónO±i⁄
(0, "nvxio_hñp", "Di•œyÅhi†mesßge", &
nvxioHñpReque°ed
, 
åue
);

163 
	g∑r£r
.
addBoﬁónO±i⁄
(0, "nvxio_„©uªs", "Di•œyÅhêNVXIOÜibøry fótuªs", &
nvxioFótuªsReque°ed
, 
åue
);

164 
	g∑r£r
.
addO±i⁄
(0, "nvxio_scenario_name", "RunÉvents fromÅhis scenario",

165 
O±i⁄H™dÀr
::
°rög
(&
s˚«rioFûeName
), 
åue
);

166 
	g∑r£r
.
addO±i⁄
(0, "nvxio_scenario_loops", "TheÇumber ofÅimesÅoÜoopÉvents fromÅhe scenario",

167 
O±i⁄H™dÀr
::
öãgî
(&
s˚«rioLo›Cou¡
), 
åue
);

168 
	g∑r£r
.
addO±i⁄
(0, "nvxio_eventlog", "FileÅoÜogÉventsÅo",

169 
O±i⁄H™dÀr
::
°rög
(&
evítLogFûeName
), 
åue
);

170 
	g∑r£r
.
addO±i⁄
(0, "nvxio_render", "Default RenderÅype",

171 #ifde‡
USE_GUI


172 
O±i⁄H™dÀr
::
⁄eOf
(&
¥e„ºedRídîName
, {"default", "window", "video", "image", "stub"})

174 
O±i⁄H™dÀr
::
⁄eOf
(&
¥e„ºedRídîName
, {"default", "video", "image", "stub"})

176 , 
åue
);

177 
	g∑r£r
.
addO±i⁄
(0, "nvxio_source_default_timeout", "DefaultÅimeout for frame sources",

178 
O±i⁄H™dÀr
::
öãgî
(&
sour˚DeÁu…Timeout
), 
åue
);

179 
	g∑r£r
.
addBoﬁónO±i⁄
(0, "nvxio_eventlog_dump_frames", "Dump input frames during writingÉventÜog",

180 &
evítLogDumpFømes
, 
åue
);

181 
	g∑r£r
.
addO±i⁄
(0, "nvxio_fps_limit", "FrameÑateÜimit, in framesÖer second",

182 
nvxio
::
O±i⁄H™dÀr
::
ªÆ
(&
ÂsLimô
,Çvxio::
ønges
::
m‹eTh™
(0.0)), 
åue
);

183 
	g∑r£r
.
addBoﬁónO±i⁄
(0, "nvxio_vîbo£", "Pröt†öã∫Æ NVXIO debug mesßges", &
vîbo£Fœg
, 
åue
);

184 
	g∑r£r
.
addBoﬁónO±i⁄
(0, "nvxio_fuŒs¸ìn", "Ru¿ßm∂e†™d demo†ö fuŒ-s¸ì¿mode", &
fuŒS¸ìnFœg
, 
åue
);

187 
	gAµliˇti⁄Im∂
::
addBoﬁónO±i⁄
(
sh‹tName
, c⁄° 
°d
::
°rög
 &
l⁄gName
,

188 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
,

189 
boﬁ
 *
ªsu…
)

191 
	g∑r£r
.
addBoﬁónO±i⁄
(
sh‹tName
, 
l⁄gName
, 
des¸ùti⁄
, 
ªsu…
, 
Ál£
);

194 
	gAµliˇti⁄Im∂
::
addO±i⁄
(
sh‹tName
, c⁄° 
°d
::
°rög
 &
l⁄gName
,

195 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
,

196 
O±i⁄H™dÀr
::
±r
 
h™dÀr
)

198 
∑r£r
.
addO±i⁄
(
sh‹tName
, 
l⁄gName
, 
des¸ùti⁄
, 
°d
::
move
(
h™dÀr
), 
Ál£
);

201 
	gAµliˇti⁄Im∂
::
ÆlowPosôi⁄ÆP¨amëîs
(c⁄° 
°d
::
°rög
 &
∂a˚hﬁdî
,

202 
°d
::
ve˘‹
<°d::
°rög
> *
ªsu…
)

204 
posôi⁄ÆPœ˚hﬁdî
 = 
∂a˚hﬁdî
;

205 
	g∑r£r
.
ÆlowPosôi⁄Æ
(
ªsu…
);

208 #ifde‡
USE_GUI


209 
	gAµliˇti⁄Im∂
::
glfwEº‹CÆlback
(, c⁄° * 
des¸ùti⁄
)

211 
NVXIO_PRINT
("Glfw cÆlbackÉº‹: %s", 
des¸ùti⁄
);

215 
	gAµliˇti⁄Im∂
::
öô
(
¨gc
, **
¨gv
)

217 #ifde‡
USE_GSTREAMER


218 i‡(!
g°_is_öôülized
())

219 
g°_öô
(
nuŒ±r
,Çullptr);

223 
boﬁ
 
	gAµliˇti⁄Im∂
::
öôGui
()

225 #ifde‡
USE_GUI


226 i‡(!
glfwInôülized
)

228 
glfwSëEº‹CÆlback
(
Aµliˇti⁄Im∂
::
glfwEº‹CÆlback
);

229 i‡(!
glfwInô
())

231 
NVXIO_PRINT
("Error: FailedÅo initialize GLFW");

232  
	gÁl£
;

234 
	gglfwInôülized
 = 
åue
;

238  
	gglfwInôülized
;

241 
	g°d
::
°rög
 
gëExecP©h
()

243 #i‡
_WIN32


244 
buf
[
MAX_PATH
];

245 
DWORD
 
	gÀn
 = 
GëModuÀFûeName
(
GëModuÀH™dÀ
(
nuŒ±r
), 
buf
,  buf);

246 if(
	gÀn
 =0 || 
Àn
 > 
buf
)

247 
NVXIO_THROW_EXCEPTION
("Can't determineÅheÉxecutable'sÜocation");

249 
	g°d
::
°rög
 
∑th
(
buf
, 
Àn
);

250 
	g°d
::
ª∂a˚
(
∑th
.
begö
(),Ö©h.
íd
(), '\\', '/');

251  
	g∑th
;

253 
	gbuf
[1024];

254 
ssize_t
 
	gÀn
 = ::
ªadlök
("/¥oc/£lf/exe", 
buf
, (buf));

256 i‡(
	gÀn
 <= 0)

257 
NVXIO_THROW_EXCEPTION
("Can't determineÅheÉxecutable'sÜocation");

259  
	g°d
::
°rög
(
buf
, 
Àn
);

263 
boﬁ
 
∑thIsDúe˘‹y
(c⁄° 
°d
::
°rög
 &
∑th
)

265 #i‡
_WIN32


266 
DWORD
 
©å
 = 
GëFûeAâribuãs
(
∑th
.
c_°r
());

267  
	g©å
 !
INVALID_FILE_ATTRIBUTES
 && (
©å
 & 
FILE_ATTRIBUTE_DIRECTORY
);

269 
°©
 
	g∑thSèt
;

270 
	g°©us
 = 
°©
(
∑th
.
c_°r
(), &
∑thSèt
);

272  
	g°©us
 =0 && 
S_ISDIR
(
∑thSèt
.
°_mode
);

276 
	g°d
::
°rög
 
gëBöDúP©h
()

278 
°d
::
°rög
 
execP©h
 = 
gëExecP©h
();

280 c⁄° 
	gbö
[] = "/bin/";

281 
size_t
 
	gböPos
 = 
execP©h
.
rföd
(
bö
);

283 i‡(
	gböPos
 =
°d
::
°rög
::
≈os
)

284 
NVXIO_THROW_EXCEPTION
("Can't findÅhe bin directory");

286  
	gexecP©h
.
sub°r
(0, 
böPos
 +  
bö
 - 1);

289 
	g°d
::
°rög
 
födExi°ögDú
(
°d
::
öôülizî_li°
<°d::°rög> 
∑ths
)

291 autÿ
foundIt
 = 
°d
::
föd_if
(
∑ths
.
begö
(),Ö©hs.
íd
(), 
∑thIsDúe˘‹y
);

293  
	gfoundIt
 =
∑ths
.
íd
(Ë? 
°d
::
°rög
(Ë: *
foundIt
;

296 
	g°d
::
°rög
 
födSam∂eD©aDú
()

298 
°d
::
°rög
 
böP©h
 = 
gëBöDúP©h
();

300 
	g°d
::
°rög
 
∑th
 = 
födExi°ögDú
({

301 
böP©h
 + 
°d
::
°rög
("sources/data/"),

302 
böP©h
 + 
°d
::
°rög
("../data/"),

306 i‡(
	g∑th
.
em±y
())

307 
NVXIO_THROW_EXCEPTION
("Can't findÅhe sample data directory");

309  
	g∑th
;

312 
	g°d
::
°rög
 
Aµliˇti⁄Im∂
::
födSam∂eFûeP©h
(c⁄° 
°d
::°rög& 
fûíame
) const

314 
°d
::
°rög
 
ßm∂eD©aDú
 = 
födSam∂eD©aDú
();

316  
	gßm∂eD©aDú
 + 
	gfûíame
;

319 
	g°d
::
°rög
 
födLibøryD©aDú
()

321 
°d
::
°rög
 
böP©h
 = 
gëBöDúP©h
();

323 
	g°d
::
°rög
 
∑th
 = 
födExi°ögDú
({

324 
böP©h
 + 
°d
::
°rög
("data/"),

325 #i‡
deföed
(
VISIONWORKS_DIR
)

326 
VISIONWORKS_DIR
 "/share/visionworks/data/",

327 #ñi‡
deföed
(
__löux__
)

328 
böP©h
 + 
°d
::
°rög
("../library-data/"),

332 i‡(
	g∑th
.
em±y
())

333 
NVXIO_THROW_EXCEPTION
("Can't findÅhe VisionWorks data directory");

335  
	g∑th
;

338 
	g°d
::
°rög
 
Aµliˇti⁄Im∂
::
födLibøryFûeP©h
(c⁄° 
°d
::°rög& 
fûíame
) const

340 
°d
::
°rög
 
libøryD©aDú
 = 
födLibøryD©aDú
();

342  
	glibøryD©aDú
 + 
	gfûíame
;

347 
	gAµliˇti⁄Im∂
::~
	$Aµliˇti⁄Im∂
()

349 #ifde‡
USE_GUI


350 i‡(
glfwInôülized
)

352 
	`glfwTîmö©e
();

355 #ifde‡
USE_GSTREAMER


356 i‡(
	`g°_is_öôülized
())

358 
	`g°_deöô
();

361 
	}
}

363 
	gAµliˇti⁄
 &Aµliˇti⁄::
	$gë
()

365 
Aµliˇti⁄Im∂
 
im∂
;

366  
im∂
;

367 
	}
}

369 
	gAµliˇti⁄
::~
	$Aµliˇti⁄
()

370 {
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/ArgumentParser.cpp

29 
	~<ˇs£π
>

30 
	~<io°ªam
>

31 
	~<limôs
>

32 
	~<s°ªam
>

33 
	~<ve˘‹
>

35 
	~"ArgumítP¨£r.hµ
"

37 
«me•a˚
 
	gnvxio
 {

39 
	g«me•a˚
 {

40 
	g°d
::
°rög
 
makeBoﬁónO±i⁄HñpSåög
(
sh‹tName
, c⁄° 
°d
::°rög &
l⁄gName
,

41 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
)

43 
as£π
(
sh‹tName
 !0 || !
l⁄gName
.
em±y
());

45 
	g°d
::
o°rög°ªam
 
hñp
;

47 
	ghñp
 << " ";

48 i‡(
	gsh‹tName
 == 0)

49 
hñp
 << "--" << 
l⁄gName
;

50 i‡(
	gl⁄gName
.
em±y
())

51 
	ghñp
 << "-" << 
	gsh‹tName
;

53 
	ghñp
 << "-" << 
	gsh‹tName
 << ", --" << 
	gl⁄gName
;

55 
	ghñp
 << "\¿ " << 
	gdes¸ùti⁄
 << "\n\n";

56  
	ghñp
.
°r
();

59 
	g°d
::
°rög
 
makeO±i⁄HñpSåög
(
sh‹tName
, c⁄° 
°d
::°rög &
l⁄gName
,

60 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
,

61 c⁄° 
O±i⁄H™dÀr
 &
h™dÀr
)

63 
as£π
(
sh‹tName
 !0 || !
l⁄gName
.
em±y
());

65 
	g°d
::
o°rög°ªam
 
hñp
;

66 
	g°d
::
°rög
 
∂a˚hﬁdî
 = 
h™dÀr
.
gëPœ˚hﬁdî
();

68 
	ghñp
 << " ";

69 i‡(
	gsh‹tName
 == 0)

70 
hñp
 << "--" << 
l⁄gName
 << "=" << 
∂a˚hﬁdî
;

71 i‡(
	gl⁄gName
.
em±y
())

72 
	ghñp
 << "-" << 
	gsh‹tName
 << " " << 
	g∂a˚hﬁdî
;

74 
	ghñp
 << "-" << 
	gsh‹tName
 << " " << 
	g∂a˚hﬁdî


75 << ", --" << 
	gl⁄gName
 << "=" << 
	g∂a˚hﬁdî
;

77 
	ghñp
 << " (";

78 
	g°d
::
°rög
 
c⁄°øöt
 = 
h™dÀr
.
gëC⁄°øötSåög
();

79 i‡(!
	gc⁄°øöt
.
em±y
())

80 
	ghñp
 << 
	gc⁄°øöt
 << "; ";

81 
	ghñp
 << "deÁu…: " << 
	gh™dÀr
.
gëDeÁu…Såög
() << ")\n";

82 
	ghñp
 << " " << 
	gdes¸ùti⁄
 << "\n\n";

83  
	ghñp
.
°r
();

87 
	gArgumítP¨£r
::
ArgumítP¨£r
(Ë: 
posôi⁄ÆArgs
(
nuŒ±r
)

90 
ArgumítP¨£r
::
addBoﬁónO±i⁄
(
sh‹tName
, c⁄° 
°d
::
°rög
 &
l⁄gName
,

91 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
,

92 
boﬁ
 *
ªsu…
, boﬁ 
öã∫Æ
)

94 i‡(
	gsh‹tName
 != 0)

96 
as£π
(
sh‹tBoﬁónO±i⁄s
.
föd
(
sh‹tName
Ë=sh‹tBoﬁónO±i⁄s.
íd
());

97 
as£π
(
sh‹tO±i⁄s
.
föd
(
sh‹tName
Ë=sh‹tO±i⁄s.
íd
());

98 
	gsh‹tBoﬁónO±i⁄s
[
sh‹tName
] = 
ªsu…
;

101 i‡(!
	gl⁄gName
.
em±y
())

103 
as£π
(
l⁄gBoﬁónO±i⁄s
.
föd
(
l⁄gName
Ë=l⁄gBoﬁónO±i⁄s.
íd
());

104 
as£π
(
l⁄gO±i⁄s
.
föd
(
l⁄gName
Ë=l⁄gO±i⁄s.
íd
());

105 
	gl⁄gBoﬁónO±i⁄s
[
l⁄gName
] = 
ªsu…
;

108 (
	göã∫Æ
 ? 
	göã∫ÆHñpSåög
 : 
exã∫ÆHñpSåög
) +=

109 
makeBoﬁónO±i⁄HñpSåög
(
sh‹tName
, 
l⁄gName
, 
des¸ùti⁄
);

112 
	gArgumítP¨£r
::
addO±i⁄
(
sh‹tName
, c⁄° 
°d
::
°rög
 &
l⁄gName
,

113 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
,

114 
O±i⁄H™dÀr
::
±r
 
h™dÀr
, 
boﬁ
 
öã∫Æ
)

116 
	g°d
::
sh¨ed_±r
<
O±i⁄H™dÀr
> 
sh¨edH™dÀr
(
°d
::
move
(
h™dÀr
));

118 i‡(
	gsh‹tName
 != 0)

120 
as£π
(
sh‹tBoﬁónO±i⁄s
.
föd
(
sh‹tName
Ë=sh‹tBoﬁónO±i⁄s.
íd
());

121 
as£π
(
sh‹tO±i⁄s
.
föd
(
sh‹tName
Ë=sh‹tO±i⁄s.
íd
());

122 
	gsh‹tO±i⁄s
[
sh‹tName
] = 
sh¨edH™dÀr
;

125 i‡(!
	gl⁄gName
.
em±y
())

127 
as£π
(
l⁄gBoﬁónO±i⁄s
.
föd
(
l⁄gName
Ë=l⁄gBoﬁónO±i⁄s.
íd
());

128 
as£π
(
l⁄gO±i⁄s
.
föd
(
l⁄gName
Ë=l⁄gO±i⁄s.
íd
());

129 
	gl⁄gO±i⁄s
[
l⁄gName
] = 
sh¨edH™dÀr
;

132 (
	göã∫Æ
 ? 
	göã∫ÆHñpSåög
 : 
exã∫ÆHñpSåög
) +=

133 
makeO±i⁄HñpSåög
(
sh‹tName
, 
l⁄gName
, 
des¸ùti⁄
, *
sh¨edH™dÀr
);

136 
	gArgumítP¨£r
::
ÆlowPosôi⁄Æ
(
°d
::
ve˘‹
<°d::
°rög
> *
ªsu…
)

138 
posôi⁄ÆArgs
 = 
ªsu…
;

141 
	g°d
::
°rög
 
ArgumítP¨£r
::
gëHñpSåög
(
boﬁ
 
öã∫Æ
) const

143  
öã∫Æ
 ? 
öã∫ÆHñpSåög
 : 
exã∫ÆHñpSåög
;

146 
boﬁ
 
	gArgumítP¨£r
::
∑r£
(
¨gc
, * 
¨gv
[]) const

148 c⁄°áutÿ&
	gsh‹tBoﬁO±
: 
sh‹tBoﬁónO±i⁄s
)

149 *
sh‹tBoﬁO±
.
£c⁄d
 = 
Ál£
;

151 c⁄°áutÿ&
	gl⁄gBoﬁO±
: 
l⁄gBoﬁónO±i⁄s
)

152 *
l⁄gBoﬁO±
.
£c⁄d
 = 
Ál£
;

154 i‡(
	gposôi⁄ÆArgs
)

155 
	gposôi⁄ÆArgs
->
˛ór
();

157 
boﬁ
 
	g∑r£Suc˚ssful
 = 
åue
;

158 íum { 
	gOPTION
, 
	gOPTION_ARGUMENT
, 
	gPOSITIONAL
 } 
	gex≥˘ög
 = 
OPTION
;

159 
	g°d
::
°rög
 
cuºítO±i⁄
;

160 
O±i⁄H™dÀr
 *
	gcuºítO±i⁄H™dÀr
 = 
nuŒ±r
;

162 
	g°d
::
un‹dîed_m≠
<
boﬁ
 *, std::
°rög
> 
£íBoﬁónO±i⁄s
;

163 
	g°d
::
un‹dîed_m≠
<
O±i⁄H™dÀr
 *, std::
°rög
> 
£íO±i⁄s
;

165 autÿ
	gh™dÀUnknownO±i⁄
 = [&](c⁄° 
°d
::
°rög
 &
›ti⁄
)

167 
°d
::
˚º
 << 
¨gv
[0] << ": unknow¿›ti⁄: " << 
›ti⁄
 << std::
ídl
;

168 
	g∑r£Suc˚ssful
 = 
Ál£
;

171 autÿ
	gh™dÀDu∂iˇãO±i⁄
 = [&](c⁄° 
°d
::
°rög
 &
›ti⁄
, c⁄° 
	g°d
::°rög &
¥eviousName
)

173 
°d
::
˚º
 << 
¨gv
[0] << ": du∂iˇã o±i⁄ \"" << 
›ti⁄
 << "\"";

174 i‡(
	g›ti⁄
 !
¥eviousName
)

175 
°d
::
˚º
 << " (¥eviou¶y s≥cifõdá†\"" << 
¥eviousName
 << "\")";

176 
	g°d
::
˚º
 << 
°d
::
ídl
;

177 
	g∑r£Suc˚ssful
 = 
Ál£
;

180 autÿ
	gh™dÀKnownBoﬁónO±i⁄
 = [&](c⁄° 
°d
::
°rög
 &
›ti⁄
, 
boﬁ
 *
	gvÆuePoöãr
)

182 autÿ
	g£íIt
 = 
£íBoﬁónO±i⁄s
.
föd
(
vÆuePoöãr
);

183 i‡(
	g£íIt
 !
£íBoﬁónO±i⁄s
.
íd
())

185 
h™dÀDu∂iˇãO±i⁄
(
›ti⁄
, 
£íIt
->
£c⁄d
);

189 
	g£íBoﬁónO±i⁄s
.
ö£π
({
vÆuePoöãr
, 
›ti⁄
});

190 *
	gvÆuePoöãr
 = 
åue
;

193 autÿ
	gh™dÀKnownO±i⁄
 = [&](c⁄° 
°d
::
°rög
 &
›ti⁄
, c⁄° 
	g°d
::°rög &
vÆue
, 
	gO±i⁄H™dÀr
 &
	gh™dÀr
)

195 autÿ
	g£íIt
 = 
£íO±i⁄s
.
föd
(&
h™dÀr
);

196 i‡(
	g£íIt
 !
£íO±i⁄s
.
íd
())

198 
h™dÀDu∂iˇãO±i⁄
(
›ti⁄
, 
£íIt
->
£c⁄d
);

202 
	g£íO±i⁄s
.
ö£π
({&
h™dÀr
, 
›ti⁄
});

204 
	g°d
::
°rög
 
îr‹
 = 
h™dÀr
.
¥o˚ssVÆue
(
vÆue
);

205 i‡(!
	gîr‹
.
em±y
())

207 
	g°d
::
˚º
 << 
¨gv
[0] << ": invÆid vÆuêf‹ o±i⁄ " << 
›ti⁄
 << ": "

208 << 
îr‹
 << " (gŸ \"" << 
vÆue
 << "\")" << 
°d
::
ídl
;

209 
	g∑r£Suc˚ssful
 = 
Ál£
;

213 autÿ
	gh™dÀPosôi⁄Æ
 = [&](c⁄° 
°d
::
°rög
 &
¨g
)

215 i‡(
posôi⁄ÆArgs
)

217 
posôi⁄ÆArgs
->
push_back
(
¨g
);

221 
	g°d
::
˚º
 << 
¨gv
[0] << ":ÖositionalárgumentsáreÇot supported (got \""

222 << 
¨g
 << "\")" << 
°d
::
ídl
;

223 
	g∑r£Suc˚ssful
 = 
Ál£
;

227 
	g¨gIndex
 = 1;árgIndex < 
	g¨gc
; ++argIndex)

229 
	g°d
::
°rög
 
¨g
 = 
¨gv
[
¨gIndex
];

231 
	gex≥˘ög
)

233 
	gOPTION
:

234 i‡(
¨g
 == "--")

236 
ex≥˘ög
 = 
POSITIONAL
;

238 i‡(
	g¨g
[0] ='-' && 
¨g
[1] == '-')

240 
°d
::
size_t
 
equÆsPos
 = 
¨g
.
föd
('=');

242 i‡(
	gequÆsPos
 =
°d
::
°rög
::
≈os
)

244 
°d
::
°rög
 
«me
 = 
¨g
.
sub°r
(2);

245 autÿ
	gboﬁIt
 = 
l⁄gBoﬁónO±i⁄s
.
föd
(
«me
);

246 i‡(
	gboﬁIt
 !
l⁄gBoﬁónO±i⁄s
.
íd
())

248 
h™dÀKnownBoﬁónO±i⁄
(
¨g
, 
boﬁIt
->
£c⁄d
);

252 autÿ
	gô
 = 
l⁄gO±i⁄s
.
föd
(
«me
);

253 i‡(
	gô
 !
l⁄gO±i⁄s
.
íd
())

255 
cuºítO±i⁄
 = 
¨g
;

256 
	gcuºítO±i⁄H™dÀr
 = 
ô
->
£c⁄d
.
gë
();

257 
	gex≥˘ög
 = 
OPTION_ARGUMENT
;

261 
h™dÀUnknownO±i⁄
(
¨g
);

265 
	g°d
::
°rög
 
«me
 = 
¨g
.
sub°r
(2, 
equÆsPos
 - 2);

266 
	g°d
::
°rög
 
«meWôhDashes
 = 
¨g
.
sub°r
(0, 
equÆsPos
);

267 
	g°d
::
°rög
 
vÆue
 = 
¨g
.
sub°r
(
equÆsPos
 + 1);

269 autÿ
	gboﬁIt
 = 
l⁄gBoﬁónO±i⁄s
.
föd
(
«me
);

270 i‡(
	gboﬁIt
 !
l⁄gBoﬁónO±i⁄s
.
íd
())

272 
°d
::
˚º
 << 
¨gv
[0] << ": o±i⁄ " << 
«meWôhDashes


273 << " d€¢'àèkê™árgumíà(gŸ \"" << 
vÆue
 << "\")" << 
°d
::
ídl
;

274 
	g∑r£Suc˚ssful
 = 
Ál£
;

278 autÿ
	gô
 = 
l⁄gO±i⁄s
.
föd
(
«me
);

279 i‡(
	gô
 !
l⁄gO±i⁄s
.
íd
())

281 
h™dÀKnownO±i⁄
(
«meWôhDashes
, 
vÆue
, *
ô
->
£c⁄d
);

285 
h™dÀUnknownO±i⁄
(
«meWôhDashes
);

288 i‡(
	g¨g
[0] ='-' && 
¨g
.
size
() > 1)

290 
°d
::
size_t
 
sh‹tO±Index
 = 1; 
	gsh‹tO±Index
 < 
	g¨g
.
size
(); ++shortOptIndex)

292 
	g«me
 = 
¨g
[
sh‹tO±Index
];

294 
	g°d
::
°rög
 
«meWôhDash
 = {'-', 
«me
};

296 autÿ
	gboﬁIt
 = 
sh‹tBoﬁónO±i⁄s
.
föd
(
«me
);

297 i‡(
	gboﬁIt
 !
sh‹tBoﬁónO±i⁄s
.
íd
())

299 
h™dÀKnownBoﬁónO±i⁄
(
«meWôhDash
, 
boﬁIt
->
£c⁄d
);

303 autÿ
	gô
 = 
sh‹tO±i⁄s
.
föd
(
«me
);

304 i‡(
	gô
 !
sh‹tO±i⁄s
.
íd
())

306 i‡(
sh‹tO±Index
 + 1 =
¨g
.
size
())

308 
cuºítO±i⁄
 = 
«meWôhDash
;

309 
	gcuºítO±i⁄H™dÀr
 = 
ô
->
£c⁄d
.
gë
();

310 
	gex≥˘ög
 = 
OPTION_ARGUMENT
;

314 
h™dÀKnownO±i⁄
(
«meWôhDash
, 
¨g
.
sub°r
(
sh‹tO±Index
 + 1), *
ô
->
£c⁄d
);

319 
h™dÀUnknownO±i⁄
(
«meWôhDash
);

324 
h™dÀPosôi⁄Æ
(
¨g
);

327 
	gOPTION_ARGUMENT
:

328 
h™dÀKnownO±i⁄
(
cuºítO±i⁄
, 
¨g
, *
cuºítO±i⁄H™dÀr
);

329 
	gex≥˘ög
 = 
OPTION
;

331 
	gPOSITIONAL
:

332 
h™dÀPosôi⁄Æ
(
¨g
);

337 i‡(
	gex≥˘ög
 =
OPTION_ARGUMENT
)

339 
°d
::
˚º
 << 
¨gv
[0] << ": o±i⁄ " << 
cuºítO±i⁄
 << "Ñequúe†™árgumít" << std::
ídl
;

340 
	g∑r£Suc˚ssful
 = 
Ál£
;

343  
	g∑r£Suc˚ssful
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/ArgumentParser.hpp

29 #i‚de‡
ARGUMENTPARSER_HPP


30 
	#ARGUMENTPARSER_HPP


	)

32 
	~<°rög
>

33 
	~<un‹dîed_m≠
>

34 
	~<ve˘‹
>

36 
	~<NVX/Aµliˇti⁄.hµ
>

38 
«me•a˚
 
	gnvxio
 {

40 ˛as†
	cArgumítP¨£r


42 
	gpublic
:

43 
ArgumítP¨£r
();

45 
addBoﬁónO±i⁄
(
sh‹tName
, c⁄° 
°d
::
°rög
 &
l⁄gName
,

46 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
,

47 
boﬁ
 *
ªsu…
, boﬁ 
öã∫Æ
);

49 
addO±i⁄
(
sh‹tName
, c⁄° 
°d
::
°rög
 &
l⁄gName
,

50 c⁄° 
°d
::
°rög
 &
des¸ùti⁄
,

51 
O±i⁄H™dÀr
::
±r
 
h™dÀr
, 
boﬁ
 
öã∫Æ
);

53 
ÆlowPosôi⁄Æ
(
°d
::
ve˘‹
<°d::
°rög
> *
ªsu…
);

55 
	g°d
::
°rög
 
gëHñpSåög
(
boﬁ
 
öã∫Æ
) const;

57 
boﬁ
 
∑r£
(
¨gc
, * 
¨gv
[]) const;

59 
	g¥iv©e
:

60 
°d
::
°rög
 
exã∫ÆHñpSåög
;

61 
	g°d
::
°rög
 
öã∫ÆHñpSåög
;

62 
	g°d
::
un‹dîed_m≠
<, 
	gboﬁ
*> 
	gsh‹tBoﬁónO±i⁄s
;

63 
	g°d
::
un‹dîed_m≠
<
°d
::
°rög
, 
	gboﬁ
*> 
	gl⁄gBoﬁónO±i⁄s
;

64 
	g°d
::
un‹dîed_m≠
<, std::
sh¨ed_±r
<
O±i⁄H™dÀr
>> 
sh‹tO±i⁄s
;

65 
	g°d
::
un‹dîed_m≠
<
°d
::
°rög
, std::
sh¨ed_±r
<
O±i⁄H™dÀr
>> 
l⁄gO±i⁄s
;

66 
	g°d
::
ve˘‹
<
°d
::
°rög
> *
posôi⁄ÆArgs
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/ConfigParser.cpp

29 
	~<NVX/C⁄figP¨£r.hµ
>

31 
	~<ˇs£π
>

32 
	~<io°ªam
>

33 
	~<f°ªam
>

34 
	~<un‹dîed_m≠
>

36 
«me•a˚
 
	gnvxio


39 
	g«me•a˚
 {

41 ˛as†
	cC⁄figP¨£rIm∂
: 
public
 
C⁄figP¨£r


43 
public
:

44 
addP¨amëî
(c⁄° 
°d
::
°rög
 &
∑ømName
, 
O±i⁄H™dÀr
::
±r
 
h™dÀr
);

45 
	g°d
::
°rög
 
∑r£
(c⁄° 
°d
::°rög &
∑thToC⁄figFûe
);

46 
	g¥iv©e
:

47 
°d
::
un‹dîed_m≠
<°d::
°rög
, 
	g°d
::
unique_±r
<
O±i⁄H™dÀr
>> 
∑ømëîsLi°
;

50 
	gC⁄figP¨£rIm∂
::
addP¨amëî
(c⁄° 
°d
::
°rög
 &
∑ømName
, 
O±i⁄H™dÀr
::
±r
 
h™dÀr
)

52 i‡(
∑ømName
.
em±y
())

54 
NVXIO_THROW_EXCEPTION
("ParameterÇame shouldÇot beÉmpty");

57 i‡(
	g∑ømëîsLi°
.
föd
(
∑ømName
Ë!
∑ømëîsLi°
.
íd
())

59 
NVXIO_THROW_EXCEPTION
("P¨amëî wôhÅhê«mê\"" << 
∑ømName
 << "\"álreadyÉxists");

62 
	g∑ømëîsLi°
[
∑ømName
] = 
°d
::
move
(
h™dÀr
);

65 
	g°d
::
°rög
 
åim
(c⁄° 
°d
::°rög& 
°r
)

67 
°d
::
°rög
::
size_ty≥
 
fú°OfN⁄S∑˚s
 = 
°r
.
föd_fú°_nŸ_of
(" \t");

68 
	g°d
::
°rög
::
size_ty≥
 
œ°OfN⁄S∑˚s
 = 
°r
.
föd_œ°_nŸ_of
(" \t");

70 i‡(
	gfú°OfN⁄S∑˚s
 =
°d
::
°rög
::
≈os
)

72  
°d
::
°rög
();

76  
	g°r
.
sub°r
(
fú°OfN⁄S∑˚s
, 
œ°OfN⁄S∑˚s
 - firstOfNonSpaces + 1);

80 
boﬁ
 
∑r£KeyVÆueSåög
(c⁄° 
°d
::
°rög
 &
löe
, std::°rög &
key
, std::°rög &
vÆ
)

82 
°d
::
°rög
::
size_ty≥
 
eqSignPosôi⁄
 = 
löe
.
föd
("=");

83 i‡(
	geqSignPosôi⁄
 !
°d
::
°rög
::
≈os
)

85 
key
 = 
åim
(
löe
.
sub°r
(0, 
eqSignPosôi⁄
));

86 
	gvÆ
 = 
åim
(
löe
.
sub°r
(
eqSignPosôi⁄
 + 1));

87  !
	gkey
.
em±y
();

91  
	gÁl£
;

96 
	g°d
::
°rög
 
C⁄figP¨£rIm∂
::
∑r£
(c⁄° 
°d
::°rög &
∑thToC⁄figFûe
)

98 
°d
::
if°ªam
 
c⁄fig
(
∑thToC⁄figFûe
);

99 
	g°d
::
°rög
 
löe
, 
	gk
, 
	gv
, 
	gmsg
;

100 i‡(
	gc⁄fig
)

102 
	g°d
::
gëlöe
(
c⁄fig
, 
löe
))

104 
	glöe
 = 
åim
(
löe
);

105 i‡(!
	glöe
.
em±y
() && !(line[0]=='#'))

107 i‡(
∑r£KeyVÆueSåög
(
löe
, 
k
, 
v
))

109 autÿ
∑øm
 = 
∑ømëîsLi°
.
föd
(
k
);

110 i‡(
	g∑øm
 !
∑ømëîsLi°
.
íd
())

112 
°d
::
°rög
 
îr‹
 = 
∑øm
->
£c⁄d
->
¥o˚ssVÆue
(
v
);

113 i‡(!
	gîr‹
.
em±y
())

115 
	gmsg
 +("P¨amëî \'"+
k
+"\' "+
îr‹
 +" (vÆuê\'"+
v
+"\' has beenÖassed)\n");

120 
	gmsg
 +("Unknow¿∑ømëî \'"+ 
k
 +"\' has been found\n");

125 
	gmsg
 +"Encou¡îedá¿ûl-f‹medÜöe: '" + 
löe
 + "';áborting\n";

126  
	gmsg
;

131 i‡(
	gc⁄fig
.
bad
())

133 
	gmsg
 +"A¿I/OÉº‹ occuºed whûêªadög " + 
∑thToC⁄figFûe
 + "\n";

138 
	gmsg
 +("P©h "+ 
∑thToC⁄figFûe
 +" couldn't be opened!\n");

140  
	gmsg
;

145 
	g°d
::
unique_±r
<
C⁄figP¨£r
> 
	$¸óãC⁄figP¨£r
()

147  
nvxio
::
makeUP
<
C⁄figP¨£rIm∂
>();

148 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/ConvertFrame.cpp

29 
	~"Priv©e/Ty≥s.hµ
"

31 
	~<NVX/ProfûîR™ge.hµ
>

33 
	~<cuda_ru¡ime_≠i.h
>

34 
	~"FømeSour˚/FømeSour˚Im∂.hµ
"

35 
	~<g°/≠p/g°≠psök.h
>

36 
	~<s°ªam
>

37 
	~<io°ªam
>

39 
«me•a˚
 
	gnvidüio


42 
c⁄vîtFøme
(
nvxcu_°ªam_exec_èrgë_t
 &
exec_èrgë
,

43 c⁄° 
image_t
 & 
image
,

44 c⁄° 
FømeSour˚
::
P¨amëîs
 & 
c⁄figuøti⁄
,

45 
width
, 
height
,

46 
boﬁ
 
u£Pôch
, 
size_t
 
pôch
,

47 
dïth
, * 
decodedPå
,

48 
boﬁ
 
is_cuda
,

49 *& 
devMem
,

50 
size_t
 & 
devMemPôch
)

53 
	gnvxio
::
ProfûîR™ge
 
ønge
(
nvxio
::
COLOR_ARGB_FUSCHIA
, "ConvertFrame (NVXIO)");

55 
cudaSåóm_t
 
	g°ªam
 = 
nuŒ±r
;

56 
boﬁ
 
	g√edC⁄vît
 = 
image
.
f‹m©
 !
c⁄figuøti⁄
.format;

57 
boﬁ
 
	gˇnC›yDúe˘ly
 = !
√edC⁄vît
 ||

58 (
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
 && 
image
.f‹m© =
NVXCU_DF_IMAGE_U8
);

61 i‡(!
	gis_cuda
 && !
	gˇnC›yDúe˘ly
)

63 i‡(!
	gdevMem
)

65 
size_t
 
	gheight_dec
 = 
height
;

67 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

68 
height_dec
 += height_dec >> 1;

71 
NVXIO_ASSERT
–
cudaSuc˚ss
 =
cudaMÆlocPôch
(&
devMem
, &
devMemPôch
,

72 
width
 * 4, 
height_dec
) );

76 * 
	gdevMems
[2] = { 
devMem
, 
nuŒ±r
 };

78 i‡(!
	gˇnC›yDúe˘ly
)

80 
NVXIO_ASSERT
(
√edC⁄vît
);

82 i‡(!
	gis_cuda
)

84 
NVXIO_ASSERT
(
devMem
);

87 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_U8
 ||

88 
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
 ||

89 
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
)

91 
vx_öt32
 
°ride_y
 = 
u£Pôch
 ? 
pôch
 : ((
width
 * 
dïth
 + 3) >> 2) << 2;

92 
vx_öt32
 
	g°ride_x
 = 
dïth
;

94 
CUDA_SAFE_CALL
 (

95 
cudaMem˝y2DAsync
(
devMems
[0], 
devMemPôch
,

96 
decodedPå
, 
°ride_y
,

97 
width
 * 
°ride_x
,

98 
height
, 
cudaMem˝yHo°ToDevi˚
, 
°ªam
) );

99 
CUDA_SAFE_CALL
–
cudaSåómSynchr⁄ize
(
°ªam
) );

102 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

104 
vx_öt32
 
°ride_y
 = 
u£Pôch
 ? 
pôch
 : ((
width
 + 3) >> 2) << 2;

105 
vx_öt32
 
	g°ride_x
 = (
uöt8_t
);

106 
CUDA_SAFE_CALL
 (

107 
cudaMem˝y2DAsync
(
devMems
[0], 
devMemPôch
,

108 
decodedPå
, 
°ride_y
,

109 
width
 * 
°ride_x
,

110 
height
, 
cudaMem˝yHo°ToDevi˚
, 
°ªam
) );

113 
	gdevMems
[1] = (
uöt8_t
 *)
devMem
 + 
devMemPôch
 * 
height
;

114 
	g°ride_x
 = (
uöt16_t
);

115 
	gdecodedPå
 = (*Ë((
uöt8_t
 *)
decodedPå
 + 
°ride_y
 * 
height
);

116 
	gwidth
 >>= 1;

117 
	gheight
 >>= 1;

118 
CUDA_SAFE_CALL
 (

119 
cudaMem˝y2DAsync
(
devMems
[1], 
devMemPôch
,

120 
decodedPå
, 
°ride_y
,

121 
width
 * 
°ride_x
,

122 
height
, 
cudaMem˝yHo°ToDevi˚
, 
°ªam
) );

123 
CUDA_SAFE_CALL
–
cudaSåómSynchr⁄ize
(
°ªam
) );

127 
NVXIO_THROW_EXCEPTION
("Unsupported image format");

132 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_U8
 ||

133 
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
 ||

134 
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
)

136 
vx_öt32
 
°ride_y
 = 
u£Pôch
 ? 
pôch
 : ((
width
 * 
dïth
 + 3) >> 2) << 2;

137 
	gdevMems
[0] = 
decodedPå
;

138 
	gdevMemPôch
 = 
°ride_y
;

141 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

143 
vx_öt32
 
°ride_y
 = 
u£Pôch
 ? 
pôch
 : ((
width
 + 3) >> 2) << 2;

144 
	gdevMems
[0] = 
decodedPå
;

145 
	gdevMemPôch
 = 
°ride_y
;

146 
	gdevMems
[1] = (*Ë((
uöt8_t
 *)
decodedPå
 + 
°ride_y
 * 
height
);

152 
NVXIO_THROW_EXCEPTION
("Unsupported image format");

159 i‡(
	gˇnC›yDúe˘ly
)

163 
cudaMem˝yKöd
 
	gc›yKöd
 = 
is_cuda
 ? 
cudaMem˝yDevi˚ToDevi˚
 :

164 
cudaMem˝yHo°ToDevi˚
;

166 * 
	g‰amePå
 = 
nuŒ±r
;

168 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_U8
 ||

169 
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
 ||

170 
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
)

172 
vx_öt32
 
°ride_y
 = 
u£Pôch
 ? 
pôch
 : ((
width
 * 
dïth
 + 3) >> 2) << 2;

173 
vx_öt32
 
	g°ride_x
 = 
dïth
;

174 
	g‰amePå
 = 
image
.
∂™es
[0].
±r
;

175 
CUDA_SAFE_CALL
 (

176 
cudaMem˝y2DAsync
(
‰amePå
, 
image
.
∂™es
[0].
pôch_ö_byãs
,

177 
decodedPå
, 
°ride_y
,

178 
width
 * 
°ride_x
,

179 
height
, 
c›yKöd
, 
°ªam
) );

181 
CUDA_SAFE_CALL
–
cudaSåómSynchr⁄ize
(
°ªam
) );

183 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
 && 
image
.
f‹m©
 == NVXCU_DF_IMAGE_NV12)

185 
vx_öt32
 
°ride_y
 = 
u£Pôch
 ? 
pôch
 : ((
width
 + 3) >> 2) << 2;

186 
vx_öt32
 
	g°ride_x
 = (
uöt8_t
);;

187 
	g‰amePå
 = 
image
.
∂™es
[0].
±r
;

188 
CUDA_SAFE_CALL
 (

189 
cudaMem˝y2DAsync
(
‰amePå
, 
image
.
∂™es
[0].
pôch_ö_byãs
,

190 
decodedPå
, 
°ride_y
,

191 
width
 * 
°ride_x
,

192 
height
, 
c›yKöd
, 
°ªam
) );

194 
	g‰amePå
 = 
image
.
∂™es
[1].
±r
;

195 
	g°ride_x
 = (
uöt16_t
);

196 
	gwidth
 >>= 1;

197 
	gheight
 >>= 1;

198 
	gdecodedPå
 = (*Ë((
uöt8_t
 *)
decodedPå
 + 
°ride_y
 * 
height
);

199 
CUDA_SAFE_CALL
 (

200 
cudaMem˝y2DAsync
(
‰amePå
, 
image
.
∂™es
[1].
pôch_ö_byãs
,

201 
decodedPå
, 
°ride_y
,

202 
width
 * 
°ride_x
,

203 
height
, 
c›yKöd
, 
°ªam
) );

204 
CUDA_SAFE_CALL
–
cudaSåómSynchr⁄ize
(
°ªam
) );

208 
NVXIO_THROW_EXCEPTION
("Unsupported image format");

213 
nvxcu_pôch_löór_image_t
 
	göput
, 
	gouçut
;

214 
	göput
.
	gba£
.
	gf‹m©
 = 
c⁄figuøti⁄
.
f‹m©
;

215 
	göput
.
	gba£
.
	gwidth
 = 
c⁄figuøti⁄
.
‰ameWidth
;

216 
	göput
.
	gba£
.
	gheight
 = 
c⁄figuøti⁄
.
‰ameHeight
;

217 
	göput
.
	gba£
.
	gimage_ty≥
 = 
NVXCU_PITCH_LINEAR_IMAGE
;

218 
NVXIO_ASSERT
(
öput
.
ba£
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
 ||

219 
öput
.
ba£
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
 ||

220 
öput
.
ba£
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ||

221 
öput
.
ba£
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
);

222 
	göput
.
	g∂™es
[0].
	gdev_±r
 = 
devMems
[0];

223 
	göput
.
	g∂™es
[0].
	gpôch_ö_byãs
 = 
devMemPôch
;

224 i‡(
	göput
.
	gba£
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

226 
öput
.
∂™es
[1].
dev_±r
 = 
devMems
[1];

227 
	göput
.
	g∂™es
[1].
	gpôch_ö_byãs
 = 
devMemPôch
;

230 
	gouçut
.
	gba£
.
	gf‹m©
 = 
image
.
f‹m©
;

231 
	gouçut
.
	gba£
.
	gwidth
 = 
image
.
width
;

232 
	gouçut
.
	gba£
.
	gheight
 = 
image
.
height
;

233 
	gouçut
.
	gba£
.
	gimage_ty≥
 = 
NVXCU_PITCH_LINEAR_IMAGE
;

234 
NVXIO_ASSERT
(
ouçut
.
ba£
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
 ||

235 
ouçut
.
ba£
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
 ||

236 
ouçut
.
ba£
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ||

237 
ouçut
.
ba£
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
);

238 
	gouçut
.
	g∂™es
[0].
	gdev_±r
 = 
image
.
∂™es
[0].
±r
;

239 
	gouçut
.
	g∂™es
[0].
	gpôch_ö_byãs
 = 
image
.
∂™es
[0].
pôch_ö_byãs
;

240 i‡(
	gouçut
.
	gba£
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

242 
ouçut
.
∂™es
[1].
dev_±r
 = 
image
.∂™es[1].
±r
;

243 
	gouçut
.
	g∂™es
[1].
	gpôch_ö_byãs
 = 
image
.
∂™es
[1].
pôch_ö_byãs
;

247 
NVXCU_SAFE_CALL
–
nvxcuCﬁ‹C⁄vît
(&
öput
.
ba£
, &
ouçut
.ba£, 
NVXCU_COLOR_SPACE_DEFAULT
,

248 
NVXCU_CHANNEL_RANGE_FULL
, &
exec_èrgë
.
ba£
) );

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/EGLAPIAccessors.cpp

29 #ifde‡
USE_GLES


31 
	~"FømeSour˚/EGLAPIAc˚ss‹s.hµ
"

32 
	~"Priv©e/LogUtûs.hµ
"

35 
«me•a˚
 
	gnvidüio


38 
EGLDi•œy
 
	gEGLDi•œyAc˚ss‹
::
gëIn°™˚
()

40 
EGLDi•œyAc˚ss‹
 
ö°™˚
;

41  
	gö°™˚
.
	geglDi•œy
;

44 
	gEGLDi•œyAc˚ss‹
::
EGLDi•œyAc˚ss‹
()

47 i‡((
eglDi•œy
 = 
eglGëDi•œy
(
EGL_DEFAULT_DISPLAY
)Ë=
EGL_NO_DISPLAY
)

49 
NVXIO_PRINT
("EGL failedÅo obtain display.");

53 
EGLöt
 
	gmaj‹
, 
	gmö‹
;

54 i‡(!
eglInôülize
(
eglDi•œy
, &
maj‹
, &
mö‹
))

56 
NVXIO_PRINT
("EGL failedÅo initialize.");

58 
eglTîmö©e
(
eglDi•œy
);

59 
	geglDi•œy
 = 
EGL_NO_DISPLAY
;

63 
NVXIO_PRINT
("EGL API: %d.%d", 
maj‹
, 
mö‹
);

67 
	gEGLDi•œyAc˚ss‹
::~
EGLDi•œyAc˚ss‹
()

69 i‡(
eglDi•œy
 !
EGL_NO_DISPLAY
)

71 
eglTîmö©e
(
eglDi•œy
);

72 
	geglDi•œy
 = 
EGL_NO_DISPLAY
;

74 
NVXIO_PRINT
("Terminate EGL display");

75 
fÊush
(
°dout
);

79 
«me•a˚
 
	gegl_≠i
 {

81 
boﬁ
 
	göôülized
 = 
Ál£
;

83 
	#EXTLST_IMPL_MY
(
tx
, 
x
Ëtx x = 
nuŒ±r
;

	)

84 
EXTENSION_LIST_MY
(
EXTLST_IMPL_MY
)

86 (* 
	gexé°_‚±r_t
)();

87 
	#EXTLST_ENTRY_MY
(
tx
, 
x
Ë{ ( 
exé°_‚±r_t
 *)&x, #x },

	)

91 
exé°_‚±r_t
 * 
	g‚±r
;

92 c⁄° * 
	g«me
;

93 } 
	gexãnsi⁄Li°
[] = { 
EXTENSION_LIST_MY
(
EXTLST_ENTRY_MY
) };

95 
boﬁ
 
£tupEGLExãnsi⁄s
()

97 i‡(!
	göôülized
)

99 
vx_size
 
	gi
 = 0; i < 
	govxio
::
dimOf
(
exãnsi⁄Li°
); i++)

101 *
	gexãnsi⁄Li°
[
i
].
	g‚±r
 = 
eglGëProcAddªss
(
exãnsi⁄Li°
[i].
«me
);

102 i‡(!*
	gexãnsi⁄Li°
[
i
].
	g‚±r
)

104 
NVXIO_PRINT
("Couldn'àgëáddªs†o‡%s()", 
exãnsi⁄Li°
[
i
].
«me
);

105  
	gÁl£
;

109 
	göôülized
 = 
åue
;

112  
	gåue
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/EGLAPIAccessors.hpp

29 #ifde‡
USE_GLES


31 #i‚de‡
EGLAPIACCESSORS_HPP


32 
	#EGLAPIACCESSORS_HPP


	)

34 
	~<EGL/egl.h
>

35 
	~<EGL/egÀxt.h
>

37 #i‡!
deföed
 
EGL_KHR_°ªam
 || !deföed 
EGL_KHR_°ªam_fifo
 || !deföed 
EGL_KHR_°ªam_c⁄sumî_g…extuª


41 
«me•a˚
 
	gnvidüio


44 ˛as†
	cEGLDi•œyAc˚ss‹


46 
	gpublic
:

47 
EGLDi•œy
 
gëIn°™˚
();

49 
	g¥iv©e
:

50 
EGLDi•œyAc˚ss‹
();

51 ~
EGLDi•œyAc˚ss‹
();

53 
EGLDi•œy
 
	geglDi•œy
;

56 
	#EXTENSION_LIST_MY
(
T
) \

57 
	`T
–
PFNEGLCREATESTREAMKHRPROC
, 
eglCª©eSåómKHR
 ) \

58 
	`T
–
PFNEGLDESTROYSTREAMKHRPROC
, 
eglDe°roySåómKHR
 ) \

59 
	`T
–
PFNEGLQUERYSTREAMKHRPROC
, 
eglQuîySåómKHR
 ) \

60 
	$T
–
PFNEGLSTREAMATTRIBKHRPROC
, 
eglSåómAâribKHR
 )

	)

62 
«me•a˚
 
egl_≠i


65 
	#EXTLST_EXTERN
(
tx
, 
x
Ëtx x;

	)

67 
	`EXTENSION_LIST_MY
(
EXTLST_EXTERN
)

69 
boﬁ
 
	`£tupEGLExãnsi⁄s
();

71 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/FrameSource.cpp

29 
	~"FømeSour˚/Wøµîs/FømeSour˚Wøµî.hµ
"

31 #ifde‡
USE_OPENCV


32 
	~"FømeSour˚/O≥nCV/O≥nCVFømeSour˚Im∂.hµ
"

33 
	~"FømeSour˚/O≥nCV/O≥nCVImageFømeSour˚.hµ
"

34 
	~"FømeSour˚/O≥nCV/O≥nCVVideoFømeSour˚.hµ
"

37 #ifde‡
USE_GSTREAMER


38 #ifde‡
USE_GSTREAMER_NVMEDIA


39 
	~"FømeSour˚/GSåómî/GSåómîNvMedüFømeSour˚Im∂.hµ
"

41 
	~"FømeSour˚/GSåómî/GSåómîVideoFømeSour˚Im∂.hµ
"

42 
	~"FømeSour˚/GSåómî/GSåómîCamîaFømeSour˚Im∂.hµ
"

43 
	~"FømeSour˚/GSåómî/GSåómîImagesFømeSour˚Im∂.hµ
"

44 #ifde‡
USE_NVGSTCAMERA


45 
	~"FømeSour˚/GSåómî/GSåómîNvCamîaFømeSour˚Im∂.hµ
"

47 #i‡
deföed
 
USE_GSTREAMER_OMX
 && deföed 
USE_GLES


48 
	~"FømeSour˚/GSåómî/GSåómîO≥nMAXFømeSour˚Im∂.hµ
"

52 #ifde‡
USE_NVMEDIA


53 
	~"FømeSour˚/NvMedü/NvMedüVideoFømeSour˚Im∂.hµ
"

54 #ifde‡
USE_CSI_OV10635


55 
	~"FømeSour˚/NvMedü/NvMedüCSI10635CamîaFømeSour˚Im∂.hµ
"

57 #ifde‡
USE_CSI_OV10640


58 
	~"FømeSour˚/NvMedü/NvMedüCSI10640CamîaFømeSour˚Im∂.hµ
"

63 
	~<NVX/ThªadSa„Queue.hµ
>

65 
	~<m≠
>

66 
	~<°rög
>

68 
	~<cuda_ru¡ime_≠i.h
>

70 
	~"Priv©e/LogUtûs.hµ
"

72 
usög
 
	gnvxio
::
makeUP
;

74 
«me•a˚
 
	gnvidüio
 {

76 
	g«me•a˚
 {

82 
boﬁ
 
∑r£URI
(c⁄° 
°d
::
°rög
 & 
uri
,

83 
°d
::
°rög
 & 
¥Ÿocﬁ
,

84 
°d
::
°rög
 & 
∑th
,

85 
°d
::
m≠
<°d::
°rög
, std::°rög> & 
keyVÆues
)

87 
keyVÆues
.
˛ór
();

88 
	g°d
::
size_t
 
pos
 = 
uri
.
föd
(":///");

91 i‡(
	gpos
 =
°d
::
°rög
::
≈os
)

93 
NVXIO_PRINT
("Tª© \"%s\"á†®ªguœ∏fûe", 
uri
.
c_°r
());

95 
	g¥Ÿocﬁ
 = "file";

96 
	g∑th
 = 
uri
;

98  
	gåue
;

102 
	g¥Ÿocﬁ
 = 
uri
.
sub°r
(0, 
pos
);

103 
NVXIO_PRINT
("FoundÖrŸocﬁ: \"%s\"", 
¥Ÿocﬁ
.
c_°r
());

105 i‡(
	g¥Ÿocﬁ
 !"fûe" && 
¥Ÿocﬁ
 != "device")

107 
NVXIO_PRINT
("Unknow¿¥Ÿocﬁ s≥cifõd: \"%s\"", 
¥Ÿocﬁ
.
c_°r
());

108  
	gÁl£
;

112 
	g°d
::
°rög
 
tmp
 = 
uri
.
sub°r
(
pos
 + 4);

114 i‡(
	g¥Ÿocﬁ
 == "file")

116 
∑th
 = 
tmp
;

117  
	gåue
;

120 
	gpos
 = 
tmp
.
föd
('?');

123 i‡(
	gpos
 =
°d
::
°rög
::
≈os
)

125 
NVXIO_PRINT
("FoundÖ©h: \"%s\"", 
tmp
.
c_°r
());

127 
	g∑th
 = 
tmp
;

128  
	gåue
;

131 
	g∑th
 = 
tmp
.
sub°r
(0, 
pos
);

132 
NVXIO_PRINT
("FoundÖ©h: \"%s\"", 
∑th
.
c_°r
());

135 
	gtmp
 = 
tmp
.
sub°r
(
pos
 + 1);

136 
NVXIO_PRINT
("P¨£á¿¨øy o‡key=vÆue: \"%s\"", 
tmp
.
c_°r
());

138 !
	gtmp
.
em±y
())

140 
	g°d
::
size_t
 
pos
 = 
tmp
.
föd
('&');

141 
	g°d
::
°rög
 
keyVÆue
;

144 i‡(
	gpos
 =
°d
::
°rög
::
≈os
)

145 
keyVÆue
 = 
tmp
;

147 
	gkeyVÆue
 = 
tmp
.
sub°r
(0, 
pos
);

149 i‡(!
	gkeyVÆue
.
em±y
())

151 
	g°d
::
size_t
 
equÆPos
 = 
keyVÆue
.
föd
('=');

153 i‡(
	gequÆPos
 =
°d
::
°rög
::
≈os
)

154 
NVXIO_THROW_EXCEPTION
("Thê\"" << 
keyVÆue
 << "\" key is specified withoutá value");

156 
	g°d
::
°rög
 
key
 = 
keyVÆue
.
sub°r
(0, 
equÆPos
),

157 
	gvÆue
 = 
keyVÆue
.
sub°r
(
equÆPos
 + 1);

159 i‡(
	gkey
.
em±y
())

160 
NVXIO_THROW_EXCEPTION
("Empty key specified");

162 i‡(
	gvÆue
.
em±y
())

163 
NVXIO_THROW_EXCEPTION
("Empty value specified");

165 i‡(!
	gkeyVÆues
[
key
].
em±y
())

166 
NVXIO_THROW_EXCEPTION
("Thê\"" << 
key
 << "\" is specified multipleÅimes");

168 
NVXIO_PRINT
("Found key \"%s\" wôhÅhêvÆuê\"%s\"", 
key
.
c_°r
(), 
vÆue
.c_str());

169 
	gkeyVÆues
[
key
] = 
vÆue
;

173 i‡(
	gpos
 =
°d
::
°rög
::
≈os
)

176 
	gtmp
 = 
tmp
.
sub°r
(
pos
 + 1);

179  
	gåue
;

182 
ªsﬁveI¡egîVÆue
(
°d
::
m≠
<°d::
°rög
, std::°rög> 
keyVÆues
, c⁄° std::°rög & 
key
)

184 
idx
 = -1;

185 
	g°d
::
°rög
 & 
vÆue
 = 
keyVÆues
[
key
];

187 i‡(
	gvÆue
.
em±y
())

188 
NVXIO_THROW_EXCEPTION
("M™d©‹y key \"" << 
key
 << "\" isÇot found");

190 i‡(
ssˇnf
(
vÆue
.
c_°r
(), "%d", &
idx
) != 1)

191 
NVXIO_THROW_EXCEPTION
("FaûedÅÿc⁄vîà\"" << 
key
 << "\" valueÅoÇativeÑepresentation");

193  
	gidx
;

198 
	g°d
::
unique_±r
<
FømeSour˚
> 
¸óãDeÁu…FømeSour˚
(c⁄° 
°d
::
°rög
& 
uri
)

200 
°d
::
°rög
 
¥Ÿocﬁ
, 
	g∑th
;

201 
	g°d
::
m≠
<
°d
::
°rög
, std::°rög> 
keyVÆues
;

203 i‡(!
∑r£URI
(
uri
, 
¥Ÿocﬁ
, 
∑th
, 
keyVÆues
))

205 
NVXIO_PRINT
("FailedÅoÖarse URI");

206  
	gnuŒ±r
;

209 i‡(
	g¥Ÿocﬁ
.
em±y
() ||Örotocol == "file")

211 i‡(!
∑th
.
em±y
())

213 
°d
::
°rög
 
ext
 = 
∑th
.
sub°r
’©h.
rföd
(".") + 1);

215 i‡((
	gext
 =
°d
::
°rög
("png")) ||

216 (
ext
 =
°d
::
°rög
("jpg")) ||

217 (
ext
 =
°d
::
°rög
("jpeg")) ||

218 (
ext
 =
°d
::
°rög
("bmp")) ||

219 (
ext
 =
°d
::
°rög
("tiff")))

221 #i‡
deföed
 
USE_GSTREAMER
 || deföed 
USE_OPENCV


222 
size_t
 
pos
 = 
∑th
.
föd
('%');

223 
boﬁ
 
	gisImageSequí˚
 = 
pos
 !
°d
::
°rög
::
≈os
;

225 #ifde‡
USE_GSTREAMER


226  
	gmakeUP
<
	gGSåómîImagesFømeSour˚Im∂
>(
	gisImageSequí˚
 ? 
	gnvxio
::
FømeSour˚
::
IMAGE_SEQUENCE_SOURCE
 :

227 
nvxio
::
FømeSour˚
::
SINGLE_IMAGE_SOURCE
, 
	g∑th
);

230 #ifde‡
USE_OPENCV


231 
	g°d
::
unique_±r
<
O≥nCVBa£FømeSour˚
> 
ocvSour˚
;

233 i‡(
	gisImageSequí˚
)

234 
	gocvSour˚
.
ª£t
(
√w
 
O≥nCVVideoFømeSour˚
(
∑th
, 
åue
));

236 
	gocvSour˚
.
ª£t
(
√w
 
O≥nCVImageFømeSour˚
(
∑th
));

238 i‡(
	gocvSour˚
)

239  
	gmakeUP
<
	gO≥nCVFømeSour˚Im∂
>(
	g°d
::
move
(
ocvSour˚
));

245 #ifde‡
USE_NVMEDIA


246 i‡(
	gext
 =
°d
::
°rög
("h264"))

247  
makeUP
<
NvMedüVideoFømeSour˚Im∂
>(
∑th
);

249 #ifde‡
USE_GSTREAMER


250 #ifde‡
USE_GSTREAMER_NVMEDIA


251  
	gmakeUP
<
	gGSåómîNvMedüFømeSour˚Im∂
>(
	g∑th
);

253 #i‡
deföed
 
USE_GSTREAMER_OMX
 && deföed 
USE_GLES


254  
	gmakeUP
<
	gGSåómîO≥nMAXFømeSour˚Im∂
>(
	g∑th
);

256  
	gmakeUP
<
	gGSåómîVideoFømeSour˚Im∂
>(
	g∑th
);

260 #ifde‡
USE_OPENCV


261 
	g°d
::
unique_±r
<
O≥nCVVideoFømeSour˚
> 
ocvSour˚
(
√w
 O≥nCVVideoFømeSour˚(
∑th
, 
Ál£
));

262 i‡(
	gocvSour˚
)

263  
	gmakeUP
<
	gO≥nCVFømeSour˚Im∂
>(
	g°d
::
move
(
ocvSour˚
));

269 i‡(
	g¥Ÿocﬁ
 == "device")

271 i‡(
∑th
 == "nvmedia")

273 #ifde‡
USE_NVMEDIA


274 
ˇmîaNumbî
 = 
ªsﬁveI¡egîVÆue
(
keyVÆues
, "number");

276 
	g°d
::
°rög
 
c⁄fig
 = 
keyVÆues
["config"];

277 i‡(
	gc⁄fig
.
em±y
())

278 
NVXIO_THROW_EXCEPTION
("Mandatory key \"config\" isÇot found");

280 i‡(
	gc⁄fig
.
föd
("dvp-ov10640"Ë!
°d
::
°rög
::
≈os
)

282 #ifde‡
USE_CSI_OV10640


283  
makeUP
<
NvMedüCSI10640CamîaFømeSour˚Im∂
>(
c⁄fig
, 
ˇmîaNumbî
);

285 
NVXIO_PRINT
("CSI Omni Vision 10640 camera source isÇotávailable onÅhisÖlatform");

286  
	gnuŒ±r
;

289 i‡(
	gc⁄fig
.
föd
("dvp-ov10635"Ë!
°d
::
°rög
::
≈os
)

291 #ifde‡
USE_CSI_OV10635


292  
makeUP
<
NvMedüCSI10635CamîaFømeSour˚Im∂
>(
c⁄fig
, 
ˇmîaNumbî
);

294 
NVXIO_PRINT
("CSI Omni Vision 10635 camera source isÇotávailable onÅhisÖlatform");

295  
	gnuŒ±r
;

298 ()
	gˇmîaNumbî
;

301 i‡(
	g∑th
 == "nvcamera")

303 #ifde‡
USE_NVGSTCAMERA


304  
makeUP
<
GSåómîNvCamîaFømeSour˚Im∂
>(0);

306 
NVXIO_PRINT
("NvCamera source isÇotávailable onÅhisÖlatform");

307  
	gnuŒ±r
;

310 i‡(
	g∑th
 == "v4l2")

312 #i‡
deföed
 
USE_GSTREAMER
 || deföed 
USE_OPENCV


313 
idx
 = 
ªsﬁveI¡egîVÆue
(
keyVÆues
, "index");

314 #ifde‡
USE_GSTREAMER


315  
	gmakeUP
<
	gGSåómîCamîaFømeSour˚Im∂
>(
	g°©ic_ˇ°
<
	guöt
>(
	gidx
));

318 #ifde‡
USE_OPENCV


319 
	g°d
::
unique_±r
<
O≥nCVVideoFømeSour˚
> 
ocvSour˚
(
√w
 O≥nCVVideoFømeSour˚(
idx
));

320 i‡(
	gocvSour˚
)

321  
	gmakeUP
<
	gO≥nCVFømeSour˚Im∂
>(
	g°d
::
move
(
ocvSour˚
));

327  
	gnuŒ±r
;

333 
«me•a˚
 
	gnvxio
 {

335 
	g°d
::
unique_±r
<
FømeSour˚
> 
¸óãDeÁu…FømeSour˚
(c⁄° 
°d
::
°rög
& 
uri
)

337 
°d
::
unique_±r
<
nvidüio
::
FømeSour˚
> 
±r
 =

338 
nvidüio
::
¸óãDeÁu…FømeSour˚
(
uri
);

340 i‡(!
	g±r
)

341  
	gnuŒ±r
;

343  
	gmakeUP
<
	gFømeSour˚Wøµî
>(
	g°d
::
move
(
±r
));

346 
nvxcu_pôch_löór_image_t
 
lﬂdImageFromFûe
(c⁄° 
°d
::
°rög
& 
fûeName
, 
nvxcu_df_image_e
 
f‹m©
)

348 
NVXIO_ASSERT
((
f‹m©
 =
NVXCU_DF_IMAGE_NV12
) ||

349 (
f‹m©
 =
NVXCU_DF_IMAGE_RGB
) ||

350 (
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
) ||

351 (
f‹m©
 =
NVXCU_DF_IMAGE_U8
));

353 
	g°d
::
unique_±r
<
FømeSour˚
> 
‰ameSour˚
 = 
¸óãDeÁu…FømeSour˚
(
fûeName
);

354 i‡(!
	g‰ameSour˚
)

356 
NVXIO_THROW_EXCEPTION
("C™nŸ cª©ê‰amêsour˚ f‹ fûe: " << 
fûeName
);

359 i‡(
	g‰ameSour˚
->
gëSour˚Ty≥
(Ë!
FømeSour˚
::
SINGLE_IMAGE_SOURCE
)

361 
NVXIO_THROW_EXCEPTION
("Ex≥˘ed " << 
fûeName
 << "Åo beán image");

364 
	gFømeSour˚
::
P¨amëîs
 
‰ameC⁄fig
 = 
‰ameSour˚
->
gëC⁄figuøti⁄
();

365 
	g‰ameC⁄fig
.
	gf‹m©
 = 
f‹m©
;

366 
	g‰ameSour˚
->
£tC⁄figuøti⁄
(
‰ameC⁄fig
);

368 i‡(!
	g‰ameSour˚
->
›í
())

370 
NVXIO_THROW_EXCEPTION
("C™nŸ o≥¿fûe: " << 
fûeName
);

373 
	g‰ameC⁄fig
 = 
‰ameSour˚
->
gëC⁄figuøti⁄
();

375 
nvxcu_pôch_löór_image_t
 
	gimage
 = { };

377 
	gimage
.
	gba£
.
	gwidth
 = 
‰ameC⁄fig
.
‰ameWidth
;

378 
	gimage
.
	gba£
.
	gheight
 = 
‰ameC⁄fig
.
‰ameHeight
;

379 
	gimage
.
	gba£
.
	gf‹m©
 = 
f‹m©
;

380 
	gimage
.
	gba£
.
	gimage_ty≥
 = 
NVXCU_PITCH_LINEAR_IMAGE
;

382 
uöt32_t
 
	g∂™es
 = 
f‹m©
 =
NVXCU_DF_IMAGE_NV12
 ? 2u : 1u;

383 
uöt32_t
 
	gch™√ls
 = 
f‹m©
 =
NVXCU_DF_IMAGE_NV12
 ? 1u :

384 
f‹m©
 =
NVXCU_DF_IMAGE_RGB
 ? 3u :

385 
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ? 4u : 1u;

387 
uöt32_t
 
	gp
 = 0u;Ö < 
	g∂™es
; ++p)

389 
uöt32_t
 
	gwidth
 = 
image
.
ba£
.
width
, 
	gheight
 = image.base.width;

391 i‡(
	gp
 == 1u)

393 
width
 >>= 1u;

394 
	gheight
 >>= 1u;

395 
	gch™√ls
 = 2u;

398 
	gwidth
 *
ch™√ls
;

400 
size_t
 
	gpôch
 = 0ul;

401 
NVXIO_CUDA_SAFE_CALL
–
cudaMÆlocPôch
(&
image
.
∂™es
[
p
].
dev_±r
, &
pôch
,

402 
width
, 
height
) );

404 
	gimage
.
	g∂™es
[
p
].
	gpôch_ö_byãs
 = 
°©ic_ˇ°
<
uöt32_t
>(
pôch
);

407 i‡(
	g‰ameSour˚
->
„tch
(
image
, 
nvxio
::
TIMEOUT_INFINITE
Ë!
FømeSour˚
::
OK
)

409 
uöt32_t
 
p
 = 0u; 
	gp
 < 
	g∂™es
; ++p)

411 
NVXIO_CUDA_SAFE_CALL
–
cudaFªe
(
image
.
∂™es
[
p
].
dev_±r
) );

414 
NVXIO_THROW_EXCEPTION
("C™nŸ fëchá fømê‰om fûe: " << 
fûeName
);

417  
	gimage
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/FrameSourceImpl.hpp

29 #i‚de‡
FRAMESOURCE_HPP


30 
	#FRAMESOURCE_HPP


	)

32 
	~<mem‹y
>

33 
	~<°rög
>

35 
	~"Priv©e/Ty≥s.hµ
"

37 
	~<NVX/FømeSour˚.hµ
>

38 
	~<NVX/Utûôy.hµ
>

40 
«me•a˚
 
	gnvidüio


43 ˛as†
	cFømeSour˚


45 
	gpublic
:

46 
nvxio
::
	tFømeSour˚
::
	tP¨amëîs
 Parameters;

47 
	gnvxio
::
	tFømeSour˚
::
	tSour˚Ty≥
 SourceType;

48 
	gnvxio
::
	tFømeSour˚
::
	tFømeSètus
 FrameStatus;

50 
vútuÆ
 
boﬁ
 
›í
() = 0;

51 
vútuÆ
 
FømeSètus
 
„tch
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
timeout
 = 5u ) = 0;

52 
vútuÆ
 
P¨amëîs
 
gëC⁄figuøti⁄
() = 0;

53 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
P¨amëîs
& 
∑øms
) = 0;

54 
vútuÆ
 
˛o£
() = 0;

55 
	gvútuÆ
 ~
FømeSour˚
()

58 
Sour˚Ty≥
 
gëSour˚Ty≥
() const

60  
	gsour˚Ty≥
;

63 
	g°d
::
°rög
 
gëSour˚Name
() const

65  
sour˚Name
;

68 
	g¥Ÿe˘ed
:

69 
FømeSour˚
(
Sour˚Ty≥
 
ty≥
 = 
nvxio
::FømeSour˚::
UNKNOWN_SOURCE
,

70 c⁄° 
°d
::
°rög
 & 
«me
 = "Undefined"):

71 
sour˚Ty≥
(
ty≥
),

72 
sour˚Name
(
«me
)

75 c⁄° 
Sour˚Ty≥
 
	gsour˚Ty≥
;

76 c⁄° 
	g°d
::
°rög
 
sour˚Name
;

79 
	g°d
::
unique_±r
<
FømeSour˚
> 
¸óãDeÁu…FømeSour˚
(c⁄° 
°d
::
°rög
 & 
uri
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerBaseFrameSourceImpl.cpp

29 #ifde‡
USE_GSTREAMER


31 
	~<mem‹y
>

33 
	~<VX/vx.h
>

35 
	~<NVX/ProfûîR™ge.hµ
>

37 
	~"FømeSour˚/GSåómî/GSåómîBa£FømeSour˚Im∂.hµ
"

39 
	~<cuda_ru¡ime_≠i.h
>

41 
	~<g°/pbutûs/missög-∂ugös.h
>

42 
	~<g°/≠p/g°≠psök.h
>

44 
	~<ˇs£π
>

46 
«me•a˚
 
	gnvidüio


49 
c⁄vîtFøme
(
nvxcu_°ªam_exec_èrgë_t
 &
exec_èrgë
,

50 c⁄° 
image_t
 & 
image
,

51 c⁄° 
FømeSour˚
::
P¨amëîs
 & 
c⁄figuøti⁄
,

52 
width
, 
height
,

53 
boﬁ
 
u£Pôch
, 
size_t
 
pôch
,

54 
dïth
, * 
decodedPå
,

55 
boﬁ
 
is_cuda
,

56 *& 
devMem
,

57 
size_t
 & 
devMemPôch
);

59 
vx_image
 
wøpNVXIOImage
(
vx_c⁄ãxt
 
c⁄ãxt
,

60 c⁄° 
image_t
 & 
image
);

62 
	gGSåómîBa£FømeSour˚Im∂
::
GSåómîBa£FømeSour˚Im∂
(
FømeSour˚
::
Sour˚Ty≥
 
ty≥
, c⁄° 
°d
::
°rög
 & 
«me
):

63 
FømeSour˚
(
ty≥
, 
«me
),

64 
pùñöe
(
nuŒ±r
), 
bus
(nullptr),

65 
íd
(
åue
),

66 
devi˚ID
(-1),

67 
	gexec_èrgë
 { },

68 
sök
(
nuŒ±r
),

69 
devMem
(
nuŒ±r
),

70 
devMemPôch
(0ul)

72 
CUDA_SAFE_CALL
–
cudaGëDevi˚
(&
devi˚ID
) );

73 
	gexec_èrgë
.
	gba£
.
	gexec_èrgë_ty≥
 = 
NVXCU_STREAM_EXEC_TARGET
;

74 
	gexec_èrgë
.
	g°ªam
 = 
nuŒ±r
;

75 
CUDA_SAFE_CALL
–
cudaGëDevi˚Pr›îtõs
(&
exec_èrgë
.
dev_¥›
, 
devi˚ID
) );

78 
	gGSåómîBa£FømeSour˚Im∂
::
√wG°ªamîPad
(
G°EÀmít
 * , 
G°Pad
 *
∑d
, 
gpoöãr
 
d©a
)

80 
G°EÀmít
 * 
	gcﬁ‹
 = (G°EÀmíà*Ë
d©a
;

82 
	g°d
::
unique_±r
<
G°Pad
, 
	gGSåómîObje˘Dñëî
> 
sök∑d
(
g°_ñemít_gë_°©ic_∑d
 (
cﬁ‹
, "sink"));

83 i‡(!
	gsök∑d
)

85 
NVXIO_PRINT
("Gstreamer:ÇoÖadÇamed sink");

89 
g°_∑d_lök
(
∑d
, 
sök∑d
.
gë
());

92 
boﬁ
 
	gGSåómîBa£FømeSour˚Im∂
::
›í
()

94 
nvxio
::
ProfûîR™ge
 
ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "FrameSource::open (NVXIO)");

96 i‡(
	gpùñöe
)

98 
˛o£
();

101 i‡(!
InôülizeG°PùeLöe
())

103 
NVXIO_PRINT
("Cannot initialize GstreamerÖipeline");

104  
	gÁl£
;

107 
NVXIO_ASSERT
(!
íd
);

109  
	gåue
;

112 
	gFømeSour˚
::
FømeSètus
 
GSåómîBa£FømeSour˚Im∂
::
exåa˘FømeP¨ams
(

113 c⁄° 
FømeSour˚
::
P¨amëîs
 & 
c⁄figuøti⁄
,

114 
G°C≠s
 * 
buf„rC≠s
,

115 
göt
 & 
width
, göà& 
height
, göà& 
Âs
, göà& 
dïth
)

118 
as£π
(
g°_ˇps_gë_size
(
buf„rC≠s
) == 1);

119 
G°Såu˘uª
 * 
	g°ru˘uª
 = 
g°_ˇps_gë_°ru˘uª
(
buf„rC≠s
, 0);

122 i‡(!
g°_°ru˘uª_gë_öt
(
°ru˘uª
, "width", &
width
))

124 
NVXIO_PRINT
("FailedÅoÑetrieve width");

125  
	gnvxio
::
FømeSour˚
::
CLOSED
;

127 i‡(!
g°_°ru˘uª_gë_öt
(
°ru˘uª
, "height", &
height
))

129 
NVXIO_PRINT
("FailedÅoÑetrieve height");

130  
	gnvxio
::
FømeSour˚
::
CLOSED
;

133 
NVXIO_ASSERT
(
c⁄figuøti⁄
.
‰ameWidth
 =
°©ic_ˇ°
<
uöt32_t
>(
width
));

134 
NVXIO_ASSERT
(
c⁄figuøti⁄
.
‰ameHeight
 =
°©ic_ˇ°
<
uöt32_t
>(
height
));

136 
göt
 
	gnum
 = 0, 
	gdíom
 = 1;

137 i‡(!
g°_°ru˘uª_gë_‰a˘i⁄
(
°ru˘uª
, "‰amî©e", &
num
, &
díom
))

139 
NVXIO_PRINT
("Cannot query video fps");

140  
	gnvxio
::
FømeSour˚
::
CLOSED
;

143 
	gÂs
 = 
°©ic_ˇ°
<>(
num
Ë/ 
díom
;

145 
	gdïth
 = 0;

146 c⁄° 
gch¨
 * 
	g«me
 = 
g°_°ru˘uª_gë_«me
(
°ru˘uª
);

147 
nvxcu_df_image_e
 
	gvx_f‹m©
 = 
NVXCU_DF_IMAGE_NONE
;

149 #i‡
GST_VERSION_MAJOR
 == 0

150 i‡(!
	g«me
)

151  
	gnvxio
::
FømeSour˚
::
CLOSED
;

153 i‡(
°rˇ£cmp
(
«me
, "video/x-raw-gray") == 0)

155 
göt
 
bµ
 = 0;

156 i‡(!
g°_°ru˘uª_gë_öt
(
°ru˘uª
, "bµ", &
bµ
))

158 
NVXIO_PRINT
("FailedÅoÑetrieve BPP");

159  
	gnvxio
::
FømeSour˚
::
CLOSED
;

162 i‡(
	gbµ
 == 8)

164 
dïth
 = 1;

165 
	gvx_f‹m©
 = 
NVXCU_DF_IMAGE_U8
;

168 i‡(
°rˇ£cmp
(
«me
, "video/x-raw-rgb") == 0)

170 
göt
 
bµ
 = 0;

171 i‡(!
g°_°ru˘uª_gë_öt
(
°ru˘uª
, "bµ", &
bµ
))

173 
NVXIO_PRINT
("FailedÅoÑetrieve BPP");

174  
	gnvxio
::
FømeSour˚
::
CLOSED
;

177 i‡(
	gbµ
 == 24)

179 
dïth
 = 3;

180 
	gvx_f‹m©
 = 
NVXCU_DF_IMAGE_RGB
;

182 i‡(
	gbµ
 == 32)

184 
dïth
 = 4;

185 
	gvx_f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
;

188 i‡(
°rˇ£cmp
(
«me
, "video/x-raw-yuv") == 0)

190 
guöt32
 
fourcc
 = 0u;

192 i‡(!
g°_°ru˘uª_gë_fourcc
(
°ru˘uª
, "f‹m©", &
fourcc
))

194 
NVXIO_PRINT
("FailedÅoÑetrieve FOURCC");

195  
	gnvxio
::
FømeSour˚
::
CLOSED
;

198 i‡(
	gfourcc
 =
GST_MAKE_FOURCC
('N', 'V', '1', '2'))

199 
	gvx_f‹m©
 = 
NVXCU_DF_IMAGE_NV12
;

202 c⁄° 
gch¨
 * 
	gf‹m©
 = 
g°_°ru˘uª_gë_°rög
(
°ru˘uª
, "format");

204 i‡(!
	g«me
 || !
	gf‹m©
)

205  
	gnvxio
::
FømeSour˚
::
CLOSED
;

207 i‡(
°rˇ£cmp
(
«me
, "video/x-raw") == 0)

209 i‡(
°rˇ£cmp
(
f‹m©
, "RGBA") == 0)

211 
vx_f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
;

212 
	gdïth
 = 4;

214 i‡(
°rˇ£cmp
(
f‹m©
, "RGB") == 0)

216 
vx_f‹m©
 = 
NVXCU_DF_IMAGE_RGB
;

217 
	gdïth
 = 3;

219 i‡(
°rˇ£cmp
(
f‹m©
, "GRAY8") == 0)

221 
vx_f‹m©
 = 
NVXCU_DF_IMAGE_U8
;

222 
	gdïth
 = 1;

224 i‡(
°rˇ£cmp
(
f‹m©
, "NV12") == 0)

225 
vx_f‹m©
 = 
NVXCU_DF_IMAGE_NV12
;

229 
NVXIO_ASSERT
(
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
 ||

230 
c⁄figuøti⁄
.
f‹m©
 =
vx_f‹m©
);

232  
	gnvxio
::
FømeSour˚
::
OK
;

235 
	gFømeSour˚
::
FømeSètus
 
GSåómîBa£FømeSour˚Im∂
::
„tch
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 )

237 
	gnvxio
::
ProfûîR™ge
 
ønge
(
nvxio
::
COLOR_ARGB_FUSCHIA
, "FrameSource::fetch (NVXIO)");

239 
h™dÀGSåómîMesßges
();

241 i‡(
g°_≠p_sök_is_eos
(
GST_APP_SINK
(
sök
)))

243 
˛o£
();

244  
	gnvxio
::
FømeSour˚
::
CLOSED
;

247 #i‡
GST_VERSION_MAJOR
 == 0

248 
	g°d
::
unique_±r
<
G°Buf„r
, 
	gGSåómîObje˘Dñëî
> 
buf„rHﬁdî
(

249 
g°_≠p_sök_puŒ_buf„r
(
GST_APP_SINK
(
sök
)));

250 
G°Buf„r
* 
	gbuf„r
 = 
buf„rHﬁdî
.
gë
();

252 
	g°d
::
unique_±r
<
G°Sam∂e
, 
	gGSåómîObje˘Dñëî
> 
	gßm∂e
;

254 i‡(
	gßm∂eFú°Føme
)

256 
	gßm∂e
 = 
°d
::
move
(
ßm∂eFú°Føme
);

257 
NVXIO_ASSERT
(!
ßm∂eFú°Føme
);

260 
	gßm∂e
.
ª£t
(
g°_≠p_sök_puŒ_ßm∂e
(
GST_APP_SINK
(
sök
)));

262 i‡(!
	gßm∂e
)

264 
˛o£
();

265  
	gnvxio
::
FømeSour˚
::
CLOSED
;

268 
G°Buf„r
 * 
	gbuf„r
 = 
g°_ßm∂e_gë_buf„r
(
ßm∂e
.
gë
());

271 #i‡
GST_VERSION_MAJOR
 == 0

272 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
buf„rC≠sHﬁdî
(
g°_buf„r_gë_ˇps
(
buf„r
));

273 
G°C≠s
 * 
	gbuf„rC≠s
 = 
buf„rC≠sHﬁdî
.
gë
();

275 
G°C≠s
 * 
	gbuf„rC≠s
 = 
g°_ßm∂e_gë_ˇps
(
ßm∂e
.
gë
());

278 
göt
 
	gwidth
, 
	gheight
, 
	gÂs
, 
	gdïth
;

279 i‡(
exåa˘FømeP¨ams
(
c⁄figuøti⁄
, 
buf„rC≠s
, 
width
, 
height
,

280 
Âs
, 
dïth
Ë=
nvxio
::
FømeSour˚
::
CLOSED
)

282 
˛o£
();

283  
	gnvxio
::
FømeSour˚
::
CLOSED
;

286 #i‡
GST_VERSION_MAJOR
 == 0

287 * 
	gdecodedPå
 = 
GST_BUFFER_DATA
(
buf„r
);

289 
G°M≠Info
 
	göfo
;

291 
gboﬁón
 
	gsuc˚ss
 = 
g°_buf„r_m≠
(
buf„r
, &
öfo
, (
G°M≠Fœgs
)
GST_MAP_READ
);

292 i‡(!
	gsuc˚ss
)

294 
NVXIO_PRINT
("GStreamer: unableÅo map buffer");

295 
˛o£
();

296  
	gnvxio
::
FømeSour˚
::
CLOSED
;

299 * 
	gdecodedPå
 = 
öfo
.
d©a
;

302 
c⁄vîtFøme
(
exec_èrgë
,

303 
image
,

304 
c⁄figuøti⁄
,

305 
width
, 
height
,

306 
Ál£
, 0,

307 
dïth
, 
decodedPå
,

308 
Ál£
,

309 
devMem
,

310 
devMemPôch
);

312 #i‡
GST_VERSION_MAJOR
 != 0

313 
g°_buf„r_unm≠
(
buf„r
, &
öfo
);

316  
	gnvxio
::
FømeSour˚
::
OK
;

319 
	gFømeSour˚
::
P¨amëîs
 
GSåómîBa£FømeSour˚Im∂
::
gëC⁄figuøti⁄
()

321  
c⁄figuøti⁄
;

324 
boﬁ
 
	gGSåómîBa£FømeSour˚Im∂
::
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
)

326 
NVXIO_ASSERT
(
íd
);

328 
boﬁ
 
	gªsu…
 = 
åue
;

331 i‡(
	g∑øms
.
	g‰ameWidth
 !(
uöt32_t
)-1)

332 
ªsu…
 = 
Ál£
;

333 i‡(
	g∑øms
.
	g‰ameHeight
 !(
uöt32_t
)-1)

334 
ªsu…
 = 
Ál£
;

335 i‡(
	g∑øms
.
	gÂs
 !(
uöt32_t
)-1)

336 
ªsu…
 = 
Ál£
;

338 
NVXIO_ASSERT
((
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
) ||

339 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
) ||

340 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
) ||

341 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
)||

342 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
));

344 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
∑øms
.
f‹m©
;

346  
	gªsu…
;

349 
	gGSåómîBa£FømeSour˚Im∂
::
˛o£
()

351 
nvxio
::
ProfûîR™ge
 
ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "FrameSource::close (NVXIO)");

353 
h™dÀGSåómîMesßges
();

354 
FöÆizeG°PùeLöe
();

356 i‡(
	gdevMem
)

358 
cudaFªe
(
devMem
);

359 
	gdevMem
 = 
nuŒ±r
;

363 
	gGSåómîBa£FømeSour˚Im∂
::
h™dÀGSåómîMesßges
()

365 
°d
::
unique_±r
<
G°Mesßge
, 
	gGSåómîObje˘Dñëî
> 
	gmsg
;

366 
GEº‹
 *
	gîr
 = 
nuŒ±r
;

367 
gch¨
 *
	gdebug
 = 
nuŒ±r
;

368 
G°SåómSètusTy≥
 
	gç
;

369 
G°EÀmít
 * 
	gñem
 = 
nuŒ±r
;

371 i‡(!
	gbus
)

374 
g°_bus_have_≥ndög
(
bus
))

376 
	gmsg
.
ª£t
(
g°_bus_p›
(
bus
));

378 i‡(
g°_is_missög_∂ugö_mesßge
(
msg
.
gë
()))

380 
NVXIO_PRINT
("GStreamer: your gstreamer installation is missingáÑequiredÖlugin!");

381 
	gíd
 = 
åue
;

385 
GST_MESSAGE_TYPE
(
msg
.
gë
()))

387 
	gGST_MESSAGE_STATE_CHANGED
:

388 
G°Sèã
 
ﬁd°©e
, 
	g√w°©e
, 
	g≥nd°©e
;

389 
g°_mesßge_∑r£_°©e_ch™ged
(
msg
.
gë
(), &
ﬁd°©e
, &
√w°©e
, &
≥nd°©e
);

391 
	gGST_MESSAGE_ERROR
:

393 
g°_mesßge_∑r£_îr‹
(
msg
.
gë
(), &
îr
, &
debug
);

394 
	g°d
::
unique_±r
<[], 
	gGlibDñëî
> 
«me
(
g°_ñemít_gë_«me
(
GST_MESSAGE_SRC
(
msg
.
gë
())));

396 
NVXIO_PRINT
("GStreamer Plugin: Embedded videoÖlayback halted; module %sÑeported: %s",

397 
«me
.
gë
(), 
îr
->
mesßge
);

399 
g_îr‹_‰ì
(
îr
);

400 
g_‰ì
(
debug
);

401 
	gíd
 = 
åue
;

404 
	gGST_MESSAGE_EOS
:

405 
íd
 = 
åue
;

407 
	gGST_MESSAGE_STREAM_STATUS
:

408 
g°_mesßge_∑r£_°ªam_°©us
(
msg
.
gë
(), &
ç
, &
ñem
);

417 
	gGSåómîBa£FømeSour˚Im∂
::
FöÆizeG°PùeLöe
()

419 i‡(
pùñöe
)

421 
h™dÀGSåómîMesßges
();

423 
g°_ñemít_£t_°©e
(
GST_ELEMENT
(
pùñöe
), 
GST_STATE_NULL
);

424 
h™dÀGSåómîMesßges
();

426 
g°_obje˘_uƒef
(
GST_OBJECT
(
bus
));

427 
	gbus
 = 
nuŒ±r
;

429 
g°_obje˘_uƒef
(
GST_OBJECT
(
pùñöe
));

430 
	gpùñöe
 = 
nuŒ±r
;

434 
	gGSåómîBa£FømeSour˚Im∂
::~
GSåómîBa£FømeSour˚Im∂
()

436 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerBaseFrameSourceImpl.hpp

29 #i‚de‡
GSTREAMERBASEFRAMESOURCEIMPL_HPP


30 
	#GSTREAMERBASEFRAMESOURCEIMPL_HPP


	)

32 #ifde‡
USE_GSTREAMER


34 
	~"FømeSour˚/FømeSour˚Im∂.hµ
"

36 
	~"FømeSour˚/GSåómî/GSåómîComm⁄.hµ
"

39 
	eG°Aut›lugSñe˘Resu…


41 
	mGST_AUTOPLUG_SELECT_TRY
,

42 
	mGST_AUTOPLUG_SELECT_EXPOSE
,

43 
	mGST_AUTOPLUG_SELECT_SKIP


46 
«me•a˚
 
	gnvidüio


49 ˛as†
	cGSåómîBa£FømeSour˚Im∂
 :

50 
public
 
FømeSour˚


52 
public
:

53 
GSåómîBa£FømeSour˚Im∂
(
Sour˚Ty≥
, c⁄° 
°d
::
°rög
 & 
«me
);

54 
vútuÆ
 
boﬁ
 
›í
();

55 
vútuÆ
 
FømeSètus
 
„tch
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
timeout
 = 5u );

56 
vútuÆ
 
P¨amëîs
 
gëC⁄figuøti⁄
();

57 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
P¨amëîs
& 
∑øms
);

58 
vútuÆ
 
˛o£
();

59 
	gvútuÆ
 ~
GSåómîBa£FømeSour˚Im∂
();

61 
√wG°ªamîPad
(
G°EÀmít
 * , 
G°Pad
 *
∑d
, 
gpoöãr
 
d©a
);

63 
	g¥Ÿe˘ed
:

65 
GSåómîBa£FømeSour˚Im∂
();

67 
h™dÀGSåómîMesßges
();

69 
vútuÆ
 
boﬁ
 
InôülizeG°PùeLöe
() = 0;

70 
FöÆizeG°PùeLöe
();

72 
G°Pùñöe
* 
	gpùñöe
;

73 
G°Bus
* 
	gbus
;

75 vﬁ©ûê
boﬁ
 
	gíd
;

78 
öt32_t
 
	gdevi˚ID
;

79 
nvxcu_°ªam_exec_èrgë_t
 
	gexec_èrgë
;

81 
P¨amëîs
 
	gc⁄figuøti⁄
;

83 
G°EÀmít
 * 
	gsök
;

85 
	g¥iv©e
:

88 * 
devMem
;

89 
size_t
 
	gdevMemPôch
;

91 
	g¥Ÿe˘ed
:

92 
FømeSètus


93 
exåa˘FømeP¨ams
(c⁄° 
P¨amëîs
 & 
c⁄figuøti⁄
,

94 
G°C≠s
 * 
buf„rC≠s
, 
göt
 & 
width
, göà& 
height
,

95 
göt
 & 
Âs
, göà& 
dïth
);

97 #i‡
GST_VERSION_MAJOR
 == 1

98 
	g°d
::
unique_±r
<
G°Sam∂e
, 
	gGSåómîObje˘Dñëî
> 
	gßm∂eFú°Føme
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerCameraFrameSourceImpl.cpp

29 #ifde‡
USE_GSTREAMER


31 
	~"FømeSour˚/GSåómî/GSåómîCamîaFømeSour˚Im∂.hµ
"

33 
	~<g°/≠p/g°≠psök.h
>

35 
	~<s°ªam
>

37 
«me•a˚
 
	gnvidüio


40 
	gGSåómîCamîaFømeSour˚Im∂
::
GSåómîCamîaFømeSour˚Im∂
(
uöt
 
ˇmîaIdx_
) :

41 
GSåómîBa£FømeSour˚Im∂
(
nvxio
::
FømeSour˚
::
CAMERA_SOURCE
, "GstreamerCameraFrameSource"),

42 
ˇmîaIdx
(
ˇmîaIdx_
)

46 
boﬁ
 
	gGSåómîCamîaFømeSour˚Im∂
::
£tC⁄figuøti⁄
(c⁄° 
P¨amëîs
& 
∑øms
)

48 
NVXIO_ASSERT
(
íd
);

50 
	gc⁄figuøti⁄
.
	g‰ameHeight
 = 
∑øms
.
‰ameHeight
;

51 
	gc⁄figuøti⁄
.
	g‰ameWidth
 = 
∑øms
.
‰ameWidth
;

52 
	gc⁄figuøti⁄
.
	gÂs
 = 
∑øms
.
Âs
;

54 
NVXIO_ASSERT
((
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
) ||

55 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
) ||

56 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
) ||

57 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
)||

58 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
));

60 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
∑øms
.
f‹m©
;

62  
	gåue
;

66 
boﬁ
 
	gGSåómîCamîaFømeSour˚Im∂
::
InôülizeG°PùeLöe
()

68 
G°SèãCh™geRëu∫
 
°©us
;

69 
	gíd
 = 
åue
;

71 
	gpùñöe
 = 
GST_PIPELINE
(
g°_pùñöe_√w
(
nuŒ±r
));

72 i‡(!
	gpùñöe
)

74 
NVXIO_PRINT
("Cannot create GstreamerÖipeline");

75  
	gÁl£
;

78 
	gbus
 = 
g°_pùñöe_gë_bus
(
GST_PIPELINE
 (
pùñöe
));

81 
G°EÀmít
 * 
	gv4l2§c
 = 
g°_ñemít_Á˘‹y_make
("v4l2§c", 
nuŒ±r
);

82 i‡(!
	gv4l2§c
)

84 
NVXIO_PRINT
("Cannot create v4l2src");

85 
FöÆizeG°PùeLöe
();

87  
	gÁl£
;

90 
	g°d
::
o°rög°ªam
 
ˇmîaDev
;

91 
	gˇmîaDev
 << "/dev/video" << 
	gˇmîaIdx
;

92 
g_obje˘_£t
(
G_OBJECT
(
v4l2§c
), "devi˚", 
ˇmîaDev
.
°r
().
c_°r
(), 
nuŒ±r
);

94 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
v4l2§c
);

97 
G°EÀmít
 * 
	gcﬁ‹
 = 
g°_ñemít_Á˘‹y_make
(
COLOR_ELEM
, 
nuŒ±r
);

98 i‡(!
	gcﬁ‹
)

100 
NVXIO_PRINT
("C™nŸ cª©ê%†ñemít", 
COLOR_ELEM
);

101 
FöÆizeG°PùeLöe
();

103  
	gÁl£
;

106 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
cﬁ‹
);

109 
	gsök
 = 
g°_ñemít_Á˘‹y_make
("≠psök", 
nuŒ±r
);

110 i‡(!
	gsök
)

112 
NVXIO_PRINT
("Cannot createáppsinkÉlement");

113 
FöÆizeG°PùeLöe
();

115  
	gÁl£
;

118 #i‡
FULL_GST_VERSION
 >
VERSION_NUM
(1,7,2)

119 
g_obje˘_£t
(
GST_ELEMENT
(
sök
), "waô-⁄-eos", 
FALSE
, 
nuŒ±r
);

122 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
sök
);

126 i‡(
	gc⁄figuøti⁄
.
	g‰ameWidth
 =(
vx_uöt32
)-1)

127 
c⁄figuøti⁄
.
‰ameWidth
 = 1920;

128 i‡(
	gc⁄figuøti⁄
.
	g‰ameHeight
 =(
vx_uöt32
)-1)

129 
c⁄figuøti⁄
.
‰ameHeight
 = 1080;

130 i‡(
	gc⁄figuøti⁄
.
	gÂs
 =(
vx_uöt32
)-1)

131 
c⁄figuøti⁄
.
Âs
 = 30;

133 #i‡
GST_VERSION_MAJOR
 == 0

134 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
ˇps_v42l§c
(

135 
g°_ˇps_√w_sim∂e
 ("video/x-raw-rgb",

136 "width", 
GST_TYPE_INT_RANGE
, 1, ()
c⁄figuøti⁄
.
‰ameWidth
,

137 "height", 
GST_TYPE_INT_RANGE
, 1, ()
c⁄figuøti⁄
.
‰ameHeight
,

138 "‰amî©e", 
GST_TYPE_FRACTION
, ()
c⁄figuøti⁄
.
Âs
,

139 
nuŒ±r
));

141 
	g°d
::
o°rög°ªam
 
°ªam
;

142 
	g°ªam
 << "video/x-øw, f‹m©=(°rög){RGB}, width=[1," << 
	gc⁄figuøti⁄
.
	g‰ameWidth
 <<

143 "], height=[1," << 
	gc⁄figuøti⁄
.
	g‰ameHeight
 << "], fømî©e=" << c⁄figuøti⁄.
	gÂs
 << "/1;";

145 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
ˇps_v42l§c
(
g°_ˇps_‰om_°rög
(
°ªam
.
°r
().
c_°r
()));

148 i‡(!
	gˇps_v42l§c
)

150 
NVXIO_PRINT
("FailedÅo create caps");

151 
FöÆizeG°PùeLöe
();

153  
	gÁl£
;

157 i‡(!
g°_ñemít_lök_fûãªd
(
v4l2§c
, 
cﬁ‹
, 
ˇps_v42l§c
.
gë
()))

159 
NVXIO_PRINT
("GStreamer: cannotÜink v4l2src -> color using caps");

160 
FöÆizeG°PùeLöe
();

162  
	gÁl£
;

166 i‡(!
g°_ñemít_lök
(
cﬁ‹
, 
sök
))

168 
NVXIO_PRINT
("GStreamer: cannotÜink color ->áppsink");

169 
FöÆizeG°PùeLöe
();

171  
	gÁl£
;

174 
g°_≠p_sök_£t_max_buf„rs
 (
GST_APP_SINK
(
sök
), 1);

175 
g°_≠p_sök_£t_dr›
 (
GST_APP_SINK
(
sök
), 
åue
);

178 
g°_≠p_sök_£t_emô_sig«ls
 (
GST_APP_SINK
(
sök
), 0);

180 #i‡
GST_VERSION_MAJOR
 == 0

181 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
	gˇps_≠psök
;

183 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_U8
)

185 
ˇps_≠psök
.
ª£t
(
g°_ˇps_√w_sim∂e
("video/x-raw-gray",

186 "bµ", 
G_TYPE_INT
, 8,

187 
nuŒ±r
));

189 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_RGB
)

191 
ˇps_≠psök
.
ª£t
(
g°_ˇps_√w_sim∂e
("video/x-raw-rgb",

192 "bµ", 
G_TYPE_INT
, 24,

193 "ªd_mask", 
G_TYPE_INT
, 0xFF0000,

194 "gªí_mask", 
G_TYPE_INT
, 0x00FF00,

195 "blue_mask", 
G_TYPE_INT
, 0x0000FF,

196 
nuŒ±r
));

198 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ||

199 
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
)

201 
ˇps_≠psök
.
ª£t
(
g°_ˇps_√w_sim∂e
("video/x-raw-rgb",

202 "dïth", 
G_TYPE_INT
, 32,

203 "bµ", 
G_TYPE_INT
, 32,

204 "ídü¬ess", 
G_TYPE_INT
, 4321,

205 "ªd_mask", 
G_TYPE_INT
, 0xFF000000,

206 "gªí_mask", 
G_TYPE_INT
, 0x00FF0000,

207 "blue_mask", 
G_TYPE_INT
, 0x0000FF00,

208 "Æpha_mask", 
G_TYPE_INT
, 0x000000FF,

209 
nuŒ±r
));

211 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

213 
ˇps_≠psök
.
ª£t
(
g°_ˇps_√w_sim∂e
("video/x-raw-yuv",

214 "f‹m©", 
GST_TYPE_FOURCC
, 
GST_MAKE_FOURCC
 ('N', 'V', '1', '2'),

215 
nuŒ±r
));

218 
NVXIO_THROW_EXCEPTION
("Unsupported image format");

220 
	g°d
::
°rög
 
ˇps_°rög
("video/x-raw, format=(string){");

221 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_U8
)

222 
ˇps_°rög
 += "GRAY8";

223 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_RGB
)

224 
ˇps_°rög
 += "RGB";

225 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ||

226 
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
)

227 
ˇps_°rög
 += "RGBA";

228 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

229 
ˇps_°rög
 += "NV12";

231 
NVXIO_THROW_EXCEPTION
("Unsupported image format");

233 
	gˇps_°rög
 += "};";

235 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
ˇps_≠psök
(

236 
g°_ˇps_‰om_°rög
(
ˇps_°rög
.
c_°r
()));

238 
g°_≠p_sök_£t_ˇps
(
GST_APP_SINK
(
sök
), 
ˇps_≠psök
.
gë
());

241 
g°_pùñöe_u£_˛ock
(
pùñöe
, 
nuŒ±r
);

243 
	g°©us
 = 
g°_ñemít_£t_°©e
(
GST_ELEMENT
(
pùñöe
), 
GST_STATE_PLAYING
);

244 
h™dÀGSåómîMesßges
();

246 i‡(
	g°©us
 =
GST_STATE_CHANGE_ASYNC
)

249 
°©us
 = 
g°_ñemít_gë_°©e
(
GST_ELEMENT
(
pùñöe
), 
nuŒ±r
,ÇuŒ±r, 
GST_CLOCK_TIME_NONE
);

251 i‡(
	g°©us
 =
GST_STATE_CHANGE_FAILURE
)

253 
NVXIO_PRINT
("GStreamer: unableÅo startÖlayback");

254 
FöÆizeG°PùeLöe
();

256  
	gÁl£
;

263 
	gc⁄figuøti⁄
.
	g‰ameWidth
 = (
uöt32_t
)-1;

264 
	gc⁄figuøti⁄
.
	g‰ameHeight
 = (
uöt32_t
)-1;

265 
	gc⁄figuøti⁄
.
	gÂs
 = (
uöt32_t
)-1;

267 i‡(!
upd©eC⁄figuøti⁄
(
sök
, 
cﬁ‹
, 
c⁄figuøti⁄
))

269 
FöÆizeG°PùeLöe
();

270  
	gÁl£
;

273 
	gíd
 = 
Ál£
;

275  
	gåue
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerCameraFrameSourceImpl.hpp

29 #i‚de‡
GSTREAMERCAMERAFRAMESOURCEIMPL_HPP


30 
	#GSTREAMERCAMERAFRAMESOURCEIMPL_HPP


	)

32 #ifde‡
USE_GSTREAMER


34 
	~"FømeSour˚/GSåómî/GSåómîBa£FømeSour˚Im∂.hµ
"

36 
«me•a˚
 
	gnvidüio


39 ˛as†
	cGSåómîCamîaFømeSour˚Im∂
 :

40 
public
 
GSåómîBa£FømeSour˚Im∂


42 
public
:

43 
ex∂icô
 
GSåómîCamîaFømeSour˚Im∂
(
uöt
 
ˇmîaIdx_
);

45 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
P¨amëîs
 & 
∑øms
);

47 
	g¥Ÿe˘ed
:

49 
vútuÆ
 
boﬁ
 
InôülizeG°PùeLöe
();

51 
uöt
 
	gˇmîaIdx
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerCommon.cpp

29 #ifde‡
USE_GSTREAMER


31 
	~"FømeSour˚/GSåómî/GSåómîComm⁄.hµ
"

33 
«me•a˚
 
	gnvidüio


36 
boﬁ
 
upd©eC⁄figuøti⁄
(
G°EÀmít
 * 
sök_ñemít
, G°EÀmíà* 
cﬁ‹_ñemít
,

37 
FømeSour˚
::
P¨amëîs
 & 
c⁄figuøti⁄
)

39 
GLi°
 * 
sök_∑ds
 = 
GST_ELEMENT_PADS
(
sök_ñemít
);

40 
GLi°
 * 
	gcﬁ‹_∑ds
 = 
GST_ELEMENT_PADS
(
cﬁ‹_ñemít
);

41 
G°Pad
 * 
	gsök_∑d
 = (G°Pad *)
g_li°_¡h_d©a
(
sök_∑ds
, 0);

42 
G°Pad
 * 
	gcﬁ‹_∑d
 = (G°Pad *)
g_li°_¡h_d©a
(
cﬁ‹_∑ds
, 0);

44 #i‡
GST_VERSION_MAJOR
 == 0

45 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
sök_ˇps
(
g°_∑d_gë_ˇps
(
sök_∑d
));

46 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
cﬁ‹_ˇps
(
g°_∑d_gë_ˇps
(
cﬁ‹_∑d
));

48 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
sök_ˇps
(
g°_∑d_gë_cuºít_ˇps
(
sök_∑d
));

49 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
cﬁ‹_ˇps
(
g°_∑d_gë_cuºít_ˇps
(
cﬁ‹_∑d
));

52 i‡(!
	gcﬁ‹_ˇps
 || !
	gsök_ˇps
)

54 
NVXIO_PRINT
("Width, height, fps canÇot be queried");

55  
	gÁl£
;

58 c⁄° 
G°Såu˘uª
 * 
	gsök_°ru˘uª
 = 
g°_ˇps_gë_°ru˘uª
(
sök_ˇps
.
gë
(), 0);

59 c⁄° 
G°Såu˘uª
 * 
	gcﬁ‹_°ru˘uª
 = 
g°_ˇps_gë_°ru˘uª
(
cﬁ‹_ˇps
.
gë
(), 0);

61 
göt
 
	gwidth
, 
	gheight
;

62 i‡(!
g°_°ru˘uª_gë_öt
(
cﬁ‹_°ru˘uª
, "width", &
width
))

63 
NVXIO_PRINT
("Cannot query video width");

65 i‡(!
g°_°ru˘uª_gë_öt
(
cﬁ‹_°ru˘uª
, "height", &
height
))

66 
NVXIO_PRINT
("Cannot query video height");

68 i‡(
	gc⁄figuøti⁄
.
	g‰ameWidth
 =(
vx_uöt32
)-1)

69 
c⁄figuøti⁄
.
‰ameWidth
 = 
width
;

70 i‡(
	gc⁄figuøti⁄
.
	g‰ameHeight
 =(
vx_uöt32
)-1)

71 
c⁄figuøti⁄
.
‰ameHeight
 = 
height
;

73 
NVXIO_ASSERT
(
c⁄figuøti⁄
.
‰ameWidth
 =
°©ic_ˇ°
<
vx_uöt32
>(
width
));

74 
NVXIO_ASSERT
(
c⁄figuøti⁄
.
‰ameHeight
 =
°©ic_ˇ°
<
vx_uöt32
>(
height
));

76 
göt
 
	gnum
 = 0, 
	gdíom
 = 1;

77 i‡(!
g°_°ru˘uª_gë_‰a˘i⁄
(
cﬁ‹_°ru˘uª
, "‰amî©e", &
num
, &
díom
))

78 
NVXIO_PRINT
("Cannot query video fps");

80 
	gc⁄figuøti⁄
.
	gÂs
 = 
°©ic_ˇ°
<>(
num
Ë/ 
díom
;

83 
nvxcu_df_image_e
 
	ga˘uÆ_f‹m©
 = 
NVXCU_DF_IMAGE_NONE
;

85 #i‡
GST_VERSION_MAJOR
 == 0

86 c⁄° 
gch¨
 * 
	g«me
 = 
g°_°ru˘uª_gë_«me
(
sök_°ru˘uª
);

87 
göt32
 
	gbµ
 = 0;

88 
guöt32
 
	gfourcc
 = 0u;

90 i‡(
g°_°ru˘uª_has_fõld
(
sök_°ru˘uª
, "bpp"))

92 i‡(!
g°_°ru˘uª_gë_öt
(
sök_°ru˘uª
, "bµ", &
bµ
))

93 
NVXIO_PRINT
("Cannot query BPP");

96 i‡(
g°_°ru˘uª_has_fõld
(
sök_°ru˘uª
, "format"))

98 i‡(!
g°_°ru˘uª_gë_fourcc
(
sök_°ru˘uª
, "f‹m©", &
fourcc
))

99 
NVXIO_PRINT
("Cannot query FOURCC");

102 c⁄° 
gch¨
 * 
	g°r_f‹m©
 = 
g°_°ru˘uª_gë_°rög
(
sök_°ru˘uª
, "format");

104 
	g°d
::
unique_±r
<
gch¨
[], 
	gGlibDñëî
> 
ñemít_«me
(
g°_ñemít_gë_«me
(
sök_ñemít
));

108 i‡(
	gñemít_«me
 && 
°r°r
(
ñemít_«me
.
gë
(), "nvvideosök"Ë!
nuŒ±r
)

109 
a˘uÆ_f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
;

112 #i‡
GST_VERSION_MAJOR
 == 0

113 i‡(
	g«me
)

115 i‡(!
°rˇ£cmp
(
«me
, "video/x-raw-gray"))

117 i‡(
	gbµ
 == 8)

118 
a˘uÆ_f‹m©
 = 
NVXCU_DF_IMAGE_U8
;

120 i‡(!
°rˇ£cmp
(
«me
, "video/x-raw-yuv"))

122 i‡(
	gfourcc
 =
GST_MAKE_FOURCC
('N', 'V', '1', '2'))

123 
	ga˘uÆ_f‹m©
 = 
NVXCU_DF_IMAGE_NV12
;

125 i‡(!
°rˇ£cmp
(
«me
, "video/x-raw-rgb"))

127 i‡(
	gbµ
 == 24)

128 
a˘uÆ_f‹m©
 = 
NVXCU_DF_IMAGE_RGB
;

129 i‡(
	gbµ
 == 32)

130 
a˘uÆ_f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
;

134 i‡(
	g°r_f‹m©
)

136 i‡(!
°rcmp
("RGB", 
°r_f‹m©
))

137 
	ga˘uÆ_f‹m©
 = 
NVXCU_DF_IMAGE_RGB
;

138 i‡(!
°rcmp
("RGBA", 
°r_f‹m©
))

139 
	ga˘uÆ_f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
;

140 i‡(!
°rcmp
("GRAY8", 
°r_f‹m©
))

141 
	ga˘uÆ_f‹m©
 = 
NVXCU_DF_IMAGE_U8
;

142 i‡(!
°rcmp
("NV12", 
°r_f‹m©
))

143 
	ga˘uÆ_f‹m©
 = 
NVXCU_DF_IMAGE_NV12
;

144 #ifde‡
USE_GSTREAMER_NVMEDIA


145 i‡(!
°rcmp
("YV12", 
°r_f‹m©
))

146 
	ga˘uÆ_f‹m©
 = 
NVXCU_DF_IMAGE_NV12
;

152 i‡(
	ga˘uÆ_f‹m©
 =
NVXCU_DF_IMAGE_NONE
)

154 
NVXIO_THROW_EXCEPTION
("Unknown format: " <<

155 #i‡
GST_VERSION_MAJOR
 == 0

156 (
«me
 ?Çame : "(null)")

158 (
°r_f‹m©
 ? str_format : "(null)")

169 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
a˘uÆ_f‹m©
;

171  
	gåue
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerCommon.hpp

29 #i‚de‡
GSTREAMERCOMMON_HPP


30 
	#GSTREAMERCOMMON_HPP


	)

32 #ifde‡
USE_GSTREAMER


34 
	~"FømeSour˚/FømeSour˚Im∂.hµ
"

36 
	~"Priv©e/LogUtûs.hµ
"

37 
	~"Priv©e/GSåómîUtûs.hµ
"

39 
«me•a˚
 
	gnvidüio


44 
boﬁ
 
upd©eC⁄figuøti⁄
(
G°EÀmít
 * 
sök_ñemít
, G°EÀmíà* 
cﬁ‹_ñemít
,

45 
FømeSour˚
::
P¨amëîs
 & 
c⁄figuøti⁄
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerEGLStreamSinkFrameSourceImpl.cpp

29 #i‡
deföed
 
USE_GSTREAMER_OMX
 && deföed 
USE_GLES
 || deföed 
USE_GSTREAMER_NVMEDIA
 || deföed 
USE_NVGSTCAMERA


31 
	~<NVX/ProfûîR™ge.hµ
>

33 
	~"FømeSour˚/GSåómî/GSåómîEGLSåómSökFømeSour˚Im∂.hµ
"

35 
	~<cuda_ru¡ime.h
>

37 
	~<g°/pbutûs/missög-∂ugös.h
>

39 
	~<mem‹y
>

40 
	~<thªad
>

41 
	~<°rög
>

43 
usög
 
«me•a˚
 
	gnvidüio
::
egl_≠i
;

45 
«me•a˚
 
	gnvidüio


47 
c⁄vîtFøme
(
nvxcu_°ªam_exec_èrgë_t
 &
exec_èrgë
,

48 c⁄° 
image_t
 & 
image
,

49 c⁄° 
FømeSour˚
::
P¨amëîs
 & 
c⁄figuøti⁄
,

50 
width
, 
height
,

51 
boﬁ
 
u£Pôch
, 
size_t
 
pôch
,

52 
dïth
, * 
decodedPå
,

53 
boﬁ
 
is_cuda
,

54 *& 
devMem
,

55 
size_t
 & 
devMemPôch
);

57 
vx_image
 
wøpNVXIOImage
(
vx_c⁄ãxt
 
c⁄ãxt
,

58 c⁄° 
image_t
 & 
image
);

60 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::
GSåómîEGLSåómSökFømeSour˚Im∂
(
FømeSour˚
::
Sour˚Ty≥
 
sour˚Ty≥
,

61 c⁄° * c⁄° 
«me
, 
boﬁ
 
fifomode
) :

62 
FømeSour˚
(
sour˚Ty≥
, 
«me
),

63 
pùñöe
(
nuŒ±r
),

64 
bus
(
nuŒ±r
),

65 
íd
(
åue
),

66 
fifoLígth
(4),

67 
fifoMode
(
fifomode
),

68 
œãncy
(0),

69 
cudaC⁄√˘i⁄
(
nuŒ±r
),

70 
devi˚ID
(-1),

71 
	gexec_èrgë
 { },

72 
nv12Føme
(
nuŒ±r
),

73 
nv12FømePôch
(0ul),

74 
devMem
(
nuŒ±r
),

75 
devMemPôch
(0ul)

77 
	gc⁄ãxt
.
	g°ªam
 = 
EGL_NO_STREAM_KHR
;

78 
	gc⁄ãxt
.
	gdi•œy
 = 
EGL_NO_DISPLAY
;

79 
CUDA_SAFE_CALL
–
cudaGëDevi˚
(&
devi˚ID
) );

80 
	gexec_èrgë
.
	gba£
.
	gexec_èrgë_ty≥
 = 
NVXCU_STREAM_EXEC_TARGET
;

81 
	gexec_èrgë
.
	g°ªam
 = 
nuŒ±r
;

82 
CUDA_SAFE_CALL
–
cudaGëDevi˚Pr›îtõs
(&
exec_èrgë
.
dev_¥›
, 
devi˚ID
) );

85 
boﬁ
 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::
›í
()

87 
nvxio
::
ProfûîR™ge
 
ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "FrameSource::open (NVXIO)");

89 i‡(
	gpùñöe
)

91 
˛o£
();

94 
NVXIO_PRINT
("Initializing EGL display");

95 i‡(!
InôülizeEGLDi•œy
())

97 
NVXIO_PRINT
("Cannot initialize EGL display");

98  
	gÁl£
;

101 
NVXIO_PRINT
("Initializing EGL stream");

102 i‡(!
InôülizeEGLSåóm
())

104 
NVXIO_PRINT
("Cannot initialize EGL Stream");

105  
	gÁl£
;

108 
NVXIO_PRINT
("Initializing EGL consumer");

109 i‡(!
InôülizeEglCudaC⁄sumî
())

111 
NVXIO_PRINT
("Cannot initialize CUDA consumer");

112  
	gÁl£
;

115 
NVXIO_PRINT
("Creating GStreamerÖipeline");

116 i‡(!
InôülizeG°PùeLöe
())

118 
NVXIO_PRINT
("Cannot initialize GstreamerÖipeline");

119  
	gÁl£
;

122  
	gåue
;

125 
boﬁ
 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::
InôülizeEGLDi•œy
()

128 
c⁄ãxt
.
di•œy
 = 
nvidüio
::
EGLDi•œyAc˚ss‹
::
gëIn°™˚
();

129 i‡(
	gc⁄ãxt
.
	gdi•œy
 =
EGL_NO_DISPLAY
)

131 
NVXIO_PRINT
("EGL failedÅo obtain display.");

132  
	gÁl£
;

135  
	gåue
;

138 
boﬁ
 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::
InôülizeEglCudaC⁄sumî
()

140 i‡(
cudaSuc˚ss
 !
cudaFªe
(
nuŒ±r
))

142 
NVXIO_PRINT
("FailedÅo initialize CUDA context");

143  
	gÁl£
;

146 
NVXIO_PRINT
("Connect CUDA consumer");

147 
CUªsu…
 
	gcuªsu…
 = 
cuEGLSåómC⁄sumîC⁄√˘
(&
cudaC⁄√˘i⁄
, 
c⁄ãxt
.
°ªam
);

148 i‡(
	gCUDA_SUCCESS
 !
cuªsu…
)

150 
NVXIO_PRINT
("C⁄√˘ CUDA c⁄sumî ERROR %d", 
cuªsu…
);

151  
	gÁl£
;

154  
	gåue
;

157 
boﬁ
 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::
InôülizeEGLSåóm
()

159 c⁄° 
EGLöt
 
°ªamAârMaûboxMode
[] = { 
EGL_NONE
 };

160 c⁄° 
EGLöt
 
	g°ªamAârFIFOMode
[] = { 
EGL_STREAM_FIFO_LENGTH_KHR
, 
fifoLígth
, 
EGL_NONE
 };

162 if(!
£tupEGLExãnsi⁄s
())

163  
	gÁl£
;

165 
	gc⁄ãxt
.
	g°ªam
 = 
eglCª©eSåómKHR
(
c⁄ãxt
.
di•œy
, 
fifoMode
 ? 
°ªamAârFIFOMode
 : 
°ªamAârMaûboxMode
);

166 i‡(
	gc⁄ãxt
.
	g°ªam
 =
EGL_NO_STREAM_KHR
)

168 
NVXIO_PRINT
("Couldn't create stream.");

169  
	gÁl£
;

172 i‡(!
eglSåómAâribKHR
(
c⁄ãxt
.
di•œy
, c⁄ãxt.
°ªam
, 
EGL_CONSUMER_LATENCY_USEC_KHR
, 
œãncy
))

174 
NVXIO_PRINT
("Consumer: streamAttribKHR EGL_CONSUMER_LATENCY_USEC_KHR failed");

176 i‡(!
eglSåómAâribKHR
(
c⁄ãxt
.
di•œy
, c⁄ãxt.
°ªam
, 
EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR
, 0))

178 
NVXIO_PRINT
("Consumer: streamAttribKHR EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR failed");

182 i‡(!
eglQuîySåómKHR
(
c⁄ãxt
.
di•œy
, c⁄ãxt.
°ªam
, 
EGL_STREAM_FIFO_LENGTH_KHR
, &
fifoLígth
))

184 
NVXIO_PRINT
("Consumer:ÉglQueryStreamKHR EGL_STREAM_FIFO_LENGTH_KHR failed");

186 i‡(!
eglQuîySåómKHR
(
c⁄ãxt
.
di•œy
, c⁄ãxt.
°ªam
, 
EGL_CONSUMER_LATENCY_USEC_KHR
, &
œãncy
))

188 
NVXIO_PRINT
("Consumer:ÉglQueryStreamKHR EGL_CONSUMER_LATENCY_USEC_KHR failed");

191 i‡(
	gfifoMode
 !(
fifoLígth
 > 0))

193 
NVXIO_PRINT
("EGL Stream consumer - UnableÅo set FIFO mode");

194 
	gfifoMode
 = 
Ál£
;

196 i‡(
	gfifoMode
)

198 
NVXIO_PRINT
("EGL Såóm c⁄sumî - Mode: FIFO Lígth: %d", 
fifoLígth
);

202 
NVXIO_PRINT
("EGL Stream consumer - Mode: Mailbox");

205  
	gåue
;

208 
	gFømeSour˚
::
FømeSètus
 
GSåómîEGLSåómSökFømeSour˚Im∂
::
„tch
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
timeout
)

210 
	gnvxio
::
ProfûîR™ge
 
ønge
(
nvxio
::
COLOR_ARGB_FUSCHIA
, "FrameSource::fetch (NVXIO)");

212 
h™dÀGSåómîMesßges
();

214 i‡(
	gcudaSuc˚ss
 !
cudaFªe
(
nuŒ±r
))

216 
NVXIO_PRINT
("FailedÅo initialize CUDA context");

217  
	gnvxio
::
FømeSour˚
::
CLOSED
;

220 
CUgøphicsResour˚
 
	gcudaResour˚
;

221 
CUeglFøme
 
	geglFøme
;

222 
EGLöt
 
	g°ªamSèã
 = 0;

224 i‡(!
eglQuîySåómKHR
(
c⁄ãxt
.
di•œy
, c⁄ãxt.
°ªam
, 
EGL_STREAM_STATE_KHR
, &
°ªamSèã
))

226 
NVXIO_PRINT
("Cuda consumer,ÉglQueryStreamKHR EGL_STREAM_STATE_KHR failed");

227 
˛o£
();

228  
	gnvxio
::
FømeSour˚
::
CLOSED
;

231 i‡(
	g°ªamSèã
 =
EGL_STREAM_STATE_DISCONNECTED_KHR
 || 
íd
)

233 
NVXIO_PRINT
("CUDA Consumer: - EGL_STREAM_STATE_DISCONNECTED_KHRÑeceived");

234 
˛o£
();

235  
	gnvxio
::
FømeSour˚
::
CLOSED
;

238 i‡(
	g°ªamSèã
 !
EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR
)

240  
nvxio
::
FømeSour˚
::
TIMEOUT
;

243 
CUªsu…
 
	gcuSètus
 = 
cuEGLSåómC⁄sumîAcquúeFøme
(&
cudaC⁄√˘i⁄
, &
cudaResour˚
, 
nuŒ±r
, 
timeout
*1000);

244 i‡(
	gcuSètus
 !
CUDA_SUCCESS
)

246 
NVXIO_PRINT
("Cud®AcquúêÁûed cuSètus=%d", 
cuSètus
);

247 
˛o£
();

248  
	gnvxio
::
FømeSour˚
::
CLOSED
;

251 
	gcuSètus
 = 
cuGøphicsResour˚GëM≠≥dEglFøme
(&
eglFøme
, 
cudaResour˚
, 0, 0);

252 i‡(
	gcuSètus
 !
CUDA_SUCCESS
)

254 
NVXIO_PRINT
("Cud®gëÑesour˚ faûed wôh %d", 
cuSètus
);

255 
cuEGLSåómC⁄sumîRñó£Føme
(&
cudaC⁄√˘i⁄
, 
cudaResour˚
, 
nuŒ±r
);

256 
˛o£
();

257  
	gnvxio
::
FømeSour˚
::
CLOSED
;

260 
NVXIO_ASSERT
(
eglFøme
.
width
 =
c⁄figuøti⁄
.
‰ameWidth
);

261 
NVXIO_ASSERT
(
eglFøme
.
height
 =
c⁄figuøti⁄
.
‰ameHeight
);

263 
NVXIO_ASSERT
(
eglFøme
.
cuF‹m©
 =
CU_AD_FORMAT_UNSIGNED_INT8
);

265 i‡(
	geglFøme
.
	geglCﬁ‹F‹m©
 =
CU_EGL_COLOR_FORMAT_RGBA
)

267 
NVXIO_ASSERT
(
eglFøme
.
∂™eCou¡
 == 1);

268 
NVXIO_ASSERT
(
eglFøme
.
numCh™√ls
 == 4);

269 
NVXIO_ASSERT
(
eglFøme
.
‰ameTy≥
 =
CU_EGL_FRAME_TYPE_PITCH
);

271 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
NVXCU_DF_IMAGE_RGBX
;

273 
c⁄vîtFøme
(
exec_èrgë
,

274 
image
,

275 
c⁄figuøti⁄
,

276 
eglFøme
.
width
,ÉglFøme.
height
,

277 
åue
, 
eglFøme
.
pôch
,

278 
eglFøme
.
numCh™√ls
,ÉglFøme.
‰ame
.
pPôch
[0],

279 
åue
,

280 
devMem
,

281 
devMemPôch
);

283 i‡(
	geglFøme
.
	geglCﬁ‹F‹m©
 =
CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR
)

285 
NVXIO_ASSERT
(
eglFøme
.
∂™eCou¡
 == 2);

286 
NVXIO_ASSERT
(
eglFøme
.
‰ameTy≥
 =
CU_EGL_FRAME_TYPE_ARRAY
);

288 i‡(
	gimage
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

290 
vx_öt32
 
°ride_y
 = ((
eglFøme
.
width
 + 3) >> 2) << 2;

292 
cudaSåóm_t
 
	g°ªam
 = 
nuŒ±r
;

293 
NVXIO_ASSERT
–
cudaMem˝y2DFromAºayAsync
(
image
.
∂™es
[0].
±r
, image.∂™es[0].
pôch_ö_byãs
,

294 (c⁄° 
cudaAºay
 *)
eglFøme
.
‰ame
.
pAºay
[0],

296 
eglFøme
.
width
 * (
vx_uöt8
),ÉglFøme.
height
,

297 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
Ë=
cudaSuc˚ss
 );

301 
NVXIO_ASSERT
–(
cudaMem˝y2DFromAºayAsync
(
image
.
∂™es
[1].
±r
, image.∂™es[1].
pôch_ö_byãs
,

302 (c⁄° 
cudaAºay
 *)
eglFøme
.
‰ame
.
pAºay
[1],

304 (
eglFøme
.
width
 >> 1Ë* (
vx_uöt16
),ÉglFøme.
height
 >> 1,

305 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
Ë=
cudaSuc˚ss
) );

307 
NVXIO_ASSERT
–
cudaSåómSynchr⁄ize
(
°ªam
Ë=
cudaSuc˚ss
 );

311 i‡(!
	gnv12Føme
)

313 
size_t
 
	gheight_dec
 = 
eglFøme
.
height
;

314 
	gheight_dec
 +
height_dec
 >> 1;

316 
NVXIO_ASSERT
–
cudaSuc˚ss
 =
cudaMÆlocPôch
(&
nv12Føme
, &
nv12FømePôch
,

317 
eglFøme
.
width
, 
height_dec
) );

319 
cudaSåóm_t
 
	g°ªam
 = 
nuŒ±r
;

320 
NVXIO_ASSERT
–
cudaMem˝y2DFromAºayAsync
(
nv12Føme
, 
nv12FømePôch
,

321 (c⁄° 
cudaAºay
 *)
eglFøme
.
‰ame
.
pAºay
[0],

323 
eglFøme
.
width
 * (
vx_uöt8
),ÉglFøme.
height
,

324 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
Ë=
cudaSuc˚ss
 );

328 
NVXIO_ASSERT
–(
cudaMem˝y2DFromAºayAsync
(((
uöt8_t
 *)
nv12Føme
 + 
nv12FømePôch
 * 
eglFøme
.
height
),Çv12FramePitch,

329 (c⁄° 
cudaAºay
 *)
eglFøme
.
‰ame
.
pAºay
[1],

331 (
eglFøme
.
width
 >> 1Ë* (
vx_uöt16
),ÉglFøme.
height
 >> 1,

332 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
Ë=
cudaSuc˚ss
) );

334 
NVXIO_ASSERT
–
cudaSåómSynchr⁄ize
(
°ªam
Ë=
cudaSuc˚ss
 );

336 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
NVXCU_DF_IMAGE_NV12
;

338 
c⁄vîtFøme
(
exec_èrgë
,

339 
image
,

340 
c⁄figuøti⁄
,

341 
eglFøme
.
width
,ÉglFøme.
height
,

342 
åue
, 
nv12FømePôch
,

343 
eglFøme
.
numCh™√ls
, 
nv12Føme
,

344 
åue
,

345 
devMem
,

346 
devMemPôch
);

353 
NVXIO_THROW_EXCEPTION
("Unsupported decoded image format");

356 
	gcuSètus
 = 
cuEGLSåómC⁄sumîRñó£Føme
(&
cudaC⁄√˘i⁄
, 
cudaResour˚
, 
nuŒ±r
);

358  
	gnvxio
::
FømeSour˚
::
OK
;

361 
	gFømeSour˚
::
P¨amëîs
 
GSåómîEGLSåómSökFømeSour˚Im∂
::
gëC⁄figuøti⁄
()

363  
c⁄figuøti⁄
;

366 
boﬁ
 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
)

368 
NVXIO_ASSERT
(
íd
);

370 
boﬁ
 
	gªsu…
 = 
åue
;

373 i‡(
	g∑øms
.
	g‰ameWidth
 !(
uöt32_t
)-1)

374 
ªsu…
 = 
Ál£
;

375 i‡(
	g∑øms
.
	g‰ameHeight
 !(
uöt32_t
)-1)

376 
ªsu…
 = 
Ál£
;

377 i‡(
	g∑øms
.
	gÂs
 !(
uöt32_t
)-1)

378 
ªsu…
 = 
Ál£
;

380 
NVXIO_ASSERT
((
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
) ||

381 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
) ||

382 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
) ||

383 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
)||

384 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
));

386 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
∑øms
.
f‹m©
;

388  
	gªsu…
;

391 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::
h™dÀGSåómîMesßges
()

393 
°d
::
unique_±r
<
G°Mesßge
, 
	gGSåómîObje˘Dñëî
> 
	gmsg
;

394 
GEº‹
 *
	gîr
 = 
nuŒ±r
;

395 
gch¨
 *
	gdebug
 = 
nuŒ±r
;

396 
G°SåómSètusTy≥
 
	gç
;

397 
G°EÀmít
 * 
	gñem
 = 
nuŒ±r
;

399 i‡(!
	gbus
)

402 
g°_bus_have_≥ndög
(
bus
))

404 
	gmsg
.
ª£t
(
g°_bus_p›
(
bus
));

406 i‡(!
	gmsg
)

409 i‡(
g°_is_missög_∂ugö_mesßge
(
msg
.
gë
()))

411 
NVXIO_PRINT
("GStreamer: your gstreamer installation is missingáÑequiredÖlugin!");

412 
	gíd
 = 
åue
;

416 
GST_MESSAGE_TYPE
(
msg
.
gë
()))

418 
	gGST_MESSAGE_STATE_CHANGED
:

419 
g°_mesßge_∑r£_°©e_ch™ged
(
msg
.
gë
(), 
nuŒ±r
,Çullptr,Çullptr);

421 
	gGST_MESSAGE_ERROR
:

423 
g°_mesßge_∑r£_îr‹
(
msg
.
gë
(), &
îr
, &
debug
);

424 
	g°d
::
unique_±r
<[], 
	gGlibDñëî
> 
«me
(
g°_ñemít_gë_«me
(
GST_MESSAGE_SRC
(
msg
.
gë
())));

425 
NVXIO_PRINT
("GStreamer Plugin: Embedded videoÖlayback halted; module %sÑeported: %s",

426 
«me
.
gë
(), 
îr
->
mesßge
);

427 
g_îr‹_‰ì
(
îr
);

428 
g_‰ì
(
debug
);

429 
	gíd
 = 
åue
;

432 
	gGST_MESSAGE_EOS
:

433 
íd
 = 
åue
;

435 
	gGST_MESSAGE_STREAM_STATUS
:

436 
g°_mesßge_∑r£_°ªam_°©us
(
msg
.
gë
(), &
ç
, &
ñem
);

445 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::
FöÆizeEglSåóm
()

447 i‡(
c⁄ãxt
.
°ªam
 !
EGL_NO_STREAM_KHR
)

449 
eglDe°roySåómKHR
(
c⁄ãxt
.
di•œy
, c⁄ãxt.
°ªam
);

450 
	gc⁄ãxt
.
	g°ªam
 = 
EGL_NO_STREAM_KHR
;

454 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::
FöÆizeEglCudaC⁄sumî
()

456 i‡(
cudaC⁄√˘i⁄
)

458 i‡(
cudaSuc˚ss
 !
cudaFªe
(
nuŒ±r
))

460 
NVXIO_PRINT
("FailedÅo initialize CUDA context");

464 
cuEGLSåómC⁄sumîDisc⁄√˘
(&
cudaC⁄√˘i⁄
);

465 
	gcudaC⁄√˘i⁄
 = 
nuŒ±r
;

469 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::
Clo£G°PùeLöeAsyncThªad
()

471 
g°_ñemít_£t_°©e
(
GST_ELEMENT
(
pùñöe
), 
GST_STATE_NULL
);

472 
	gíd
 = 
åue
;

475 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::
FöÆizeG°PùeLöe
()

477 i‡(
pùñöe
)

479 
°d
::
thªad
 
t
(&
GSåómîEGLSåómSökFømeSour˚Im∂
::
Clo£G°PùeLöeAsyncThªad
, 
this
);

481 i‡(
	gfifoMode
)

483 i‡(
	gcudaSuc˚ss
 !
cudaFªe
(
nuŒ±r
))

485 
NVXIO_PRINT
("FailedÅo initialize CUDA context");

489 
CUgøphicsResour˚
 
	gcudaResour˚
;

490 
EGLöt
 
	g°ªamSèã
 = 0;

491 !
	gíd
)

493 i‡(!
eglQuîySåómKHR
(
c⁄ãxt
.
di•œy
, c⁄ãxt.
°ªam
, 
EGL_STREAM_STATE_KHR
, &
°ªamSèã
))

495 
h™dÀGSåómîMesßges
();

499 i‡(
	g°ªamSèã
 =
EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR
)

501 
cuEGLSåómC⁄sumîAcquúeFøme
(&
cudaC⁄√˘i⁄
, &
cudaResour˚
, 
nuŒ±r
, 1000);

502 
cuEGLSåómC⁄sumîRñó£Føme
(&
cudaC⁄√˘i⁄
, 
cudaResour˚
, 
nuŒ±r
);

506 
h™dÀGSåómîMesßges
();

509 
h™dÀGSåómîMesßges
();

514 
	gt
.
joö
();

516 
g°_obje˘_uƒef
(
GST_OBJECT
(
bus
));

517 
	gbus
 = 
nuŒ±r
;

519 
g°_obje˘_uƒef
(
GST_OBJECT
(
pùñöe
));

520 
	gpùñöe
 = 
nuŒ±r
;

524 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::
˛o£
()

526 
nvxio
::
ProfûîR™ge
 
ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "FrameSource::close (NVXIO)");

528 
h™dÀGSåómîMesßges
();

529 
FöÆizeG°PùeLöe
();

530 
FöÆizeEglCudaC⁄sumî
();

531 
FöÆizeEglSåóm
();

533 i‡(
	gnv12Føme
)

535 
cudaFªe
(
nv12Føme
);

536 
	gnv12Føme
 = 
nuŒ±r
;

541 
	gGSåómîEGLSåómSökFømeSour˚Im∂
::~
GSåómîEGLSåómSökFømeSour˚Im∂
()

543 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerEGLStreamSinkFrameSourceImpl.hpp

29 #i‚de‡
GSTREAMEREGLSTREAMSINKFRAMESOURCEIMPL_HPP


30 
	#GSTREAMEREGLSTREAMSINKFRAMESOURCEIMPL_HPP


	)

32 #i‡
deföed
 
USE_GSTREAMER_OMX
 && deföed 
USE_GLES
 || deföed 
USE_GSTREAMER_NVMEDIA
 || deföed 
USE_NVGSTCAMERA


34 
	~<VX/vx.h
>

36 
	~"FømeSour˚/FømeSour˚Im∂.hµ
"

38 
	~"FømeSour˚/EGLAPIAc˚ss‹s.hµ
"

39 
	~"FømeSour˚/GSåómî/GSåómîComm⁄.hµ
"

41 
	~<cudaEGL.h
>

43 
«me•a˚
 
	gnvidüio


46 ˛as†
	cGSåómîEGLSåómSökFømeSour˚Im∂
 :

47 
public
 
FømeSour˚


49 
public
:

50 
GSåómîEGLSåómSökFømeSour˚Im∂
(
Sour˚Ty≥
 
sour˚Ty≥
, c⁄° * c⁄° 
«me
, 
boﬁ
 
fifomode
);

52 
vútuÆ
 
boﬁ
 
›í
();

53 
vútuÆ
 
˛o£
();

54 
vútuÆ
 
FømeSètus
 
„tch
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
timeout
 = 5u );

56 
vútuÆ
 
P¨amëîs
 
gëC⁄figuøti⁄
();

57 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
P¨amëîs
& 
∑øms
);

58 
	gvútuÆ
 ~
GSåómîEGLSåómSökFømeSour˚Im∂
();

60 
	g¥Ÿe˘ed
:

61 
h™dÀGSåómîMesßges
();

63 
vútuÆ
 
boﬁ
 
InôülizeG°PùeLöe
() = 0;

64 
Clo£G°PùeLöeAsyncThªad
();

65 
FöÆizeG°PùeLöe
();

67 
G°Pùñöe
 * 
	gpùñöe
;

68 
G°Bus
 * 
	gbus
;

69 vﬁ©ûê
boﬁ
 
	gíd
;

72 
	sEglC⁄ãxt


74 
EGLDi•œy
 
	gdi•œy
;

75 
EGLSåómKHR
 
	g°ªam
;

78 
boﬁ
 
InôülizeEGLDi•œy
();

79 
boﬁ
 
InôülizeEGLSåóm
();

80 
FöÆizeEglSåóm
();

82 
EglC⁄ãxt
 
	gc⁄ãxt
;

83 
	gfifoLígth
;

84 
boﬁ
 
	gfifoMode
;

85 
	gœãncy
;

88 
boﬁ
 
InôülizeEglCudaC⁄sumî
();

89 
FöÆizeEglCudaC⁄sumî
();

91 
CUeglSåómC⁄√˘i⁄
 
	gcudaC⁄√˘i⁄
;

94 
öt32_t
 
	gdevi˚ID
;

95 
nvxcu_°ªam_exec_èrgë_t
 
	gexec_èrgë
;

97 
P¨amëîs
 
	gc⁄figuøti⁄
;

100 * 
	gnv12Føme
;

101 
size_t
 
	gnv12FømePôch
;

102 
	g¥iv©e
:

105 * 
devMem
;

106 
size_t
 
	gdevMemPôch
;};

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerImagesFrameSourceImpl.cpp

29 #ifde‡
USE_GSTREAMER


31 
	~"FømeSour˚/GSåómî/GSåómîImagesFømeSour˚Im∂.hµ
"

33 #i‡
GST_VERSION_MAJOR
 == 0

34 
	#DECODEBIN_ELEM
 "decodebö2"

	)

36 
	#DECODEBIN_ELEM
 "decodebö"

	)

39 
	~<g°/≠p/g°≠psök.h
>

41 
	~<m≠
>

43 
«me•a˚
 
	gnvidüio


46 
	gGSåómîImagesFømeSour˚Im∂
::
GSåómîImagesFømeSour˚Im∂
(
FømeSour˚
::
Sour˚Ty≥
 
ty≥
, c⁄° 
°d
::
°rög
 & 
fûeName_
) :

47 
GSåómîBa£FømeSour˚Im∂
(
ty≥
, "GstreamerImagesFrameSource"),

48 
fûeName
(
fûeName_
)

50 c⁄° 
	g°d
::
m≠
<
°d
::
°rög
, 
	gguöt
> 
	g„©uªs_li°
 =

52 { "nvj≥gíc", 
GST_RANK_NONE
 },

53 { "nvj≥gdec", 
GST_RANK_NONE
 }

56 
	g°d
::
unique_±r
<
G°EÀmítFa˘‹y
, 
	gGSåómîObje˘Dñëî
> 
	gÁ˘‹y
;

57 autÿ
	gp
 : 
„©uªs_li°
)

59 
Á˘‹y
.
ª£t
(
g°_ñemít_Á˘‹y_föd
(
p
.
fú°
.
c_°r
()));

60 i‡(
	gÁ˘‹y
)

62 
g°_∂ugö_„©uª_£t_ønk
(
GST_PLUGIN_FEATURE
(
Á˘‹y
.
gë
()), 
p
.
£c⁄d
);

67 
G°Aut›lugSñe˘Resu…
 
	gGSåómîImagesFømeSour˚Im∂
::
autoPlugSñe˘
(
G°EÀmít
 *, 
G°Pad
 *,

68 
G°C≠s
 * 
ˇps
, 
G°EÀmítFa˘‹y
 *, 
gpoöãr
)

70 
	g°d
::
unique_±r
<[], 
	gGlibDñëî
> 
ˇpsSå
(
g°_ˇps_to_°rög
(
ˇps
));

71 i‡(
°r°r
(
ˇpsSå
.
gë
(), "image"))

73  
	gGST_AUTOPLUG_SELECT_TRY
;

77  
	gGST_AUTOPLUG_SELECT_EXPOSE
;

81 
boﬁ
 
	gGSåómîImagesFømeSour˚Im∂
::
InôülizeG°PùeLöe
()

83 
G°SèãCh™geRëu∫
 
°©us
;

84 
	gíd
 = 
åue
;

86 
	gpùñöe
 = 
GST_PIPELINE
(
g°_pùñöe_√w
(
nuŒ±r
));

87 i‡(!
	gpùñöe
)

89 
NVXIO_PRINT
("Cannot create GstreamerÖipeline");

90  
	gÁl£
;

93 
	gbus
 = 
g°_pùñöe_gë_bus
(
GST_PIPELINE
 (
pùñöe
));

96 
boﬁ
 
	gisImageSequí˚
 = 
sour˚Ty≥
 =
nvxio
::
FømeSour˚
::
IMAGE_SEQUENCE_SOURCE
;

98 c⁄° * 
	gñemítFa˘‹yName
 =

99 
isImageSequí˚
 ? "multifilesrc" : "filesrc";

101 
G°EÀmít
 * 
	gfûe§c
 = 
g°_ñemít_Á˘‹y_make
(
ñemítFa˘‹yName
, 
nuŒ±r
);

102 i‡(!
	gfûe§c
)

104 
NVXIO_PRINT
("Cannot create filesrc");

105 
FöÆizeG°PùeLöe
();

107  
	gÁl£
;

110 
g_obje˘_£t
(
G_OBJECT
(
fûe§c
), "loˇti⁄", 
fûeName
.
c_°r
(), 
nuŒ±r
);

112 i‡(
	gisImageSequí˚
)

113 
g_obje˘_£t
(
G_OBJECT
(
fûe§c
), "°¨t-ödex", 1, 
nuŒ±r
);

115 #i‡
GST_VERSION_MAJOR
 == 0

116 i‡(
	gisImageSequí˚
)

118 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
ˇps
(

119 
g°_ˇps_√w_sim∂e
("image/≤g", "‰amî©e", 
GST_TYPE_FRACTION
, 30, 1, 
nuŒ±r
));

120 i‡(
	gˇps
)

122 
g_obje˘_£t
(
G_OBJECT
(
fûe§c
), "ˇps", 
ˇps
.
gë
(), 
nuŒ±r
);

127 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
fûe§c
);

130 
G°EÀmít
 * 
	gdecodebö
 = 
g°_ñemít_Á˘‹y_make
(
DECODEBIN_ELEM
, 
nuŒ±r
);

131 i‡(!
	gdecodebö
)

133 
NVXIO_PRINT
("C™nŸ cª©ê" 
DECODEBIN_ELEM
 "Élement");

134 
FöÆizeG°PùeLöe
();

136  
	gÁl£
;

139 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
decodebö
);

142 
G°EÀmít
 * 
	gcﬁ‹
 = 
g°_ñemít_Á˘‹y_make
(
COLOR_ELEM
, 
nuŒ±r
);

143 i‡(!
	gcﬁ‹
)

145 
NVXIO_PRINT
("C™nŸ cª©ê%†ñemít", 
COLOR_ELEM
);

146 
FöÆizeG°PùeLöe
();

148  
	gÁl£
;

151 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
cﬁ‹
);

154 
	gsök
 = 
g°_ñemít_Á˘‹y_make
("≠psök", 
nuŒ±r
);

155 i‡(!
	gsök
)

157 
NVXIO_PRINT
("Cannot createáppsinkÉlement");

158 
FöÆizeG°PùeLöe
();

160  
	gÁl£
;

163 #i‡
FULL_GST_VERSION
 >
VERSION_NUM
(1,7,2)

164 
g_obje˘_£t
(
GST_ELEMENT
(
sök
), "waô-⁄-eos", 
FALSE
, 
nuŒ±r
);

167 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
sök
);

169 
g_sig«l_c⁄√˘
(
decodebö
, "aut›lug-£À˘", 
G_CALLBACK
(
GSåómîImagesFømeSour˚Im∂
::
autoPlugSñe˘
), 
nuŒ±r
);

170 
g_sig«l_c⁄√˘
(
decodebö
, "∑d-added", 
G_CALLBACK
(
GSåómîBa£FømeSour˚Im∂
::
√wG°ªamîPad
), 
cﬁ‹
);

173 i‡(!
g°_ñemít_lök
(
fûe§c
, 
decodebö
))

175 
NVXIO_PRINT
("GStreamer: cannotÜink filesrc -> decodebin");

176 
FöÆizeG°PùeLöe
();

178  
	gÁl£
;

180 i‡(!
g°_ñemít_lök
(
cﬁ‹
, 
sök
))

182 
NVXIO_PRINT
("GStreamer: cannotÜink color ->áppsink");

183 
FöÆizeG°PùeLöe
();

185  
	gÁl£
;

188 
g°_≠p_sök_£t_max_buf„rs
 (
GST_APP_SINK
(
sök
), 4);

189 
g°_≠p_sök_£t_dr›
 (
GST_APP_SINK
(
sök
), 
Ál£
);

190 
g°_≠p_sök_£t_emô_sig«ls
 (
GST_APP_SINK
(
sök
), 0);

192 #i‡
GST_VERSION_MAJOR
 == 0

193 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
	gˇps_≠psök
;

195 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_U8
)

197 
ˇps_≠psök
.
ª£t
(
g°_ˇps_√w_sim∂e
("video/x-raw-gray",

198 "bµ", 
G_TYPE_INT
, 8,

199 
nuŒ±r
));

201 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_RGB
)

203 
ˇps_≠psök
.
ª£t
(
g°_ˇps_√w_sim∂e
("video/x-raw-rgb",

204 "bµ", 
G_TYPE_INT
, 24,

205 "ªd_mask", 
G_TYPE_INT
, 0xFF0000,

206 "gªí_mask", 
G_TYPE_INT
, 0x00FF00,

207 "blue_mask", 
G_TYPE_INT
, 0x0000FF,

208 
nuŒ±r
));

210 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ||

211 
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
)

213 
ˇps_≠psök
.
ª£t
(
g°_ˇps_√w_sim∂e
("video/x-raw-rgb",

214 "dïth", 
G_TYPE_INT
, 32,

215 "bµ", 
G_TYPE_INT
, 32,

216 "ídü¬ess", 
G_TYPE_INT
, 4321,

217 "ªd_mask", 
G_TYPE_INT
, 0xFF000000,

218 "gªí_mask", 
G_TYPE_INT
, 0x00FF0000,

219 "blue_mask", 
G_TYPE_INT
, 0x0000FF00,

220 "Æpha_mask", 
G_TYPE_INT
, 0x000000FF,

221 
nuŒ±r
));

223 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

225 
ˇps_≠psök
.
ª£t
(
g°_ˇps_√w_sim∂e
("video/x-raw-yuv",

226 "f‹m©", 
GST_TYPE_FOURCC
, 
GST_MAKE_FOURCC
 ('N', 'V', '1', '2'),

227 
nuŒ±r
));

230 
NVXIO_THROW_EXCEPTION
("Unsupported image format");

232 
	g°d
::
°rög
 
ˇps_°rög
("video/x-raw, format=(string){");

233 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_U8
)

234 
ˇps_°rög
 += "GRAY8";

235 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_RGB
)

236 
ˇps_°rög
 += "RGB";

237 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ||

238 
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
)

239 
ˇps_°rög
 += "RGBA";

240 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

241 
ˇps_°rög
 += "NV12";

243 
NVXIO_THROW_EXCEPTION
("Unsupported image format");

245 
	gˇps_°rög
 += "};";

247 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
ˇps_≠psök
(

248 
g°_ˇps_‰om_°rög
(
ˇps_°rög
.
c_°r
()));

250 
NVXIO_ASSERT
(
ˇps_≠psök
);

251 
g°_≠p_sök_£t_ˇps
(
GST_APP_SINK
(
sök
), 
ˇps_≠psök
.
gë
());

254 
g°_pùñöe_u£_˛ock
(
pùñöe
, 
nuŒ±r
);

256 
	g°©us
 = 
g°_ñemít_£t_°©e
(
GST_ELEMENT
(
pùñöe
), 
GST_STATE_PLAYING
);

257 
h™dÀGSåómîMesßges
();

259 i‡(
	g°©us
 =
GST_STATE_CHANGE_ASYNC
)

262 
°©us
 = 
g°_ñemít_gë_°©e
(
GST_ELEMENT
(
pùñöe
), 
nuŒ±r
,ÇuŒ±r, 
GST_CLOCK_TIME_NONE
);

264 i‡(
	g°©us
 =
GST_STATE_CHANGE_FAILURE
)

266 
NVXIO_PRINT
("GStreamer: unableÅo startÖlayback");

267 
FöÆizeG°PùeLöe
();

269  
	gÁl£
;

272 i‡(!
upd©eC⁄figuøti⁄
(
sök
, 
cﬁ‹
, 
c⁄figuøti⁄
))

274 
FöÆizeG°PùeLöe
();

275  
	gÁl£
;

278 
	gíd
 = 
Ál£
;

280  
	gåue
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerImagesFrameSourceImpl.hpp

29 #i‚de‡
GSTREAMERIMAGESFRAMESOURCEIMPL_HPP


30 
	#GSTREAMERIMAGESFRAMESOURCEIMPL_HPP


	)

32 #ifde‡
USE_GSTREAMER


34 
	~"FømeSour˚/GSåómî/GSåómîBa£FømeSour˚Im∂.hµ
"

36 
«me•a˚
 
	gnvidüio


39 ˛as†
	cGSåómîImagesFømeSour˚Im∂
 :

40 
public
 
GSåómîBa£FømeSour˚Im∂


42 
public
:

43 
GSåómîImagesFømeSour˚Im∂
(
Sour˚Ty≥
 
ty≥
, c⁄° 
°d
::
°rög
 & 
fûeName
);

45 
	g¥Ÿe˘ed
:

47 
vútuÆ
 
boﬁ
 
InôülizeG°PùeLöe
();

49 
G°Aut›lugSñe˘Resu…
 
autoPlugSñe˘
(
G°EÀmít
 * 
bö
, 
G°Pad
 * 
∑d
,

50 
G°C≠s
 * 
ˇps
, 
G°EÀmítFa˘‹y
 * 
Á˘‹y
,

51 
gpoöãr
 
u£r_d©a
);

53 
	g°d
::
°rög
 
fûeName
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerNvCameraFrameSourceImpl.cpp

29 #ifde‡
USE_NVGSTCAMERA


31 
	~"GSåómîNvCamîaFømeSour˚Im∂.hµ
"

33 
	~<g°/≠p/g°≠psök.h
>

34 
	~<s°ªam
>

37 
«me•a˚
 
	gnvidüio


40 
	sNvCamîaC⁄figs


42 
vx_uöt32
 
	g‰ameWidth
, 
	g‰ameHeight
, 
	gÂs
;

45 c⁄° 
NvCamîaC⁄figs
 
	gc⁄figs
[4] =

47 { 
vx_uöt32
(2592), vx_uint32(1944), vx_uint32(30) },

48 { 
vx_uöt32
(2592), vx_uint32(1458), vx_uint32(30) },

49 { 
vx_uöt32
(1280), vx_uint32(720) , vx_uint32(120) },

50 { 
vx_uöt32
(2592), vx_uint32(1944), vx_uint32(24) }

53 
	gGSåómîNvCamîaFømeSour˚Im∂
::
GSåómîNvCamîaFømeSour˚Im∂
(
uöt
 
ˇmîaIdx_
) :

54 
GSåómîEGLSåómSökFømeSour˚Im∂
(
nvxio
::
FømeSour˚
::
CAMERA_SOURCE
, "GSåómîNvCamîaFømeSour˚", 
Ál£
),

55 
ˇmîaIdx
(
ˇmîaIdx_
)

59 
boﬁ
 
	gGSåómîNvCamîaFømeSour˚Im∂
::
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
)

61 
NVXIO_ASSERT
(
íd
);

63 
	gc⁄figuøti⁄
.
	g‰ameHeight
 = 
∑øms
.
‰ameHeight
;

64 
	gc⁄figuøti⁄
.
	g‰ameWidth
 = 
∑øms
.
‰ameWidth
;

65 
	gc⁄figuøti⁄
.
	gÂs
 = 
∑øms
.
Âs
;

67 
NVXIO_ASSERT
((
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
) ||

68 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
) ||

69 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
) ||

70 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
)||

71 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
));

74 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
∑øms
.
f‹m©
;

76  
	gåue
;

79 
boﬁ
 
	gGSåómîNvCamîaFømeSour˚Im∂
::
InôülizeG°PùeLöe
()

82 
NvCamîaC⁄figs
 
nvˇmîac⁄fig
 = 
c⁄figs
[2];

85 i‡–(
	gc⁄figuøti⁄
.
	g‰ameWidth
 !(
vx_uöt32
)-1) &&

86 (
c⁄figuøti⁄
.
‰ameHeight
 !(
vx_uöt32
)-1) )

88 
nvˇmîac⁄fig
.
‰ameWidth
 = 
c⁄figuøti⁄
.frameWidth;

89 
	gnvˇmîac⁄fig
.
	g‰ameHeight
 = 
c⁄figuøti⁄
.
‰ameHeight
;

90 
	gnvˇmîac⁄fig
.
	gÂs
 = 30;

93 
vx_size
 
	gi
 = 0; i < 
	govxio
::
dimOf
(
c⁄figs
); ++i)

95 i‡((
	gnvˇmîac⁄fig
.
	g‰ameWidth
 =
c⁄figs
[
i
].
‰ameWidth
) &&

96 (
nvˇmîac⁄fig
.
‰ameHeight
 =
c⁄figs
[
i
].frameHeight))

98 
nvˇmîac⁄fig
.
Âs
 = 
c⁄figs
[
i
].fps;

104 i‡(
	gc⁄figuøti⁄
.
	gÂs
 =(
vx_uöt32
)-1)

105 
c⁄figuøti⁄
.
Âs
 = 
nvˇmîac⁄fig
.fps;

107 
	gíd
 = 
åue
;

109 
	gpùñöe
 = 
GST_PIPELINE
(
g°_pùñöe_√w
(
nuŒ±r
));

110 i‡(!
	gpùñöe
)

112 
NVXIO_PRINT
("Cannot create GstreamerÖipeline");

113  
	gÁl£
;

116 
	gbus
 = 
g°_pùñöe_gë_bus
(
GST_PIPELINE
 (
pùñöe
));

119 
G°EÀmít
 * 
	gnvˇmîa§c
 = 
g°_ñemít_Á˘‹y_make
("nvˇmîa§c", 
nuŒ±r
);

120 i‡(!
	gnvˇmîa§c
)

122 
NVXIO_PRINT
("Cannot createÇvcamerasrc");

123 
NVXIO_PRINT
("\"nvcamerasrc\"Élement isÇotávailable onÅhisÖlatform");

124 
FöÆizeG°PùeLöe
();

126  
	gÁl£
;

129 
	g°d
::
o°rög°ªam
 
°ªam
;

130 
	g°ªam
 << 
	gc⁄figuøti⁄
.
	gÂs
 << " " << configuration.fps;

131 
	g°d
::
°rög
 
ÂsR™ge
 = 
°ªam
.
°r
();

133 
g_obje˘_£t
(
G_OBJECT
(
nvˇmîa§c
),

134 "£ns‹-id", 
ˇmîaIdx
,

135 "ÂsR™ge", 
ÂsR™ge
.
c_°r
(),

136 
nuŒ±r
);

138 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
nvˇmîa§c
);

141 
G°EÀmít
 * 
	gnvvideosök
 = 
g°_ñemít_Á˘‹y_make
("nvvideosök", 
nuŒ±r
);

142 i‡(!
	gnvvideosök
)

144 
NVXIO_PRINT
("Cannot createÇvvideosinkÉlement");

145 
FöÆizeG°PùeLöe
();

147  
	gÁl£
;

150 
g_obje˘_£t
(
G_OBJECT
(
nvvideosök
),

151 "di•œy", 
c⁄ãxt
.
di•œy
,

152 "°ªam", 
c⁄ãxt
.
°ªam
,

153 "fifo", 
fifoMode
,

154 "max-œã√ss", 
G_GINT64_CONSTANT
(-1),

155 "thrŸée-time", 
G_GUINT64_CONSTANT
(0),

156 "ªndî-dñay", 
G_GUINT64_CONSTANT
(0),

157 "qos", 
FALSE
,

158 "sync", 
FALSE
,

159 "async", 
TRUE
,

160 
nuŒ±r
);

162 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
nvvideosök
);

165 
	g°ªam
.
°r
(
°d
::
°rög
());

166 
	g°ªam
 << "video/x-øw(mem‹y:NVMM), width=(öt)" << 
	gnvˇmîac⁄fig
.
	g‰ameWidth
 << ", "

167 "height=(öt)" << 
	gnvˇmîac⁄fig
.
	g‰ameHeight
 << ", format=(string){I420}, "

168 "‰amî©e=(‰a˘i⁄)" << 
	gnvˇmîac⁄fig
.
	gÂs
 << "/1;";

170 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
ˇps_nvvidc⁄v
(

171 
g°_ˇps_‰om_°rög
(
°ªam
.
°r
().
c_°r
()));

173 i‡(!
	gˇps_nvvidc⁄v
)

175 
NVXIO_PRINT
("FailedÅo create caps");

176 
FöÆizeG°PùeLöe
();

178  
	gÁl£
;

181 i‡(!
g°_ñemít_lök_fûãªd
(
nvˇmîa§c
, 
nvvideosök
, 
ˇps_nvvidc⁄v
.
gë
()))

183 
NVXIO_PRINT
("GStreamer: cannotÜinkÇvcamerasrc ->Çvvideosink using caps");

184 
FöÆizeG°PùeLöe
();

186  
	gÁl£
;

190 
g°_pùñöe_u£_˛ock
(
pùñöe
, 
nuŒ±r
);

192 
G°SèãCh™geRëu∫
 
	g°©us
 = 
g°_ñemít_£t_°©e
(
GST_ELEMENT
(
pùñöe
), 
GST_STATE_PLAYING
);

193 
h™dÀGSåómîMesßges
();

195 i‡(
	g°©us
 =
GST_STATE_CHANGE_ASYNC
)

198 
°©us
 = 
g°_ñemít_gë_°©e
(
GST_ELEMENT
(
pùñöe
), 
nuŒ±r
,ÇuŒ±r, 
GST_CLOCK_TIME_NONE
);

200 i‡(
	g°©us
 =
GST_STATE_CHANGE_FAILURE
)

202 
NVXIO_PRINT
("GStreamer: unableÅo startÖlayback");

203 
FöÆizeG°PùeLöe
();

205  
	gÁl£
;

208 
vx_uöt32
 
	göôülFPS
 = 
c⁄figuøti⁄
.
Âs
;

210 i‡(!
upd©eC⁄figuøti⁄
(
nvvideosök
, 
nvˇmîa§c
, 
c⁄figuøti⁄
))

212 
FöÆizeG°PùeLöe
();

213  
	gÁl£
;

219 i‡(
	göôülFPS
 !(
vx_uöt32
)-1)

220 
c⁄figuøti⁄
.
Âs
 = 
öôülFPS
;

222 
	gíd
 = 
Ál£
;

224  
	gåue
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerNvCameraFrameSourceImpl.hpp

29 #i‚de‡
GSTREAMERNVCAMERAFRAMESOURCEIMPL_HPP


30 
	#GSTREAMERNVCAMERAFRAMESOURCEIMPL_HPP


	)

32 
	~"GSåómîEGLSåómSökFømeSour˚Im∂.hµ
"

34 #ifde‡
USE_NVGSTCAMERA


36 
«me•a˚
 
	gnvidüio


39 ˛as†
	cGSåómîNvCamîaFømeSour˚Im∂
 :

40 
public
 
GSåómîEGLSåómSökFømeSour˚Im∂


42 
public
:

43 
ex∂icô
 
GSåómîNvCamîaFømeSour˚Im∂
(
uöt
 
ˇmîaIdx_
);

45 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
);

47 
	g¥Ÿe˘ed
:

49 
vútuÆ
 
boﬁ
 
InôülizeG°PùeLöe
();

51 
uöt
 
	gˇmîaIdx
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerNvMediaFrameSourceImpl.cpp

29 #ifde‡
USE_GSTREAMER_NVMEDIA


31 
	~<NVX/Aµliˇti⁄.hµ
>

33 
	~"FømeSour˚/GSåómî/GSåómîNvMedüFømeSour˚Im∂.hµ
"

35 
	~<cuda_ru¡ime_≠i.h
>

37 
«me•a˚
 
	gnvidüio


40 
	gGSåómîNvMedüFømeSour˚Im∂
::
GSåómîNvMedüFømeSour˚Im∂
(c⁄° 
°d
::
°rög
 & 
∑th
):

41 
GSåómîEGLSåómSökFømeSour˚Im∂
(
nvxio
::
FømeSour˚
::
VIDEO_SOURCE
, "G°ªamîNvMedüFømeSour˚", 
åue
),

42 
fûeName
(
∑th
)

46 
	gGSåómîNvMedüFømeSour˚Im∂
::
£tNvMedüPlugöRunk
()

48 c⁄° 
°d
::
m≠
<°d::
°rög
, 
	gguöt
> 
	g„©uªs_li°
 =

50 { "avdec_m≥g4", 
GST_RANK_SECONDARY
 },

51 { "avdec_h264", 
GST_RANK_SECONDARY
 },

52 { "nvmedümp3auddec", 
GST_RANK_PRIMARY
 },

53 { "nvmedüØˇuddec", 
GST_RANK_PRIMARY
 },

54 { "nvmedüwmØuddec", 
GST_RANK_PRIMARY
 },

55 { "nvmedüØˇudíc", 
GST_RANK_PRIMARY
 },

56 { "nvmedüm≥g2viddec", 
GST_RANK_PRIMARY
 },

57 { "nvmedüm≥g4viddec", 
GST_RANK_PRIMARY
 },

58 { "nvmedüvc1viddec", 
GST_RANK_PRIMARY
 },

59 { "nvmedümj≥gviddec", 
GST_RANK_PRIMARY
 },

60 { "nvmedüh264viddec", 
GST_RANK_PRIMARY
 },

61 { "nvmedüh264vidíc", 
GST_RANK_PRIMARY
 },

62 { "nvmedüˇ±uª§c", 
GST_RANK_PRIMARY
 },

63 { "nvmedüovîœysök", 
GST_RANK_PRIMARY
 },

64 { "nvmedüegl°ªamsök", 
GST_RANK_PRIMARY
 },

65 { "nvmedüvp8viddec", 
GST_RANK_PRIMARY
 }

68 
	g°d
::
unique_±r
<
G°EÀmítFa˘‹y
, 
	gGSåómîObje˘Dñëî
> 
	gÁ˘‹y
;

69 autÿ
	gp
 : 
„©uªs_li°
)

71 
Á˘‹y
.
ª£t
(
g°_ñemít_Á˘‹y_föd
(
p
.
fú°
.
c_°r
()));

72 i‡(
	gÁ˘‹y
)

74 
g°_∂ugö_„©uª_£t_ønk
(
GST_PLUGIN_FEATURE
(
Á˘‹y
.
gë
()), 
p
.
£c⁄d
);

79 
	gGSåómîNvMedüFømeSour˚Im∂
::
√wG°ªamîPad
(
G°EÀmít
 * , 
G°Pad
 *
∑d
, 
gpoöãr
 
d©a
)

81 
G°EÀmít
 *
	gmixî
 = (G°EÀmíà*Ë
d©a
;

83 
	g°d
::
unique_±r
<
G°Pad
, 
	gGSåómîObje˘Dñëî
> 
sök∑d
(
g°_ñemít_gë_°©ic_∑d
(
mixî
, "sink"));

84 i‡(!
	gsök∑d
)

86 
NVXIO_PRINT
("Gstreamer:ÇoÖadÇamed \"sink\"");

90 
g°_∑d_lök
(
∑d
, 
sök∑d
.
gë
());

93 
	gGSåómîNvMedüFømeSour˚Im∂
::
G°Aut›lugSñe˘Resu…
 
GSåómîNvMedüFømeSour˚Im∂
::
autoPlugSñe˘
(
G°EÀmít
 *, 
G°Pad
 *,

94 
G°C≠s
 * 
ˇps
, 
G°EÀmítFa˘‹y
 *, 
gpoöãr
)

96 
	g°d
::
unique_±r
<[], 
	gGlibDñëî
> 
msg_°r
(
g°_ˇps_to_°rög
(
ˇps
));

97 
	gGSåómîNvMedüFømeSour˚Im∂
::
G°Aut›lugSñe˘Resu…
 
ªsu…
 = 
GST_AUTOPLUG_SELECT_EXPOSE
;

99 i‡(
°r°r
(
msg_°r
.
gë
(), "video"))

101 
	gªsu…
 = 
GST_AUTOPLUG_SELECT_TRY
;

104  
	gªsu…
;

107 
boﬁ
 
	gGSåómîNvMedüFømeSour˚Im∂
::
InôülizeG°PùeLöe
()

109 
íd
 = 
åue
;

110 
£tNvMedüPlugöRunk
();

112 
G°SèãCh™geRëu∫
 
	g°©us
;

114 
	g°d
::
°rög
 
uri
;

115 c⁄° * 
	gfûeNameS
 = 
fûeName
.
c_°r
();

117 i‡(!
g°_uri_is_vÆid
(
fûeNameS
))

119 * 
	gªÆ
 = 
ªÆ∑th
(
fûeNameS
, 
nuŒ±r
);

120 i‡(!
	gªÆ
)

122 
NVXIO_PRINT
("C™'àªsﬁvê∑th \"%s\": %s", 
fûeNameS
, 
°ªº‹
(
î∫o
));

123  
	gÁl£
;

126 
	g°d
::
unique_±r
<[], 
	gGlibDñëî
> 
pUri
(
g_fûíame_to_uri
(
ªÆ
, 
nuŒ±r
,Çullptr));

127 
‰ì
(
ªÆ
);

128 
	guri
 = 
pUri
.
gë
();

132 
	guri
 = 
fûeName
;

135 
	gpùñöe
 = 
GST_PIPELINE
(
g°_pùñöe_√w
(
nuŒ±r
));

136 i‡(!
	gpùñöe
)

138 
NVXIO_PRINT
("Cannot create GstreamerÖipeline");

139  
	gÁl£
;

142 
	gbus
 = 
g°_pùñöe_gë_bus
(
GST_PIPELINE
 (
pùñöe
));

145 
G°EÀmít
 * 
	guriDecodeBö
 = 
g°_ñemít_Á˘‹y_make
("uridecodebö", 
nuŒ±r
);

146 
h™dÀGSåómîMesßges
();

147 i‡(!
	guriDecodeBö
)

149 
NVXIO_PRINT
("Cannot create uridecodebin");

150  
	gÁl£
;

153 
g_obje˘_£t
(
G_OBJECT
(
uriDecodeBö
), "uri", 
uri
.
c_°r
(), 
nuŒ±r
);

155 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
ˇps
(
g°_ˇps_‰om_°rög
("video/x-nvmedia"));

156 i‡(!
	gˇps
)

158 
NVXIO_PRINT
("Cannot createÇvmedia caps");

159  
	gÁl£
;

162 
g_obje˘_£t
(
G_OBJECT
(
uriDecodeBö
), "ˇps", 
ˇps
.
gë
(), 
nuŒ±r
);

164 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
uriDecodeBö
);

167 
boﬁ
 
	g√edSurÁ˚Mixî
 = 
c⁄figuøti⁄
.
f‹m©
 !
NVXCU_DF_IMAGE_NV12
;

168 
G°EÀmít
 * 
	gsurÁ˚Mixî
 = 
nuŒ±r
;

170 i‡(
	g√edSurÁ˚Mixî
)

172 
	gsurÁ˚Mixî
 = 
g°_ñemít_Á˘‹y_make
("nvmedüsurfmixî", 
nuŒ±r
);

173 i‡(!
	gsurÁ˚Mixî
)

175 
NVXIO_PRINT
("Cannot create surface mixer");

176 
FöÆizeG°PùeLöe
();

177  
	gÁl£
;

180 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
surÁ˚Mixî
);

184 
G°EÀmít
 * 
	geglSök
 = 
g°_ñemít_Á˘‹y_make
("nvmedüegl°ªamsök", 
nuŒ±r
);

185 i‡(!
	geglSök
)

187 
NVXIO_PRINT
("Cannot create EGL sink");

188 
FöÆizeG°PùeLöe
();

189  
	gÁl£
;

192 
g_obje˘_£t
(
G_OBJECT
(
eglSök
),

193 "di•œy", 
c⁄ãxt
.
di•œy
,

194 "°ªam", 
c⁄ãxt
.
°ªam
,

195 "fifo", 
fifoMode
,

196 "max-œã√ss", 
G_GINT64_CONSTANT
(-1),

197 "thrŸée-time", 
G_GUINT64_CONSTANT
(0),

198 "ªndî-dñay", 
G_GUINT64_CONSTANT
(0),

199 "qos", 
FALSE
,

200 "sync", 
FALSE
,

201 "async", 
TRUE
,

202 
nuŒ±r
);

204 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
eglSök
);

207 
g_sig«l_c⁄√˘
(
uriDecodeBö
, "∑d-added", 
G_CALLBACK
(
GSåómîNvMedüFømeSour˚Im∂
::
√wG°ªamîPad
),

208 
√edSurÁ˚Mixî
 ? 
surÁ˚Mixî
 : 
eglSök
);

209 
g_sig«l_c⁄√˘
(
uriDecodeBö
, "aut›lug-£À˘", 
G_CALLBACK
(
GSåómîNvMedüFømeSour˚Im∂
::
autoPlugSñe˘
), 
nuŒ±r
);

212 i‡(
	g√edSurÁ˚Mixî
)

214 i‡(!
g°_ñemít_lök
(
surÁ˚Mixî
, 
eglSök
))

216 
NVXIO_PRINT
("CannotÜink SurfaceMixeránd EGL sink");

217 
FöÆizeG°PùeLöe
();

218  
	gÁl£
;

223 
g°_pùñöe_u£_˛ock
(
pùñöe
, 
nuŒ±r
);

225 
	g°©us
 = 
g°_ñemít_£t_°©e
(
GST_ELEMENT
(
pùñöe
), 
GST_STATE_PLAYING
);

226 
h™dÀGSåómîMesßges
();

228 i‡(
	g°©us
 =
GST_STATE_CHANGE_ASYNC
)

231 
°©us
 = 
g°_ñemít_gë_°©e
(
GST_ELEMENT
(
pùñöe
), 
nuŒ±r
,ÇuŒ±r, 
GST_CLOCK_TIME_NONE
);

236 i‡(
	g°©us
 =
GST_STATE_CHANGE_FAILURE
)

238 
NVXIO_PRINT
("GStreamer: unableÅo startÖlayback");

239 
FöÆizeG°PùeLöe
();

240  
	gÁl£
;

243 i‡(!
upd©eC⁄figuøti⁄
(
eglSök
, 
√edSurÁ˚Mixî
 ? 
surÁ˚Mixî
 :ÉglSök, 
c⁄figuøti⁄
))

245 
FöÆizeG°PùeLöe
();

246  
	gÁl£
;

249 
	gíd
 = 
Ál£
;

251  
	gåue
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerNvMediaFrameSourceImpl.hpp

29 #i‚de‡
GSTREAMERNVMEDIAFRAMESOURCEIMPL_HPP


30 
	#GSTREAMERNVMEDIAFRAMESOURCEIMPL_HPP


	)

32 #ifde‡
USE_GSTREAMER_NVMEDIA


34 
	~"GSåómîEGLSåómSökFømeSour˚Im∂.hµ
"

36 
«me•a˚
 
	gnvidüio


39 ˛as†
	cGSåómîNvMedüFømeSour˚Im∂
 :

40 
public
 
GSåómîEGLSåómSökFømeSour˚Im∂


42 
public
:

43 
ex∂icô
 
GSåómîNvMedüFømeSour˚Im∂
(c⁄° 
°d
::
°rög
 & 
∑th
);

45 
	g¥Ÿe˘ed
:

48 
	eG°Aut›lugSñe˘Resu…


50 
GST_AUTOPLUG_SELECT_TRY
,

51 
	gGST_AUTOPLUG_SELECT_EXPOSE
,

52 
	gGST_AUTOPLUG_SELECT_SKIP


55 
£tNvMedüPlugöRunk
();

56 
√wG°ªamîPad
(
G°EÀmít
 * , 
G°Pad
 *
∑d
, 
gpoöãr
 
d©a
);

57 
G°Aut›lugSñe˘Resu…
 
autoPlugSñe˘
(
G°EÀmít
 *
bö
, 
G°Pad
 *
∑d
, 
G°C≠s
 *
ˇps
,

58 
G°EÀmítFa˘‹y
 *
Á˘‹y
, 
gpoöãr
 
u£r_d©a
);

60 
vútuÆ
 
boﬁ
 
InôülizeG°PùeLöe
();

62 c⁄° 
	g°d
::
°rög
 
fûeName
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerOpenMAXFrameSourceImpl.cpp

29 #i‡
deföed
 
USE_GSTREAMER_OMX
 && deföed 
USE_GLES


31 
	~"GSåómîO≥nMAXFømeSour˚Im∂.hµ
"

32 
	~"GSåómîBa£FømeSour˚Im∂.hµ
"

34 
	~<g°/≠p/g°≠psök.h
>

35 
	~<s°ªam
>

38 
«me•a˚
 
	gnvidüio


41 
	gGSåómîO≥nMAXFømeSour˚Im∂
::
GSåómîO≥nMAXFømeSour˚Im∂
(c⁄° 
°d
::
°rög
 & 
fûíame
) :

42 
GSåómîEGLSåómSökFømeSour˚Im∂
(
nvxio
::
FømeSour˚
::
VIDEO_SOURCE
, "GSåómîO≥nMAXFømeSour˚", 
åue
),

43 
fûeName
(
fûíame
)

47 
G°Aut›lugSñe˘Resu…
 
	gGSåómîO≥nMAXFømeSour˚Im∂
::
autoPlugSñe˘
(
G°EÀmít
 *, 
G°Pad
 *,

48 
G°C≠s
 * 
ˇps
, 
G°EÀmítFa˘‹y
 *, 
gpoöãr
)

50 
	g°d
::
unique_±r
<[], 
	gGlibDñëî
> 
ˇpsSå
(
g°_ˇps_to_°rög
(
ˇps
));

52 i‡(
°r°r
(
ˇpsSå
.
gë
(), "video"))

54  
	gGST_AUTOPLUG_SELECT_TRY
;

58  
	gGST_AUTOPLUG_SELECT_EXPOSE
;

62 
boﬁ
 
	gGSåómîO≥nMAXFømeSour˚Im∂
::
InôülizeG°PùeLöe
()

64 
G°SèãCh™geRëu∫
 
°©us
;

65 
	gíd
 = 
åue
;

67 
	g°d
::
°rög
 
uri
;

68 i‡(!
g°_uri_is_vÆid
(
fûeName
.
c_°r
()))

70 * 
	gªÆ
 = 
ªÆ∑th
(
fûeName
.
c_°r
(), 
nuŒ±r
);

72 i‡(!
	gªÆ
)

74 
NVXIO_PRINT
("C™'àªsﬁvê∑th \"%s\": %s", 
fûeName
.
c_°r
(), 
°ªº‹
(
î∫o
));

75  
	gÁl£
;

78 
	g°d
::
unique_±r
<[], 
	gGlibDñëî
> 
pUri
(
g_fûíame_to_uri
(
ªÆ
, 
nuŒ±r
,Çullptr));

79 
‰ì
(
ªÆ
);

80 
	guri
 = 
pUri
.
gë
();

84 
	guri
 = 
fûeName
;

87 
	gpùñöe
 = 
GST_PIPELINE
(
g°_pùñöe_√w
(
nuŒ±r
));

88 i‡(!
	gpùñöe
)

90 
NVXIO_PRINT
("Cannot create GstreamerÖipeline");

91  
	gÁl£
;

94 
	gbus
 = 
g°_pùñöe_gë_bus
(
GST_PIPELINE
 (
pùñöe
));

97 
G°Bö
 * 
	guriDecodeBö
 = 
GST_BIN
(
g°_ñemít_Á˘‹y_make
("uridecodebö", 
nuŒ±r
));

98 i‡(!
	guriDecodeBö
)

100 
NVXIO_PRINT
("Cannot create uridecodebin");

101 
FöÆizeG°PùeLöe
();

103  
	gÁl£
;

106 
g_obje˘_£t
(
G_OBJECT
(
uriDecodeBö
),

107 "uri", 
uri
.
c_°r
(),

108 "mesßge-f‹w¨d", 
TRUE
,

109 
nuŒ±r
);

111 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
GST_ELEMENT
(
uriDecodeBö
));

114 
G°EÀmít
 * 
	gnvvidc⁄v
 = 
g°_ñemít_Á˘‹y_make
("nvvidc⁄v", 
nuŒ±r
);

115 i‡(!
	gnvvidc⁄v
)

117 
NVXIO_PRINT
("Cannot createÇvvidconv");

118 
FöÆizeG°PùeLöe
();

120  
	gÁl£
;

123 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
nvvidc⁄v
);

126 
G°EÀmít
 * 
	gnvvideosök
 = 
g°_ñemít_Á˘‹y_make
("nvvideosök", 
nuŒ±r
);

127 i‡(!
	gnvvideosök
)

129 
NVXIO_PRINT
("Cannot createÇvvideosinkÉlement");

130 
FöÆizeG°PùeLöe
();

132  
	gÁl£
;

135 
g_obje˘_£t
(
G_OBJECT
(
nvvideosök
),

136 "di•œy", 
c⁄ãxt
.
di•œy
,

137 "°ªam", 
c⁄ãxt
.
°ªam
,

138 "fifo", 
fifoMode
,

139 
nuŒ±r
);

141 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
nvvideosök
);

143 
g_sig«l_c⁄√˘
(
uriDecodeBö
, "aut›lug-£À˘", 
G_CALLBACK
(
GSåómîO≥nMAXFømeSour˚Im∂
::
autoPlugSñe˘
), 
nuŒ±r
);

144 
g_sig«l_c⁄√˘
(
uriDecodeBö
, "∑d-added", 
G_CALLBACK
(
GSåómîBa£FømeSour˚Im∂
::
√wG°ªamîPad
), 
nvvidc⁄v
);

146 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
ˇps_nvvidc⁄v
(

147 
g°_ˇps_‰om_°rög
("video/x-raw(memory:NVMM), format=(string){I420}"));

150 i‡(!
g°_ñemít_lök_fûãªd
(
nvvidc⁄v
, 
nvvideosök
, 
ˇps_nvvidc⁄v
.
gë
()))

152 
NVXIO_PRINT
("GStreamer: cannotÜinkÇvvidconv ->Çvvideosink");

153 
FöÆizeG°PùeLöe
();

155  
	gÁl£
;

159 
g°_pùñöe_u£_˛ock
(
pùñöe
, 
nuŒ±r
);

161 
	g°©us
 = 
g°_ñemít_£t_°©e
(
GST_ELEMENT
(
pùñöe
), 
GST_STATE_PLAYING
);

163 
h™dÀGSåómîMesßges
();

164 i‡(
	g°©us
 =
GST_STATE_CHANGE_ASYNC
)

167 
°©us
 = 
g°_ñemít_gë_°©e
(
GST_ELEMENT
(
pùñöe
), 
nuŒ±r
,ÇuŒ±r, 
GST_CLOCK_TIME_NONE
);

169 i‡(
	g°©us
 =
GST_STATE_CHANGE_FAILURE
)

171 
NVXIO_PRINT
("GStreamer: unableÅo startÖlayback");

172 
FöÆizeG°PùeLöe
();

174  
	gÁl£
;

179 i‡(!
upd©eC⁄figuøti⁄
(
nvvideosök
, 
nvvidc⁄v
, 
c⁄figuøti⁄
))

181 
FöÆizeG°PùeLöe
();

182  
	gÁl£
;

185 
	gíd
 = 
Ál£
;

187  
	gåue
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerOpenMAXFrameSourceImpl.hpp

29 #i‚de‡
GSTREAMEROPENMAXFRAMESOURCEIMPL_HPP


30 
	#GSTREAMEROPENMAXFRAMESOURCEIMPL_HPP


	)

32 #i‡
deföed
 
USE_GSTREAMER_OMX
 && deföed 
USE_GLES


34 
	~"GSåómîEGLSåómSökFømeSour˚Im∂.hµ
"

35 
	~"GSåómîBa£FømeSour˚Im∂.hµ
"

37 
«me•a˚
 
	gnvidüio


40 ˛as†
	cGSåómîO≥nMAXFømeSour˚Im∂
 :

41 
public
 
GSåómîEGLSåómSökFømeSour˚Im∂


43 
public
:

44 
ex∂icô
 
GSåómîO≥nMAXFømeSour˚Im∂
(c⁄° 
°d
::
°rög
 & 
∑th
);

46 
	g¥Ÿe˘ed
:

48 
G°Aut›lugSñe˘Resu…
 
autoPlugSñe˘
(
G°EÀmít
 *
bö
, 
G°Pad
 *
∑d
,

49 
G°C≠s
 *
ˇps
, 
G°EÀmítFa˘‹y
 *
Á˘‹y
,

50 
gpoöãr
 
u£r_d©a
);

52 
vútuÆ
 
boﬁ
 
InôülizeG°PùeLöe
();

54 c⁄° 
	g°d
::
°rög
 
fûeName
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerVideoFrameSourceImpl.cpp

29 #ifde‡
USE_GSTREAMER


31 
	~<mem‹y
>

32 
	~<m≠
>

34 
	~"GSåómîVideoFømeSour˚Im∂.hµ
"

36 
	~<g°/pbutûs/missög-∂ugös.h
>

37 
	~<g°/≠p/g°≠psök.h
>

40 
«me•a˚
 
	gnvidüio


43 
	gGSåómîVideoFømeSour˚Im∂
::
GSåómîVideoFømeSour˚Im∂
(c⁄° 
°d
::
°rög
 & 
∑th
):

44 
GSåómîBa£FømeSour˚Im∂
(
nvxio
::
FømeSour˚
::
VIDEO_SOURCE
, "GstreamerVideoFrameSource"),

45 
fûeName
(
∑th
)

47 #i‚de‡
USE_GSTREAMER_OMX


48 c⁄° 
	g°d
::
m≠
<
°d
::
°rög
, 
	gguöt
> 
	g„©uªs_li°
 =

50 { "omxm≥g2videodec", 
GST_RANK_NONE
 },

51 { "omxvp9dec", 
GST_RANK_NONE
 },

52 { "omxvp8dec", 
GST_RANK_NONE
 },

53 { "omxh265dec", 
GST_RANK_NONE
 },

54 { "omxh264dec", 
GST_RANK_NONE
 },

55 { "omxm≥g4videodec", 
GST_RANK_NONE
 },

58 
	g°d
::
unique_±r
<
G°EÀmítFa˘‹y
, 
	gGSåómîObje˘Dñëî
> 
	gÁ˘‹y
;

59 autÿ
	gp
 : 
„©uªs_li°
)

61 
Á˘‹y
.
ª£t
(
g°_ñemít_Á˘‹y_föd
(
p
.
fú°
.
c_°r
()));

62 i‡(
	gÁ˘‹y
)

64 
g°_∂ugö_„©uª_£t_ønk
(
GST_PLUGIN_FEATURE
(
Á˘‹y
.
gë
()), 
p
.
£c⁄d
);

70 
G°Aut›lugSñe˘Resu…
 
	gGSåómîVideoFømeSour˚Im∂
::
autoPlugSñe˘
(
G°EÀmít
 *, 
G°Pad
 *,

71 
G°C≠s
 * 
ˇps
, 
G°EÀmítFa˘‹y
 *, 
gpoöãr
)

73 
	g°d
::
unique_±r
<[], 
	gGlibDñëî
> 
ˇpsSå
(
g°_ˇps_to_°rög
(
ˇps
));

74 i‡(
°r°r
(
ˇpsSå
.
gë
(), "video"))

76  
	gGST_AUTOPLUG_SELECT_TRY
;

80  
	gGST_AUTOPLUG_SELECT_EXPOSE
;

84 
boﬁ
 
	gGSåómîVideoFømeSour˚Im∂
::
InôülizeG°PùeLöe
()

86 
G°SèãCh™geRëu∫
 
°©us
;

87 
	gíd
 = 
åue
;

89 
	g°d
::
°rög
 
uri
;

90 i‡(!
g°_uri_is_vÆid
(
fûeName
.
c_°r
()))

92 * 
	gªÆ
 = 
ªÆ∑th
(
fûeName
.
c_°r
(), 
nuŒ±r
);

94 i‡(!
	gªÆ
)

96 
NVXIO_PRINT
("C™'àªsﬁvê∑th \"%s\": %s", 
fûeName
.
c_°r
(), 
°ªº‹
(
î∫o
));

97  
	gÁl£
;

100 
	g°d
::
unique_±r
<[], 
	gGlibDñëî
> 
pUri
(
g_fûíame_to_uri
(
ªÆ
, 
nuŒ±r
,Çullptr));

101 
‰ì
(
ªÆ
);

102 
	guri
 = 
pUri
.
gë
();

106 
	guri
 = 
fûeName
;

109 
	gpùñöe
 = 
GST_PIPELINE
(
g°_pùñöe_√w
(
nuŒ±r
));

110 i‡(!
	gpùñöe
)

112 
NVXIO_PRINT
("Cannot create GstreamerÖipeline");

113  
	gÁl£
;

116 
	gbus
 = 
g°_pùñöe_gë_bus
(
GST_PIPELINE
 (
pùñöe
));

119 
G°Bö
 * 
	guriDecodeBö
 = 
GST_BIN
(
g°_ñemít_Á˘‹y_make
("uridecodebö", 
nuŒ±r
));

120 i‡(!
	guriDecodeBö
)

122 
NVXIO_PRINT
("Cannot create uridecodebin");

123 
FöÆizeG°PùeLöe
();

125  
	gÁl£
;

128 
g_obje˘_£t
(
G_OBJECT
(
uriDecodeBö
), "uri", 
uri
.
c_°r
(), 
nuŒ±r
);

129 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
GST_ELEMENT
(
uriDecodeBö
));

132 
G°EÀmít
 * 
	gcﬁ‹
 = 
g°_ñemít_Á˘‹y_make
(
COLOR_ELEM
, 
nuŒ±r
);

133 i‡(!
	gcﬁ‹
)

135 
NVXIO_PRINT
("C™nŸ cª©ê%†ñemít", 
COLOR_ELEM
);

136 
FöÆizeG°PùeLöe
();

138  
	gÁl£
;

141 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
cﬁ‹
);

144 
	gsök
 = 
g°_ñemít_Á˘‹y_make
("≠psök", 
nuŒ±r
);

145 i‡(!
	gsök
)

147 
NVXIO_PRINT
("Cannot createáppsinkÉlement");

148 
FöÆizeG°PùeLöe
();

150  
	gÁl£
;

153 #i‡
FULL_GST_VERSION
 >
VERSION_NUM
(1,7,2)

154 
g_obje˘_£t
(
GST_ELEMENT
(
sök
), "waô-⁄-eos", 
FALSE
, 
nuŒ±r
);

157 
g°_bö_add
(
GST_BIN
(
pùñöe
), 
sök
);

159 
g_sig«l_c⁄√˘
(
uriDecodeBö
, "aut›lug-£À˘", 
G_CALLBACK
(
GSåómîVideoFømeSour˚Im∂
::
autoPlugSñe˘
), 
nuŒ±r
);

160 
g_sig«l_c⁄√˘
(
uriDecodeBö
, "∑d-added", 
G_CALLBACK
(
GSåómîBa£FømeSour˚Im∂
::
√wG°ªamîPad
), 
cﬁ‹
);

163 i‡(!
g°_ñemít_lök
(
cﬁ‹
, 
sök
))

165 
NVXIO_PRINT
("GStreamer: cannotÜink color -> sink");

166 
FöÆizeG°PùeLöe
();

168  
	gÁl£
;

171 
g°_≠p_sök_£t_max_buf„rs
 (
GST_APP_SINK
(
sök
), 4);

172 
g°_≠p_sök_£t_dr›
 (
GST_APP_SINK
(
sök
), 
Ál£
);

173 
g°_≠p_sök_£t_emô_sig«ls
 (
GST_APP_SINK
(
sök
), 0);

175 #i‡
GST_VERSION_MAJOR
 == 0

176 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
	gˇps
;

178 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_U8
)

180 
ˇps
.
ª£t
(
g°_ˇps_√w_sim∂e
("video/x-raw-gray",

181 "bµ", 
G_TYPE_INT
, 8,

182 
nuŒ±r
));

184 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_RGB
)

186 
ˇps
.
ª£t
(
g°_ˇps_√w_sim∂e
("video/x-raw-rgb",

187 "bµ", 
G_TYPE_INT
, 24,

188 "ªd_mask", 
G_TYPE_INT
, 0xFF0000,

189 "gªí_mask", 
G_TYPE_INT
, 0x00FF00,

190 "blue_mask", 
G_TYPE_INT
, 0x0000FF,

191 
nuŒ±r
));

193 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ||

194 
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
)

196 
ˇps
.
ª£t
(
g°_ˇps_√w_sim∂e
("video/x-raw-rgb",

197 "dïth", 
G_TYPE_INT
, 32,

198 "bµ", 
G_TYPE_INT
, 32,

199 "ídü¬ess", 
G_TYPE_INT
, 4321,

200 "ªd_mask", 
G_TYPE_INT
, 0xFF000000,

201 "gªí_mask", 
G_TYPE_INT
, 0x00FF0000,

202 "blue_mask", 
G_TYPE_INT
, 0x0000FF00,

203 "Æpha_mask", 
G_TYPE_INT
, 0x000000FF,

204 
nuŒ±r
));

206 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

208 
ˇps
.
ª£t
(
g°_ˇps_√w_sim∂e
("video/x-raw-yuv",

209 "f‹m©", 
GST_TYPE_FOURCC
, 
GST_MAKE_FOURCC
 ('N', 'V', '1', '2'),

210 
nuŒ±r
));

213 
NVXIO_THROW_EXCEPTION
("Unsupported image format");

215 
	g°d
::
°rög
 
ˇps_°rög
("video/x-raw, format=(string){");

216 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_U8
)

217 
ˇps_°rög
 += "GRAY8";

218 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_RGB
)

219 
ˇps_°rög
 += "RGB";

220 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ||

221 
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
)

222 
ˇps_°rög
 += "RGBA";

223 i‡(
	gc⁄figuøti⁄
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

224 
ˇps_°rög
 += "NV12";

226 
NVXIO_THROW_EXCEPTION
("Unsupported image format");

228 
	gˇps_°rög
 += "};";

230 
	g°d
::
unique_±r
<
G°C≠s
, 
	gGSåómîObje˘Dñëî
> 
ˇps
(

231 
g°_ˇps_‰om_°rög
(
ˇps_°rög
.
c_°r
()));

233 
NVXIO_ASSERT
(
ˇps
);

234 
g°_≠p_sök_£t_ˇps
(
GST_APP_SINK
(
sök
), 
ˇps
.
gë
());

237 
g°_pùñöe_u£_˛ock
(
pùñöe
, 
nuŒ±r
);

239 
	g°©us
 = 
g°_ñemít_£t_°©e
(
GST_ELEMENT
(
pùñöe
), 
GST_STATE_PLAYING
);

240 
h™dÀGSåómîMesßges
();

241 i‡(
	g°©us
 =
GST_STATE_CHANGE_ASYNC
)

244 
°©us
 = 
g°_ñemít_gë_°©e
(
GST_ELEMENT
(
pùñöe
), 
nuŒ±r
,ÇuŒ±r, 
GST_CLOCK_TIME_NONE
);

246 i‡(
	g°©us
 =
GST_STATE_CHANGE_FAILURE
)

248 
NVXIO_PRINT
("GStreamer: unableÅo startÖlayback");

249 
FöÆizeG°PùeLöe
();

251  
	gÁl£
;

256 i‡(!
upd©eC⁄figuøti⁄
(
sök
, 
cﬁ‹
, 
c⁄figuøti⁄
))

259 #i‡
GST_VERSION_MAJOR
 == 1

260 
	gßm∂eFú°Føme
.
ª£t
(
g°_≠p_sök_puŒ_ßm∂e
(
GST_APP_SINK
(
sök
)));

262 i‡(!
	gßm∂eFú°Føme
)

264 
FöÆizeG°PùeLöe
();

265  
	gÁl£
;

268 
G°C≠s
* 
	gbuf„rC≠s
 = 
g°_ßm∂e_gë_ˇps
(
ßm∂eFú°Føme
.
gë
());

270 
göt
 
	gwidth
, 
	gheight
, 
	gÂs
, 
	gdïth
;

271 i‡(
exåa˘FømeP¨ams
(
c⁄figuøti⁄
, 
buf„rC≠s
, 
width
, 
height
,

272 
Âs
, 
dïth
Ë=
nvxio
::
FømeSour˚
::
CLOSED
 ||

273 
dïth
 == 0)

275 
FöÆizeG°PùeLöe
();

276  
	gÁl£
;

279 
	gc⁄figuøti⁄
.
	g‰ameWidth
 = 
width
;

280 
	gc⁄figuøti⁄
.
	g‰ameHeight
 = 
height
;

281 
	gc⁄figuøti⁄
.
	gÂs
 = 
Âs
;

285 
	gíd
 = 
Ál£
;

287  
	gåue
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerVideoFrameSourceImpl.hpp

29 #i‚de‡
GSTREAMERVIDEOFRAMESOURCEIMPL_HPP


30 
	#GSTREAMERVIDEOFRAMESOURCEIMPL_HPP


	)

32 #ifde‡
USE_GSTREAMER


34 
	~"FømeSour˚/GSåómî/GSåómîBa£FømeSour˚Im∂.hµ
"

36 
«me•a˚
 
	gnvidüio


39 ˛as†
	cGSåómîVideoFømeSour˚Im∂
 :

40 
public
 
GSåómîBa£FømeSour˚Im∂


42 
public
:

43 
ex∂icô
 
GSåómîVideoFømeSour˚Im∂
(c⁄° 
°d
::
°rög
 & 
∑th
);

45 
	g¥Ÿe˘ed
:

47 
G°Aut›lugSñe˘Resu…
 
autoPlugSñe˘
(
G°EÀmít
 * 
bö
, 
G°Pad
 * 
∑d
,

48 
G°C≠s
 * 
ˇps
, 
G°EÀmítFa˘‹y
 * 
Á˘‹y
,

49 
gpoöãr
 
u£r_d©a
);

51 
vútuÆ
 
boﬁ
 
InôülizeG°PùeLöe
();

53 c⁄° 
	g°d
::
°rög
 
fûeName
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaCSI10635CameraFrameSourceImpl.cpp

29 #ifde‡
USE_CSI_OV10635


31 
	~"Priv©e/LogUtûs.hµ
"

33 
	~"FømeSour˚/EGLAPIAc˚ss‹s.hµ
"

35 
	~<NVX/FømeSour˚.hµ
>

36 
	~<NVX/Aµliˇti⁄.hµ
>

37 
	~<NVX/C⁄figP¨£r.hµ
>

38 
	~<NVX/ProfûîR™ge.hµ
>

40 
	~<cuda_ru¡ime_≠i.h
>

42 
	~"FømeSour˚/NvMedü/NvMedüCSI10635CamîaFømeSour˚Im∂.hµ
"

43 
	~"FømeSour˚/NvMedü/NvMedüCamîaC⁄figP¨ams.hµ
"

45 
usög
 
«me•a˚
 
	gnvidüio
::
egl_≠i
;

47 
«me•a˚
 
	gnvidüio


50 
	gNvMedüCSI10635CamîaFømeSour˚Im∂
::
NvMedüCSI10635CamîaFømeSour˚Im∂
(c⁄° 
°d
::
°rög
 & 
c⁄figName
, 
numbî
) :

51 
FømeSour˚
(
nvxio
::FømeSour˚::
CAMERA_SOURCE
, "NvMediaCSI10635CameraFrameSource"),

52 
vxC⁄ãxt
()

54 
	gc⁄ãxt
 = 
nuŒ±r
;

55 
	gˇmîaNumbî
 = 
numbî
;

56 
	gc⁄figP©h
 = 
c⁄figName
;

59 
	g°d
::
°rög
 
NvMedüCSI10635CamîaFømeSour˚Im∂
::
∑r£CamîaC⁄fig
(c⁄° 
°d
::°rög& 
ˇmîaC⁄figFûe
,

60 
C≠tuªC⁄figP¨ams
& 
ˇ±uªC⁄figCﬁÀ˘i⁄
)

62 
	g°d
::
unique_±r
<
nvxio
::
C⁄figP¨£r
> 
ˇmîaC⁄figP¨£r
“vxio::
¸óãC⁄figP¨£r
());

64 
	gˇ±uªC⁄figCﬁÀ˘i⁄
.
	gi2cDevi˚
 = -1;

65 
	gˇ±uªC⁄figCﬁÀ˘i⁄
.
	gcsiL™es
 = 2;

67 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("ˇ±uª-«me", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
«me
));

68 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("ˇ±uª-des¸ùti⁄", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
des¸ùti⁄
));

69 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("bﬂrd", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
bﬂrd
));

70 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("öput_devi˚", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
öputDevi˚
));

71 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("öput_f‹m©", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
öputF‹m©
));

72 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("surÁ˚_f‹m©", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
surÁ˚F‹m©
));

73 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("ªsﬁuti⁄", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
ªsﬁuti⁄
));

74 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("csi_œ√s", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
csiL™es
));

75 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("öãrÁ˚", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
öãrÁ˚
));

76 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("embedded_löes_t›", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
embeddedD©aLöesT›
));

77 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("embedded_löes_bŸtom", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
embeddedD©aLöesBŸtom
));

78 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("i2c_devi˚", 
nvxio
::
O±i⁄H™dÀr
::
öãgî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
i2cDevi˚
));

79 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("de£rülizî_addªss", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
desAddr
));

81 
mem£t
(
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£rAddr
, 0, (captureConfigCollection.serAddr));

82 
mem£t
(
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£ns‹Addr
, 0, (captureConfigCollection.sensorAddr));

84 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("£rülizî_addªss", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
brdc°SîAddr
));

85 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("max9271_addªss_0", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£rAddr
[0]));

86 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("max9271_addªss_1", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£rAddr
[1]));

87 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("max9271_addªss_2", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£rAddr
[2]));

88 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("max9271_addªss_3", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£rAddr
[3]));

90 
	gˇ±uªC⁄figCﬁÀ˘i⁄
.
	gbrdc°Sís‹Addr
 = 0x30;

91 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("£ns‹_addªss", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
brdc°Sís‹Addr
));

92 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("£ns‹_addªss_0", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£ns‹Addr
[0]));

93 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("£ns‹_addªss_1", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£ns‹Addr
[1]));

94 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("£ns‹_addªss_2", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£ns‹Addr
[2]));

95 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("£ns‹_addªss_3", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£ns‹Addr
[3]));

97  
	gˇmîaC⁄figP¨£r
->
∑r£
(
ˇmîaC⁄figFûe
);

100 
boﬁ
 
	gNvMedüCSI10635CamîaFømeSour˚Im∂
::
›í
()

102 
nvxio
::
ProfûîR™ge
 
ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "FrameSource::open (NVXIO)");

104 
˛o£
();

106 
	g°d
::
m≠
<
°d
::
°rög
, 
	gC≠tuªC⁄figP¨ams
>::
ôî©‹
 
c⁄f
 = 
ˇmîaC⁄figCﬁÀ˘i⁄
.
föd
(
c⁄figP©h
);

107 i‡(
	gc⁄f
 !
ˇmîaC⁄figCﬁÀ˘i⁄
.
íd
())

109 
ˇ±uªC⁄figCﬁÀ˘i⁄
 = 
c⁄f
->
£c⁄d
;

110 
NVXIO_PRINT
("Prebuilt camera config from configÖreset is used ...");

114 
	gnvxio
::
Aµliˇti⁄
 &
≠p
 = 
nvxio
::Aµliˇti⁄::
gë
();

115 
	g°d
::
°rög
 
ˇmîaC⁄figFûe
 = 
≠p
.
födSam∂eFûeP©h
("nvxio/ˇmîas/" + 
c⁄figP©h
 + ".ini");

117 
	g°d
::
°rög
 
mesßge
 = 
∑r£CamîaC⁄fig
(
ˇmîaC⁄figFûe
, 
ˇ±uªC⁄figCﬁÀ˘i⁄
);

118 i‡(!
	gmesßge
.
em±y
())

120 
NVXIO_PRINT
("Eº‹: %s", 
mesßge
.
c_°r
());

121  
	gÁl£
;

125 i‡(
cudaFªe
(
nuŒ±r
Ë!
cudaSuc˚ss
)

127 
NVXIO_PRINT
("Error: FailedÅo initialize CUDA context");

128  
	gÁl£
;

131 i‡(
	gov10635
::
ImgC≠tuª_Inô
(&
c⁄ãxt
, 
ˇ±uªC⁄figCﬁÀ˘i⁄
, 
ˇmîaNumbî
Ë!
NVMEDIA_STATUS_OK
)

133 
NVXIO_PRINT
("Error: FailedÅo Initialize ImgCapture");

134  
	gÁl£
;

138 
	gc⁄figuøti⁄
.
	g‰ameWidth
 = 
c⁄ãxt
->
ouçutWidth
;

139 
	gc⁄figuøti⁄
.
	g‰ameHeight
 = 
c⁄ãxt
->
ouçutHeight
;

140 
	gc⁄figuøti⁄
.
	gÂs
 = 30;

141 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
NVXCU_DF_IMAGE_RGBX
;

143  
	gåue
;

146 
c⁄vîtFøme
(c⁄° 
image_t
 & 
image
,

147 c⁄° 
FømeSour˚
::
P¨amëîs
 & 
c⁄figuøti⁄
,

148 
width
, 
height
,

149 
boﬁ
 
u£Pôch
, 
size_t
 
pôch
,

150 
dïth
, * 
decodedPå
,

151 
boﬁ
 
is_cuda
,

152 *& 
devMem
,

153 
size_t
 & 
devMemPôch
);

155 
vx_image
 
wøpNVXIOImage
(
vx_c⁄ãxt
 
c⁄ãxt
,

156 c⁄° 
image_t
 & 
image
);

158 
	gFømeSour˚
::
FømeSètus
 
NvMedüCSI10635CamîaFømeSour˚Im∂
::
„tch
(c⁄° 
image_t
 & 
image
,

159 
uöt32_t
 
timeout
 )

161 
	gnvxio
::
ProfûîR™ge
 
ønge
(
nvxio
::
COLOR_ARGB_FUSCHIA
, "FrameSource::fetch (NVXIO)");

163 i‡(
	gc⁄ãxt
->
	gquô
)

165 
˛o£
();

166  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
CLOSED
;

169 i‡(
	gcudaSuc˚ss
 !
cudaFªe
(
nuŒ±r
))

171 
NVXIO_PRINT
("FailedÅo initialize CUDA context");

172  
	gnvxio
::
FømeSour˚
::
CLOSED
;

175 
CUªsu…
 
	gcuSètus
;

176 
CUgøphicsResour˚
 
	gcudaResour˚
;

178 
EGLöt
 
	g°ªamSèã
 = 0;

179 i‡(!
eglQuîySåómKHR
(
c⁄ãxt
->
eglDi•œy
, c⁄ãxt->
eglSåóm
, 
EGL_STREAM_STATE_KHR
, &
°ªamSèã
))

181 
NVXIO_PRINT
("Cuda consumer,ÉglQueryStreamKHR EGL_STREAM_STATE_KHR failed");

182  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
CLOSED
;

185 i‡(
	g°ªamSèã
 =
EGL_STREAM_STATE_DISCONNECTED_KHR
)

187 
NVXIO_PRINT
("CUDA Consumer: - EGL_STREAM_STATE_DISCONNECTED_KHRÑeceived");

188  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
CLOSED
;

191 i‡(
	g°ªamSèã
 !
EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR
)

193  
nvxio
::
FømeSour˚
::
TIMEOUT
;

196 
	gcuSètus
 = 
cuEGLSåómC⁄sumîAcquúeFøme
(&
c⁄ãxt
->
cudaC⁄√˘i⁄
, &
cudaResour˚
, 
nuŒ±r
, 
timeout
);

197 i‡(
	gcuSètus
 !
CUDA_SUCCESS
)

199 
NVXIO_PRINT
("Cud®AcquúêÁûed cuSètus=%d", 
cuSètus
);

201  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
TIMEOUT
;

204 
CUeglFøme
 
	geglFøme
;

205 
	gcuSètus
 = 
cuGøphicsResour˚GëM≠≥dEglFøme
(&
eglFøme
, 
cudaResour˚
, 0, 0);

206 i‡(
	gcuSètus
 !
CUDA_SUCCESS
)

208 c⁄° * 
îr‹
;

209 
cuGëEº‹Såög
(
cuSètus
, &
îr‹
);

210 
NVXIO_PRINT
("Cud®gëÑesour˚ faûed wôhÉº‹: \"%s\"", 
îr‹
);

211  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
CLOSED
;

214 
NVXIO_ASSERT
(
eglFøme
.
width
 =
c⁄figuøti⁄
.
‰ameWidth
);

215 
NVXIO_ASSERT
(
eglFøme
.
height
 =
c⁄figuøti⁄
.
‰ameHeight
);

217 
NVXIO_ASSERT
(
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
);

218 
NVXIO_ASSERT
(
eglFøme
.
pôch
 =(”glFøme.
width
 * 4 + 3) >> 2) << 2);

219 
c⁄vîtFøme
(
image
,

220 
c⁄figuøti⁄
,

221 
eglFøme
.
width
,ÉglFøme.
height
,

222 
åue
, 
eglFøme
.
pôch
,

223 4, 
eglFøme
.
‰ame
.
pPôch
[0],

224 
åue
,

225 
devMem
,

226 
devMemPôch
);

227 
NVXIO_ASSERT
(
devMem
 =
nuŒ±r
 && 
devMemPôch
 == 0);

229 
	gcuSètus
 = 
cuEGLSåómC⁄sumîRñó£Føme
(&
c⁄ãxt
->
cudaC⁄√˘i⁄
, 
cudaResour˚
, 
nuŒ±r
);

230 i‡(
	gcuSètus
 !
CUDA_SUCCESS
)

232 
NVXIO_PRINT
("FailedÅoÑelease EGL frame");

233 
˛o£
();

234  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
CLOSED
;

237  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
OK
;

240 
	gFømeSour˚
::
P¨amëîs
 
NvMedüCSI10635CamîaFømeSour˚Im∂
::
gëC⁄figuøti⁄
()

242  
c⁄figuøti⁄
;

245 
boﬁ
 
	gNvMedüCSI10635CamîaFømeSour˚Im∂
::
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
)

247 
NVXIO_ASSERT
(!
c⁄ãxt
 || c⁄ãxt->
quô
);

249 
boﬁ
 
	gªsu…
 = 
åue
;

252 i‡(
	g∑øms
.
	g‰ameWidth
 !(
uöt32_t
)-1)

253 
ªsu…
 = 
Ál£
;

254 i‡(
	g∑øms
.
	g‰ameHeight
 !(
uöt32_t
)-1)

255 
ªsu…
 = 
Ál£
;

256 i‡(
	g∑øms
.
	gÂs
 !(
uöt32_t
)-1)

257 
ªsu…
 = 
Ál£
;

259 
NVXIO_ASSERT
((
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
) ||

260 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
) ||

261 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
) ||

262 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
)||

263 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
));

265 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
∑øms
.
f‹m©
;

267  
	gªsu…
;

270 
	gNvMedüCSI10635CamîaFømeSour˚Im∂
::
˛o£
()

272 
nvxio
::
ProfûîR™ge
 
ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "FrameSource::close (NVXIO)");

274 i‡(
	gc⁄ãxt
)

276 
	gov10635
::
ImgC≠tuª_Föish
(
c⁄ãxt
);

277 
	gc⁄ãxt
 = 
nuŒ±r
;

281 
	gNvMedüCSI10635CamîaFømeSour˚Im∂
::~
NvMedüCSI10635CamîaFømeSour˚Im∂
()

283 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaCSI10635CameraFrameSourceImpl.hpp

29 #i‚de‡
NVMEDIA_CSI10635CAMERAFRAMESOURCEIMPL_HPP


30 
	#NVMEDIA_CSI10635CAMERAFRAMESOURCEIMPL_HPP


	)

32 #ifde‡
USE_CSI_OV10635


34 
	~<VX/vx.h
>

36 
	~"FømeSour˚/FømeSour˚Im∂.hµ
"

38 
	~"FømeSour˚/NvMedü/OV10635/ImageC≠tuª.hµ
"

40 
«me•a˚
 
	gnvidüio


43 ˛as†
	cNvMedüCSI10635CamîaFømeSour˚Im∂
 :

44 
public
 
FømeSour˚


46 
public
:

47 
NvMedüCSI10635CamîaFømeSour˚Im∂
(c⁄° 
°d
::
°rög
 & 
c⁄figName
, 
numbî
);

48 
vútuÆ
 
boﬁ
 
›í
();

49 
vútuÆ
 
FømeSètus
 
„tch
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
timeout
 = 5u );

50 
vútuÆ
 
P¨amëîs
 
gëC⁄figuøti⁄
();

51 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
P¨amëîs
& 
∑øms
);

52 
vútuÆ
 
˛o£
();

53 
	gvútuÆ
 ~
NvMedüCSI10635CamîaFømeSour˚Im∂
();

55 
	g¥Ÿe˘ed
:

56 c⁄° * 
deÁu…CamîaC⁄fig
() const;

57 
	g°d
::
°rög
 
∑r£CamîaC⁄fig
(c⁄° 
°d
::°rög& 
ˇmîaC⁄figFûe
, 
C≠tuªC⁄figP¨ams
& 
ˇ±uªC⁄figCﬁÀ˘i⁄
);

60 
C≠tuªC⁄figP¨ams
 
	gˇ±uªC⁄figCﬁÀ˘i⁄
;

61 
	gov10635
::
ImgC≠tuª
 * 
c⁄ãxt
;

62 
	gˇmîaNumbî
;

63 
	g°d
::
°rög
 
c⁄figP©h
;

65 
P¨amëîs
 
	gc⁄figuøti⁄
;

66 
	govxio
::
C⁄ãxtGu¨d
 
vxC⁄ãxt
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaCSI10640CameraFrameSourceImpl.cpp

29 #ifde‡
USE_CSI_OV10640


31 
	~"Priv©e/LogUtûs.hµ
"

33 
	~"FømeSour˚/EGLAPIAc˚ss‹s.hµ
"

35 
	~<NVX/FømeSour˚.hµ
>

36 
	~<NVX/Aµliˇti⁄.hµ
>

37 
	~<NVX/C⁄figP¨£r.hµ
>

38 
	~<NVX/ProfûîR™ge.hµ
>

40 
	~<cuda_ru¡ime_≠i.h
>

41 
	~<c°rög
>

43 
	~"FømeSour˚/NvMedü/NvMedüCSI10640CamîaFømeSour˚Im∂.hµ
"

46 
usög
 
«me•a˚
 
	gnvidüio
::
egl_≠i
;

48 
«me•a˚
 
	gnvidüio


51 
	gNvMedüCSI10640CamîaFømeSour˚Im∂
::
NvMedüCSI10640CamîaFømeSour˚Im∂
(c⁄° 
°d
::
°rög
 & 
c⁄figName
, 
numbî
) :

52 
FømeSour˚
(
nvxio
::FømeSour˚::
CAMERA_SOURCE
, "NvMediaCSI10640CameraFrameSource"),

53 
vxC⁄ãxt
()

55 
	gnv12Føme
 = 
nuŒ±r
;

57 
	g˘x
 = 
nuŒ±r
;

58 
	göãr›Ctx
 = 
nuŒ±r
;

60 
	gˇmîaNumbî
 = 
numbî
;

61 
	gc⁄figP©h
 = 
c⁄figName
;

64 
	g°d
::
°rög
 
NvMedüCSI10640CamîaFømeSour˚Im∂
::
∑r£CamîaC⁄fig
(c⁄° 
°d
::°rög& 
ˇmîaC⁄figFûe
,

65 
C≠tuªC⁄figP¨ams
& 
ˇ±uªC⁄figCﬁÀ˘i⁄
)

67 
	g°d
::
unique_±r
<
nvxio
::
C⁄figP¨£r
> 
ˇmîaC⁄figP¨£r
“vxio::
¸óãC⁄figP¨£r
());

69 
	gˇ±uªC⁄figCﬁÀ˘i⁄
.
	gi2cDevi˚
 = -1;

70 
	gˇ±uªC⁄figCﬁÀ˘i⁄
.
	gcsiL™es
 = 2;

72 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("ˇ±uª-«me", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
«me
));

73 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("ˇ±uª-des¸ùti⁄", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
des¸ùti⁄
));

74 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("bﬂrd", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
bﬂrd
));

75 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("öput_devi˚", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
öputDevi˚
));

76 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("öput_f‹m©", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
öputF‹m©
));

77 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("surÁ˚_f‹m©", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
surÁ˚F‹m©
));

78 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("ªsﬁuti⁄", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
ªsﬁuti⁄
));

79 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("csi_œ√s", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
csiL™es
));

80 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("öãrÁ˚", 
nvxio
::
O±i⁄H™dÀr
::
°rög
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
öãrÁ˚
));

81 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("embedded_löes_t›", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
embeddedD©aLöesT›
));

82 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("embedded_löes_bŸtom", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
embeddedD©aLöesBŸtom
));

83 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("i2c_devi˚", 
nvxio
::
O±i⁄H™dÀr
::
öãgî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
i2cDevi˚
));

84 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("de£rülizî_addªss", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
desAddr
));

86 
mem£t
(
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£rAddr
, 0, (captureConfigCollection.serAddr));

87 
mem£t
(
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£ns‹Addr
, 0, (captureConfigCollection.sensorAddr));

89 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("£rülizî_addªss", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
brdc°SîAddr
));

90 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("max9271_addªss_0", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£rAddr
[0]));

91 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("max9271_addªss_1", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£rAddr
[1]));

92 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("max9271_addªss_2", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£rAddr
[2]));

93 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("max9271_addªss_3", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£rAddr
[3]));

95 
	gˇ±uªC⁄figCﬁÀ˘i⁄
.
	gbrdc°Sís‹Addr
 = 0x30;

96 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("£ns‹_addªss", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
brdc°Sís‹Addr
));

97 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("£ns‹_addªss_0", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£ns‹Addr
[0]));

98 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("£ns‹_addªss_1", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£ns‹Addr
[1]));

99 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("£ns‹_addªss_2", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£ns‹Addr
[2]));

100 
	gˇmîaC⁄figP¨£r
->
addP¨amëî
("£ns‹_addªss_3", 
nvxio
::
O±i⁄H™dÀr
::
unsig√dI¡egî
(&
ˇ±uªC⁄figCﬁÀ˘i⁄
.
£ns‹Addr
[3]));

102  
	gˇmîaC⁄figP¨£r
->
∑r£
(
ˇmîaC⁄figFûe
);

105 
boﬁ
 
	gNvMedüCSI10640CamîaFømeSour˚Im∂
::
›í
()

107 
nvxio
::
ProfûîR™ge
 
ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "FrameSource::open (NVXIO)");

109 
˛o£
();

111 
	g°d
::
m≠
<
°d
::
°rög
, 
	gC≠tuªC⁄figP¨ams
>::
ôî©‹
 
c⁄f
 = 
ˇmîaC⁄figCﬁÀ˘i⁄
.
föd
(
c⁄figP©h
);

112 i‡(
	gc⁄f
 !
ˇmîaC⁄figCﬁÀ˘i⁄
.
íd
())

114 
ˇ±uªC⁄figCﬁÀ˘i⁄
 = 
c⁄f
->
£c⁄d
;

115 
NVXIO_PRINT
("Prebuilt camera config from configÖreset is used ...");

119 
	gnvxio
::
Aµliˇti⁄
 &
≠p
 = 
nvxio
::Aµliˇti⁄::
gë
();

120 
	g°d
::
°rög
 
ˇmîaC⁄figFûe
 = 
≠p
.
födSam∂eFûeP©h
("nvxio/ˇmîas/" + 
c⁄figP©h
 + ".ini");

122 
	g°d
::
°rög
 
mesßge
 = 
∑r£CamîaC⁄fig
(
ˇmîaC⁄figFûe
, 
ˇ±uªC⁄figCﬁÀ˘i⁄
);

123 i‡(!
	gmesßge
.
em±y
())

125 
NVXIO_PRINT
("Eº‹: %s", 
mesßge
.
c_°r
());

126  
	gÁl£
;

130 i‡(
cudaFªe
(
nuŒ±r
Ë!
cudaSuc˚ss
)

132 
NVXIO_PRINT
("Error: FailedÅo initialize CUDA context");

133  
	gÁl£
;

137 
	g˘x
 = 
√w
 
IPPCtx
;

138 
	g˘x
->
	gimagesNum
 = 
ˇmîaNumbî
;

139 
	g˘x
->
	gùpM™agî
 = 
nuŒ±r
;

140 
	g˘x
->
	gextImgDevi˚
 = 
nuŒ±r
;

141 
	g˘x
->
	gdevi˚
 = 
nuŒ±r
;

142 
	g°d
::
mem£t
(
˘x
->
ùp
, 0, (
NvMedüIPPPùñöe
 *Ë* 
NVMEDIA_MAX_PIPELINES_PER_MANAGER
);

144 
	göãr›Ctx
 = 
√w
 
I¡î›C⁄ãxt
;

145 
	g°d
::
mem£t
(
öãr›Ctx
, 0, (
I¡î›C⁄ãxt
));

146 
	göãr›Ctx
->
	g¥odu˚rExôed
 = 
NVMEDIA_TRUE
;

148 i‡(
IsFaûed
(
IPPInô
(
˘x
, 
ˇ±uªC⁄figCﬁÀ˘i⁄
)))

150 
NVXIO_PRINT
("Error: FailedÅo Initialize IPPInit");

151 
˛o£
();

152  
	gÁl£
;

155 i‡(
IsFaûed
(
I¡î›Inô
(
öãr›Ctx
, 
˘x
)))

157 
NVXIO_PRINT
("Error: FailedÅo Initialize InteropInit");

158 
˛o£
();

159  
	gÁl£
;

162 if(
IsFaûed
(
I¡î›Proc
(
öãr›Ctx
)))

164 
NVXIO_PRINT
("Error: FailedÅo start InteropProc");

165 
˛o£
();

166  
	gÁl£
;

169 if(
IsFaûed
(
IPPSèπ
(
˘x
)))

171 
NVXIO_PRINT
("Error: FailedÅo start IPPStart");

172 
˛o£
();

173  
	gÁl£
;

177 
	gc⁄figuøti⁄
.
	g‰ameWidth
 = 
˘x
->
öputWidth
;

178 
	gc⁄figuøti⁄
.
	g‰ameHeight
 = 
˘x
->
öputHeight
;

179 
	gc⁄figuøti⁄
.
	gÂs
 = 30u;

180 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
NVXCU_DF_IMAGE_NV12
;

182 
	gnv12Føme
 = 
vxCª©eImage
(
vxC⁄ãxt
, 
˘x
->
öputWidth
, ctx->
öputHeight
, 
VX_DF_IMAGE_NV12
);

183 
NVXIO_CHECK_REFERENCE
(
nv12Føme
);

185  
	gåue
;

188 
vx_image
 
wøpNVXIOImage
(
vx_c⁄ãxt
 
c⁄ãxt
,

189 c⁄° 
image_t
 & 
image
);

191 
	gFømeSour˚
::
FømeSètus
 
NvMedüCSI10640CamîaFømeSour˚Im∂
::
„tch
(c⁄° 
image_t
 & 
image
,

192 
uöt32_t
 )

194 
	gnvxio
::
ProfûîR™ge
 
ønge
(
nvxio
::
COLOR_ARGB_FUSCHIA
, "FrameSource::fetch (NVXIO)");

196 i‡(!
	g˘x
 || ctx->
	gquô
)

198 
˛o£
();

199  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
CLOSED
;

202 i‡(
	gcudaSuc˚ss
 !
cudaFªe
(
nuŒ±r
))

204 
NVXIO_PRINT
("FailedÅo initialize CUDA context");

206  
	gnvxio
::
FømeSour˚
::
CLOSED
;

209 
vx_image
 
	gimage_ªf
 = 
wøpNVXIOImage
(
vxC⁄ãxt
, 
image
);

211 
nvxcu_df_image_e
 
	g‰ameF‹m©
 = 
image
.
f‹m©
;

212 
vx_image
 
	gw‹kögImage
 = 
‰ameF‹m©
 =
NVXCU_DF_IMAGE_NV12
 ? 
image_ªf
 : 
nv12Føme
;

214 
vx_uöt32
 
	gi
 = 0; i < 
	g˘x
->
	gimagesNum
; ++i)

216 
CUgøphicsResour˚
 
	gcudaResour˚
 = 
nuŒ±r
;

219 
EGLöt
 
	g°ªamSèã
 = 0;

223 i‡(!
eglQuîySåómKHR
(
˘x
->
eglDi•œy
, ctx->
eglSåóm
[
i
], 
EGL_STREAM_STATE_KHR
, &
°ªamSèã
))

225 
NVXIO_PRINT
("Cuda consumer,ÉglQueryStreamKHR EGL_STREAM_STATE_KHR failed");

226 
˛o£
();

228  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
CLOSED
;

231 i‡(
	g°ªamSèã
 =
EGL_STREAM_STATE_DISCONNECTED_KHR
)

233 
NVXIO_PRINT
("CUDA Consumer: - EGL_STREAM_STATE_DISCONNECTED_KHRÑeceived");

234 
˛o£
();

236  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
CLOSED
;

239 i‡(
	g°ªamSèã
 =
EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR
)

242 
u¶ìp
(1000);

246 
NVXIO_ASSERT
–
cuEGLSåómC⁄sumîAcquúeFøme
(
˘x
->
cudaC⁄√˘i⁄
 + 
i
, &
cudaResour˚
, 
nuŒ±r
, 33000Ë=
CUDA_SUCCESS
 );

249 
CUeglFøme
 
	gcudaEgl
;

250 
NVXIO_ASSERT
–
cuGøphicsResour˚GëM≠≥dEglFøme
(&
cudaEgl
, 
cudaResour˚
, 0, 0Ë=
CUDA_SUCCESS
 );

252 
NVXIO_ASSERT
(
cudaEgl
.
‰ameTy≥
 =
CU_EGL_FRAME_TYPE_ARRAY
);

253 
NVXIO_ASSERT
(
cudaEgl
.
cuF‹m©
 =
CU_AD_FORMAT_UNSIGNED_INT8
);

254 
NVXIO_ASSERT
(
cudaEgl
.
eglCﬁ‹F‹m©
 =
CU_EGL_COLOR_FORMAT_YUV420_SEMIPLANAR
);

255 
NVXIO_ASSERT
(
cudaEgl
.
∂™eCou¡
 == 2);

257 
NVXIO_ASSERT
(
cudaEgl
.
height
 =
c⁄figuøti⁄
.
‰ameHeight
);

258 
NVXIO_ASSERT
(
cudaEgl
.
width
 * 
˘x
->
imagesNum
 =
c⁄figuøti⁄
.
‰ameWidth
);

261 
vx_ª˘™gÀ_t
 
	gª˘
 = { };

263 
	gª˘
.
	g°¨t_x
 = 
cudaEgl
.
width
 * 
i
;

264 
	gª˘
.
	gíd_x
 = 
cudaEgl
.
width
 * (
i
 + 1);

265 
	gª˘
.
	g°¨t_y
 = 0;

266 
	gª˘
.
	gíd_y
 = 
cudaEgl
.
height
;

270 
vx_imagï©ch_addªssög_t
 
	gaddr
;

271 *
	g±r
;

272 
vx_m≠_id
 
	gm≠_id
;

273 
NVXIO_SAFE_CALL
–
vxM≠ImageP©ch
(
w‹kögImage
, &
ª˘
, 0, &
m≠_id
, &
addr
, &
±r
, 
VX_WRITE_ONLY
, 
NVX_MEMORY_TYPE_CUDA
, 0) );

275 
cudaSåóm_t
 
	g°ªam
 = 
nuŒ±r
;

276 
NVXIO_ASSERT
–
cudaMem˝y2DFromAºayAsync
(
±r
, 
addr
.
°ride_y
,

277 (c⁄° 
cudaAºay
 *Ë
cudaEgl
.
‰ame
.
pAºay
[0],

279 
cudaEgl
.
width
 * (
vx_uöt8
), 
addr
.
dim_y
,

280 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
Ë=
cudaSuc˚ss
 );

282 
NVXIO_SAFE_CALL
–
vxUnm≠ImageP©ch
(
w‹kögImage
, 
m≠_id
) );

286 
vx_ª˘™gÀ_t
 
	guv_ª˘
 = { 
ª˘
.
°¨t_x
 >> 1,Ñe˘.
°¨t_y
 >> 1,

287 
ª˘
.
íd_x
 >> 1,Ñe˘.
íd_y
 >> 1 };

289 
NVXIO_SAFE_CALL
–
vxM≠ImageP©ch
(
w‹kögImage
, &
uv_ª˘
, 1, &
m≠_id
, &
addr
, &
±r
, 
VX_WRITE_ONLY
, 
NVX_MEMORY_TYPE_CUDA
, 0) );

291 
NVXIO_ASSERT
–(
cudaMem˝y2DFromAºayAsync
(
±r
, 
addr
.
°ride_y
,

292 (c⁄° 
cudaAºay
 *)
cudaEgl
.
‰ame
.
pAºay
[1],

294 (
cudaEgl
.
width
 >> 1Ë* (
vx_uöt16
), 
addr
.
dim_y
 >> 1,

295 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
Ë=
cudaSuc˚ss
) );

297 
NVXIO_SAFE_CALL
–
vxUnm≠ImageP©ch
(
w‹kögImage
, 
m≠_id
) );

299 
NVXIO_ASSERT
–
cudaSåómSynchr⁄ize
(
°ªam
Ë=
cudaSuc˚ss
 );

302 
NVXIO_ASSERT
–
cuEGLSåómC⁄sumîRñó£Føme
(
˘x
->
cudaC⁄√˘i⁄
 + 
i
, 
cudaResour˚
, 
nuŒ±r
Ë=
CUDA_SUCCESS
 );

306 i‡(
	g‰ameF‹m©
 !
NVXCU_DF_IMAGE_NV12
)

308 
NVXIO_SAFE_CALL
–
vxuCﬁ‹C⁄vît
(
vxC⁄ãxt
, 
nv12Føme
, 
image_ªf
) );

311 
NVXIO_SAFE_CALL
–
vxRñó£Image
(&
image_ªf
) );

313  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
OK
;

316 
	gFømeSour˚
::
P¨amëîs
 
NvMedüCSI10640CamîaFømeSour˚Im∂
::
gëC⁄figuøti⁄
()

318  
c⁄figuøti⁄
;

321 
boﬁ
 
	gNvMedüCSI10640CamîaFømeSour˚Im∂
::
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
)

323 
NVXIO_ASSERT
(!
˘x
 || ctx->
quô
);

325 
boﬁ
 
	gªsu…
 = 
åue
;

328 i‡(
	g∑øms
.
	g‰ameWidth
 !(
uöt32_t
)-1)

329 
ªsu…
 = 
Ál£
;

330 i‡(
	g∑øms
.
	g‰ameHeight
 !(
uöt32_t
)-1)

331 
ªsu…
 = 
Ál£
;

332 i‡(
	g∑øms
.
	gÂs
 !(
uöt32_t
)-1)

333 
ªsu…
 = 
Ál£
;

335 
NVXIO_ASSERT
((
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
) ||

336 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
) ||

337 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
) ||

338 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
)||

339 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
));

341 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
∑øms
.
f‹m©
;

343  
	gªsu…
;

346 
	gNvMedüCSI10640CamîaFømeSour˚Im∂
::
˛o£
()

348 
nvxio
::
ProfûîR™ge
 
ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "FrameSource::close (NVXIO)");

350 i‡(
	gnv12Føme
)

352 
vxRñó£Image
(&
nv12Føme
);

353 
	gnv12Føme
 = 
nuŒ±r
;

356 i‡(
	g˘x
)

358 
	g˘x
->
	gquô
 = 
NVMEDIA_TRUE
;

360 i‡(
IsFaûed
(
IPPSt›
(
˘x
)))

362 
NVXIO_PRINT
("Error: FailedÅo stop IPPStop");

365 i‡(
	göãr›Ctx
)

367 
I¡î›Föi
(
öãr›Ctx
);

369 
dñëe
 
	göãr›Ctx
;

370 
	göãr›Ctx
 = 
nuŒ±r
;

373 
IPPFöi
(
˘x
);

375 
dñëe
 
	g˘x
;

376 
	g˘x
 = 
nuŒ±r
;

380 
	gNvMedüCSI10640CamîaFømeSour˚Im∂
::~
NvMedüCSI10640CamîaFømeSour˚Im∂
()

382 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaCSI10640CameraFrameSourceImpl.hpp

29 #i‚de‡
NVMEDIA_CSI10640CAMERAFRAMESOURCEIMPL_HPP


30 
	#NVMEDIA_CSI10640CAMERAFRAMESOURCEIMPL_HPP


	)

32 #ifde‡
USE_CSI_OV10640


34 
	~<VX/vx.h
>

36 
	~"FømeSour˚/FømeSour˚Im∂.hµ
"

38 
	~"FømeSour˚/NvMedü/OV10640/öãr›.hµ
"

40 
«me•a˚
 
	gnvidüio


43 ˛as†
	cNvMedüCSI10640CamîaFømeSour˚Im∂
 :

44 
public
 
FømeSour˚


46 
public
:

47 
NvMedüCSI10640CamîaFømeSour˚Im∂
(c⁄° 
°d
::
°rög
 & 
c⁄figName
, 
numbî
);

48 
vútuÆ
 
boﬁ
 
›í
();

49 
vútuÆ
 
FømeSètus
 
„tch
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
timeout
 = 5u );

50 
vútuÆ
 
P¨amëîs
 
gëC⁄figuøti⁄
();

51 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
P¨amëîs
& 
∑øms
);

52 
vútuÆ
 
˛o£
();

53 
	gvútuÆ
 ~
NvMedüCSI10640CamîaFømeSour˚Im∂
();

55 
	g¥Ÿe˘ed
:

56 c⁄° * 
deÁu…CamîaC⁄fig
() const;

57 
	g°d
::
°rög
 
∑r£CamîaC⁄fig
(c⁄° 
°d
::°rög& 
ˇmîaC⁄figFûe
, 
C≠tuªC⁄figP¨ams
& 
ˇ±uªC⁄figCﬁÀ˘i⁄
);

60 
C≠tuªC⁄figP¨ams
 
	gˇ±uªC⁄figCﬁÀ˘i⁄
;

61 
IPPCtx
 * 
	g˘x
;

62 
I¡î›C⁄ãxt
 * 
	göãr›Ctx
;

64 
	gˇmîaNumbî
;

65 
	g°d
::
°rög
 
c⁄figP©h
;

67 
P¨amëîs
 
	gc⁄figuøti⁄
;

68 
	govxio
::
C⁄ãxtGu¨d
 
vxC⁄ãxt
;

70 
vx_image
 
	gnv12Føme
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaCameraConfigParams.hpp

29 #i‚de‡
NVMEDIA_CAMERA_CONFIG_PARAMS_HPP


30 
	#NVMEDIA_CAMERA_CONFIG_PARAMS_HPP


	)

32 #i‡
deföed
 
USE_CSI_OV10635
 || deföed 
USE_CSI_OV10640


34 
	~<°rög
>

35 
	~<m≠
>

36 
	~<c°rög
>

38 
	~<nvcomm⁄.h
>

39 
	~<nvmedü_image.h
>

41 
	sC≠tuªC⁄figP¨ams


43 
	m°d
::
°rög
 
«me
;

44 
	m°d
::
°rög
 
des¸ùti⁄
;

45 
	m°d
::
°rög
 
bﬂrd
;

46 
	m°d
::
°rög
 
öputDevi˚
;

47 
	m°d
::
°rög
 
öputF‹m©
;

48 
	m°d
::
°rög
 
surÁ˚F‹m©
;

49 
	m°d
::
°rög
 
ªsﬁuti⁄
;

50 
	m°d
::
°rög
 
öãrÁ˚
;

51 
	mi2cDevi˚
;

52 
NvU32
 
	mcsiL™es
;

53 
NvU32
 
	membeddedD©aLöesT›
;

54 
NvU32
 
	membeddedD©aLöesBŸtom
;

55 
NvU32
 
	mdesAddr
;

56 
NvU32
 
	mbrdc°SîAddr
;

57 
NvU32
 
	m£rAddr
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

58 
NvU32
 
	mbrdc°Sís‹Addr
;

59 
NvU32
 
	m£ns‹Addr
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

61 
C≠tuªC⁄figP¨ams
()

63 
	mi2cDevi˚
 = 0;

65 
	mcsiL™es
 = 0u;

66 
	membeddedD©aLöesT›
 = 0u;

67 
	membeddedD©aLöesBŸtom
 = 0u;

68 
	mdesAddr
 = 0u;

69 
	mbrdc°Sís‹Addr
 = 0u;

71 
	m°d
::
mem£t
(
£ns‹Addr
, 0, (sensorAddr));

72 
	m°d
::
mem£t
(
£rAddr
, 0, (serAddr));

77 
°d
::
m≠
<°d::
°rög
, 
C≠tuªC⁄figP¨ams
> 
ˇmîaC⁄figCﬁÀ˘i⁄
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaVideoFrameSourceImpl.cpp

29 #ifde‡
USE_NVMEDIA


31 
	~"Priv©e/LogUtûs.hµ
"

33 
	~<NVX/Aµliˇti⁄.hµ
>

34 
	~<NVX/ProfûîR™ge.hµ
>

36 
	~"FømeSour˚/NvMedü/NvMedüVideoFømeSour˚Im∂.hµ
"

37 
	~"FømeSour˚/EGLAPIAc˚ss‹s.hµ
"

39 
	#MAX_ATTRIB
 31

	)

40 
	#READ_SIZE
 (32*1024)

	)

41 
	#COPYFIELD
(
a
, 
b
, 
fõld
Ë◊)->fõld = (b)->
	)
field

43 
usög
 
«me•a˚
 
	gnvidüio
::
egl_≠i
;

45 
	$SëP¨amsH264
(
NVDPi˘uªD©a
 *
pd
, 
NvMedüPi˘uªInfo
 *
pi˘uªInfo
)

47 
NVH264Pi˘uªD©a
 *
h264D©a
 = &
pd
->
CodecS≥cific
.
h264
;

48 
NvMedüPi˘uªInfoH264
 *
h264Pi˘uªInfo
 = (NvMedüPi˘uªInfoH264 *)
pi˘uªInfo
;

50 
h264Pi˘uªInfo
->
fõld_‹dî_˙t
[0] = 
h264D©a
->
CuºFõldOrdîC¡
[0];

51 
h264Pi˘uªInfo
->
fõld_‹dî_˙t
[1] = 
h264D©a
->
CuºFõldOrdîC¡
[1];

52 
h264Pi˘uªInfo
->
is_ª„ªn˚
 = 
pd
->
ªf_pic_Êag
;

53 
h264Pi˘uªInfo
->
chroma_f‹m©_idc
 = 
pd
->
chroma_f‹m©
;

54 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
‰ame_num
);

55 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
pd
, 
fõld_pic_Êag
);

56 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
pd
, 
bŸtom_fõld_Êag
);

57 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
num_ªf_‰ames
);

58 
h264Pi˘uªInfo
->
mb_ad≠tive_‰ame_fõld_Êag
 = 
h264D©a
->
MbaffFømeFœg
;

59 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
c⁄°øöed_öåa_¥ed_Êag
);

60 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
weighãd_¥ed_Êag
);

61 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
weighãd_bùªd_idc
);

62 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
‰ame_mbs_⁄ly_Êag
);

63 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
å™sf‹m_8x8_mode_Êag
);

64 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
chroma_qp_ödex_off£t
);

65 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
£c⁄d_chroma_qp_ödex_off£t
);

66 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
pic_öô_qp_möus26
);

67 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
num_ªf_idx_l0_a˘ive_möus1
);

68 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
num_ªf_idx_l1_a˘ive_möus1
);

69 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
log2_max_‰ame_num_möus4
);

70 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
pic_‹dî_˙t_ty≥
);

71 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
log2_max_pic_‹dî_˙t_lsb_möus4
);

72 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
dñè_pic_‹dî_Æways_zîo_Êag
);

73 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
dúe˘_8x8_ö„ªn˚_Êag
);

74 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
íå›y_codög_mode_Êag
);

75 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
pic_‹dî_¥e£¡_Êag
);

76 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
deblockög_fûãr_c⁄åﬁ_¥e£¡_Êag
);

77 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
ªdund™t_pic_˙t_¥e£¡_Êag
);

78 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
num_¶i˚_groups_möus1
);

79 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
¶i˚_group_m≠_ty≥
);

80 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
¶i˚_group_ch™ge_øã_möus1
);

81 
h264Pi˘uªInfo
->
¶i˚_group_m≠
 = 
h264D©a
->
pMb2Sli˚GroupM≠
;

82 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
fmo_aso_íabÀ
);

83 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
h264D©a
, 
sˇlög_m©rix_¥e£¡
);

85 
	`mem˝y
(
h264Pi˘uªInfo
->
sˇlög_li°s_4x4
, 
h264D©a
->
WeightSˇÀ4x4
, (h264Data->WeightScale4x4));

86 
	`mem˝y
(
h264Pi˘uªInfo
->
sˇlög_li°s_8x8
, 
h264D©a
->
WeightSˇÀ8x8
, (h264Data->WeightScale8x8));

89 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
pd
, 
nNumSli˚s
);

90 
	`COPYFIELD
(
h264Pi˘uªInfo
, 
pd
, 
pSli˚D©aOff£ts
);

92 
NvU32
 
i
 = 0; i < 16; i++)

94 
NVH264DPBE¡ry
 *
dpb_ö
 = &
h264D©a
->
dpb
[
i
];

95 
NvMedüRe„ªn˚FømeH264
 *
dpb_out
 = &
h264Pi˘uªInfo
->
ª„ªn˚Fømes
[
i
];

96 
nvidüio
::
RefCou¡edFømeBuf„r
* 
picbuf
 = (nvidüio::RefCou¡edFømeBuf„r*)
dpb_ö
->
pPicBuf
;

98 
	`COPYFIELD
(
dpb_out
, 
dpb_ö
, 
FømeIdx
);

99 
	`COPYFIELD
(
dpb_out
, 
dpb_ö
, 
is_l⁄g_ãrm
);

100 
dpb_out
->
fõld_‹dî_˙t
[0] = 
dpb_ö
->
FõldOrdîC¡
[0];

101 
dpb_out
->
fõld_‹dî_˙t
[1] = 
dpb_ö
->
FõldOrdîC¡
[1];

102 
dpb_out
->
t›_is_ª„ªn˚
 = !!(
dpb_ö
->
u£d_f‹_ª„ªn˚
 & 1);

103 
dpb_out
->
bŸtom_is_ª„ªn˚
 = !!(
dpb_ö
->
u£d_f‹_ª„ªn˚
 & 2);

104 
dpb_out
->
surÁ˚
 = 
picbuf
 ?Öicbuf->
videoSurÁ˚
 : 
nuŒ±r
;

106 
	}
}

110 
	$cbRñó£
(*, 
NVDPicBuff
 *
p
)

112 
nvidüio
::
RefCou¡edFømeBuf„r
 * 
buf„r
 = (nvidüio::RefCou¡edFømeBuf„r*)
p
;

114 i‡(
buf„r
->
nRefs
 > 0)

115 
buf„r
->
nRefs
--;

116 
	}
}

118 
NvBoﬁ
 
	$cbDecodePi˘uª
(*
±r
, 
NVDPi˘uªD©a
 *
pd
)

120 
nvidüio
::
Sam∂eAµC⁄ãxt
 *
˘x
 = (nvidüio::Sam∂eAµC⁄ãxt*)
±r
;

121 
NvMedüSètus
 
°©us
;

122 
NvMedüPi˘uªInfoH264
 
picInfoH264
;

124 i‡(
pd
->
pCuºPic
)

126 
NvMedüBô°ªamBuf„r
 
bôSåómBuf„r
[1];

127 
	`SëP¨amsH264
(
pd
, &
picInfoH264
);

129 
nvidüio
::
RefCou¡edFømeBuf„r
 *
èrgëBuf„r
 = (nvidüio::RefCou¡edFømeBuf„∏*)
pd
->
pCuºPic
;

131 
bôSåómBuf„r
[0].
bô°ªam
 = (
NvU8
 *)
pd
->
pBô°ªamD©a
;

132 
bôSåómBuf„r
[0].
bô°ªamByãs
 = 
pd
->
nBô°ªamD©aLí
;

134 
	`NVXIO_PRINT
("DecodePicture %d Ptr:%p Surface:%p (streamÖtr:%p size: %d)...",

135 
˘x
->
nPicNum
, 
èrgëBuf„r
,Å¨gëBuf„r->
videoSurÁ˚
, 
pd
->
pBô°ªamD©a
,Öd->
nBô°ªamD©aLí
);

136 
˘x
->
nPicNum
++;

138 i‡(
èrgëBuf„r
->
videoSurÁ˚
)

140 
°©us
 = 
	`NvMedüVideoDecodîRídî
(
˘x
->
decodî
, 
èrgëBuf„r
->
videoSurÁ˚
,

141 (
NvMedüPi˘uªInfo
 *)&
picInfoH264
, 1, &
bôSåómBuf„r
[0]);

142 i‡(
°©us
 !
NVMEDIA_STATUS_OK
)

144 
	`NVXIO_PRINT
("DecodêPi˘uª: DecodêÁûed: %d", 
°©us
);

145  
NV_FALSE
;

150 
	`NVXIO_PRINT
("Decode Picture: InvalidÅarget surface");

155 
	`NVXIO_PRINT
("Decode Picture: No valid frame");

156  
NV_FALSE
;

159  
NV_TRUE
;

160 
	}
}

162 
NvBoﬁ
 
	$cbDi•œyPi˘uª
(*
±r
, 
NVDPicBuff
 *
p
, 
NvS64
)

164 
nvidüio
::
Sam∂eAµC⁄ãxt
 *
˘x
 = (nvidüio::Sam∂eAµC⁄ãxt*)
±r
;

165 
nvidüio
::
RefCou¡edFømeBuf„r
* 
buf„r
 = (nvidüio::RefCou¡edFømeBuf„r*)
p
;

167 i‡(
p
)

169 
˘x
->
‰ameSour˚
->
	`Di•œyFøme
(
buf„r
);

173 
	`NVXIO_PRINT
("Display: Invalid buffer");

174  
NV_FALSE
;

177  
NV_TRUE
;

178 
	}
}

180 
	$cbAddRef
(*, 
NVDPicBuff
 *
p
)

182 
nvidüio
::
RefCou¡edFømeBuf„r
* 
buf„r
 = (nvidüio::RefCou¡edFømeBuf„r*)
p
;

183 
buf„r
->
nRefs
++;

184 
	}
}

186 
	$cbUnh™dÀdNALU
(*, c⁄° 
NvU8
*, 
NvS32
)

188 
	}
}

190 
NvS32
 
	$cbBegöSequí˚
(*
±r
, c⁄° 
NVDSequí˚Info
 *
≤vsi
)

192 
nvidüio
::
Sam∂eAµC⁄ãxt
 *
˘x
 = (nvidüio::Sam∂eAµC⁄ãxt*)
±r
;

194 c⁄° * 
chroma
[] =

202 autÿ
nŸify
 = [&]

204 
˘x
->
Æive
 = 
Ál£
;

207 
°d
::
lock_gu¨d
<°d::
muãx
> 
	`lock
(
˘x
->mutex);

208 
˘x
->
isSèπed
 = 
åue
;

210 
˘x
->
c⁄dV¨übÀ
.
	`nŸify_⁄e
();

213 
NvU32
 
decodeBuf„rs
 = 
≤vsi
->
nDecodeBuf„rs
;

214 
NvMedüVideoDecodîAâribuãs
 
©åibuãs
;

216 i‡(
≤vsi
->
eCodec
 !
NVCS_H264
)

218 
	`NVXIO_PRINT
("BegöSequí˚: InvÆid code¯ty≥: %d", 
≤vsi
->
eCodec
);

219 
	`nŸify
();

223 
	`NVXIO_PRINT
("BeginSequence: %dx%d (disp: %dx%d) codec: H264 decode buffers: %dáspect: %d:%d fps: %f chroma: %s",

224 
≤vsi
->
nCodedWidth
,Önvsi->
nCodedHeight
,Önvsi->
nDi•œyWidth
,Önvsi->
nDi•œyHeight
,

225 
≤vsi
->
nDecodeBuf„rs
,Önvsi->
lDARWidth
,Önvsi->
lDARHeight
,

226 
≤vsi
->
fFømeR©e
,Önvsi->
nChromaF‹m©
 > 3 ? "InvÆid" : 
chroma
[pnvsi->nChromaFormat]);

228 
˘x
->
‰ameSour˚
->
c⁄figuøti⁄
.
‰ameWidth
 = 
≤vsi
->
nDi•œyWidth
;

229 
˘x
->
‰ameSour˚
->
c⁄figuøti⁄
.
‰ameHeight

≤vsi
->
nDi•œyHeight
;

230 
˘x
->
‰ameSour˚
->
c⁄figuøti⁄
.
Âs
 = 
°©ic_ˇ°
<
uöt
>(
≤vsi
->
fFømeR©e
);

231 
˘x
->
‰ameSour˚
->
c⁄figuøti⁄
.
f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
;

233 i‡(!
˘x
->
a•e˘R©io
 && 
≤vsi
->
lDARWidth
 &&Önvsi->
lDARHeight
)

235 
a•e˘
 = ()
≤vsi
->
lDARWidth
 / (Ìnvsi->
lDARHeight
;

236 i‡(
a•e˘
 > 0.3 &&áspect < 3.0)

237 
˘x
->
a•e˘R©io
 = 
a•e˘
;

241 i‡(
≤vsi
->
nCodedWidth
 !
˘x
->
decodeWidth
 ||Önvsi->
nCodedHeight
 !˘x->
decodeHeight
)

243 
NvMedüVideoCodec
 
codec
;

244 
NvMedüSurÁ˚Ty≥
 
surfTy≥
;

245 
NvU32
 
maxRe„ªn˚s
;

247 
	`NVXIO_PRINT
("BeginSequence: Resolution changed: Old:%dx%d New:%dx%d",

248 
˘x
->
decodeWidth
, ctx->
decodeHeight
, 
≤vsi
->
nCodedWidth
,Önvsi->
nCodedHeight
);

250 
˘x
->
decodeWidth
 = 
≤vsi
->
nCodedWidth
;

251 
˘x
->
decodeHeight
 = 
≤vsi
->
nCodedHeight
;

253 
˘x
->
di•œyWidth
 = 
≤vsi
->
nDi•œyWidth
;

254 
˘x
->
di•œyHeight
 = 
≤vsi
->
nDi•œyHeight
;

256 i‡(
˘x
->
decodî
)

258 
	`NvMedüVideoDecodîDe°roy
(
˘x
->
decodî
);

259 
˘x
->
decodî
 = 
nuŒ±r
;

262 
codec
 = 
NVMEDIA_VIDEO_CODEC_H264
;

264 
maxRe„ªn˚s
 = (
decodeBuf„rs
 > 0) ? decodeBuffers - 1 : 0;

265 
maxRe„ªn˚s
 = (maxReferences > 16) ? 16 : maxReferences;

267 
	`NVXIO_PRINT
("Create decoder: NVMEDIA_VIDEO_CODEC_H264 Size: %dx%d maxReferences: %d",

268 
˘x
->
decodeWidth
, ctx->
decodeHeight
, 
maxRe„ªn˚s
);

269 
˘x
->
decodî
 = 
	`NvMedüVideoDecodîCª©e
(

270 
codec
,

271 
˘x
->
decodeWidth
,

272 
˘x
->
decodeHeight
,

273 
maxRe„ªn˚s
,

274 
≤vsi
->
MaxBô°ªamSize
,

276 i‡(!
˘x
->
decodî
)

278 
	`NVXIO_PRINT
("UnableÅo create decoder");

279 
	`nŸify
();

284 
©åibuãs
.
¥ogªssiveSequí˚
 = 
≤vsi
->
bProgSeq
;

285 
	`NvMedüVideoDecodîSëAâribuãs
(

286 
˘x
->
decodî
,

287 
NVMEDIA_VIDEO_DECODER_ATTRIBUTE_PROGRESSIVE_SEQUENCE
,

288 &
©åibuãs
);

290 
i
 = 0; i < 
MAX_FRAMES
; i++)

292 i‡(
˘x
->
RefFøme
[
i
].
videoSurÁ˚
)

294 
	`NvMedüVideoSurÁ˚De°roy
(
˘x
->
RefFøme
[
i
].
videoSurÁ˚
);

298 
	`mem£t
(&
˘x
->
RefFøme
[0], 0, (
nvidüio
::
RefCou¡edFømeBuf„r
Ë* 
MAX_FRAMES
);

300 
≤vsi
->
nChromaF‹m©
)

304 
	`NVXIO_PRINT
("Chroma format: NvMediaSurfaceType_YV12");

305 
surfTy≥
 = 
NvMedüSurÁ˚Ty≥_YV12
;

308 
	`NVXIO_PRINT
("Chroma format: NvMediaSurfaceType_YV16");

309 
surfTy≥
 = 
NvMedüSurÁ˚Ty≥_YV16
;

312 
	`NVXIO_PRINT
("Chroma format: NvMediaSurfaceType_YV24");

313 
surfTy≥
 = 
NvMedüSurÁ˚Ty≥_YV24
;

316 
	`NVXIO_PRINT
("InvÆid chrom®f‹m©: %d", 
≤vsi
->
nChromaF‹m©
);

317 
	`nŸify
();

321 
˘x
->
¥odu˚r
 = 
	`NvMedüEglSåómProdu˚rCª©e
(˘x->
devi˚
, ctx->
eglDi•œy
, ctx->
eglSåóm
,

322 
˘x
->
surÁ˚Ty≥
, ctx->
di•œyWidth
, ctx->
di•œyHeight
);

323 if(!
˘x
->
¥odu˚r
)

325 
	`NVXIO_PRINT
("UnableÅo createÖroducer");

326 
	`nŸify
();

330 
i
 = 0; i < 
MAX_RENDER_SURFACE
; i++)

332 
˘x
->
ªndîSurÁ˚s
[
i
] = 
	`NvMedüVideoSurÁ˚Cª©e
(

333 
˘x
->
devi˚
,

334 
˘x
->
surÁ˚Ty≥
,

335 
˘x
->
di•œyWidth
,

336 
˘x
->
di•œyHeight
);

337 if(!
˘x
->
ªndîSurÁ˚s
[
i
])

339 
	`NVXIO_PRINT
("UnableÅo createÑender surface");

340 
	`nŸify
();

343 
˘x
->
‰ìRídîSurÁ˚s
[
i
] = ctx->
ªndîSurÁ˚s
[i];

346 
˘x
->
nBuf„rs
 = 
decodeBuf„rs
 + 
MAX_DISPLAY_BUFFERS
;

348 
i
 = 0; i < 
˘x
->
nBuf„rs
; i++)

350 
˘x
->
RefFøme
[
i
].
videoSurÁ˚
 =

351 
	`NvMedüVideoSurÁ˚Cª©e
(

352 
˘x
->
devi˚
,

353 
surfTy≥
,

354 (
≤vsi
->
nCodedWidth
 + 15) & ~15,

355 (
≤vsi
->
nCodedHeight
 + 15) & ~15);

356 i‡(!
˘x
->
RefFøme
[
i
].
videoSurÁ˚
)

358 
	`NVXIO_PRINT
("UnableÅo create video surface");

359 
	`nŸify
();

362 
	`NVXIO_PRINT
("Cª©êvideÿsurÁ˚[%d]: %dx%d", 
i
,

363 (
≤vsi
->
nCodedWidth
 + 15Ë& ~15, (≤vsi->
nCodedHeight
 + 15) & ~15);

364 
	`NVXIO_PRINT
(" Ptr:%p Surface:%p Device:%p",

365 &
˘x
->
RefFøme
[
i
], ctx->RefFøme[i].
videoSurÁ˚
, ctx->
devi˚
);

368 
˘x
->
‰ameSour˚
->
	`VideoMixîDe°roy
();

369 
˘x
->
‰ameSour˚
->
	`VideoMixîInô
(˘x->
di•œyWidth
, ctx->
di•œyHeight
,

370 
≤vsi
->
nCodedWidth
,Önvsi->
nCodedHeight
);

374 
	`NVXIO_PRINT
("cbBeginSequence: NoÑesolution change");

379 
°d
::
lock_gu¨d
<°d::
muãx
> 
	`lock
(
˘x
->mutex);

380 
˘x
->
isSèπed
 = 
åue
;

382 
˘x
->
c⁄dV¨übÀ
.
	`nŸify_⁄e
();

384  
decodeBuf„rs
;

385 
	}
}

387 
NvBoﬁ
 
	$cbAŒocPi˘uªBuf„r
(*
±r
, 
NVDPicBuff
 **
p
)

389 
	`NVXIO_PRINT
("\tcbAllocPictureBuffer");

390 
nvidüio
::
Sam∂eAµC⁄ãxt
 *
˘x
 = (nvidüio::Sam∂eAµC⁄ãxt*)
±r
;

391 *
p
 = 
nuŒ±r
;

393 
i
 = 0; i < 
˘x
->
nBuf„rs
; i++)

395 i‡(!
˘x
->
RefFøme
[
i
].
nRefs
)

397 *
p
 = (
NVDPicBuff
 *Ë&
˘x
->
RefFøme
[
i
];

398 
˘x
->
RefFøme
[
i
].
nRefs
++;

399 
	`NVXIO_PRINT
("AŒo¯pi˘uª index: %d På:%∞SurÁ˚:%p", 
i
, *
p
, 
˘x
->
RefFøme
[i].
videoSurÁ˚
);

400  
NV_TRUE
;

404 
	`NVXIO_PRINT
("AllocÖicture failed");

405  
NV_FALSE
;

406 
	}
}

408 
NVDClõ¡Cb
 
	gTe°Clõ¡Cb
 =

410 &
cbBegöSequí˚
,

411 &
cbDecodePi˘uª
,

412 &
cbDi•œyPi˘uª
,

413 &
cbUnh™dÀdNALU
,

414 &
cbAŒocPi˘uªBuf„r
,

415 &
cbRñó£
,

416 &
cbAddRef


419 
«me•a˚
 
	gnvidüio


422 
	gNvMedüVideoFømeSour˚Im∂
::
NvMedüVideoFømeSour˚Im∂
(c⁄° 
°d
::
°rög
 & 
∑th
) :

423 
FømeSour˚
(
nvxio
::FømeSour˚::
VIDEO_SOURCE
, "NvMediaVideoFrameSource"),

424 
devi˚ID
(-1),

425 
	gexec_èrgë
 { },

426 
devMem
(
nuŒ±r
),

427 
devMemPôch
(0)

429 
mem£t
(&
c⁄ãxt
, 0, (context));

431 
	gfûeP©h
 = 
∑th
;

433 
	gc⁄ãxt
.
	geglSåóm
 = 
EGL_NO_STREAM_KHR
;

434 
	gc⁄ãxt
.
	gcudaC⁄sumî
 = 0;

435 
	gc⁄ãxt
.
	geglDi•œy
 = 
EGL_NO_DISPLAY
;

436 
	gc⁄ãxt
.
	gÆive
 = 
Ál£
;

438 
	gc⁄ãxt
.
	g‰ameSour˚
 = 
this
;

440 
CUDA_SAFE_CALL
–
cudaGëDevi˚
(&
devi˚ID
) );

441 
	gexec_èrgë
.
	gba£
.
	gexec_èrgë_ty≥
 = 
NVXCU_STREAM_EXEC_TARGET
;

442 
	gexec_èrgë
.
	g°ªam
 = 
nuŒ±r
;

443 
CUDA_SAFE_CALL
–
cudaGëDevi˚Pr›îtõs
(&
exec_èrgë
.
dev_¥›
, 
devi˚ID
) );

446 
boﬁ
 
	gNvMedüVideoFømeSour˚Im∂
::
InôülizeEGLDi•œy
()

449 
c⁄ãxt
.
eglDi•œy
 = 
nvidüio
::
EGLDi•œyAc˚ss‹
::
gëIn°™˚
();

450 i‡(
	gc⁄ãxt
.
	geglDi•œy
 =
EGL_NO_DISPLAY
)

452 
NVXIO_PRINT
("EGL failedÅo obtain display.");

453  
	gÁl£
;

456  
	gåue
;

459 
EGLSåómKHR
 
	gNvMedüVideoFømeSour˚Im∂
::
InôülizeEGLSåóm
()

461 c⁄° 
EGLöt
 
°ªamAârFIFOMode
[] = { 
EGL_STREAM_FIFO_LENGTH_KHR
, 4, 
EGL_NONE
 };

462 
EGLöt
 
	gfifo_Àngth
 = 4, 
	gœãncy
 = 0, 
	gtimeout
 = 0;

463 
EGLSåómKHR
 
	g°ªam
 = 
EGL_NO_STREAM_KHR
;

465 i‡(!
£tupEGLExãnsi⁄s
())

467 
NVXIO_PRINT
("Couldn't setup EGLÉxtensions.");

468  
	gEGL_NO_STREAM_KHR
;

471 
	g°ªam
 = 
eglCª©eSåómKHR
(
c⁄ãxt
.
eglDi•œy
, 
°ªamAârFIFOMode
);

472 i‡(
	g°ªam
 =
EGL_NO_STREAM_KHR
)

474 
NVXIO_PRINT
("Couldn't create stream.");

475  
	gEGL_NO_STREAM_KHR
;

479 i‡(!
eglSåómAâribKHR
(
c⁄ãxt
.
eglDi•œy
, 
°ªam
, 
EGL_CONSUMER_LATENCY_USEC_KHR
, 16000))

481 
NVXIO_PRINT
("Consumer: streamAttribKHR EGL_CONSUMER_LATENCY_USEC_KHR failed");

483 i‡(!
eglSåómAâribKHR
(
c⁄ãxt
.
eglDi•œy
, 
°ªam
, 
EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR
, 16000))

485 
NVXIO_PRINT
("Consumer: streamAttribKHR EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR failed");

489 i‡(!
eglQuîySåómKHR
(
c⁄ãxt
.
eglDi•œy
, 
°ªam
, 
EGL_STREAM_FIFO_LENGTH_KHR
, &
fifo_Àngth
))

491 
NVXIO_PRINT
("Consumer:ÉglQueryStreamKHR EGL_STREAM_FIFO_LENGTH_KHR failed");

493 i‡(!
eglQuîySåómKHR
(
c⁄ãxt
.
eglDi•œy
, 
°ªam
, 
EGL_CONSUMER_LATENCY_USEC_KHR
, &
œãncy
))

495 
NVXIO_PRINT
("Consumer:ÉglQueryStreamKHR EGL_CONSUMER_LATENCY_USEC_KHR failed");

497 i‡(!
eglQuîySåómKHR
(
c⁄ãxt
.
eglDi•œy
, 
°ªam
, 
EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR
, &
timeout
))

499 
NVXIO_PRINT
("Consumer:ÉglQueryStreamKHR EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR failed");

502 
NVXIO_PRINT
("EGL Såóm c⁄sumî - Mode: FIFO Lígth: %d", 
fifo_Àngth
);

504 
NVXIO_PRINT
("EGL såóm h™dÀ %p", 
°ªam
);

505 
NVXIO_PRINT
("EGL Såóm c⁄sumî - L©ícy: %d u£c", 
œãncy
);

506 
NVXIO_PRINT
("EGL Såóm c⁄sumî - Timeout: %d u£c", 
timeout
);

508  
	g°ªam
;

511 
	gNvMedüVideoFømeSour˚Im∂
::
FöÆizeEglSåóm
()

513 i‡(
c⁄ãxt
.
eglSåóm
 !
EGL_NO_STREAM_KHR
)

515 
eglDe°roySåómKHR
(
c⁄ãxt
.
eglDi•œy
, c⁄ãxt.
eglSåóm
);

516 
	gc⁄ãxt
.
	geglSåóm
 = 
EGL_NO_STREAM_KHR
;

521 
boﬁ
 
	gNvMedüVideoFømeSour˚Im∂
::
InôülizeEglCudaC⁄sumî
()

523 i‡(
cudaSuc˚ss
 !
cudaFªe
(
nuŒ±r
))

525 
NVXIO_PRINT
("FailedÅo initialize CUDA context");

526  
	gÁl£
;

529 
NVXIO_PRINT
("Connect CUDA consumer");

530 
CUªsu…
 
	gcuSètus
 = 
cuEGLSåómC⁄sumîC⁄√˘
(&
c⁄ãxt
.
cudaC⁄sumî
, c⁄ãxt.
eglSåóm
);

531 i‡(
	gCUDA_SUCCESS
 !
cuSètus
)

533 
NVXIO_PRINT
("C⁄√˘ CUDA c⁄sumî ERROR %d", 
cuSètus
);

534  
	gÁl£
;

537  
	gåue
;

540 
	gNvMedüVideoFømeSour˚Im∂
::
FöÆizeEglCudaC⁄sumî
()

542 i‡(
c⁄ãxt
.
cudaC⁄sumî
)

544 i‡(
cudaSuc˚ss
 !
cudaFªe
(
nuŒ±r
))

546 
NVXIO_PRINT
("FailedÅo initialize CUDA context");

550 
cuEGLSåómC⁄sumîDisc⁄√˘
(&
c⁄ãxt
.
cudaC⁄sumî
);

551 
	gc⁄ãxt
.
	gcudaC⁄sumî
 = 0;

556 
boﬁ
 
	gNvMedüVideoFømeSour˚Im∂
::
InôülizeDecodî
()

558 
deÁu…FømeR©e
 = 30.0;

559 
	gc⁄ãxt
.
	gsurÁ˚Ty≥
 = 
NvMedüSurÁ˚Ty≥_R8G8B8A8
;

561 
mem£t
(&
c⁄ãxt
.
nvsi
, 0, (context.nvsi));

564 
mem£t
(&
c⁄ãxt
.
nvdp
, 0, (
NVDP¨£rP¨ams
));

565 
	gc⁄ãxt
.
	gnvdp
.
	gpClõ¡
 = &
Te°Clõ¡Cb
;

566 
	gc⁄ãxt
.
	gnvdp
.
	gpClõ¡Ctx
 = &
c⁄ãxt
;

567 
	gc⁄ãxt
.
	gnvdp
.
	glEº‹Thªshﬁd
 = 50;

568 
	gc⁄ãxt
.
	gnvdp
.
	glRe„ªn˚ClockR©e
 = 0;

569 
	gc⁄ãxt
.
	gnvdp
.
	geCodec
 = 
NVCS_H264
;

571 
	gc⁄ãxt
.
	g˘x
 = 
video_∑r£r_¸óã
(&
c⁄ãxt
.
nvdp
);

572 i‡(!
	gc⁄ãxt
.
	g˘x
)

574 
NVXIO_PRINT
("video_parser_create failed");

575  
	gÁl£
;

578 i‡(!
video_∑r£r_£t_©åibuã
(
c⁄ãxt
.
˘x
,

579 
NVDVideoP¨£rAâribuã_SëDeÁu…Fømî©e
,

580 (), &
deÁu…FømeR©e
))

582 
NVXIO_PRINT
("FailedÅo setup NVDVideoParserAttribute_SetDefaultFramerate");

583  
	gÁl£
;

586 
	gc⁄ãxt
.
	gdevi˚
 = 
NvMedüDevi˚Cª©e
();

587 i‡(!
	gc⁄ãxt
.
	gdevi˚
)

589 
NVXIO_PRINT
("UnableÅo create device");

590  
	gÁl£
;

593  
	gåue
;

596 
	gNvMedüVideoFømeSour˚Im∂
::
FöÆizeDecodî
()

598 i‡(
c⁄ãxt
.
˘x
)

600 
video_∑r£r_de°roy
(
c⁄ãxt
.
˘x
);

601 
	gc⁄ãxt
.
	g˘x
 = 
nuŒ±r
;

603 
Di•œyFlush
();

605 
NvU32
 
	gi
 = 0; i < 
	gMAX_FRAMES
; i++)

607 i‡(
	gc⁄ãxt
.
	gRefFøme
[
i
].
	gvideoSurÁ˚
)

609 
NvMedüVideoSurÁ˚De°roy
(
c⁄ãxt
.
RefFøme
[
i
].
videoSurÁ˚
);

610 
	gc⁄ãxt
.
	gRefFøme
[
i
].
	gvideoSurÁ˚
 = 
nuŒ±r
;

614 i‡(
	gc⁄ãxt
.
	gdecodî
)

616 
NvMedüVideoDecodîDe°roy
(
c⁄ãxt
.
decodî
);

617 
	gc⁄ãxt
.
	gdecodî
 = 
nuŒ±r
;

620 
Di•œyFlush
();

622 
VideoMixîDe°roy
();

624 
NvU32
 
	gi
 = 0; i < 
	gMAX_RENDER_SURFACE
; i++)

626 if(
	gc⁄ãxt
.
	gªndîSurÁ˚s
[
i
])

628 
NvMedüVideoSurÁ˚De°roy
(
c⁄ãxt
.
ªndîSurÁ˚s
[
i
]);

629 
	gc⁄ãxt
.
	gªndîSurÁ˚s
[
i
] = 
nuŒ±r
;

633 i‡(
	gc⁄ãxt
.
	g¥odu˚r
)

635 
NvMedüEglSåómProdu˚rDe°roy
(
c⁄ãxt
.
¥odu˚r
);

636 
	gc⁄ãxt
.
	g¥odu˚r
 = 
nuŒ±r
;

639 i‡(
	gc⁄ãxt
.
	gdevi˚
)

641 
NvMedüDevi˚De°roy
(
c⁄ãxt
.
devi˚
);

642 
	gc⁄ãxt
.
	gdevi˚
 = 
nuŒ±r
;

646 
	gNvMedüVideoFømeSour˚Im∂
::
FëchVideoFûe
()

648 
„tchThªad
 = 
°d
::
thªad
( [&] ()

650 
NvU8
 * 
bôs
 = 
nuŒ±r
;

651 
NvU32
 
ªadSize
 = 
READ_SIZE
;

652 
FILE
 * 
Â
 = 
nuŒ±r
;

654 
Â
 = 
f›í
(
fûeP©h
.
c_°r
(), "rb");

655 i‡(!
Â
)

657 
NVXIO_PRINT
("FaûedÅÿ›í såóm %s", 
fûeP©h
.
c_°r
());

661 
bôs
 = (
NvU8
*)
mÆloc
(
ªadSize
);

662 i‡(!
bôs
)

664 
f˛o£
(
Â
);

666 
NVXIO_PRINT
("Cannotállocate memory for fileÑeading");

670 
c⁄ãxt
.
Æive
 = 
åue
;

672 !
„of
(
Â
Ë&& 
c⁄ãxt
.
Æive
)

674 
size_t
 
Àn
;

675 
bô°ªam_∑ckë_s
 
∑ckë
;

677 
mem£t
(&
∑ckë
, 0, (
bô°ªam_∑ckë_s
));

679 
Àn
 = 
‰ód
(
bôs
, 1, 
ªadSize
, 
Â
);

680 i‡(
Àn
 == 0)

682 
NVXIO_PRINT
("FaûedÅÿªad fromÅhêsour˚ %s", 
fûeP©h
.
c_°r
());

683 
c⁄ãxt
.
Æive
 = 
Ál£
;

684 
f˛o£
(
Â
);

685 
‰ì
(
bôs
);

690 
∑ckë
.
nD©aLígth
 = (
NvS32
Ë
Àn
;

691 
∑ckë
.
pByãSåóm
 = 
bôs
;

692 
∑ckë
.
bEOS
 = 
„of
(
Â
);

693 
∑ckë
.
bPTSVÆid
 = 0;

694 
∑ckë
.
ŒPTS
 = 0;

695 
NVXIO_PRINT
("flushing");

697 i‡(!
video_∑r£r_∑r£
(
c⁄ãxt
.
˘x
, &
∑ckë
))

699 
NVXIO_PRINT
("CannotÖarse video");

700 
c⁄ãxt
.
Æive
 = 
Ál£
;

701 
f˛o£
(
Â
);

702 
‰ì
(
bôs
);

708 
video_∑r£r_Êush
(
c⁄ãxt
.
˘x
);

709 
Di•œyFlush
();

711 
‰ì
(
bôs
);

712 
f˛o£
(
Â
);

714 
c⁄ãxt
.
Æive
 = 
Ál£
;

717 
	g°d
::
unique_lock
<
°d
::
muãx
> 
lock
(
c⁄ãxt
.mutex);

718 
	gc⁄ãxt
.
	gc⁄dV¨übÀ
.
waô
(
lock
, [&] (Ë{  
c⁄ãxt
.
isSèπed
; } );

722 
boﬁ
 
	gNvMedüVideoFømeSour˚Im∂
::
VideoMixîInô
(
width
, 
height
, 
videoWidth
, 
videoHeight
)

724 
	g„©uªs
 = 0;

725 
	ga•e˘R©io
 = ()
width
 / ()
height
;

727 i‡(
	gc⁄ãxt
.
	ga•e˘R©io
 != 0.0)

729 
a•e˘R©io
 = 
c⁄ãxt
.aspectRatio;

732 
NVXIO_PRINT
("VideoMixîInô: %dx%d A•e˘: %f", 
width
, 
height
, 
a•e˘R©io
);

735 
NVXIO_PRINT
("VideoMixerInit: Surface Renderer Mixer create");

736 
	g„©uªs
 |(
NVMEDIA_VIDEO_MIXER_FEATURE_DVD_MIXING_MODE
 | 
NVMEDIA_VIDEO_MIXER_FEATURE_SURFACE_RENDERING
);

738 
	gc⁄ãxt
.
	gmixî
 = 
NvMedüVideoMixîCª©e
(

739 
c⁄ãxt
.
devi˚
,

740 
width
,

741 
height
,

742 
a•e˘R©io
,

743 
videoWidth
,

744 
videoHeight
,

751 
„©uªs
,

752 
nuŒ±r
);

754 i‡(!
	gc⁄ãxt
.
	gmixî
)

756 
NVXIO_PRINT
("UnableÅo create mixer");

757  
	gÁl£
;

760 
NVXIO_PRINT
("VideoMixîInô: Mixî:%p", 
c⁄ãxt
.
mixî
);

762  
	gåue
;

765 
	gNvMedüVideoFømeSour˚Im∂
::
VideoMixîDe°roy
()

767 i‡(
c⁄ãxt
.
mixî
)

769 
NvMedüVideoMixîDe°roy
(
c⁄ãxt
.
mixî
);

770 
	gc⁄ãxt
.
	gmixî
 = 
nuŒ±r
;

774 
	gNvMedüVideoFømeSour˚Im∂
::
Rñó£Føme
(
NvMedüVideoSurÁ˚
 *
videoSurÁ˚
)

776 
i
 = 0; 
	gi
 < 
	gMAX_FRAMES
; i++)

778 i‡(
	gvideoSurÁ˚
 =
c⁄ãxt
.
RefFøme
[
i
].
videoSurÁ˚
)

780 
cbRñó£
((*)&
c⁄ãxt
, (
NVDPicBuff
 *)&c⁄ãxt.
RefFøme
[
i
]);

786 
	gNvMedüVideoFømeSour˚Im∂
::
Di•œyFlush
()

788 
NvMedüVideoSurÁ˚
 *
ªndîSurÁ˚
 = 
nuŒ±r
;

790 i‡(
	gc⁄ãxt
.
	g¥odu˚r
)

792 
NVXIO_PRINT
("before NvMediaEglStreamProducerGetSurfaceÜoop");

793 
NvMedüEglSåómProdu˚rGëSurÁ˚
(
c⁄ãxt
.
¥odu˚r
, &
ªndîSurÁ˚
, 0Ë=
NVMEDIA_STATUS_OK
)

795 
NVXIO_PRINT
("NvMediaEglStreamProducerGetSurface iteration");

796 i‡((
	gc⁄ãxt
.
	gsurÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8_BŸtomOrigö
) ||

797 (
c⁄ãxt
.
surÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8
))

799 
i
 = 0; 
	gi
 < 
	gMAX_RENDER_SURFACE
; i++)

801 if(!
	gc⁄ãxt
.
	g‰ìRídîSurÁ˚s
[
i
])

803 
	gc⁄ãxt
.
	g‰ìRídîSurÁ˚s
[
i
] = 
ªndîSurÁ˚
;

810 
Rñó£Føme
(
ªndîSurÁ˚
);

817 
NvMedüVideoSurÁ˚
 * 
	gNvMedüVideoFømeSour˚Im∂
::
GëRídîSurÁ˚
()

819 
NvMedüVideoSurÁ˚
 *
ªndîSurÁ˚
 = 
nuŒ±r
;

821 i‡((
	gc⁄ãxt
.
	gsurÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8_BŸtomOrigö
) ||

822 (
c⁄ãxt
.
surÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8
))

824 
i
 = 0; 
	gi
 < 
	gMAX_RENDER_SURFACE
; i++)

826 i‡(
	gc⁄ãxt
.
	g‰ìRídîSurÁ˚s
[
i
])

828 
	gªndîSurÁ˚
 = 
c⁄ãxt
.
‰ìRídîSurÁ˚s
[
i
];

829 
	gc⁄ãxt
.
	g‰ìRídîSurÁ˚s
[
i
] = 
nuŒ±r
;

830  
	gªndîSurÁ˚
;

835 
	gc⁄ãxt
.
	gÆive
)

837 
NvMedüSètus
 
	g°©us
 = 
NvMedüEglSåómProdu˚rGëSurÁ˚
(
c⁄ãxt
.
¥odu˚r
, &
ªndîSurÁ˚
, 50);

838 i‡(
	g°©us
 =
NVMEDIA_STATUS_ERROR
 &&

839 ((
c⁄ãxt
.
surÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8_BŸtomOrigö
) ||

840 (
c⁄ãxt
.
surÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8
)))

842 
NVXIO_PRINT
("GetRenderSurface: NvMediaGetSurface waiting");

846 i‡(
	gªndîSurÁ˚
)

848  
	gªndîSurÁ˚
;

852  
	gªndîSurÁ˚
;

856 
	gNvMedüVideoFømeSour˚Im∂
::
Di•œyFøme
(
RefCou¡edFømeBuf„r
 *
‰ame
)

858 
NvMedüPrim¨yVideo
 
¥im¨yVideo
;

859 
NvMedüSètus
 
	g°©us
;

860 
NvMedüRe˘
 
	g¥im¨ySour˚Re˘
 = { 0, 0, ()
c⁄ãxt
.
di•œyWidth
,

861 ()
c⁄ãxt
.
di•œyHeight
 };

863 i‡(!
	g‰ame
 || !‰ame->
	gvideoSurÁ˚
)

865 
NVXIO_PRINT
("DisplayFrame: Invalid surface");

869 
NvMedüVideoSurÁ˚
 *
	gªndîSurÁ˚
 = 
GëRídîSurÁ˚
();

870 i‡(!
	gªndîSurÁ˚
)

872 i‡((
	gc⁄ãxt
.
	gsurÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8_BŸtomOrigö
) ||

873 (
c⁄ãxt
.
surÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8
))

875 
NVXIO_PRINT
("DisplayFrame: GetRenderSurfaceÉmpty");

881 
	g¥im¨yVideo
.
	gpi˘uªSåu˘uª
 = 
NVMEDIA_PICTURE_STRUCTURE_FRAME
;

882 
	g¥im¨yVideo
.
	g√xt
 = 
nuŒ±r
;

883 
	g¥im¨yVideo
.
	gcuºít
 = 
‰ame
->
videoSurÁ˚
;

884 
	g¥im¨yVideo
.
	g¥evious
 = 
nuŒ±r
;

885 
	g¥im¨yVideo
.
	g¥evious2
 = 
nuŒ±r
;

886 
	g¥im¨yVideo
.
	g§cRe˘
 = &
¥im¨ySour˚Re˘
;

887 
	g¥im¨yVideo
.
	gd°Re˘
 = 
nuŒ±r
;

889 
	g‰ame
->
	gnRefs
++;

891 i‡((
	gc⁄ãxt
.
	gsurÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8_BŸtomOrigö
) ||

892 (
c⁄ãxt
.
surÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8
))

895 
NVXIO_PRINT
("DisplayFrame: RenderÅo surface");

896 
	g°©us
 = 
NvMedüVideoMixîRídîSurÁ˚
(

897 
c⁄ãxt
.
mixî
,

898 
ªndîSurÁ˚
,

899 
nuŒ±r
,

900 &
¥im¨yVideo
,

901 
nuŒ±r
,

902 
nuŒ±r
,

903 
nuŒ±r
);

904 i‡(
	g°©us
 !
NVMEDIA_STATUS_OK
)

906 
NVXIO_PRINT
("DisplayFrame: NvMediaVideoMixerRender failed");

910 
	g°©us
 = 
NvMedüEglSåómProdu˚rPo°SurÁ˚
(
c⁄ãxt
.
¥odu˚r
,

911 (
c⁄ãxt
.
surÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8_BŸtomOrigö
) ||

912 (
c⁄ãxt
.
surÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8
) ?

913 
ªndîSurÁ˚
 : 
‰ame
->
videoSurÁ˚
,

914 
nuŒ±r
);

915 i‡(
	g°©us
 !
NVMEDIA_STATUS_OK
)

917 
NVXIO_PRINT
("DisplayFrame: NvMediaEglStreamProducerPostSurface failed");

920 
Rñó£Føme
((
c⁄ãxt
.
surÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8_BŸtomOrigö
) ||

921 (
c⁄ãxt
.
surÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_R8G8B8A8
) ?

922 
¥im¨yVideo
.
cuºít
 : 
ªndîSurÁ˚
);

926 
boﬁ
 
	gNvMedüVideoFømeSour˚Im∂
::
›í
()

928 
nvxio
::
ProfûîR™ge
 
ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "FrameSource::open (NVXIO)");

930 
˛o£
();

932 
NVXIO_PRINT
("Initializing EGL display");

933 i‡(!
InôülizeEGLDi•œy
())

935 
NVXIO_PRINT
("Cannot initialize EGL display");

936  
	gÁl£
;

939 
NVXIO_PRINT
("Initializing EGL stream");

940 
	gc⁄ãxt
.
	geglSåóm
 = 
InôülizeEGLSåóm
();

941 i‡(
	gc⁄ãxt
.
	geglSåóm
 =
EGL_NO_STREAM_KHR
)

943 
NVXIO_PRINT
("Cannot initialize EGL Stream");

944  
	gÁl£
;

947 
NVXIO_PRINT
("Initializing EGL consumer");

948 i‡(!
InôülizeEglCudaC⁄sumî
())

950 
NVXIO_PRINT
("Cannot initialize CUDA consumer");

951  
	gÁl£
;

954 
NVXIO_PRINT
("Initializing NvMedia Decoder");

955 i‡(!
InôülizeDecodî
())

957 
NVXIO_PRINT
("Cannot initialize NvMedia decoder");

958  
	gÁl£
;

962 
FëchVideoFûe
();

964  
	gåue
;

967 
c⁄vîtFøme
(
nvxcu_°ªam_exec_èrgë_t
 &
exec_èrgë
,

968 c⁄° 
image_t
 & 
image
,

969 c⁄° 
FømeSour˚
::
P¨amëîs
 & 
c⁄figuøti⁄
,

970 
width
, 
height
,

971 
boﬁ
 
u£Pôch
, 
size_t
 
pôch
,

972 
dïth
, * 
decodedPå
,

973 
boﬁ
 
is_cuda
,

974 *& 
devMem
,

975 
size_t
 & 
devMemPôch
);

977 
vx_image
 
wøpNVXIOImage
(
vx_c⁄ãxt
 
c⁄ãxt
,

978 c⁄° 
image_t
 & 
image
);

980 
	gFømeSour˚
::
FømeSètus
 
NvMedüVideoFømeSour˚Im∂
::
„tch
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
timeout
 )

982 
	gnvxio
::
ProfûîR™ge
 
ønge
(
nvxio
::
COLOR_ARGB_FUSCHIA
, "FrameSource::fetch (NVXIO)");

984 i‡(
	gcudaSuc˚ss
 !
cudaFªe
(
nuŒ±r
))

986 
NVXIO_PRINT
("FailedÅo initialize CUDA context");

987  
	gnvxio
::
FømeSour˚
::
CLOSED
;

990 
CUªsu…
 
	gcuSètus
;

991 
CUgøphicsResour˚
 
	gcudaResour˚
;

993 
EGLöt
 
	g°ªamSèã
 = 0;

994 i‡(!
eglQuîySåómKHR
(
c⁄ãxt
.
eglDi•œy
, c⁄ãxt.
eglSåóm
, 
EGL_STREAM_STATE_KHR
, &
°ªamSèã
))

996 
NVXIO_PRINT
("Cuda consumer,ÉglQueryStreamKHR EGL_STREAM_STATE_KHR failed");

997  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
CLOSED
;

1000 i‡(
	g°ªamSèã
 =
EGL_STREAM_STATE_DISCONNECTED_KHR
)

1002 
NVXIO_PRINT
("CUDA Consumer: - EGL_STREAM_STATE_DISCONNECTED_KHRÑeceived");

1003  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
CLOSED
;

1006 i‡(
	g°ªamSèã
 !
EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR
)

1008  
nvxio
::
FømeSour˚
::
TIMEOUT
;

1011 
	gcuSètus
 = 
cuEGLSåómC⁄sumîAcquúeFøme
(&
c⁄ãxt
.
cudaC⁄sumî
, &
cudaResour˚
, 
nuŒ±r
, 
timeout
);

1012 i‡(
	gcuSètus
 !
CUDA_SUCCESS
)

1014 
NVXIO_PRINT
("Cud®AcquúêÁûed cuSètus=%d", 
cuSètus
);

1016  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
TIMEOUT
;

1019 
CUeglFøme
 
	geglFøme
;

1020 
	gcuSètus
 = 
cuGøphicsResour˚GëM≠≥dEglFøme
(&
eglFøme
, 
cudaResour˚
, 0, 0);

1021 i‡(
	gcuSètus
 !
CUDA_SUCCESS
)

1023 c⁄° * 
îr‹
;

1024 
cuGëEº‹Såög
(
cuSètus
, &
îr‹
);

1025 
NVXIO_PRINT
("Cud®gëÑesour˚ faûed wôhÉº‹: \"%s\"", 
îr‹
);

1026  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
CLOSED
;

1029 
NVXIO_ASSERT
(
eglFøme
.
width
 =
c⁄figuøti⁄
.
‰ameWidth
);

1030 
NVXIO_ASSERT
(
eglFøme
.
height
 =
c⁄figuøti⁄
.
‰ameHeight
);

1032 
NVXIO_ASSERT
(
c⁄figuøti⁄
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
);

1033 
NVXIO_ASSERT
(
eglFøme
.
pôch
 =(”glFøme.
width
 * 4 + 3) >> 2) << 2);

1034 
c⁄vîtFøme
(
exec_èrgë
,

1035 
image
,

1036 
c⁄figuøti⁄
,

1037 
eglFøme
.
width
,ÉglFøme.
height
,

1038 
åue
, 
eglFøme
.
pôch
,

1039 4, 
eglFøme
.
‰ame
.
pPôch
[0],

1040 
åue
,

1041 
devMem
,

1042 
devMemPôch
);

1044 
	gcuSètus
 = 
cuEGLSåómC⁄sumîRñó£Føme
(&
c⁄ãxt
.
cudaC⁄sumî
, 
cudaResour˚
, 
nuŒ±r
);

1045 i‡(
	gcuSètus
 !
CUDA_SUCCESS
)

1047 
NVXIO_PRINT
("FailedÅoÑelease EGL frame");

1048 
˛o£
();

1049  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
CLOSED
;

1052  
	gnvxio
::
FømeSour˚
::
FømeSètus
::
OK
;

1055 
	gFømeSour˚
::
P¨amëîs
 
NvMedüVideoFømeSour˚Im∂
::
gëC⁄figuøti⁄
()

1057  
c⁄figuøti⁄
;

1060 
boﬁ
 
	gNvMedüVideoFømeSour˚Im∂
::
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
)

1062 
NVXIO_ASSERT
(!
c⁄ãxt
.
Æive
);

1064 
boﬁ
 
	gªsu…
 = 
åue
;

1067 i‡(
	g∑øms
.
	g‰ameWidth
 !(
uöt32_t
)-1)

1068 
ªsu…
 = 
Ál£
;

1069 i‡(
	g∑øms
.
	g‰ameHeight
 !(
uöt32_t
)-1)

1070 
ªsu…
 = 
Ál£
;

1071 i‡(
	g∑øms
.
	gÂs
 !(
uöt32_t
)-1)

1072 
ªsu…
 = 
Ál£
;

1074 
NVXIO_ASSERT
((
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
) ||

1075 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
) ||

1076 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
) ||

1077 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
)||

1078 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
));

1081 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
∑øms
.
f‹m©
;

1083  
	gªsu…
;

1086 
	gNvMedüVideoFømeSour˚Im∂
::
˛o£
()

1088 
nvxio
::
ProfûîR™ge
 
ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "FrameSource::close (NVXIO)");

1090 
	gc⁄ãxt
.
	gÆive
 = 
Ál£
;

1091 
	gc⁄ãxt
.
	gisSèπed
 = 
Ál£
;

1093 i‡(
	g„tchThªad
.
joöabÀ
())

1094 
	g„tchThªad
.
joö
();

1096 
NVXIO_PRINT
("Finalizing EGL CUDA consumer");

1097 
FöÆizeEglCudaC⁄sumî
();

1099 
NVXIO_PRINT
("Finalizing NvMedia decoder");

1100 
FöÆizeDecodî
();

1102 
NVXIO_PRINT
("Finalizing EGL Stream");

1103 
FöÆizeEglSåóm
();

1105 
	gc⁄ãxt
.
	gdecodeWidth
 = -1;

1106 
	gc⁄ãxt
.
	gdecodeHeight
 = -1;

1108 i‡(
	gdevMem
)

1110 
cudaFªe
(
devMem
);

1111 
	gdevMem
 = 
nuŒ±r
;

1115 
	gNvMedüVideoFømeSour˚Im∂
::~
NvMedüVideoFømeSour˚Im∂
()

1117 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaVideoFrameSourceImpl.hpp

29 #i‚de‡
NVMEDIA_VIDEOFRAMESOURCEIMPL_HPP


30 
	#NVMEDIA_VIDEOFRAMESOURCEIMPL_HPP


	)

32 #ifde‡
USE_NVMEDIA


34 
	~<thªad
>

35 
	~<muãx
>

36 
	~<c⁄dôi⁄_v¨übÀ
>

38 
	~"FømeSour˚/FømeSour˚Im∂.hµ
"

39 
	~"FømeSour˚/EGLAPIAc˚ss‹s.hµ
"

41 
	~<nvmedü.h
>

42 
	~<nvmedü_egl°ªam.h
>

43 
	~<cuda_ru¡ime.h
>

44 
	~<cudaEGL.h
>

45 
	~<video_∑r£r.h
>

47 
	#MAX_RENDER_SURFACE
 4

	)

48 
	#MAX_DECODE_BUFFERS
 17

	)

49 
	#MAX_DISPLAY_BUFFERS
 4

	)

50 
	#MAX_FRAMES
 (
MAX_DECODE_BUFFERS
 + 
MAX_DISPLAY_BUFFERS
)

	)

52 
«me•a˚
 
	gnvidüio


55 
	sRefCou¡edFømeBuf„r


57 
	gnRefs
;

58 
NvMedüVideoSurÁ˚
 *
	gvideoSurÁ˚
;

62 
˛ass
 
	gNvMedüVideoFømeSour˚Im∂
;

64 
	sSam∂eAµC⁄ãxt


67 
video_∑r£r_c⁄ãxt_s
 *
	g˘x
;

68 
NVDSequí˚Info
 
	gnvsi
;

69 
NVDP¨£rP¨ams
 
	gnvdp
;

72 
	gdecodeWidth
;

73 
	gdecodeHeight
;

74 
	gdi•œyWidth
;

75 
	gdi•œyHeight
;

76 
NvMedüVideoDecodî
 *
	gdecodî
;

79 
	gnBuf„rs
;

80 
	gnPicNum
;

81 
RefCou¡edFømeBuf„r
 
	gRefFøme
[
MAX_FRAMES
];

84 
NvMedüDevi˚
 *
	gdevi˚
;

85 
NvMedüVideoMixî
 *
	gmixî
;

86 
	ga•e˘R©io
;

89 
NvMedüVideoSurÁ˚
 *
	gªndîSurÁ˚s
[
MAX_RENDER_SURFACE
];

90 
NvMedüVideoSurÁ˚
 *
	g‰ìRídîSurÁ˚s
[
MAX_RENDER_SURFACE
];

91 
NvMedüSurÁ˚Ty≥
 
	gsurÁ˚Ty≥
;

92 
NvMedüEGLSåómProdu˚r
 *
	g¥odu˚r
;

95 
EGLSåómKHR
 
	geglSåóm
;

96 
EGLDi•œy
 
	geglDi•œy
;

98 
CUeglSåómC⁄√˘i⁄
 
	gcudaC⁄sumî
;

100 
boﬁ
 
	gÆive
;

102 
NvMedüVideoFømeSour˚Im∂
 * 
	g‰ameSour˚
;

105 
	g°d
::
muãx
 mutex;

106 
	g°d
::
c⁄dôi⁄_v¨übÀ
 
c⁄dV¨übÀ
;

107 
boﬁ
 
	gisSèπed
;

110 ˛as†
	cNvMedüVideoFømeSour˚Im∂
 :

111 
public
 
FømeSour˚


113 
public
:

114 
ex∂icô
 
NvMedüVideoFømeSour˚Im∂
(c⁄° 
°d
::
°rög
 & 
∑th
);

115 
vútuÆ
 
boﬁ
 
›í
();

116 
vútuÆ
 
FømeSètus
 
„tch
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
timeout
 = 5u );

117 
vútuÆ
 
P¨amëîs
 
gëC⁄figuøti⁄
();

118 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
P¨amëîs
& 
∑øms
);

119 
vútuÆ
 
˛o£
();

120 
	gvútuÆ
 ~
NvMedüVideoFømeSour˚Im∂
();

123 
boﬁ
 
VideoMixîInô
(
width
, 
height
, 
videoWidth
, 
videoHeight
);

124 
VideoMixîDe°roy
();

126 
Di•œyFøme
(
RefCou¡edFømeBuf„r
 *
‰ame
);

127 
Di•œyFlush
();

128 
P¨amëîs
 
	gc⁄figuøti⁄
;

130 
	g¥Ÿe˘ed
:

133 
boﬁ
 
InôülizeEGLDi•œy
();

136 
EGLSåómKHR
 
InôülizeEGLSåóm
();

137 
FöÆizeEglSåóm
();

140 
boﬁ
 
InôülizeEglCudaC⁄sumî
();

141 
FöÆizeEglCudaC⁄sumî
();

144 
boﬁ
 
InôülizeDecodî
();

145 
FöÆizeDecodî
();

147 
FëchVideoFûe
();

149 
Rñó£Føme
(
NvMedüVideoSurÁ˚
 *
videoSurÁ˚
);

150 
NvMedüVideoSurÁ˚
 * 
GëRídîSurÁ˚
();

152 
Sam∂eAµC⁄ãxt
 
	gc⁄ãxt
;

153 
	g°d
::
°rög
 
fûeP©h
;

155 
	g°d
::
thªad
 
„tchThªad
;

156 
öt32_t
 
	gdevi˚ID
;

157 
nvxcu_°ªam_exec_èrgë_t
 
	gexec_èrgë
;

159 
	g¥iv©e
:

161 * 
devMem
;

162 
size_t
 
	gdevMemPôch
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10635/ImageCapture.cpp

29 #ifde‡
USE_CSI_OV10635


31 
	~"FømeSour˚/NvMedü/OV10635/ImageC≠tuª.hµ
"

32 
	~"c⁄fig_ˇ±uª.h
"

34 
	~<NVX/Aµliˇti⁄.hµ
>

36 
	#IMGCAPTURE_BUFFERPOOL_SIZE
 20

	)

37 
	#TIMEOUT
 100

	)

39 
usög
 
«me•a˚
 
	gnvidüio
::
egl_≠i
;

45 
boﬁ
 
	$InôülizeEGLDi•œy
(
nvidüio
::
ov10635
::
ImgC≠tuª
 & 
˘x
)

48 
˘x
.
eglDi•œy
 = 
	`eglGëDi•œy
(
EGL_DEFAULT_DISPLAY
);

49 i‡(
˘x
.
eglDi•œy
 =
EGL_NO_DISPLAY
)

51 
	`¥ötf
("EGL failedÅo obtain display.\n");

52  
Ál£
;

56 
EGLBoﬁón
 
eglSètus
 = 
	`eglInôülize
(
˘x
.
eglDi•œy
, 0, 0);

57 i‡(!
eglSètus
)

59 
	`¥ötf
("EGL failedÅo initialize.\n");

60  
Ál£
;

63  
åue
;

64 
	}
}

66 
boﬁ
 
	$InôülizeEGLSåóm
(
nvidüio
::
ov10635
::
ImgC≠tuª
 & 
˘x
)

68 c⁄° 
EGLöt
 
°ªamAâr
[] = { 
EGL_NONE
 };

69 
EGLöt
 
fifo_Àngth
 = 4, 
œãncy
 = 0, 
timeout
 = 0, 
îr‹
 = 0;

71 if(!
	`£tupEGLExãnsi⁄s
())

73 
	`¥ötf
("%s:ÉglSëupExãnsi⁄†Áûed\n", 
__func__
);

74  
Ál£
;

77 
˘x
.
eglSåóm
 = 
	`eglCª©eSåómKHR
(˘x.
eglDi•œy
, 
°ªamAâr
);

78 if(
˘x
.
eglSåóm
 =
EGL_NO_STREAM_KHR
)

80 
îr‹
 = 
	`eglGëEº‹
();

81 
	`¥ötf
("%s: FaûedÅÿ¸óãÉg»°ªam,Éº‹: %d\n", 
__func__
, 
îr‹
);

82  
Ál£
;

86 if(!
	`eglSåómAâribKHR
(
˘x
.
eglDi•œy
, ctx.
eglSåóm
, 
EGL_CONSUMER_LATENCY_USEC_KHR
, 16000))

88 
	`¥ötf
("Consumer: streamAttribKHR EGL_CONSUMER_LATENCY_USEC_KHR failed\n");

90 if(!
	`eglSåómAâribKHR
(
˘x
.
eglDi•œy
, ctx.
eglSåóm
, 
EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR
, 16000))

92 
	`¥ötf
("Consumer: streamAttribKHR EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR failed\n");

96 if(!
	`eglQuîySåómKHR
(
˘x
.
eglDi•œy
, ctx.
eglSåóm
, 
EGL_STREAM_FIFO_LENGTH_KHR
, &
fifo_Àngth
))

98 
	`¥ötf
("Consumer:ÉglQueryStreamKHR EGL_STREAM_FIFO_LENGTH_KHR failed\n");

100 if(!
	`eglQuîySåómKHR
(
˘x
.
eglDi•œy
, ctx.
eglSåóm
, 
EGL_CONSUMER_LATENCY_USEC_KHR
, &
œãncy
))

102 
	`¥ötf
("Consumer:ÉglQueryStreamKHR EGL_CONSUMER_LATENCY_USEC_KHR failed\n");

104 if(!
	`eglQuîySåómKHR
(
˘x
.
eglDi•œy
, ctx.
eglSåóm
, 
EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR
, &
timeout
))

106 
	`¥ötf
("Consumer:ÉglQueryStreamKHR EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR failed\n");

110 
CUªsu…
 
cuªsu…
 = 
	`cuEGLSåómC⁄sumîC⁄√˘
(&
˘x
.
cudaC⁄√˘i⁄
, ctx.
eglSåóm
);

111 i‡(
CUDA_SUCCESS
 !
cuªsu…
)

113 
	`¥ötf
("C⁄√˘ CUDA EGL såóm c⁄sumî ERROR %d\n", 
cuªsu…
);

114  
Ál£
;

118 
˘x
.
eglProdu˚r
 = 
	`NvMedüEglSåómProdu˚rCª©e
(˘x.
devi˚
,

119 
˘x
.
eglDi•œy
,

120 
˘x
.
eglSåóm
,

121 
˘x
.
ouçutSurfTy≥
,

122 
˘x
.
ouçutWidth
,

123 
˘x
.
ouçutHeight
);

124 if(!
˘x
.
eglProdu˚r
)

126 
	`¥ötf
("%s: FaûedÅÿ¸óã EGL såóm,Örodu˚r\n", 
__func__
);

127  
Ál£
;

130  
åue
;

131 
	}
}

133 
	$FöÆizeEglDi•œy
(
nvidüio
::
ov10635
::
ImgC≠tuª
 & 
˘x
)

135 
	`eglTîmö©e
(
˘x
.
eglDi•œy
);

136 
˘x
.
eglDi•œy
 = 
EGL_NO_DISPLAY
;

137 
	}
}

139 
	$FöÆizeEglSåóm
(
nvidüio
::
ov10635
::
ImgC≠tuª
 & 
˘x
)

141 if(
˘x
.
eglProdu˚r
)

143 
	`NvMedüEglSåómProdu˚rDe°roy
(
˘x
.
eglProdu˚r
);

144 
˘x
.
eglProdu˚r
 = 
NULL
;

147 
	`cuEGLSåómC⁄sumîDisc⁄√˘
(&
˘x
.
cudaC⁄√˘i⁄
);

148 
˘x
.
cudaC⁄√˘i⁄
 = 
NULL
;

150 if(
˘x
.
eglSåóm
)

152 
	`eglDe°roySåómKHR
(
˘x
.
eglDi•œy
, ctx.
eglSåóm
);

153 
˘x
.
eglSåóm
 = 
EGL_NO_STREAM_KHR
;

155 
	}
}

157 
NvU32


158 
	$ImgC≠tuª_di•œyThªadFunc
(*
d©a
)

160 
nvidüio
::
ov10635
::
ImgC≠tuª
 *
˘x
 = (nvidüio::ov10635::ImgC≠tuª *)
d©a
;

161 
NvMedüSètus
 
°©us
;

162 
NvMedüImage
 *
ˇ±uªdFøme
 = 
NULL
;

163 
NvMedüImage
 *
imgOut
 = 
NULL
;

164 
NvU32
 
i
 = 0, 
numFømes
 = 0, 
timeout
 = 
TIMEOUT
;

166 !
˘x
->
quô
)

169 
°©us
 = 
	`ImageC≠tuªNumAvaûabÀFømes
(
˘x
->
i˝Ctx
, &
numFømes
);

170 if(
°©us
 !
NVMEDIA_STATUS_OK
)

172 
	`LOG_ERR
("%s: ImageC≠tuªNumAvaûabÀFøme†Áûed\n", 
__func__
);

173 
˘x
->
quô
 = 
NVMEDIA_TRUE
;

174 
d⁄e
;

177 if(!
numFømes
)

179 
	`u¶ìp
(100);

184 
°©us
 = 
	`ImageC≠tuªGëFøme
(
˘x
->
i˝Ctx
, &
ˇ±uªdFøme
);

185 if(
°©us
 !
NVMEDIA_STATUS_OK
)

187 
	`LOG_ERR
("%s: ImageC≠tuªGëFømêÁûed\n", 
__func__
);

188 
˘x
->
quô
 = 
NVMEDIA_TRUE
;

189 
d⁄e
;

194 
	`NVXIO_ASSERT
(
˘x
->
c⁄vît
);

197 
°©us
 = 
	`ImageSurfUtûsC⁄vîtImage
(
˘x
->
c⁄vît
, 
ˇ±uªdFøme
);

198 if(
°©us
 !
NVMEDIA_STATUS_OK
)

200 
	`LOG_ERR
("%s: ImageSurfUtûsC⁄vîtImagêÁûed\n", 
__func__
);

201 
˘x
->
quô
 = 
NVMEDIA_TRUE
;

202 
d⁄e
;

205 #i‡
BOARD_CODE_NAME
 >
DRIVE_PX_BOARD


206 
ˇ±uªdFøme
 = 
NULL
;

209 
timeout
 = 
TIMEOUT
;

210 
numFømes
 = 0;

212 (!
numFømes
Ë&& 
timeout
--)

214 
°©us
 = 
	`ImageSurfUtûsNumAvaûabÀFømes
(
˘x
->
c⁄vît
,

215 &
numFømes
);

216 if(
°©us
 !
NVMEDIA_STATUS_OK
)

218 
	`LOG_ERR
("%s: ImageC≠tuªNumAvaûabÀFøme†Áûed\n", 
__func__
);

219 
˘x
->
quô
 = 
NVMEDIA_TRUE
;

220 
d⁄e
;

223 c⁄° 
time•ec
 
time
 = {0, 50000};

224 
	`«no¶ìp
(&
time
, 
NULL
);

227 if(
numFømes
)

230 
°©us
 = 
	`ImageSurfUtûsGëImage
(
˘x
->
c⁄vît
, &
imgOut
);

231 if(
°©us
 !
NVMEDIA_STATUS_OK
)

233 
	`LOG_ERR
("%s: ImageSurfUtûsGëImagêÁûed\n", 
__func__
);

234 
˘x
->
quô
 = 
NVMEDIA_TRUE
;

235 
d⁄e
;

240 i‡(!
˘x
->
quô
)

242 
NvMedüImage
 * 
imageToPass
 = 
imgOut
, * 
ªtImage
 = 
NULL
;

244 
	`LOG_DBG
("%s: EGLÖrodu˚r: Po° imagê%p\n", 
__func__
, 
imageToPass
);

245 if(
	`NvMedüEglSåómProdu˚rPo°Image
(
˘x
->
eglProdu˚r
,

246 
imageToPass
,

247 
NULL
Ë!
NVMEDIA_STATUS_OK
)

249 
	`¥ötf
("%s: NvMedüEglSåómProdu˚rPo°ImagêÁûed\n", 
__func__
);

250 
˘x
->
quô
 = 
NVMEDIA_TRUE
;

254 
	`LOG_DBG
("%s: EGLÖrodu˚∏Gëtög imagê%p\n", 
__func__
, 
ªtImage
);

255 
	`NvMedüEglSåómProdu˚rGëImage
(
˘x
->
eglProdu˚r
, &
ªtImage
, 100);

257 if(
ªtImage
)

259 
	`LOG_DBG
("%s: EGLÖrodu˚r: GŸ imagê%p\n", 
__func__
, 
ªtImage
);

262 
	`ImageSurfUtûsRñó£Image
(
˘x
->
c⁄vît
, 
ªtImage
);

265 
	`LOG_DBG
("capture2d_AggrPostProcessorThreadFunc iteraration finished.\n");

268 
d⁄e
;

272 
d⁄e
:

273 if(
ˇ±uªdFøme
)

274 
	`ImageC≠tuªRñó£Image
(
ˇ±uªdFøme
);

275 
i
++;

277 if(
˘x
->
quô
)

281 
˘x
->
di•œyThªad
.
exôedFœg
 = 
NVMEDIA_TRUE
;

284 
	}
}

286 
NvMedüSètus


287 
	$ImgC≠tuª_SëC⁄figC≠tuªP¨amëîs
(
nvidüio
::
ov10635
::
ImgC≠tuª
 *
˘x
,

288 
NvMedüBoﬁ
 
aggªg©eFœg
,

289 
C⁄figC≠tuªP¨amëîs
 *
∑øm
)

291 i‡(!
˘x
 || !
∑øm
)

293 
	`LOG_ERR
("%s: BadÖarameterÖassed\n");

294  
NVMEDIA_STATUS_BAD_PARAMETER
;

297 
	`mem£t
(
∑øm
, 0, (
C⁄figC≠tuªP¨amëîs
));

298 
∑øm
->
öputF‹m©
 = (*)
˘x
->
ˇ±uªP¨ams
->öputF‹m©.
	`c_°r
();

299 
∑øm
->
surÁ˚F‹m©
 = (*)
˘x
->
ˇ±uªP¨ams
->surÁ˚F‹m©.
	`c_°r
();

300 
∑øm
->
ªsﬁuti⁄
 = (*)
˘x
->
ˇ±uªP¨ams
->ªsﬁuti⁄.
	`c_°r
();

301 
∑øm
->
öãrÁ˚
 = (*)
˘x
->
ˇ±uªP¨ams
->öãrÁ˚.
	`c_°r
();

302 
∑øm
->
csiL™es

˘x
->
ˇ±uªP¨ams
->csiLanes;

303 
∑øm
->
embeddedD©aLöesT›
 = 
˘x
->
ˇ±uªP¨ams
->embeddedDataLinesTop;

304 
∑øm
->
embeddedD©aLöesBŸtom
 = 
˘x
->
ˇ±uªP¨ams
->embeddedDataLinesBottom;

305 
∑øm
->
devi˚
 = 
˘x
->device;

306 
∑øm
->
aggªg©eFœg
 =ággregateFlag;

307 
∑øm
->
imagesNum
 = 
˘x
->imagesNum;

309 #i‡
BOARD_CODE_NAME
 >
DRIVE_PX_BOARD


310 
∑øm
->
pixñOrdî
 = (
˘x
->
çgMode
Ë? 
NVMEDIA_RAW_PIXEL_ORDER_RGGB
 :

311 
˘x
->
extImgDevi˚
->
¥›îty
.
pixñOrdî
;

314 if(
∑øm
->
surÁ˚F‹m©
[0] == '\0')

315 
∑øm
->
isSurÁ˚F‹m©U£d
 = 
NVMEDIA_FALSE
;

317 
∑øm
->
isSurÁ˚F‹m©U£d
 = 
NVMEDIA_TRUE
;

319  
NVMEDIA_STATUS_OK
;

320 
	}
}

323 
	$ImgC≠tuª_SëImageC≠tuªTe°C⁄figSëtögs
(
nvidüio
::
ov10635
::
ImgC≠tuª
 *
˘x
,

324 
ImageC≠tuªTe°C⁄fig
 *
i˝Te°C⁄fig
)

326 
	`mem£t
(
i˝Te°C⁄fig
, 0, (
ImageC≠tuªTe°C⁄fig
));

328 
i˝Te°C⁄fig
->
numBuf„rs
 = 
IMGCAPTURE_BUFFERPOOL_SIZE
;

329 
i˝Te°C⁄fig
->
quôFœg
 = &
˘x
->
quô
;

331 #i‡
BOARD_CODE_NAME
 >
DRIVE_PX_BOARD


332 
i˝Te°C⁄fig
->
numMöibur°Fømes
 = 1;

334 
	}
}

337 
	$ImgC≠tuª_SëImageSurfUtûsP¨amëîs
(
nvidüio
::
ov10635
::
ImgC≠tuª
 *
˘x
,

338 
NvU32
 
öputWidth
,

339 
NvU32
 
öputHeight
,

340 
ImageSurfUtûsP¨amëîs
 *
c⁄vîtP¨am
)

342 
	`mem£t
(
c⁄vîtP¨am
, 0, (
ImageSurfUtûsP¨amëîs
));

344 
c⁄vîtP¨am
->
öputF‹m©
 = (*)
˘x
->
ˇ±uªP¨ams
->öputF‹m©.
	`c_°r
();

345 
c⁄vîtP¨am
->
öputWidth
 = inputWidth;

346 
c⁄vîtP¨am
->
öputHeight
 = inputHeight;

347 
c⁄vîtP¨am
->
øwByãsPîPixñ
 = 
˘x
->rawBytesPerPixel;

349 #i‡
BOARD_CODE_NAME
 >
DRIVE_PX_BOARD


350 
c⁄vîtP¨am
->
pixñOrdî
 = 
˘x
->
extImgDevi˚
->
¥›îty
.pixelOrder;

353 
c⁄vîtP¨am
->
quôFœg
 = &
˘x
->
quô
;

355 #i‡
BOARD_CODE_NAME
 >
DRIVE_PX2_BOARD


356 
c⁄vîtP¨am
->
bDi•œy
 = 
NVMEDIA_TRUE
;

358 
	}
}

360 #i‡
BOARD_CODE_NAME
 =
JETSON_PRO_BOARD


362 
NvMedüSètus


363 
	$ImgC≠tuª_SëC⁄figISCInfoP¨amëîs
(
nvidüio
::
ov10635
::
ImgC≠tuª
 *
˘x
)

365 
C≠tuªC⁄figP¨ams
 *
ˇ±uªP¨ams
 = 
˘x
->captureParams;

366 
C⁄figISCInfo
 *
iscC⁄figInfo
 = &
˘x
->iscConfigInfo;

368 
iscC⁄figInfo
->
max9286_addªss
 = 
ˇ±uªP¨ams
->
desAddr
;

369 
iscC⁄figInfo
->
brﬂdˇ°_max9271_addªss
 = 
ˇ±uªP¨ams
->
brdc°SîAddr
;

370 
iscC⁄figInfo
->
brﬂdˇ°_£ns‹_addªss
 = 
ˇ±uªP¨ams
->
brdc°Sís‹Addr
;

372 
i
 = 0; i < 
MAX_AGGREGATE_IMAGES
; i++)

374 
iscC⁄figInfo
->
max9271_addªss
[
i
] = 
ˇ±uªP¨ams
->
£rAddr
[i];

375 
iscC⁄figInfo
->
£ns‹_addªss
[
i
] = 
ˇ±uªP¨ams
->
£ns‹Addr
[i];

378 
iscC⁄figInfo
->
i2cDevi˚
 = 
ˇ±uªP¨ams
->i2cDevice;

379 
˘x
->
ˇ±uªModuÀName
 = (*)
ˇ±uªP¨ams
->
öputDevi˚
.
	`c_°r
();

380 
iscC⁄figInfo
->
bﬂrd
 = (*)
ˇ±uªP¨ams
->bﬂrd.
	`c_°r
();

381 
iscC⁄figInfo
->
ªsﬁuti⁄
 = (*)
ˇ±uªP¨ams
->ªsﬁuti⁄.
	`c_°r
();

383 
iscC⁄figInfo
->
£ns‹sNum
 = 
˘x
->
imagesNum
;

384 if(
ˇ±uªP¨ams
->
öputF‹m©
 == "raw10")

385 
iscC⁄figInfo
->
øwCom¥essi⁄F‹m©
 = 
ISC_RAW10
;

386 if(
ˇ±uªP¨ams
->
öputF‹m©
 == "raw12")

387 
iscC⁄figInfo
->
øwCom¥essi⁄F‹m©
 = 
ISC_RAW1x12
;

388 if(
ˇ±uªP¨ams
->
öputF‹m©
 == "raw2x11")

389 
iscC⁄figInfo
->
øwCom¥essi⁄F‹m©
 = 
ISC_RAW2x11
;

390 if(
ˇ±uªP¨ams
->
öputF‹m©
 == "raw16log")

391 
iscC⁄figInfo
->
øwCom¥essi⁄F‹m©
 = 
ISC_RAW16LOG
;

393  
NVMEDIA_STATUS_OK
;

394 
	}
}

398 
NvMedüSètus


399 
	$ImgC≠tuª_SëExtImgDevP¨amëîs
(
nvidüio
::
ov10635
::
ImgC≠tuª
 *
˘x
, 
ExtImgDevP¨am
 *
c⁄figP¨am
)

401 
i
;

402 
C≠tuªC⁄figP¨ams
 *
ˇ±uªP¨ams
 = 
˘x
->captureParams;

404 
c⁄figP¨am
->
desAddr
 = 
ˇ±uªP¨ams
->desAddr;

405 
c⁄figP¨am
->
brdc°SîAddr
 = 
ˇ±uªP¨ams
->brdcstSerAddr;

406 
c⁄figP¨am
->
brdc°Sís‹Addr
 = 
ˇ±uªP¨ams
->brdcstSensorAddr;

408 
i
 = 0; i < 
MAX_AGGREGATE_IMAGES
; i++)

410 
c⁄figP¨am
->
£rAddr
[
i
] = 
ˇ±uªP¨ams
->serAddr[i];

411 
c⁄figP¨am
->
£ns‹Addr
[
i
] = 
ˇ±uªP¨ams
->sensorAddr[i];

414 
c⁄figP¨am
->
i2cDevi˚
 = 
ˇ±uªP¨ams
->i2cDevice;

415 
c⁄figP¨am
->
moduÀName
 = (*)
ˇ±uªP¨ams
->
öputDevi˚
.
	`c_°r
();

416 
c⁄figP¨am
->
bﬂrd
 = (*)
ˇ±uªP¨ams
->bﬂrd.
	`c_°r
();

417 
c⁄figP¨am
->
ªsﬁuti⁄
 = (*)
ˇ±uªP¨ams
->ªsﬁuti⁄.
	`c_°r
();

418 
c⁄figP¨am
->
ˇmM≠
 = &
˘x
->camMap;

419 
c⁄figP¨am
->
£ns‹sNum
 = 
˘x
->
imagesNum
;

420 
c⁄figP¨am
->
öputF‹m©
 = (*)
ˇ±uªP¨ams
->öputF‹m©.
	`c_°r
();

421 
c⁄figP¨am
->
öãrÁ˚
 = (*)
ˇ±uªP¨ams
->öãrÁ˚.
	`c_°r
();

422 
c⁄figP¨am
->
íabÀEmbLöes
 =

423 (
ˇ±uªP¨ams
->
embeddedD©aLöesT›
 || c≠tuªP¨ams->
embeddedD©aLöesBŸtom
) ?

424 
NVMEDIA_TRUE
 : 
NVMEDIA_FALSE
;

425 
c⁄figP¨am
->
öôülized
 = 
NVMEDIA_FALSE
;

426 
c⁄figP¨am
->
íabÀSimuœt‹
 = 
NVMEDIA_FALSE
;

428  
NVMEDIA_STATUS_OK
;

429 
	}
}

433 
«me•a˚
 
	gnvidüio
 {Çame•a˚ 
	gov10635
 {

435 
NvMedüSètus


436 
ImgC≠tuª_Inô
(
ImgC≠tuª
 **
˘x
, 
C≠tuªC⁄figP¨ams
 & 
ˇ±uªC⁄figCﬁÀ˘i⁄
, 
NvU32
 
imagesNum
)

438 i‡(
	gnvxio
::
Aµliˇti⁄
::
gë
().
gëVîbo£Fœg
())

439 
SëLogLevñ
(
LEVEL_DBG
);

441 
NvMedüSètus
 
	g°©us
;

442 
ImgC≠tuª
 *
	g˘xTmp
 = 
nuŒ±r
;

443 
ImageC≠tuªTe°C⁄fig
 
	gi˝Te°C⁄fig
;

444 
ImageSurfUtûsP¨amëîs
 
	gc⁄vîtP¨am
;

445 
C⁄figC≠tuªP¨amëîs
 
	gc⁄figP¨am
;

446 
C⁄figC≠tuªSëtögs
 
	gc⁄figSëtögs
;

447 
NvMedüBoﬁ
 
	gu£Aggªg©i⁄Fœg
 = 
NVMEDIA_TRUE
;

449 #i‡
BOARD_CODE_NAME
 >
DRIVE_PX_BOARD


450 
ExtImgDevP¨am
 
	gextImgDevP¨am
;

453 
NvU32
 
	göputWidth
 = 0;

454 
NvU32
 
	göputHeight
 = 0;

456 
mem£t
(&
c⁄figSëtögs
, 0, (
C⁄figC≠tuªSëtögs
));

458 if(!
	g˘x
)

460 
LOG_ERR
("%s: BadÖ¨amëî", 
__func__
);

461  
	gNVMEDIA_STATUS_BAD_PARAMETER
;

465 
	g˘xTmp
 = (
ImgC≠tuª
 *)
ˇŒoc
(1, (ImgCapture));

466 if(!
	g˘xTmp
)

468 
LOG_ERR
("%s: Ouào‡mem‹y", 
__func__
);

469  
	gNVMEDIA_STATUS_OUT_OF_MEMORY
;

472 if(
	gimagesNum
 > 
	gNVMEDIA_MAX_AGGREGATE_IMAGES
)

474 
LOG_WARN
("Maxággregate images is: %u\n",

475 
NVMEDIA_MAX_AGGREGATE_IMAGES
);

476 
	gimagesNum
 = 
NVMEDIA_MAX_AGGREGATE_IMAGES
;

479 
	g˘xTmp
->
	gimagesNum
 = 
imagesNum
;

480 
	g˘xTmp
->
	gdi•œyThªad
.
	gexôedFœg
 = 
NVMEDIA_TRUE
;

481 
	g˘xTmp
->
	gˇ±uªP¨ams
 = &
ˇ±uªC⁄figCﬁÀ˘i⁄
;

482 
	g˘xTmp
->
	gçgMode
 = 
NVMEDIA_FALSE
;

484 #i‡
BOARD_CODE_NAME
 >
DRIVE_PX_BOARD


485 
	g˘xTmp
->
	gˇmM≠
.
	gíabÀ
 = 
EXTIMGDEV_MAP_N_TO_ENABLE
(
imagesNum
);

486 
	g˘xTmp
->
	gˇmM≠
.
	gmask
 = 
CAM_MASK_DEFAULT
;

487 
	g˘xTmp
->
	gˇmM≠
.
	gcsiOut
 = 
CSI_OUT_DEFAULT
;

490 i‡(
ssˇnf
(
˘xTmp
->
ˇ±uªP¨ams
->
ªsﬁuti⁄
.
c_°r
(), "%ux%u", &
öputWidth
, &
öputHeight
) != 2)

492 
LOG_ERR
("%s: InvÆid i≈uàªsﬁuti⁄ %s\n", 
__func__
, 
˘xTmp
->
ˇ±uªP¨ams
->
ªsﬁuti⁄
.
c_°r
());

493 
	g°©us
 = 
NVMEDIA_STATUS_ERROR
;

494 
	gÁûed
;

497 i‡(
	gu£Aggªg©i⁄Fœg
)

498 
	göputWidth
 *
imagesNum
;

500 
	g˘xTmp
->
	gouçutWidth
 = 
öputWidth
;

501 
	g˘xTmp
->
	gouçutHeight
 = 
öputHeight
;

502 
	g˘xTmp
->
	gouçutSurfTy≥
 = 
NvMedüSurÁ˚Ty≥_Image_RGBA
;

504 i‡(
	gˇ±uªC⁄figCﬁÀ˘i⁄
.
	göputF‹m©
 == "raw12")

506 
˘xTmp
->
ouçutWidth
 >>= 1;

507 
	g˘xTmp
->
	gouçutHeight
 >>= 1;

511 i‡(!
InôülizeEGLDi•œy
(*
˘xTmp
))

513 
	g°©us
 = 
NVMEDIA_STATUS_ERROR
;

514 
LOG_ERR
("%s: FaûedÅÿöôülizêEGLDi•œy\n", 
__func__
);

515 
	gÁûed
;

519 i‡(!
InôülizeEGLSåóm
(*
˘xTmp
))

521 
	g°©us
 = 
NVMEDIA_STATUS_ERROR
;

522 
LOG_ERR
("%s: FaûedÅÿöôülizêEGLSåóm\n", 
__func__
);

523 
	gÁûed
;

526 #i‡
BOARD_CODE_NAME
 > 
JETSON_PRO_BOARD


528 
	gextImgDevP¨am
.
	g¶ave
 = 
NVMEDIA_FALSE
;

529 
	g°©us
 = 
ImgC≠tuª_SëExtImgDevP¨amëîs
(
˘xTmp
, &
extImgDevP¨am
);

530 if(
	g°©us
 !
NVMEDIA_STATUS_OK
)

532 
LOG_ERR
("%s: FaûedÅÿ£àISC devi˚Ö¨amëîs\n", 
__func__
);

533 
	gÁûed
;

536 
	g˘xTmp
->
	gextImgDevi˚
 = 
ExtImgDevInô
(&
extImgDevP¨am
);

537 if(!
	g˘xTmp
->
	gextImgDevi˚
)

539 
LOG_ERR
("%s: FaûedÅÿöôülizêISC devi˚s\n", 
__func__
);

540 
	g°©us
 = 
NVMEDIA_STATUS_ERROR
;

541 
	gÁûed
;

547 
	g˘xTmp
->
	gdevi˚
 = 
NvMedüDevi˚Cª©e
();

548 if(!
	g˘xTmp
->
	gdevi˚
)

550 
	g°©us
 = 
NVMEDIA_STATUS_ERROR
;

551 
LOG_ERR
("%s: FaûedÅÿ¸óã NvMedü devi˚\n", 
__func__
);

552 
	gÁûed
;

556 
	g°©us
 = 
ImgC≠tuª_SëC⁄figC≠tuªP¨amëîs
(
˘xTmp
,

557 
u£Aggªg©i⁄Fœg
,

558 &
c⁄figP¨am
);

559 if(
	g°©us
 !
NVMEDIA_STATUS_OK
)

561 
LOG_ERR
("%s: FaûedÅÿ£àˇ±uªÖ¨amëîs\n", 
__func__
);

562 
	gÁûed
;

565 
	g°©us
 = 
C⁄figC≠tuªPro˚ssP¨amëîs
(&
c⁄figP¨am
,

566 &
c⁄figSëtögs
);

567 if(
	g°©us
 !
NVMEDIA_STATUS_OK
)

569 
LOG_ERR
("%s: FaûedÅÿ¥o˚s†ˇ±uªÖ¨amëîs\n", 
__func__
);

570 
	gÁûed
;

572 
	g˘xTmp
->
	gøwByãsPîPixñ
 = 
C⁄figC≠tuªGëRawByãsPîPixñ
(&
c⁄figSëtögs
);

573 
ImgC≠tuª_SëImageC≠tuªTe°C⁄figSëtögs
(
˘xTmp
, &
i˝Te°C⁄fig
);

577 
ImgC≠tuª_SëImageSurfUtûsP¨amëîs
(
˘xTmp
,

578 
öputWidth
,

579 
öputHeight
,

580 &
c⁄vîtP¨am
);

582 
	g°©us
 = 
ImageSurfUtûsCª©e
(&
˘xTmp
->
c⁄vît
, ctxTmp->
devi˚
,

583 &
c⁄vîtP¨am
);

584 if(
	g°©us
 !
NVMEDIA_STATUS_OK
)

586 
LOG_ERR
("%s: FaûedÅÿ¸óã ImageSurfUtû†c⁄ãxt\n", 
__func__
);

587 
	gÁûed
;

593 #i‡
BOARD_CODE_NAME
 =
JETSON_PRO_BOARD


595 
	g°©us
 = 
ImgC≠tuª_SëC⁄figISCInfoP¨amëîs
(
˘xTmp
);

596 if(
	g°©us
 !
NVMEDIA_STATUS_OK
)

598 
LOG_ERR
("%s: FaûedÅÿ£àISC devi˚Ö¨amëîs\n", 
__func__
);

599 
	gÁûed
;

602 
	g˘xTmp
->
	giscC⁄figInfo
.
	göputSurfTy≥
 = 
c⁄figSëtögs
.
poﬁC⁄fig
.
surfTy≥
;

603 
	g˘xTmp
->
	giscC⁄figInfo
.
	gcsi_lök
 = 
c⁄figSëtögs
.
£âögs
.
öãrÁ˚Ty≥
;

604 
	g°©us
 = 
C⁄figISCCª©eDevi˚s
(&
˘xTmp
->
iscC⁄figInfo
,

605 &
˘xTmp
->
iscDevi˚s
,

606 
NVMEDIA_FALSE
,

607 
˘xTmp
->
ˇ±uªModuÀName
);

608 if(
	g°©us
 !
NVMEDIA_STATUS_OK
)

610 
LOG_ERR
("%s: FaûedÅÿ¸óã ISC devi˚s\n", 
__func__
);

611 
	gÁûed
;

617 
	g°©us
 = 
ImageC≠tuªCª©e
(&
˘xTmp
->
i˝Ctx
,

618 
C⁄figC≠tuªGëICPSëtögs
(&
c⁄figSëtögs
),

619 
C⁄figC≠tuªGëBuf„rPoﬁC⁄fig
(&
c⁄figSëtögs
),

620 &
i˝Te°C⁄fig
);

621 if(
	g°©us
 !
NVMEDIA_STATUS_OK
)

623 
LOG_ERR
("%s: FaûedÅÿ¸óã ImageC≠tuª C⁄ãxt\n", 
__func__
);

624 
	gÁûed
;

628 
	g˘xTmp
->
	gdi•œyThªad
.
	gexôedFœg
 = 
NVMEDIA_FALSE
;

629 
	g°©us
 = 
NvThªadCª©e
(&
˘xTmp
->
di•œyThªad
.
thªad
,

630 
ImgC≠tuª_di•œyThªadFunc
,

631 (*)
˘xTmp
, 
NV_THREAD_PRIORITY_NORMAL
);

633 if(
	g°©us
 !
NVMEDIA_STATUS_OK
)

635 
LOG_ERR
("%s: FailedÅo create saveánd displayÅhread\n",

636 
__func__
);

637 
	g˘xTmp
->
	gdi•œyThªad
.
	gexôedFœg
 = 
NVMEDIA_TRUE
;

638 
	gÁûed
;

641 #i‡
BOARD_CODE_NAME
 >
DRIVE_PX2_BOARD


643 if(
	g˘xTmp
->
	gextImgDevi˚
)

644 
ExtImgDevSèπ
(
˘xTmp
->
extImgDevi˚
);

647 *
	g˘x
 = 
˘xTmp
;

648  
	gNVMEDIA_STATUS_OK
;

649 
	gÁûed
:

650 
LOG_ERR
("%s: FaûedÅÿöôülizêImgC≠tuª\n",
__func__
);

651 
ImgC≠tuª_Föish
(
˘xTmp
);

652  
	g°©us
;

656 
ImgC≠tuª_Föish
(
ImgC≠tuª
 *
˘x
)

658 
NvMedüSètus
 
	g°©us
;

660 
	g˘x
->
	gquô
 = 
NVMEDIA_TRUE
;

663 !
	g˘x
->
	gdi•œyThªad
.
	gexôedFœg
)

665 
LOG_DBG
("%s: Waiting for saveánd displayÅhreadÅo quit\n",

666 
__func__
);

667 
u¶ìp
(1000);

670 if(
	g˘x
->
	gi˝Ctx
)

671 
ImageC≠tuªDe°roy
(
˘x
->
i˝Ctx
);

674 i‡(
	g˘x
->
	gc⁄vît
)

675 
ImageSurfUtûsDe°roy
(
˘x
->
c⁄vît
);

678 if(
	g˘x
->
	gdi•œyThªad
.
	gthªad
)

680 
	g°©us
 = 
NvThªadDe°roy
(
˘x
->
di•œyThªad
.
thªad
);

681 if(
	g°©us
 !
NVMEDIA_STATUS_OK
)

682 
LOG_ERR
("%s: FaûedÅÿde°roy savê™d di•œyÅhªad\n", 
__func__
);

685 #i‡
BOARD_CODE_NAME
 =
JETSON_PRO_BOARD


687 
C⁄figISCDe°royDevi˚s
(&
˘x
->
iscC⁄figInfo
, &˘x->
iscDevi˚s
);

691 i‡(
	g˘x
->
	gextImgDevi˚
)

692 
ExtImgDevDeöô
(
˘x
->
extImgDevi˚
);

697 
FöÆizeEglSåóm
(*
˘x
);

698 
FöÆizeEglDi•œy
(*
˘x
);

700 
‰ì
(
˘x
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10635/ImageCapture.hpp

29 #i‚de‡
IMGCAPTURE_H


30 
	#IMGCAPTURE_H


	)

32 #ifde‡
USE_CSI_OV10635


34 
	~"bﬂrd_«me.h
"

36 
	~"image_ˇ±uª.h
"

37 
	~"image_surf_utûs.h
"

39 
	~<nvmedü_isc.h
>

41 #i‡
BOARD_CODE_NAME
 =
JETSON_PRO_BOARD


42 
	~"c⁄fig_isc.h
"

44 
	~"img_dev.h
"

47 
	~<°rög
>

49 
	~<nvmedü.h
>

50 
	~<nvmedü_egl°ªam.h
>

51 
	~<cudaEGL.h
>

53 
	~"FømeSour˚/EGLAPIAc˚ss‹s.hµ
"

55 
	#QUEUE_ENQUEUE_TIMEOUT
 100

	)

56 
	#QUEUE_DEQUEUE_TIMEOUT
 100

	)

58 
	~"FømeSour˚/NvMedü/NvMedüCamîaC⁄figP¨ams.hµ
"

60 
«me•a˚
 
	gnvidüio
 {Çame•a˚ 
	gov10635
 {

63 
NvThªad
 *
	gthªad
;

64 
NvQueue
 *
	gthªadQueue
;

65 
NvMedüBoﬁ
 
	gexôedFœg
;

66 } 
	tImgC≠tuªThªad
;

71 
NvMedüDevi˚
 *
	gdevi˚
;

74 #i‡
BOARD_CODE_NAME
 =
JETSON_PRO_BOARD


75 
C⁄figISCDevi˚s
 
	giscDevi˚s
;

76 
C⁄figISCInfo
 
	giscC⁄figInfo
;

77 *
	gˇ±uªModuÀName
;

79 
ExtImgDevi˚
 *
	gextImgDevi˚
;

80 
ExtImgDevM≠Info
 
	gˇmM≠
;

84 
ImageC≠tuª
 *
	gi˝Ctx
;

87 
ImageSurfUtûs
 *
	gc⁄vît
;

90 
ImgC≠tuªThªad
 
	gdi•œyThªad
;

93 
C≠tuªC⁄figP¨ams
 *
	gˇ±uªP¨ams
;

94 
NvMedüBoﬁ
 
	gquô
;

95 
NvU32
 
	gimagesNum
;

96 
NvU32
 
	gøwByãsPîPixñ
;

99 
NvMedüEGLSåómProdu˚r
 * 
	geglProdu˚r
;

100 
EGLSåómKHR
 
	geglSåóm
;

101 
EGLDi•œy
 
	geglDi•œy
;

104 
CUeglSåómC⁄√˘i⁄
 
	gcudaC⁄√˘i⁄
;

105 
CUgøphicsResour˚
 
	gcudaResour˚
;

107 
NvMedüSurÁ˚Ty≥
 
	gouçutSurfTy≥
;

108 
NvU32
 
	gouçutWidth
;

109 
NvU32
 
	gouçutHeight
;

111 
NvMedüBoﬁ
 
	gu£Hi°ogømEquÆiz©i⁄
;

112 
NvMedüBoﬁ
 
	gçgMode
;

114 } 
	tImgC≠tuª
;

117 
NvMedüSètus


118 
ImgC≠tuª_CheckVîsi⁄
();

120 
NvMedüSètus


121 
ImgC≠tuª_Inô
(
ImgC≠tuª
 **
˘x
, 
C≠tuªC⁄figP¨ams
 & 
ˇ±uªC⁄figCﬁÀ˘i⁄
, 
NvU32
 
imagesNum
);

124 
ImgC≠tuª_Föish
(
ImgC≠tuª
 *
˘x
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/eglstrm_setup.cpp

11 #ifde‡
USE_CSI_OV10640


13 
	~<°dlib.h
>

14 
	~<°rög.h
>

16 
	~"ùp_øw.hµ
"

17 
	~"egl°rm_£tup.hµ
"

19 
usög
 
«me•a˚
 
	gnvidüio
::
egl_≠i
;

21 
EGLSåómKHR


22 
	$EGLSåómCª©e
(
EGLDi•œy
 
di•œy
,

23 
NvBoﬁ
 
fifoMode
)

25 #ifde‡
EGL_NV_°ªam_mëad©a


27 c⁄° 
EGLöt
 
°ªamAârMaûboxMode
[] = {

28 
EGL_METADATA0_SIZE_NV
, 32*1024,

29 
EGL_METADATA1_SIZE_NV
, 16*1024,

30 
EGL_METADATA2_SIZE_NV
, 16*1024,

31 
EGL_METADATA3_SIZE_NV
, 16*1024, 
EGL_NONE
 };

35 c⁄° 
EGLöt
 
°ªamAârMaûboxMode
[] = { 
EGL_NONE
 };

39 c⁄° 
EGLöt
 
°ªamAârFIFOMode
[] = {

40 
EGL_STREAM_FIFO_LENGTH_KHR
, 4,

41 
EGL_METADATA0_SIZE_NV
, 32*1024,

42 
EGL_METADATA1_SIZE_NV
, 16*1024,

43 
EGL_METADATA2_SIZE_NV
, 16*1024,

44 
EGL_METADATA3_SIZE_NV
, 16*1024, 
EGL_NONE
 };

46  
	`eglCª©eSåómKHR
(
di•œy
,

47 
fifoMode
 ? 
°ªamAârFIFOMode
 : 
°ªamAârMaûboxMode
);

48 
	}
}

50 
EglSåómClõ¡
*

51 
	$EGLSåómInô
(
EGLDi•œy
 
di•œy
,

52 
NvU32
 
numOfSåóms
,

53 
NvBoﬁ
 
fifoMode
) {

54 
NvU32
 
i
;

55 
EglSåómClõ¡
 *
˛õ¡
 = 
NULL
;

57 
˛õ¡
 = (
EglSåómClõ¡
 *)
	`mÆloc
((EglStreamClient));

58 i‡(!
˛õ¡
) {

59 
	`LOG_ERR
("%s:: faûedÅÿÆlo¯mem‹y\n", 
__func__
);

60  
NULL
;

63 
˛õ¡
->
numofSåóm
 = 
numOfSåóms
;

64 
˛õ¡
->
di•œy
 = display;

65 
˛õ¡
->
fifoMode
 = fifoMode;

67 
i
=0; i< 
numOfSåóms
; i++) {

69 
˛õ¡
->
eglSåóm
[
i
] = 
	`EGLSåómCª©e
(
di•œy
, clõ¡->
fifoMode
);

71 if(!
	`eglSåómAâribKHR
(
˛õ¡
->
di•œy
, clõ¡->
eglSåóm
[
i
], 
EGL_CONSUMER_LATENCY_USEC_KHR
, 16000)) {

72 
	`LOG_ERR
("EGLStreamSetAttr:ÉglStreamAttribKHR EGL_CONSUMER_LATENCY_USEC_KHR failed\n");

73 
Áû
;

75 if(!
	`eglSåómAâribKHR
(
˛õ¡
->
di•œy
, clõ¡->
eglSåóm
[
i
], 
EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR
, 16000)) {

76 
	`LOG_ERR
("EGLStreamSetAttr:ÉglStreamAttribKHR EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR failed\n");

77 
Áû
;

80  
˛õ¡
;

81 
Áû
:

82 
	`EGLSåómFöi
(
˛õ¡
);

83  
NULL
;

84 
	}
}

86 
NvMedüSètus
 
	$EGLSåómFöi
(
EglSåómClõ¡
 *
˛õ¡
) {

87 
NvU32
 
i
;

88 if(
˛õ¡
) {

89 
i
=0; i<
˛õ¡
->
numofSåóm
; i++) {

90 if(
˛õ¡
->
eglSåóm
[
i
])

91 
	`eglDe°roySåómKHR
(
˛õ¡
->
di•œy
, clõ¡->
eglSåóm
[
i
]);

93 
	`‰ì
(
˛õ¡
);

95  
NVMEDIA_STATUS_OK
;

96 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/eglstrm_setup.hpp

11 #i‚de‡
NVMEDIA_EGLSTRM_SETUP_HPP


12 
	#NVMEDIA_EGLSTRM_SETUP_HPP


	)

14 #ifde‡
USE_CSI_OV10640


16 
	~"nvmedü_egl°ªam.h
"

17 
	~"nvcomm⁄.h
"

19 
	~"FømeSour˚/EGLAPIAc˚ss‹s.hµ
"

23 
	s_EglSåómClõ¡
 {

24 
EGLDi•œy
 
	mdi•œy
;

25 
EGLSåómKHR
 
	meglSåóm
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

26 
NvBoﬁ
 
	mfifoMode
;

27 
NvU32
 
	mnumofSåóm
;

28 } 
	tEglSåómClõ¡
;

30 
EglSåómClõ¡
*

31 
EGLSåómInô
(
EGLDi•œy
 
di•œy
,

32 
NvU32
 
numOfSåóms
,

33 
NvBoﬁ
 
fifoMode
);

34 
NvMedüSètus


35 
EGLSåómFöi
(
EglSåómClõ¡
 *
˛õ¡
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/img_producer.cpp

10 #ifde‡
USE_CSI_OV10640


12 
	~"img_¥odu˚r.hµ
"

13 
	~"buf„r_utûs.h
"

14 
	~"egl°rm_£tup.hµ
"

16 
usög
 
«me•a˚
 
	gnvidüio
::
egl_≠i
;

19 
PrötMëad©aInfo
(

20 
NvMedüIPPComp⁄ít
 *
ouçutComp⁄ë
,

21 
NvMedüIPPComp⁄ítOuçut
 *
ouçut
);

23 
	$PrötMëad©aInfo
(

24 
NvMedüIPPComp⁄ít
 *
ouçutComp⁄ë
,

25 
NvMedüIPPComp⁄ítOuçut
 *
ouçut
)

27 
NvMedüIPPImageInf‹m©i⁄
 
imageInfo
;

28 
NvMedüIPPPr›îtyC⁄åﬁs
 
c⁄åﬁ
;

29 
NvMedüIPPPr›îtyDy«mic
 
dy«mic
;

30 
NvMedüIPPEmbeddedD©aInf‹m©i⁄
 
embeddedD©aInfo
;

31 
NvU32
 
t›Size
, 
bŸtomSize
;

33 if(!
ouçut
 || !ouçut->
mëad©a
) {

37 
	`NvMedüIPPMëad©aGë
(

38 
ouçut
->
mëad©a
,

39 
NVMEDIA_IPP_METADATA_IMAGE_INFO
,

40 &
imageInfo
,

41 (
imageInfo
));

43 
	`LOG_DBG
("Metadata %p: frameId %u, frame sequence #%u, cameraId %u\n",

44 
ouçut
->
mëad©a
, 
imageInfo
.
‰ameId
,

45 
imageInfo
.
‰ameSequí˚Numbî
, imageInfo.
ˇmîaId
);

47 
	`NvMedüIPPMëad©aGë
(

48 
ouçut
->
mëad©a
,

49 
NVMEDIA_IPP_METADATA_CONTROL_PROPERTIES
,

50 &
c⁄åﬁ
,

51 (
c⁄åﬁ
));

53 
	`NvMedüIPPMëad©aGë
(

54 
ouçut
->
mëad©a
,

55 
NVMEDIA_IPP_METADATA_DYNAMIC_PROPERTIES
,

56 &
dy«mic
,

57 (
dy«mic
));

59 
	`NvMedüIPPMëad©aGë
(

60 
ouçut
->
mëad©a
,

61 
NVMEDIA_IPP_METADATA_EMBEDDED_DATA_INFO
,

62 &
embeddedD©aInfo
,

63 (
embeddedD©aInfo
));

65 
	`LOG_DBG
("Metadata %p:Émbedded dataÅop (base, size) = (%#x, %u)\n",

66 
ouçut
->
mëad©a
,

67 
embeddedD©aInfo
.
t›Ba£RegAddªss
,

68 
embeddedD©aInfo
.
t›EmbeddedD©aSize
);

70 
	`LOG_DBG
("Metadata %p:Émbedded data bottom (base, size) = (%#x, %u)\n",

71 
ouçut
->
mëad©a
,

72 
embeddedD©aInfo
.
bŸtomBa£RegAddªss
,

73 
embeddedD©aInfo
.
bŸtomEmbeddedD©aSize
);

75 
t›Size
 = 
	`NvMedüIPPMëad©aGëSize
(

76 
ouçut
->
mëad©a
,

77 
NVMEDIA_IPP_METADATA_EMBEDDED_DATA_TOP
);

79 
bŸtomSize
 = 
	`NvMedüIPPMëad©aGëSize
(

80 
ouçut
->
mëad©a
,

81 
NVMEDIA_IPP_METADATA_EMBEDDED_DATA_BOTTOM
);

82 if–
t›Size
 !
embeddedD©aInfo
.
t›EmbeddedD©aSize
 ||

83 
bŸtomSize
 !
embeddedD©aInfo
.
bŸtomEmbeddedD©aSize
 ) {

84 
	`LOG_ERR
("Metadata %p:Émbedded data sizes mismatch\n",

85 
ouçut
->
mëad©a
);

87 
	}
}

90 
NvMedüSètus


91 
	$SídIPPHum™Visi⁄OutToEglSåóm
(

92 
ImageProdu˚rCtx
 *
˘x
,

93 
NvU32
 
ùpNum
,

94 
NvMedüIPPComp⁄ítOuçut
 *
ouçut
)

96 
NvMedüImage
 *
ªtImage
 = 
NULL
;

97 
NvU32
 
timeoutMS
 = 
EGL_PRODUCER_TIMEOUT_MS
 * 
˘x
->
ùpNum
;

98 
ªåy
 = 
EGL_PRODUCER_GET_IMAGE_MAX_RETRIES
;

99 
NvMedüIPPComp⁄ítOuçut
 
ªtOuçut
;

100 *
…mD©a
;

101 
NvU32
 
…mD©aSize
 = 0;

102 
ImageProdu˚rCtx
* 
eglSåmProdu˚rCtx
;

103 
NvMedüSètus
 
°©us
 = 
	`NvMedüIPPMëad©aGëAddªss
(
ouçut
->
mëad©a
,

104 
NVMEDIA_IPP_METADATA_LTM_DATA
,

105 &
…mD©a
,

106 &
…mD©aSize
);

107 if(
°©us
 !
NVMEDIA_STATUS_OK
) {

108 
	`LOG_ERR
("Error getting LTM info from metadata\n");

109  
°©us
;

112 
eglSåmProdu˚rCtx
 = 
˘x
;

116 
°©us
 = 
	`NvMedüEglSåómProdu˚rPo°MëaD©a
(
eglSåmProdu˚rCtx
->
eglProdu˚r
[
ùpNum
],

118 &
…mD©aSize
,

121 i‡(
°©us
 !
NVMEDIA_STATUS_OK
) {

122 
	`LOG_ERR
("%s: NvMedüEglSåómProdu˚rPo°MëaD©®\
 Mëad©®sizêÁûed %d", 
__func__
, 
ùpNum
);

124 *
˘x
->
quô
 = 
NVMEDIA_TRUE
;

125  
°©us
;

129 
°©us
 = 
	`NvMedüEglSåómProdu˚rPo°MëaD©a
(
eglSåmProdu˚rCtx
->
eglProdu˚r
[
ùpNum
],

131 
…mD©a
,

133 
…mD©aSize
);

134 i‡(
°©us
 !
NVMEDIA_STATUS_OK
) {

135 
	`LOG_ERR
("%s: NvMedüEglSåómProdu˚rPo°MëaD©®\
 Mëad©®Áûed %d", 
__func__
, 
ùpNum
);

137 *
˘x
->
quô
 = 
NVMEDIA_TRUE
;

138  
°©us
;

141 
	`LOG_DBG
("%s: EGLÖrodu˚r: Po° imagê%p\n", 
__func__
, 
ouçut
->
image
);

142 if(
	`IsFaûed
(
	`NvMedüEglSåómProdu˚rPo°Image
(
eglSåmProdu˚rCtx
->
eglProdu˚r
[
ùpNum
],

143 
ouçut
->
image
,

144 
NULL
))) {

145 
	`LOG_ERR
("%s: NvMedüEglSåómProdu˚rPo°ImagêÁûed\n", 
__func__
);

146  
°©us
;

151 if(!
˘x
->
eglProdu˚rGëImageFœg
[
ùpNum
]) {

152 
˘x
->
eglProdu˚rGëImageFœg
[
ùpNum
] = 
NVMEDIA_TRUE
;

153  
°©us
;

158 
°©us
 = 
	`NvMedüEglSåómProdu˚rGëImage
(
eglSåmProdu˚rCtx
->
eglProdu˚r
[
ùpNum
],

159 &
ªtImage
,

160 
timeoutMS
);

161 
ªåy
--;

162 } 
ªåy
 >0 && !
ªtImage
 && !(*(
˘x
->
quô
)));

164 if(
ªtImage
 && 
°©us
 =
NVMEDIA_STATUS_OK
) {

165 
	`LOG_DBG
("%s: EGLÖrodu˚∏# %d: GŸ imagê%p\n", 
__func__
, 
ùpNum
, 
ªtImage
);

166 
ªtOuçut
.
image
 = 
ªtImage
;

168 
°©us
 = 
	`NvMedüIPPComp⁄ítRëu∫Ouçut
(
˘x
->
ouçutComp⁄ít
[
ùpNum
],

169 &
ªtOuçut
);

170 i‡(
°©us
 !
NVMEDIA_STATUS_OK
) {

171 
	`LOG_ERR
("%s: NvMedüIPPComp⁄ítRëu∫OuçuàÁûed %d", 
__func__
, 
ùpNum
);

172 *
˘x
->
quô
 = 
NVMEDIA_TRUE
;

173  
°©us
;

177 
	`LOG_DBG
("%s: EGLÖrodu˚r:Çÿªtu∫ image\n", 
__func__
);

178 *
˘x
->
quô
 = 
NVMEDIA_TRUE
;

179 
°©us
 = 
NVMEDIA_STATUS_ERROR
;

181  
°©us
;

182 
	}
}

185 
	$ImageProdu˚rProc
 (

186 *
d©a
,

187 *
u£r_d©a
)

189 
ImageProdu˚rCtx
 *
˘x
 = (ImageProdu˚rCtx *)
d©a
;

190 
NvMedüSètus
 
°©us
;

191 
NvU32
 
i
;

192 if(!
˘x
) {

193 
	`LOG_ERR
("%s: BadÖ¨amëî\n", 
__func__
);

197 
	`LOG_INFO
("Gë IPP ouçuàthªad i†a˘ive, iµNum=%d\n", 
˘x
->
ùpNum
);

198 !(*
˘x
->
quô
)) {

199 
i
 = 0; i < 
˘x
->
ùpNum
; i++) {

200 
NvMedüIPPComp⁄ítOuçut
 
ouçut
;

203 
°©us
 = 
	`NvMedüIPPComp⁄ítGëOuçut
(
˘x
->
ouçutComp⁄ít
[
i
],

204 
GET_FRAME_TIMEOUT
,

205 &
ouçut
);

207 i‡(
°©us
 =
NVMEDIA_STATUS_OK
) {

208 if(
˘x
->
showTimeSèmp
) {

209 
NvMedüGlobÆTime
 
globÆTimeSèmp
;

211 if(
	`IsSuc˚ed
(
	`NvMedüImageGëGlobÆTimeSèmp
(
ouçut
.
image
, &
globÆTimeSèmp
))) {

212 
	`LOG_INFO
("IPP: Pùñöe: %d Time°amp: %Œd.%06Œd\n", 
i
,

213 
globÆTimeSèmp
 / 1000000, globalTimeStamp % 1000000);

215 
	`LOG_ERR
("%s: GëÅime-°am∞Áûed\n", 
__func__
);

216 *
˘x
->
quô
 = 
NVMEDIA_TRUE
;

220 if(
˘x
->
showMëad©aFœg
) {

221 
	`PrötMëad©aInfo
(
˘x
->
ouçutComp⁄ít
[
i
], &
ouçut
);

224 
°©us
 = 
	`SídIPPHum™Visi⁄OutToEglSåóm
(
˘x
,
i
,&
ouçut
);

226 if(
°©us
 !
NVMEDIA_STATUS_OK
) {

227 *
˘x
->
quô
 = 
NVMEDIA_TRUE
;

234 *
˘x
->
¥odu˚rExôed
 = 
NVMEDIA_TRUE
;

235 
	}
}

237 
ImageProdu˚rCtx
*

238 
	$ImageProdu˚rInô
(
NvMedüDevi˚
 *
devi˚
,

239 
EglSåómClõ¡
 *
°ªamClõ¡
,

240 
NvU32
 
width
, NvU32 
height
,

241 
I¡î›C⁄ãxt
 *
öãr›Ctx
)

243 
NvU32
 
i
;

244 
ImageProdu˚rCtx
 *
˛õ¡
 = 
NULL
;

246 if(!
devi˚
) {

247 
	`LOG_ERR
("%s: invÆid NvMedü devi˚\n", 
__func__
);

248  
NULL
;

251 
˛õ¡
 = (
ImageProdu˚rCtx
 *)
	`mÆloc
((ImageProducerCtx));

252 i‡(!
˛õ¡
) {

253 
	`LOG_ERR
("%s:: faûedÅÿÆlo¯mem‹y\n", 
__func__
);

254  
NULL
;

256 
	`mem£t
(
˛õ¡
, 0, (
ImageProdu˚rCtx
));

258 
˛õ¡
->
devi˚
 = device;

259 
˛õ¡
->
width
 = width;

260 
˛õ¡
->
height
 = height;

261 
˛õ¡
->
ùpNum
 = 
öãr›Ctx
->ippNum;

262 
˛õ¡
->
surÁ˚Ty≥
 = 
öãr›Ctx
->
eglProdSurÁ˚Ty≥
;

263 
˛õ¡
->
eglDi•œy
 = 
°ªamClõ¡
->
di•œy
;

264 
˛õ¡
->
¥odu˚rExôed
 = &
öãr›Ctx
->producerExited;

265 
˛õ¡
->
quô
 = 
öãr›Ctx
->quit;

266 
˛õ¡
->
showTimeSèmp
 = 
öãr›Ctx
->showTimeStamp;

267 
˛õ¡
->
showMëad©aFœg
 = 
öãr›Ctx
->showMetadataFlag;

269 
i
=0; i< 
öãr›Ctx
->
ùpNum
; i++) {

270 
˛õ¡
->
ouçutComp⁄ít
[
i
] = 
öãr›Ctx
->outputComponent[i];

272 
EGLöt
 
°ªamSèã
 = 0;

273 
˛õ¡
->
eglSåóm
[
i
] = 
°ªamClõ¡
->eglStream[i];

274 
°ªamSèã
 !
EGL_STREAM_STATE_CONNECTING_KHR
) {

275 if(!
	`eglQuîySåómKHR
(
°ªamClõ¡
->
di•œy
,

276 
°ªamClõ¡
->
eglSåóm
[
i
],

277 
EGL_STREAM_STATE_KHR
,

278 &
°ªamSèã
)) {

279 
	`LOG_ERR
("eglQueryStreamKHR EGL_STREAM_STATE_KHR failed\n");

283 
˛õ¡
->
eglProdu˚r
[
i
] = 
	`NvMedüEglSåómProdu˚rCª©e
(˛õ¡->
devi˚
,

284 
˛õ¡
->
eglDi•œy
,

285 
˛õ¡
->
eglSåóm
[
i
],

286 
˛õ¡
->
surÁ˚Ty≥
,

287 
˛õ¡
->
width
/˛õ¡->
ùpNum
,

288 
˛õ¡
->
height
);

289 if(!
˛õ¡
->
eglProdu˚r
[
i
]) {

290 
	`LOG_ERR
("%s: FaûedÅÿ¸óã EGLÖrodu˚r\n", 
__func__
);

291 
Áû
;

294  
˛õ¡
;

295 
Áû
:

296 
	`ImageProdu˚rFöi
(
˛õ¡
);

297  
NULL
;

298 
	}
}

300 
NvMedüSètus
 
	$ImageProdu˚rFöi
(
ImageProdu˚rCtx
 *
˘x
)

302 
NvU32
 
i
;

303 
NvMedüImage
 *
ªtImage
 = 
NULL
;

304 
NvMedüIPPComp⁄ítOuçut
 
ouçut
;

305 
	`LOG_DBG
("ImageProducerFini: start\n");

306 if(
˘x
) {

307 
i
 = 0; i < 
˘x
->
ùpNum
; i++) {

310 
ªtImage
 = 
NULL
;

311 
	`NvMedüEglSåómProdu˚rGëImage
(
˘x
->
eglProdu˚r
[
i
],

312 &
ªtImage
,

314 if(
ªtImage
) {

315 
	`LOG_DBG
("%s: EGLÖrodu˚r: GŸ imagê%p\n", 
__func__
, 
ªtImage
);

316 
ouçut
.
image
 = 
ªtImage
;

317 
	`NvMedüIPPComp⁄ítRëu∫Ouçut
(
˘x
->
ouçutComp⁄ít
[
i
],

318 &
ouçut
);

320 } 
ªtImage
);

323 
i
=0; i<
˘x
->
ùpNum
; i++) {

324 if(
˘x
->
eglProdu˚r
[
i
])

325 
	`NvMedüEglSåómProdu˚rDe°roy
(
˘x
->
eglProdu˚r
[
i
]);

327 
	`‰ì
(
˘x
);

329 
	`LOG_DBG
("ImageProducerFini:Énd\n");

330  
NVMEDIA_STATUS_OK
;

331 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/img_producer.hpp

10 #i‚de‡
NVMEDIA_IMAGEPRODUCER_HPP


11 
	#NVMEDIA_IMAGEPRODUCER_HPP


	)

13 #ifde‡
USE_CSI_OV10640


15 
	~"egl°rm_£tup.hµ
"

16 
	~"öãr›.hµ
"

18 
	#EGL_PRODUCER_TIMEOUT_MS
 16

	)

19 
	#GET_FRAME_TIMEOUT
 500

	)

24 
	#EGL_PRODUCER_GET_IMAGE_MAX_RETRIES
 1000

	)

27 
NvMedüDevi˚
 *
	mdevi˚
;

28 *
	möputImages
;

29 
NvU32
 
	mwidth
;

30 
NvU32
 
	mheight
;

31 
NvU32
 
	mùpNum
;

32 
NvU32
 
	m‰ameCou¡
;

33 
NvMedüSurÁ˚Ty≥
 
	msurÁ˚Ty≥
;

34 
NvMedüIPPComp⁄ít
 *
	mouçutComp⁄ít
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

35 
NvMedüBoﬁ
 
	meglProdu˚rGëImageFœg
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

37 
NvMedüEGLSåómProdu˚r
 *
	meglProdu˚r
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

38 
EGLSåómKHR
 
	meglSåóm
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

39 
EGLDi•œy
 
	meglDi•œy
;

40 
NvMedüBoﬁ
 *
	m¥odu˚rExôed
;

41 
NvMedüBoﬁ
 *
	mquô
;

42 
NvMedüBoﬁ
 
	mshowTimeSèmp
;

43 
NvMedüBoﬁ
 
	mshowMëad©aFœg
;

44 
NvMedüBoﬁ
 
	mfifoMode
;

46 } 
	tImageProdu˚rCtx
;

49 
ImageProdu˚rCtx
*

50 
ImageProdu˚rInô
(
NvMedüDevi˚
 *
devi˚
,

51 
EglSåómClõ¡
 *
°ªamClõ¡
,

52 
NvU32
 
width
, NvU32 
height
,

53 
I¡î›C⁄ãxt
 *
öãr›Ctx
);

55 
NvMedüSètus
 
ImageProdu˚rFöi
(
ImageProdu˚rCtx
 *
˛õ¡
);

60 
ImageProdu˚rProc
(*
d©a
, *
u£r_d©a
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/interop.cpp

11 #ifde‡
USE_CSI_OV10640


13 
	~<°dio.h
>

14 
	~<°dlib.h
>

15 
	~<sig«l.h
>

16 
	~<°rög.h
>

17 
	~<uni°d.h
>

19 
	~"log_utûs.h
"

20 
	~"öãr›.hµ
"

21 
	~"img_¥odu˚r.hµ
"

23 
	~<cuda_ru¡ime.h
>

25 
NvMedüSètus


26 
	$I¡î›Inô
 (

27 
I¡î›C⁄ãxt
 *
öãr›Ctx
,

28 
IPPCtx
 *
ùpCtx
)

30 
NvMedüSètus
 
°©us
 = 
NVMEDIA_STATUS_ERROR
;

31 
NvU32
 
i
, 
fifoMode
;

32 i‡(!
öãr›Ctx
 || !
ùpCtx
) {

33 
	`LOG_ERR
("%s: BadÖ¨amëî", 
__func__
);

34  
NVMEDIA_STATUS_BAD_PARAMETER
;

38 
öãr›Ctx
->
ùpNum
 = 
ùpCtx
->
imagesNum
;

39 
öãr›Ctx
->
width
 = 
ùpCtx
->
öputWidth
 / iµCtx->
imagesNum
;

40 
öãr›Ctx
->
height
 = 
ùpCtx
->
öputHeight
;

41 
öãr›Ctx
->
devi˚
 = 
ùpCtx
->device;

42 
öãr›Ctx
->
quô
 = &
ùpCtx
->quit;

43 
öãr›Ctx
->
showTimeSèmp
 = 
ùpCtx
->showTimeStamp;

44 
öãr›Ctx
->
showMëad©aFœg
 = 
ùpCtx
->showMetadataFlag;

47 
fifoMode
 = 0;

49 i‡(!
nvidüio
::
egl_≠i
::
	`£tupEGLExãnsi⁄s
())

51 
	`LOG_ERR
("%s: failedÅo initializeÉglápi \n");

52  
NVMEDIA_STATUS_ERROR
;

55 
öãr›Ctx
->
eglDi•œy
 = 
nvidüio
::
EGLDi•œyAc˚ss‹
::
	`gëIn°™˚
();

56 if(
öãr›Ctx
->
eglDi•œy
 =
EGL_NO_DISPLAY
)

58 
	`LOG_ERR
("%s: failedÅo initializeÉgl \n");

59  
NVMEDIA_STATUS_ERROR
;

63 
öãr›Ctx
->
eglSåmCtx
 = 
	`EGLSåómInô
(öãr›Ctx->
eglDi•œy
,

64 
öãr›Ctx
->
ùpNum
, 
fifoMode
);

65 if(!
öãr›Ctx
->
eglSåmCtx
) {

66 
	`LOG_ERR
("%s: failedÅo createÉgl stream ctx \n");

67 
°©us
 = 
NVMEDIA_STATUS_ERROR
;

68 
Áûed
;

71 
öãr›Ctx
->
eglProdSurÁ˚Ty≥
 = 
NvMedüSurÁ˚Ty≥_Image_YUV_420
;

72 
i
 = 0; i < 
öãr›Ctx
->
ùpNum
; i++) {

73 
öãr›Ctx
->
ouçutComp⁄ít
[
i
] = 
ùpCtx
->outputComponent[i];

77 
öãr›Ctx
->
c⁄sumîCtx
 = 
ùpCtx
->
cudaC⁄√˘i⁄
;

78 
ùpCtx
->
eglDi•œy
 = 
öãr›Ctx
->
eglSåmCtx
->
di•œy
;

80 
i
 = 0; i < 
öãr›Ctx
->
ùpNum
; ++i)

81 
ùpCtx
->
eglSåóm
[
i
] = 
öãr›Ctx
->
eglSåmCtx
->eglStream[i];

83  
NVMEDIA_STATUS_OK
;

85 
Áûed
:

86 
	`LOG_ERR
("%s: Faûed", 
__func__
);

87 
	`I¡î›Föi
(
öãr›Ctx
);

88  (
°©us
);

89 
	}
}

91 
NvMedüSètus
 
	$I¡î›Proc
 (* 
d©a
)

93 
I¡î›C⁄ãxt
 *
öãr›Ctx
 = 
NULL
;

94 
NvMedüSètus
 
°©us
 = 
NVMEDIA_STATUS_ERROR
;

95 if(!
d©a
) {

96 
	`LOG_ERR
("%s: BadÖ¨amëî\n", 
__func__
);

97  
°©us
;

99 
öãr›Ctx
 = (
I¡î›C⁄ãxt
 *)
d©a
;

100 
öãr›Ctx
->
c⁄sumîInôD⁄e
 = 
NVMEDIA_FALSE
;

101 
öãr›Ctx
->
c⁄sumîExôed
 = 
NVMEDIA_FALSE
;

105 i‡(
cudaSuc˚ss
 !
	`cudaFªe
(
NULL
))

106 
Áûed
;

109 
NvU32
 
i
 = 0; i < 
öãr›Ctx
->
ùpNum
; ++i)

111 
CUeglSåómC⁄√˘i⁄
 * 
c⁄√˘i⁄
 = (CUeglSåómC⁄√˘i⁄ *)
öãr›Ctx
->
c⁄sumîCtx
 + 
i
;

112 
CUªsu…
 
cuªsu…
 = 
	`cuEGLSåómC⁄sumîC⁄√˘
(
c⁄√˘i⁄
, 
öãr›Ctx
->
eglSåmCtx
->
eglSåóm
[
i
]);

114 i‡(
CUDA_SUCCESS
 !
cuªsu…
)

116 
	`¥ötf
("C⁄√˘ CUDA EGL såóm c⁄sumî ERROR %d\n", 
cuªsu…
);

117 
Áûed
;

121 
öãr›Ctx
->
c⁄sumîInôD⁄e
 = 
NVMEDIA_TRUE
;

124 
öãr›Ctx
->
¥odu˚rExôed
 = 
NVMEDIA_FALSE
;

125 
öãr›Ctx
->
eglProdSurÁ˚Ty≥
 = 
NvMedüSurÁ˚Ty≥_Image_YUV_420
;

126 
öãr›Ctx
->
¥odu˚rCtx
 = 
	`ImageProdu˚rInô
(öãr›Ctx->
devi˚
,

127 
öãr›Ctx
->
eglSåmCtx
,

128 
öãr›Ctx
->
width
,

129 
öãr›Ctx
->
height
,

130 
öãr›Ctx
);

131 if(!
öãr›Ctx
->
¥odu˚rCtx
)

133 
	`LOG_ERR
("%s: FaûedÅÿInô ImagêProdu˚r", 
__func__
);

134 
Áûed
;

137 !(*
öãr›Ctx
->
quô
Ë&& !(öãr›Ctx->
c⁄sumîInôD⁄e
)) {

138 
	`u¶ìp
(1000);

139 
	`LOG_DBG
("Waiting for consumer initÅo happen\n");

142 
	`NvU32
 (*
	tpFunc
)(*
	tpP¨am
);

144 if(
	`IsFaûed
(
	`NvThªadCª©e
(&
öãr›Ctx
->
gëOuçutThªad
,

145 (
pFunc
)&
ImageProdu˚rProc
,

146 (*)
öãr›Ctx
->
¥odu˚rCtx
,

147 
NV_THREAD_PRIORITY_NORMAL
))) {

148 
öãr›Ctx
->
¥odu˚rExôed
 = 
NVMEDIA_TRUE
;

149 
Áûed
;

152  
NVMEDIA_STATUS_OK
;

153 
Áûed
:

154 
	`LOG_ERR
("%s: I¡î›Pro¯Faûed", 
__func__
);

155 
öãr›Ctx
->
¥odu˚rExôed
 = 
NVMEDIA_TRUE
;

156 
öãr›Ctx
->
c⁄sumîExôed
 = 
NVMEDIA_TRUE
;

157  
°©us
;

159 
	}
}

160 
NvMedüSètus


161 
	$I¡î›Föi
 (

162 
I¡î›C⁄ãxt
 *
öãr›Ctx
)

164 i‡(!
öãr›Ctx
)

165  
NVMEDIA_STATUS_OK
;

167 !
öãr›Ctx
->
¥odu˚rExôed
)

169 
	`LOG_DBG
("%s: Waôög f‹Örodu˚∏thªadÅÿquô\n", 
__func__
);

170 
	`u¶ìp
(100);

174 if(
	`IsFaûed
(
	`ImageProdu˚rFöi
((
ImageProdu˚rCtx
 *)
öãr›Ctx
->
¥odu˚rCtx
))) {

175 
	`LOG_ERR
("%s: ImageProdu˚rFöòÁûed \n", 
__func__
);

179 
öãr›Ctx
->
c⁄sumîExôed
 = 
NVMEDIA_TRUE
;

182 i‡(
cudaSuc˚ss
 =
	`cudaFªe
(
NULL
))

184 
NvU32
 
i
 = 0; i < 
öãr›Ctx
->
ùpNum
; ++i)

186 
CUeglSåómC⁄√˘i⁄
 * 
c⁄√˘i⁄
 = (CUeglSåómC⁄√˘i⁄ *)
öãr›Ctx
->
c⁄sumîCtx
 + 
i
;

187 
CUªsu…
 
cuªsu…
 = 
	`cuEGLSåómC⁄sumîDisc⁄√˘
(
c⁄√˘i⁄
);

189 i‡(
CUDA_SUCCESS
 !
cuªsu…
)

190 
	`¥ötf
("Disc⁄√˘ CUDA EGL såóm c⁄sumî ERROR %d\n", 
cuªsu…
);

195 if(
	`IsFaûed
(
	`EGLSåómFöi
(
öãr›Ctx
->
eglSåmCtx
))) {

196 
	`LOG_ERR
("%s: EGLSåómFöòÁûed \n", 
__func__
);

199 i‡(
öãr›Ctx
->
gëOuçutThªad
)

200 
	`NvThªadDe°roy
(
öãr›Ctx
->
gëOuçutThªad
);

202  
NVMEDIA_STATUS_OK
;

203 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/interop.hpp

11 #i‚de‡
NVMEDIA_INTEROP_HPP


12 
	#NVMEDIA_INTEROP_HPP


	)

14 #ifde‡
USE_CSI_OV10640


16 
	~<nvcomm⁄.h
>

17 
	~<nvmedü.h
>

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<uni°d.h
>

23 
	~"maö.hµ
"

24 
	~"egl°rm_£tup.hµ
"

25 
	~"log_utûs.h
"

26 
	~"ùp_øw.hµ
"

31 
NvMedüDevi˚
 *
	mdevi˚
;

33 
EGLDi•œy
 
	meglDi•œy
;

34 
EglSåómClõ¡
 *
	meglSåmCtx
;

35 *
	m¥odu˚rCtx
;

36 *
	mc⁄sumîCtx
;

37 
NvThªad
 *
	mgëOuçutThªad
;

40 
NvMedüSurÁ˚Ty≥
 
	meglProdSurÁ˚Ty≥
;

41 
NvMedüBoﬁ
 
	m¥odu˚rExôed
;

42 
NvMedüBoﬁ
 
	mc⁄sumîExôed
;

43 
NvMedüBoﬁ
 
	mc⁄sumîInôD⁄e
;

44 
NvMedüBoﬁ
 
	möãr›Exôed
;

45 
NvMedüBoﬁ
 *
	mquô
;

48 
NvU32
 
	mwidth
;

49 
NvU32
 
	mheight
;

50 
NvU32
 
	mùpNum
;

51 
NvMedüIPPComp⁄ít
 *
	mouçutComp⁄ít
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

52 
NvMedüBoﬁ
 
	mshowTimeSèmp
;

53 
NvMedüBoﬁ
 
	mshowMëad©aFœg
;

55 } 
	tI¡î›C⁄ãxt
;

59 
NvMedüSètus


60 
I¡î›Inô
 (
I¡î›C⁄ãxt
 *
öãr›Ctx
, 
IPPCtx
 *
ùpCtx
);

64 
NvMedüSètus


65 
I¡î›Proc
 (* 
d©a
);

69 
NvMedüSètus


70 
I¡î›Föi
(
I¡î›C⁄ãxt
 *
öãr›Ctx
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/ipp_component.cpp

11 #ifde‡
USE_CSI_OV10640


13 
	~"ùp_comp⁄ít.hµ
"

14 
	~"∂ugö.h
"

15 
	~"nvmedü_a˝.h
"

17 
	#BUFFER_POOLS_COUNT
 3

	)

19 
NvMedüSètus


20 
	$IPPSëICPBuf„rPoﬁC⁄fig
 (

21 
IPPCtx
 *
˘x
,

22 
NvMedüIPPBuf„rPoﬁP¨ams
 *
poﬁC⁄fig
)

24 
	`mem£t
(
poﬁC⁄fig
, 0, (
NvMedüIPPBuf„rPoﬁP¨ams
));

25 
poﬁC⁄fig
->
p‹tTy≥
 = 
NVMEDIA_IPP_PORT_IMAGE_1
;

26 
poﬁC⁄fig
->
poﬁBuf„rsNum
 = 
IMAGE_BUFFERS_POOL_SIZE
;

27 
poﬁC⁄fig
->
height
 = 
˘x
->
öputHeight
;

28 
poﬁC⁄fig
->
surÁ˚Ty≥
 = 
˘x
->
öputSurfTy≥
;

29 
poﬁC⁄fig
->
surfAâribuãs
 = 
˘x
->
öputSurfAâribuãs
;

30 
poﬁC⁄fig
->
surfAdvC⁄fig
 = 
˘x
->
öputSurfAdvC⁄fig
;

32 if(
˘x
->
aggªg©eFœg
) {

34 
poﬁC⁄fig
->
width
 = (
˘x
->
öputWidth
 * ctx->
öputF‹m©WidthMu…ùlõr
Ë/ ctx->
imagesNum
;

35 
poﬁC⁄fig
->
imageCœss
 = 
NVMEDIA_IMAGE_CLASS_AGGREGATE_IMAGES
;

36 
poﬁC⁄fig
->
imagesCou¡
 = 
˘x
->
imagesNum
;

37 
poﬁC⁄fig
->
¸óãSiblögsFœg
 = 
NVMEDIA_TRUE
;

38 
poﬁC⁄fig
->
siblögAâribuãs
 = 
˘x
->
u£Off£tsFœg
 ?

39 
NVMEDIA_IMAGE_ATTRIBUTE_SIBLING_USE_OFFSET
 :

43 
poﬁC⁄fig
->
width
 = 
˘x
->
öputWidth
 * ctx->
öputF‹m©WidthMu…ùlõr
;

44 
poﬁC⁄fig
->
imageCœss
 = 
NVMEDIA_IMAGE_CLASS_SINGLE_IMAGE
;

45 
poﬁC⁄fig
->
imagesCou¡
 = 1;

48  
NVMEDIA_STATUS_OK
;

49 
	}
}

51 
NvMedüSètus


52 
	$IPPSëISPBuf„rPoﬁC⁄fig
 (

53 
IPPCtx
 *
˘x
,

54 
NvMedüIPPBuf„rPoﬁP¨ams
 *
poﬁC⁄fig
,

55 
NvMedüIPPBuf„rPoﬁP¨ams
 *
poﬁSètsC⁄fig
)

57 
	`mem£t
(
poﬁC⁄fig
, 0, (
NvMedüIPPBuf„rPoﬁP¨ams
));

58 
poﬁC⁄fig
->
p‹tTy≥
 = 
NVMEDIA_IPP_PORT_IMAGE_1
;

59 
poﬁC⁄fig
->
poﬁBuf„rsNum
 = 
IMAGE_BUFFERS_POOL_SIZE
;

60 
poﬁC⁄fig
->
height
 = 
˘x
->
öputHeight
;

61 
poﬁC⁄fig
->
surÁ˚Ty≥
 = 
˘x
->
i•OutTy≥
;

62 
poﬁC⁄fig
->
surfAâribuãs
 = 
˘x
->
öputSurfAâribuãs
;

63 if(
poﬁC⁄fig
->
surÁ˚Ty≥
 =
NvMedüSurÁ˚Ty≥_Image_YUV_420
) {

64 
poﬁC⁄fig
->
surfAâribuãs
 |
NVMEDIA_IMAGE_ATTRIBUTE_SEMI_PLANAR
 |

65 
NVMEDIA_IMAGE_ATTRIBUTE_UNMAPPED
;

67 
poﬁC⁄fig
->
imageCœss
 = 
NVMEDIA_IMAGE_CLASS_SINGLE_IMAGE
;

68 
poﬁC⁄fig
->
imagesCou¡
 = 1;

69 
poﬁC⁄fig
->
¸óãSiblögsFœg
 = 
NVMEDIA_FALSE
;

71 if(
˘x
->
aggªg©eFœg
) {

72 
poﬁC⁄fig
->
width
 = 
˘x
->
öputWidth
 / ctx->
imagesNum
;

74 
poﬁC⁄fig
->
width
 = 
˘x
->
öputWidth
;

78 
	`mem£t
(
poﬁSètsC⁄fig
, 0, (
NvMedüIPPBuf„rPoﬁP¨ams
));

79 
poﬁSètsC⁄fig
->
p‹tTy≥
 = 
NVMEDIA_IPP_PORT_STATS_1
;

80 
poﬁSètsC⁄fig
->
poﬁBuf„rsNum
 = 
STATS_BUFFERS_POOL_SIZE
;

82  
NVMEDIA_STATUS_OK
;

83 
	}
}

85 
NvMedüSètus


86 
	$IPPSëC⁄åﬁAlg‹ôhmBuf„rPoﬁC⁄fig
 (

87 
IPPCtx
 *
˘x
,

88 
NvMedüIPPBuf„rPoﬁP¨ams
 *
poﬁC⁄fig
)

90 
	`mem£t
(
poﬁC⁄fig
, 0, (
NvMedüIPPBuf„rPoﬁP¨ams
));

91 
poﬁC⁄fig
->
p‹tTy≥
 = 
NVMEDIA_IPP_PORT_SENSOR_CONTROL_1
;

92 
poﬁC⁄fig
->
poﬁBuf„rsNum
 = 
SENSOR_BUFFERS_POOL_SIZE
;

94  
NVMEDIA_STATUS_OK
;

95 
	}
}

97 
NvMedüSètus


98 
	$IPPSëC≠tuªSëtögs
 (

99 
IPPCtx
 *
˘x
,

100 
C≠tuªC⁄figP¨ams
 *
c⁄fig
)

102 
NvMedüICPSëtögs
 *
£âögs
 = &
˘x
->
ˇ±uªSëtögs
;

103 
NvMedüICPI≈utF‹m©
 *
öputF‹m©
 = &
£âögs
->inputFormat;

104 
NvMedüICPSurÁ˚F‹m©
 *
surÁ˚F‹m©
 = &
£âögs
->surfaceFormat;

105 
ExtImgDevPr›îty
 *
extImgDevPr›îty
 = &
˘x
->
extImgDevi˚
->
¥›îty
;

107 if(!
	`°rˇ£cmp
(
c⁄fig
->
öãrÁ˚
.
	`c_°r
(), "csi-a"))

108 
£âögs
->
öãrÁ˚Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_CSI_INTERFACE_TYPE_CSI_A
;

109 if(!
	`°rˇ£cmp
(
c⁄fig
->
öãrÁ˚
.
	`c_°r
(), "csi-b"))

110 
£âögs
->
öãrÁ˚Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_CSI_INTERFACE_TYPE_CSI_B
;

111 if(!
	`°rˇ£cmp
(
c⁄fig
->
öãrÁ˚
.
	`c_°r
(), "csi-ab"))

112 
£âögs
->
öãrÁ˚Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_CSI_INTERFACE_TYPE_CSI_AB
;

113 if(!
	`°rˇ£cmp
(
c⁄fig
->
öãrÁ˚
.
	`c_°r
(), "csi-c"))

114 
£âögs
->
öãrÁ˚Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_CSI_INTERFACE_TYPE_CSI_C
;

115 if(!
	`°rˇ£cmp
(
c⁄fig
->
öãrÁ˚
.
	`c_°r
(), "csi-d"))

116 
£âögs
->
öãrÁ˚Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_CSI_INTERFACE_TYPE_CSI_D
;

117 if(!
	`°rˇ£cmp
(
c⁄fig
->
öãrÁ˚
.
	`c_°r
(), "csi-cd"))

118 
£âögs
->
öãrÁ˚Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_CSI_INTERFACE_TYPE_CSI_CD
;

119 if(!
	`°rˇ£cmp
(
c⁄fig
->
öãrÁ˚
.
	`c_°r
(), "csi-e"))

120 
£âögs
->
öãrÁ˚Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_CSI_INTERFACE_TYPE_CSI_E
;

121 if(!
	`°rˇ£cmp
(
c⁄fig
->
öãrÁ˚
.
	`c_°r
(), "csi-f"))

122 
£âögs
->
öãrÁ˚Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_CSI_INTERFACE_TYPE_CSI_F
;

123 if(!
	`°rˇ£cmp
(
c⁄fig
->
öãrÁ˚
.
	`c_°r
(), "csi-ef"))

124 
£âögs
->
öãrÁ˚Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_CSI_INTERFACE_TYPE_CSI_EF
;

126 
	`LOG_ERR
("%s: Bad interface-type specified: %s.Using csi-abás default\n",

127 
__func__
,

128 
c⁄fig
->
öãrÁ˚
.
	`c_°r
());

129 
£âögs
->
öãrÁ˚Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_CSI_INTERFACE_TYPE_CSI_AB
;

132 if(!
	`°rˇ£cmp
(
c⁄fig
->
öputF‹m©
.
	`c_°r
(), "raw12")) {

133 
öputF‹m©
->
öputF‹m©Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_INPUT_FORMAT_TYPE_RAW
;

134 
öputF‹m©
->
bôsPîPixñ
 = 
NVMEDIA_BITS_PER_PIXEL_12
;

135 
öputF‹m©
->
pixñOrdî
 = 
extImgDevPr›îty
->pixelOrder;

136 
˘x
->
øwCom¥essi⁄F‹m©
 = 
RAW1x12
;

138 
	`LOG_ERR
("%s: Bad input format specified: %s. UsingÑgba.\n",

139 
__func__
, 
c⁄fig
->
öputF‹m©
.
	`c_°r
());

140 
öputF‹m©
->
öputF‹m©Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_INPUT_FORMAT_TYPE_RGB888
;

143 i‡(!
	`°rˇ£cmp
(
c⁄fig
->
surÁ˚F‹m©
.
	`c_°r
(), "raw12")) {

144 
˘x
->
öputSurfTy≥
 = 
NvMedüSurÁ˚Ty≥_Image_RAW
;

145 
˘x
->
öputSurfAâribuãs
 |
NVMEDIA_IMAGE_ATTRIBUTE_BITS_PER_PIXEL
;

146 
˘x
->
öputSurfAâribuãs
 |
NVMEDIA_IMAGE_ATTRIBUTE_RAW_PIXEL_ORDER
;

147 
˘x
->
öputSurfAdvC⁄fig
.
bôsPîPixñ
 = 
NVMEDIA_BITS_PER_PIXEL_12
;

148 
˘x
->
öputSurfAdvC⁄fig
.
pixñOrdî
 = 
extImgDevPr›îty
->pixelOrder;

149 
surÁ˚F‹m©
->
surÁ˚F‹m©Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_SURFACE_FORMAT_TYPE_RAW
;

150 
surÁ˚F‹m©
->
bôsPîPixñ
 = 
NVMEDIA_BITS_PER_PIXEL_12
;

151 
surÁ˚F‹m©
->
pixñOrdî
 = 
extImgDevPr›îty
->pixelOrder;

153 
	`LOG_WARN
("Bad CSI capture surface format: %s. UsingÑgbás default\n",

154 
c⁄fig
->
surÁ˚F‹m©
.
	`c_°r
());

155 
surÁ˚F‹m©
->
surÁ˚F‹m©Ty≥
 = 
NVMEDIA_IMAGE_CAPTURE_SURFACE_FORMAT_TYPE_R8G8B8A8
;

158 
˘x
->
öputSurfAâribuãs
 |
NVMEDIA_IMAGE_ATTRIBUTE_EXTRA_LINES
;

159 
˘x
->
öputSurfAdvC⁄fig
.
embeddedD©aLöesT›
 = 
c⁄fig
->embeddedDataLinesTop;

160 
˘x
->
öputSurfAdvC⁄fig
.
embeddedD©aLöesBŸtom
 = 
c⁄fig
->embeddedDataLinesBottom;

161 
	`LOG_DBG
("Embedded dataÜinesÅop: %u\nEmbedded dataÜines bottom: %u\n",

162 
c⁄fig
->
embeddedD©aLöesT›
, c⁄fig->
embeddedD©aLöesBŸtom
);

163 
˘x
->
øwByãsPîPixñ
 = ((˘x->
öputSurfAâribuãs
 & 
NVMEDIA_IMAGE_ATTRIBUTE_BITS_PER_PIXEL
) &&

164 
˘x
->
öputSurfAdvC⁄fig
.
bôsPîPixñ
 > 
NVMEDIA_BITS_PER_PIXEL_8
) ? 2 : 1;

166 
	`LOG_DBG
("%s: Sëtög c≠tuªÖ¨amëîs\n", 
__func__
);

167 if(
	`ssˇnf
(
c⁄fig
->
ªsﬁuti⁄
.
	`c_°r
(),

169 &
£âögs
->
width
,

170 &
£âögs
->
height
) != 2) {

171 
	`LOG_ERR
("%s: BadÑesﬁuti⁄: %s\n", 
__func__
, 
c⁄fig
->
ªsﬁuti⁄
.
	`c_°r
());

172  
NVMEDIA_STATUS_ERROR
;

175 
£âögs
->
width
 *
˘x
->
öputF‹m©WidthMu…ùlõr
;

177 if(
˘x
->
aggªg©eFœg
)

178 
£âögs
->
width
 *
˘x
->
imagesNum
;

180 
£âögs
->
°¨tX
 = 0;

181 
£âögs
->
°¨tY
 = 0;

182 
£âögs
->
embeddedD©aLöes
 = 
c⁄fig
->
embeddedD©aLöesT›
 + c⁄fig->
embeddedD©aLöesBŸtom
;

183 
£âögs
->
öãrÁ˚L™es
 = 
c⁄fig
->
csiL™es
;

185 
	`LOG_INFO
("CaptureÖarams:\nInterfaceÅype: %u\nStart X,Y: %u,%u\n",

186 
£âögs
->
öãrÁ˚Ty≥
, sëtögs->
°¨tX
, sëtögs->
°¨tY
);

187 
	`LOG_INFO
("resolution: %ux%u\nextra-lines: %u\ninterface-lanes: %u\n\n",

188 
£âögs
->
width
, sëtögs->
height
, sëtögs->
embeddedD©aLöes
, sëtögs->
öãrÁ˚L™es
);

190  
NVMEDIA_STATUS_OK
;

191 
	}
}

194 
NvMedüSètus
 
	$IPPCª©eSís‹C⁄åﬁComp⁄ít
(
IPPCtx
 *
˘x
)

196 
NvU32
 
i
;

197 
NvMedüIPPIscComp⁄ítC⁄fig
 
iscComp⁄ítC⁄fig
;

199 
	`mem£t
(&
iscComp⁄ítC⁄fig
, 0, (
NvMedüIPPIscComp⁄ítC⁄fig
));

200 
i
 = 0; i < 
˘x
->
ùpNum
; i++) {

201 
iscComp⁄ítC⁄fig
.
£ns‹Enumî©‹
 = 
i
;

202 
iscComp⁄ítC⁄fig
.
iscRoŸDevi˚
 = 
˘x
->
extImgDevi˚
->
iscRoŸ
;

203 
iscComp⁄ítC⁄fig
.
iscAggªg©‹Devi˚
 = 
˘x
->
extImgDevi˚
->
iscDe£rülizî
;

205 
iscComp⁄ítC⁄fig
.
iscSís‹Devi˚
 = 
˘x
->
extImgDevi˚
->
iscSís‹
[
i
];

207 
˘x
->
ùpIscComp⁄íts
[
i
] = 
	`NvMedüIPPComp⁄ítCª©e
(˘x->
ùp
[i],

208 
NVMEDIA_IPP_COMPONENT_SENSOR_CONTROL
,

209 
NULL
,

210 &
iscComp⁄ítC⁄fig
);

211 i‡(!
˘x
->
ùpIscComp⁄íts
[
i
]) {

212 
	`LOG_ERR
("%s: FaûedÅÿ¸óã sís‹ ISC comp⁄ít\n", 
__func__
);

213 
Áûed
;

216 
˘x
->
u£Off£tsFœg
 = 
NVMEDIA_TRUE
;

218 
	`LOG_DBG
("%s: NvMedüIPPComp⁄ítCª©êISC\n", 
__func__
);

220  
NVMEDIA_STATUS_OK
;

221 
Áûed
:

222  
NVMEDIA_STATUS_ERROR
;

223 
	}
}

227 
NvMedüSètus
 
	$IPPCª©eC≠tuªComp⁄ít
(
IPPCtx
 *
˘x
)

229 
NvMedüIPPI˝Comp⁄ítC⁄fig
 
i˝C⁄fig
;

230 
NvMedüIPPBuf„rPoﬁP¨ams
 *
buf„rPoﬁs
[
BUFFER_POOLS_COUNT
 + 1], 
buf„rPoﬁ
;

232 
buf„rPoﬁs
[0] = &
buf„rPoﬁ
;

233 
buf„rPoﬁs
[1] = 
NULL
;

234 
	`IPPSëICPBuf„rPoﬁC⁄fig
(
˘x
, &
buf„rPoﬁ
);

235 
NvU32
 
i
;

237 
	`mem£t
(&
i˝C⁄fig
, 0, (
NvMedüIPPI˝Comp⁄ítC⁄fig
));

238 
i˝C⁄fig
.
öãrÁ˚F‹m©
 = 
NVMEDIA_IMAGE_CAPTURE_INTERFACE_FORMAT_CSI
;

239 
i˝C⁄fig
.
£âögs
 = &
˘x
->
ˇ±uªSëtögs
;

240 
i˝C⁄fig
.
siblögsNum
 = (
˘x
->
aggªg©eFœg
Ë? ctx->
imagesNum
:0;

241 
i˝C⁄fig
.
ªgi°îImageBuf„rsWôhIPA
 = 
NVMEDIA_FALSE
;

243 
˘x
->
ùpComp⁄íts
[0][0] =

244 
	`NvMedüIPPComp⁄ítCª©e
(
˘x
->
ùp
[0],

245 
NVMEDIA_IPP_COMPONENT_CAPTURE
,

246 
buf„rPoﬁs
,

247 &
i˝C⁄fig
);

248 i‡(!
˘x
->
ùpComp⁄íts
[0][0]) {

249 
	`LOG_ERR
("%s: FaûedÅÿ¸óã imagêˇ±uª comp⁄ít\n", 
__func__
);

250 
Áûed
;

252 
	`LOG_DBG
("%s: NvMedüIPPComp⁄ítCª©êˇ±uª\n", 
__func__
);

254 
˘x
->
comp⁄ítNum
[0]++;

256 
i
=1; i<
˘x
->
ùpNum
; i++) {

257 i‡(
	`IsFaûed
(
	`NvMedüIPPComp⁄ítAddToPùñöe
(
˘x
->
ùp
[
i
], ctx->
ùpComp⁄íts
[0][0]))) {

258 
	`LOG_ERR
("%s: FaûedÅÿadd imagêˇ±uª comp⁄íàtÿIPP %d\n", 
__func__
, 
i
);

259 
Áûed
;

261 
˘x
->
ùpComp⁄íts
[
i
][0] = ctx->ippComponents[0][0];

262 
˘x
->
comp⁄ítNum
[
i
]++;

265  
NVMEDIA_STATUS_OK
;

266 
Áûed
:

267  
NVMEDIA_STATUS_ERROR
;

268 
	}
}

271 
NvMedüSètus
 
	$IPPCª©eISPComp⁄ít
(
IPPCtx
 *
˘x
)

273 
NvMedüIPPI•Comp⁄ítC⁄fig
 
i•C⁄fig
;

274 
NvMedüIPPBuf„rPoﬁP¨ams
 *
buf„rPoﬁs
[
BUFFER_POOLS_COUNT
 + 1], 
buf„rPoﬁ
, 
buf„rPoﬁ2
;

275 
NvU32
 
i
;

277 
i
=0; i<
˘x
->
ùpNum
; i++) {

278 i‡(
˘x
->
i•E«bÀd
[
i
]) {

279 
	`mem£t
(&
i•C⁄fig
, 0, (
NvMedüIPPI•Comp⁄ítC⁄fig
));

280 
i•C⁄fig
.
i•Sñe˘
 = (
i
<2Ë? 
NVMEDIA_ISP_SELECT_ISP_A
 : 
NVMEDIA_ISP_SELECT_ISP_B
;

281 
i•C⁄fig
.
ªgi°îImageBuf„rsWôhIPA
 = 
NVMEDIA_FALSE
;

282 
i•C⁄fig
.
i•SëtögsFûe
 = 
NULL
;

284 
buf„rPoﬁs
[0] = &
buf„rPoﬁ
;

285 
buf„rPoﬁs
[1] = &
buf„rPoﬁ2
;

286 
buf„rPoﬁs
[2] = 
NULL
;

287 
	`IPPSëISPBuf„rPoﬁC⁄fig
(
˘x
, &
buf„rPoﬁ
, &
buf„rPoﬁ2
);

289 
˘x
->
ùpComp⁄íts
[
i
][˘x->
comp⁄ítNum
[i]] = ctx->
ùpI•Comp⁄íts
[i] =

290 
	`NvMedüIPPComp⁄ítCª©e
(
˘x
->
ùp
[
i
],

291 
NVMEDIA_IPP_COMPONENT_ISP
,

292 
buf„rPoﬁs
,

293 &
i•C⁄fig
);

294 i‡(!
˘x
->
ùpComp⁄íts
[
i
][˘x->
comp⁄ítNum
[i]]) {

295 
	`LOG_ERR
("%s: FaûedÅÿ¸óã imagêISP comp⁄íàf‹Öùñöê%d\n", 
__func__
, 
i
);

296 
Áûed
;

298 
	`LOG_DBG
("%s: NvMedüIPPComp⁄ítCª©êISP \n", 
__func__
);

299 
˘x
->
comp⁄ítNum
[
i
]++;

303  
NVMEDIA_STATUS_OK
;

304 
Áûed
:

305  
NVMEDIA_STATUS_ERROR
;

306 
	}
}

309 
NvMedüSètus
 
	$IPPCª©eC⁄åﬁAlg‹ôhmComp⁄ít
(
IPPCtx
 *
˘x
)

311 
NvMedüIPPC⁄åﬁAlg‹ôhmComp⁄ítC⁄fig
 
c⁄åﬁAlg‹ôhmC⁄fig
;

312 
NvU32
 
i
;

313 
NvMedüIPPBuf„rPoﬁP¨ams
 *
buf„rPoﬁs
[
BUFFER_POOLS_COUNT
 + 1], 
buf„rPoﬁ
;

314 
NvMedüIPPPlugöFuncs
 
nv∂ugöFuncs
 = {

315 .
¸óãFunc
 = &
NvMedüACPCª©e
,

316 .
de°royFunc
 = &
NvMedüACPDe°roy
,

317 .
∑r£C⁄figuøti⁄Func
 = &
NvMedüACPP¨£C⁄figuøti⁄
,

318 .
¥o˚ssFunc
 = &
NvMedüACPPro˚ss


320 
NvMedüIPPPlugöFuncs
 
sim∂ïlugöFuncs
 = {

321 .
¸óãFunc
 = &
IPPPlugöCª©e
,

322 .
de°royFunc
 = &
IPPPlugöDe°roy
,

323 .
∑r£C⁄figuøti⁄Func
 = &
IPPPlugöP¨£C⁄figuøti⁄
,

324 .
¥o˚ssFunc
 = &
IPPPlugöPro˚ss


327 
i
=0; i<
˘x
->
ùpNum
; i++) {

329 i‡(
˘x
->
i•E«bÀd
[
i
] && ctx->
c⁄åﬁAlg‹ôhmE«bÀd
[i]) {

330 
	`mem£t
(&
c⁄åﬁAlg‹ôhmC⁄fig
, 0, (
NvMedüIPPC⁄åﬁAlg‹ôhmComp⁄ítC⁄fig
));

332 
c⁄åﬁAlg‹ôhmC⁄fig
.
width
 = 
˘x
->
öputWidth
 / ctx->
imagesNum
;

333 
c⁄åﬁAlg‹ôhmC⁄fig
.
height
 = 
˘x
->
öputHeight
;

334 
c⁄åﬁAlg‹ôhmC⁄fig
.
pixñOrdî
 = 
˘x
->
öputSurfAdvC⁄fig
.pixelOrder;

335 
c⁄åﬁAlg‹ôhmC⁄fig
.
bôsPîPixñ
 = 
˘x
->
öputSurfAdvC⁄fig
.bitsPerPixel;

336 
c⁄åﬁAlg‹ôhmC⁄fig
.
iscSís‹Devi˚
 = 
˘x
->
extImgDevi˚
->
iscSís‹
[
i
];

337 if(
˘x
->
∂ugöFœg
 =
NVMEDIA_SIMPLEACPLUGIN
) {

338 
c⁄åﬁAlg‹ôhmC⁄fig
.
∂ugöFuncs
 = &
sim∂ïlugöFuncs
;

340 if(
˘x
->
∂ugöFœg
 =
NVMEDIA_NVACPLUGIN
){

341 
c⁄åﬁAlg‹ôhmC⁄fig
.
∂ugöFuncs
 = &
nv∂ugöFuncs
;

344 
buf„rPoﬁs
[0] = &
buf„rPoﬁ
;

345 
buf„rPoﬁs
[1] = 
NULL
;

346 
	`IPPSëC⁄åﬁAlg‹ôhmBuf„rPoﬁC⁄fig
(
˘x
, &
buf„rPoﬁ
);

348 
˘x
->
ùpC⁄åﬁAlg‹ôhmComp⁄íts
[
i
] =

349 
	`NvMedüIPPComp⁄ítCª©e
(
˘x
->
ùp
[
i
],

350 
NVMEDIA_IPP_COMPONENT_CONTROL_ALGORITHM
,

351 
buf„rPoﬁs
,

352 &
c⁄åﬁAlg‹ôhmC⁄fig
);

353 i‡(!
˘x
->
ùpC⁄åﬁAlg‹ôhmComp⁄íts
[
i
]) {

354 
	`LOG_ERR
("%s: FaûedÅÿ¸óã C⁄åﬁ Alg‹ôhm \
 f‹Öùñöê%d\n", 
__func__
, 
i
);

356 
Áûed
;

358 
	`LOG_DBG
("%s: NvMedüIPPComp⁄ítCª©êC⁄åﬁ Alg‹ôhm\n", 
__func__
);

362  
NVMEDIA_STATUS_OK
;

363 
Áûed
:

364  
NVMEDIA_STATUS_ERROR
;

365 
	}
}

368 
NvMedüSètus
 
	$IPPCª©eOuçutComp⁄ít
(
IPPCtx
 *
˘x
)

370 
NvU32
 
i
;

371 
i
=0; i<
˘x
->
ùpNum
; i++) {

373 i‡(
˘x
->
ouçutE«bÀd
[
i
]) {

374 
˘x
->
ùpComp⁄íts
[
i
][˘x->
comp⁄ítNum
[i]] =

375 
	`NvMedüIPPComp⁄ítCª©e
(
˘x
->
ùp
[
i
],

376 
NVMEDIA_IPP_COMPONENT_OUTPUT
,

377 
NULL
,

378 
NULL
);

379 i‡(!
˘x
->
ùpComp⁄íts
[
i
][˘x->
comp⁄ítNum
[i]]) {

380 
	`LOG_ERR
("%s: FaûedÅÿ¸óã ouçuàcomp⁄íà\
Öùñöê%d\n", 
__func__
, 
i
);

382 
Áûed
;

385 
	`LOG_DBG
("%s: NvMedüIPPComp⁄ítCª©êOuçut\n", 
__func__
);

386 
˘x
->
ouçutComp⁄ít
[
i
] = ctx->
ùpComp⁄íts
[i][˘x->
comp⁄ítNum
[i]];

387 
˘x
->
comp⁄ítNum
[
i
]++;

391  
NVMEDIA_STATUS_OK
;

392 
Áûed
:

393  
NVMEDIA_STATUS_ERROR
;

394 
	}
}

397 
NvMedüSètus
 
	$IPPAddComp⁄ítsToPùñöe
(
IPPCtx
 *
˘x
)

399 
NvU32
 
i
, 
j
;

400 
NvMedüSètus
 
°©us
 = 
NVMEDIA_STATUS_ERROR
;

403 
i
=0; i<
˘x
->
ùpNum
; i++) {

404 
j
=1; j<
˘x
->
comp⁄ítNum
[
i
]; j++) {

405 
°©us
 = 
	`NvMedüIPPComp⁄ítAâach
(
˘x
->
ùp
[
i
],

406 
˘x
->
ùpComp⁄íts
[
i
][
j
-1],

407 
˘x
->
ùpComp⁄íts
[
i
][
j
],

408 
NVMEDIA_IPP_PORT_IMAGE_1
);

410 i‡(
°©us
 !
NVMEDIA_STATUS_OK
) {

411 
	`LOG_ERR
("%s: NvMedüIPPComp⁄ítAâach faûed \
 IPP %d, comp⁄íà%d -> %d", 
__func__
, 
i
, 
j
-1, j);

413 
Áûed
;

416 if(
˘x
->
ùpI•Comp⁄íts
[
i
] && ctx->
ùpC⁄åﬁAlg‹ôhmComp⁄íts
[i]) {

417 
°©us
 = 
	`NvMedüIPPComp⁄ítAâach
(
˘x
->
ùp
[
i
],

418 
˘x
->
ùpI•Comp⁄íts
[
i
],

419 
˘x
->
ùpC⁄åﬁAlg‹ôhmComp⁄íts
[
i
],

420 
NVMEDIA_IPP_PORT_STATS_1
);

422 i‡(
°©us
 !
NVMEDIA_STATUS_OK
) {

423 
	`LOG_ERR
("%s: NvMedüIPPComp⁄ítAâach faûed f‹ \
 %d, comp⁄íàISP -> C⁄åﬁ Alg‹ôhm", 
__func__
, 
i
);

425 
Áûed
;

428 if(
˘x
->
ùpC⁄åﬁAlg‹ôhmComp⁄íts
[
i
] && ctx->
ùpIscComp⁄íts
[i]) {

429 
°©us
 = 
	`NvMedüIPPComp⁄ítAâach
(
˘x
->
ùp
[
i
],

430 
˘x
->
ùpC⁄åﬁAlg‹ôhmComp⁄íts
[
i
],

431 
˘x
->
ùpIscComp⁄íts
[
i
],

432 
NVMEDIA_IPP_PORT_SENSOR_CONTROL_1
);

434 i‡(
°©us
 !
NVMEDIA_STATUS_OK
) {

435 
	`LOG_ERR
("%s: NvMedüIPPComp⁄ítAâach faûed f‹ \
 %d, comp⁄íàC⁄åﬁ Alg‹ôhm -> ISC", 
__func__
, 
i
);

437 
Áûed
;

442  
NVMEDIA_STATUS_OK
;

443 
Áûed
:

444  
NVMEDIA_STATUS_ERROR
;

445 
	}
}

448 
NvMedüSètus
 
	$IPPCª©eRawPùñöe
(
IPPCtx
*
˘x
) {

449 
NvMedüSètus
 
°©us
 = 
NVMEDIA_STATUS_ERROR
;

450 
NvU32
 
i
;

452 if(!
˘x
) {

453 
	`LOG_ERR
("%s: BadÖ¨amëî†\n", 
__func__
);

454 
Áûed
;

458 
i
=0; i<
˘x
->
ùpNum
; i++) {

459 
˘x
->
ùp
[
i
] = 
	`NvMedüIPPPùñöeCª©e
(˘x->
ùpM™agî
);

460 if(!
˘x
->
ùp
[
i
]) {

461 
	`LOG_ERR
("%s: FaûedÅÿ¸óã iµ %d\n", 
__func__
, 
i
);

462 
Áûed
;

467 
	`mem£t
(
˘x
->
ùpComp⁄íts
, 0, (ctx->ippComponents));

468 
	`mem£t
(
˘x
->
comp⁄ítNum
, 0, (ctx->componentNum));

472 
°©us
 = 
	`IPPCª©eSís‹C⁄åﬁComp⁄ít
(
˘x
);

473 if(
°©us
 !
NVMEDIA_STATUS_OK
) {

474 
	`LOG_ERR
("%s: FaûedÅÿ¸óã Sís‹ C⁄åﬁ Comp⁄íà\n", 
__func__
);

475 
Áûed
;

479 if(
˘x
->
ˇ±uªE«bÀd
) {

480 
°©us
 = 
	`IPPCª©eC≠tuªComp⁄ít
(
˘x
);

481 if(
°©us
 !
NVMEDIA_STATUS_OK
) {

482 
	`LOG_ERR
("%s: FaûedÅÿ¸óã C≠tuª Comp⁄íà\n", 
__func__
);

483 
Áûed
;

488 
°©us
 = 
	`IPPCª©eISPComp⁄ít
(
˘x
);

489 if(
°©us
 !
NVMEDIA_STATUS_OK
) {

490 
	`LOG_ERR
("%s: FaûedÅÿ¸óã ISP Comp⁄íà\n", 
__func__
);

491 
Áûed
;

495 
°©us
 = 
	`IPPCª©eC⁄åﬁAlg‹ôhmComp⁄ít
(
˘x
);

496 if(
°©us
 !
NVMEDIA_STATUS_OK
) {

497 
	`LOG_ERR
("%s: FaûedÅÿ¸óã C⁄åﬁálg‹ôhm Comp⁄íà\n", 
__func__
);

498 
Áûed
;

502 
°©us
 = 
	`IPPCª©eOuçutComp⁄ít
(
˘x
);

503 if(
°©us
 !
NVMEDIA_STATUS_OK
) {

504 
	`LOG_ERR
("%s: FaûedÅÿ¸óã OuçuàComp⁄íà\n", 
__func__
);

505 
Áûed
;

508 
°©us
 = 
	`IPPAddComp⁄ítsToPùñöe
(
˘x
);

509 if(
°©us
 !
NVMEDIA_STATUS_OK
) {

510 
	`LOG_ERR
("%s: FaûedÅÿbuûd IPP comp⁄ít†\n", 
__func__
);

511 
Áûed
;

514  
NVMEDIA_STATUS_OK
;

516 
Áûed
:

517 
	`mem£t
(
˘x
->
ùp
, 0, (
NvMedüIPPPùñöe
 *Ë* 
NVMEDIA_MAX_PIPELINES_PER_MANAGER
);

519  
NVMEDIA_STATUS_ERROR
;

520 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/ipp_component.hpp

11 #i‚de‡
NVMEDIA_IPP_COMPONENT_HPP


12 
	#NVMEDIA_IPP_COMPONENT_HPP


	)

14 #ifde‡
USE_CSI_OV10640


16 
	~"ùp_øw.hµ
"

17 
	~"buf„r_utûs.h
"

19 
NvMedüSètus


20 
IPPSëC≠tuªSëtögs
 (

21 
IPPCtx
 *
˘x
,

22 
C≠tuªC⁄figP¨ams
 *
c⁄fig
);

25 
NvMedüSètus
 
IPPCª©eRawPùñöe
(
IPPCtx
 *
˘x
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/ipp_raw.cpp

10 #ifde‡
USE_CSI_OV10640


12 
	~<limôs.h
>

13 
	~<m©h.h
>

14 
	~<sys/time.h
>

16 
	~"bﬂrd_«me.h
"

18 
	~"buf„r_utûs.h
"

19 
	~"ùp_øw.hµ
"

20 
	~"i•_£âögs.h
"

21 
	~"misc_utûs.h
"

22 
	~"ùp_comp⁄ít.hµ
"

24 
	~<°rög
>

25 
	~<io°ªam
>

27 
	~<NVX/Aµliˇti⁄.hµ
>

32 
NvMedüSètus


33 
	$IPPGëAbsﬁuãGlobÆTime
(

34 *
˛õ¡C⁄ãxt
,

35 
NvMedüGlobÆTime
 *
timeVÆue
)

37 
timevÆ
 
tv
;

39 if(!
timeVÆue
)

40  
NVMEDIA_STATUS_ERROR
;

42 
	`gëtimeofday
(&
tv
, 
NULL
);

45 *
timeVÆue
 = (
NvU64
)
tv
.
tv_£c
 * 1000000 + (NvU64Èv.
tv_u£c
;

47  
NVMEDIA_STATUS_OK
;

48 
	}
}

53 
	$IPPEvítH™dÀr
(

54 *
˛õ¡C⁄ãxt
,

55 
NvMedüIPPComp⁄ítTy≥
 
comp⁄ítTy≥
,

56 
NvMedüIPPComp⁄ít
 *
ùpComp⁄ít
,

57 
NvMedüIPPEvítTy≥
 
ëy≥
,

58 
NvMedüIPPEvítD©a
 *
ed©a
)

60 
ëy≥
) {

61 
NVMEDIA_IPP_EVENT_INFO_FRAME_CAPTURE
:

63 
	`LOG_INFO
("Image captureÉvent\n");

66 
NVMEDIA_IPP_EVENT_WARNING_CAPTURE_FRAME_DROP
:

68 
	`LOG_WARN
("Capture frame drop\n");

71 
NVMEDIA_IPP_EVENT_ERROR_NO_RESOURCES
:

73 
	`LOG_ERR
("Out ofÑesource\n");

76 
NVMEDIA_IPP_EVENT_ERROR_INTERNAL_FAILURE
:

78 
	`LOG_ERR
("Internal failure\n");

81 
NVMEDIA_IPP_EVENT_ERROR_BUFFER_PROCESSING_FAILURE
:

83 
	`LOG_ERR
("BufferÖrocessing failure\n");

91 
	}
}

93 
NvMedüSètus


94 
	$IPPInô
 (

95 
IPPCtx
 *
˘x
,

96 c⁄° 
C≠tuªC⁄figP¨ams
 & 
ˇ±uªP¨ams
)

98 i‡(
nvxio
::
Aµliˇti⁄
::
	`gë
().
	`gëVîbo£Fœg
())

99 
	`SëLogLevñ
(
LEVEL_DBG
);

101 
NvMedüSètus
 
°©us
 = 
NVMEDIA_STATUS_ERROR
;

102 
NvU32
 
i
;

103 
ExtImgDevP¨am
 
extImgDevP¨am
;

105 i‡(!
˘x
) {

106 
	`LOG_ERR
("%s: BadÖ¨amëî", 
__func__
);

107  
NVMEDIA_STATUS_BAD_PARAMETER
;

110 
	`mem£t
(
˘x
->
ùpComp⁄íts
, 0, (ctx->ippComponents));

111 
	`mem£t
(
˘x
->
ùpI•Comp⁄íts
, 0, (ctx->ippIspComponents));

112 
	`mem£t
(
˘x
->
ùpIscComp⁄íts
, 0, (ctx->ippIscComponents));

113 
	`mem£t
(
˘x
->
ùpC⁄åﬁAlg‹ôhmComp⁄íts
, 0, (ctx->ippControlAlgorithmComponents));

114 
	`mem£t
(
˘x
->
comp⁄ítNum
, 0, (ctx->componentNum));

116 i‡(
˘x
->
imagesNum
 > 
NVMEDIA_MAX_AGGREGATE_IMAGES
) {

117 
	`LOG_WARN
("Maxággregate images is: %u\n",

118 
NVMEDIA_MAX_AGGREGATE_IMAGES
);

119 
˘x
->
imagesNum
 = 
NVMEDIA_MAX_AGGREGATE_IMAGES
;

122 
˘x
->
quô
 = 
NVMEDIA_FALSE
;

124 
˘x
->
aggªg©eFœg
 = 
NVMEDIA_TRUE
;

125 
˘x
->
ouçutSurfTy≥
 = 
NvMedüSurÁ˚Ty≥_Image_YUV_420
;

126 
˘x
->
i•OutTy≥
 = 
NvMedüSurÁ˚Ty≥_Image_YUV_420
;

127 
˘x
->
öputF‹m©WidthMu…ùlõr
 = 1;

128 
˘x
->
showTimeSèmp
 = 
NVMEDIA_FALSE
;

129 
˘x
->
showMëad©aFœg
 = 
NVMEDIA_FALSE
;

130 
˘x
->
∂ugöFœg
 = 
NVMEDIA_NVACPLUGIN
;

131 
˘x
->
ùpM™agî
 = 
NULL
;

133 
˘x
->
ˇmM≠
.
íabÀ
 = 
	`EXTIMGDEV_MAP_N_TO_ENABLE
(˘x->
imagesNum
);

134 
˘x
->
ˇmM≠
.
mask
 = 
CAM_MASK_DEFAULT
;

135 
˘x
->
ˇmM≠
.
csiOut
 = 
CSI_OUT_DEFAULT
;

137 
	`LOG_DBG
("%s: i≈uàªsﬁuti⁄ %s\n", 
__func__
, 
ˇ±uªP¨ams
.
ªsﬁuti⁄
.
	`c_°r
());

138 i‡(
	`ssˇnf
(
ˇ±uªP¨ams
.
ªsﬁuti⁄
.
	`c_°r
(), "%ux%u",

139 &
˘x
->
öputWidth
,

140 &
˘x
->
öputHeight
) != 2) {

141 
	`LOG_ERR
("%s: InvÆid i≈uàªsﬁuti⁄ %s\n", 
__func__
,

142 
ˇ±uªP¨ams
.
ªsﬁuti⁄
.
	`c_°r
());

143 
Áûed
;

145 
	`LOG_DBG
("%s: i≈utWidth =%d,˘x->öputHeighà=%d\n", 
__func__
,

146 
˘x
->
öputWidth
, ctx->
öputHeight
);

148 i‡(
˘x
->
aggªg©eFœg
)

149 
˘x
->
öputWidth
 *˘x->
imagesNum
;

151 i‡(
˘x
->
aggªg©eFœg
 &&

152 (
˘x
->
öputWidth
 % ctx->
imagesNum
) != 0) {

153 
	`LOG_ERR
("%s: InvalidÇumber of siblings (%u) for input width: %u\n",

154 
__func__
, 
˘x
->
imagesNum
, ctx->
öputWidth
);

155 
Áûed
;

158 
˘x
->
ùpNum
 = ctx->
imagesNum
;

159 
i
=0; i<
˘x
->
ùpNum
; i++) {

160 
˘x
->
i•E«bÀd
[
i
] = 
NVMEDIA_TRUE
;

161 
˘x
->
ouçutE«bÀd
[
i
] = 
NVMEDIA_TRUE
;

162 
˘x
->
c⁄åﬁAlg‹ôhmE«bÀd
[
i
] = 
NVMEDIA_TRUE
;

165 
	`mem£t
(&
extImgDevP¨am
, 0, (extImgDevParam));

166 
extImgDevP¨am
.
desAddr
 = 
ˇ±uªP¨ams
.desAddr;

167 
extImgDevP¨am
.
brdc°SîAddr
 = 
ˇ±uªP¨ams
.brdcstSerAddr;

168 
extImgDevP¨am
.
brdc°Sís‹Addr
 = 
ˇ±uªP¨ams
.brdcstSensorAddr;

169 
i
 = 0; i < 
MAX_AGGREGATE_IMAGES
; i++) {

172 
extImgDevP¨am
.
£ns‹Addr
[
i
] = 
ˇ±uªP¨ams
.
brdc°Sís‹Addr
 + i + 1;

176 
extImgDevP¨am
.
i2cDevi˚
 = 
ˇ±uªP¨ams
.i2cDevice;

177 
extImgDevP¨am
.
moduÀName
 = (*)
ˇ±uªP¨ams
.
öputDevi˚
.
	`c_°r
();

178 
extImgDevP¨am
.
bﬂrd
 = (*)
ˇ±uªP¨ams
.bﬂrd.
	`c_°r
();

179 
extImgDevP¨am
.
ªsﬁuti⁄
 = (*)
ˇ±uªP¨ams
.ªsﬁuti⁄.
	`c_°r
();

180 
extImgDevP¨am
.
£ns‹sNum
 = 
˘x
->
imagesNum
;

181 
extImgDevP¨am
.
öputF‹m©
 = (*)
ˇ±uªP¨ams
.öputF‹m©.
	`c_°r
();

182 
extImgDevP¨am
.
öãrÁ˚
 = (*)
ˇ±uªP¨ams
.öãrÁ˚.
	`c_°r
();

183 
extImgDevP¨am
.
ˇmM≠
 = &
˘x
->camMap;

184 
extImgDevP¨am
.
íabÀEmbLöes
 =

185 (
ˇ±uªP¨ams
.
embeddedD©aLöesT›
 || c≠tuªP¨ams.
embeddedD©aLöesBŸtom
) ?

186 
NVMEDIA_TRUE
 : 
NVMEDIA_FALSE
;

187 
extImgDevP¨am
.
öôülized
 = 
NVMEDIA_FALSE
;

188 
extImgDevP¨am
.
íabÀSimuœt‹
 = 
NVMEDIA_FALSE
;

190 
˘x
->
extImgDevi˚
 = 
	`ExtImgDevInô
(&
extImgDevP¨am
);

191 if(!
˘x
->
extImgDevi˚
) {

192 
	`LOG_ERR
("%s: FaûedÅÿöôülizêISC devi˚s\n", 
__func__
);

193 
°©us
 = 
NVMEDIA_STATUS_ERROR
;

194 
Áûed
;

197 
˘x
->
ˇ±uªE«bÀd
 = 
NVMEDIA_TRUE
;

198 i‡(
˘x
->
ˇ±uªE«bÀd
) {

199 if(
	`IsFaûed
(
	`IPPSëC≠tuªSëtögs
(
˘x
, (
C≠tuªC⁄figP¨ams
 *)&
ˇ±uªP¨ams
)))

200 
Áûed
;

203 
˘x
->
devi˚
 = 
	`NvMedüDevi˚Cª©e
();

204 if(!
˘x
->
devi˚
) {

205 
	`LOG_ERR
("%s: FaûedÅÿ¸óã NvMedü devi˚\n", 
__func__
);

206 
Áûed
;

210 
˘x
->
ùpM™agî
 = 
	`NvMedüIPPM™agîCª©e
(
NVMEDIA_IPP_VERSION_INFO
, ctx->
devi˚
, ctx->
ùaDevi˚
);

211 if(!
˘x
->
ùpM™agî
) {

212 
	`LOG_ERR
("%s: FaûedÅÿ¸óã iµM™agî\n", 
__func__
);

213 
d⁄e
;

216 
°©us
 = 
	`NvMedüIPPM™agîSëTimeSour˚
(
˘x
->
ùpM™agî
, 
NULL
, 
IPPGëAbsﬁuãGlobÆTime
);

217 if(
°©us
 !
NVMEDIA_STATUS_OK
) {

218 
	`LOG_ERR
("%s: FaûedÅÿ£àtimêsour˚\n", 
__func__
);

219 
Áûed
;

222 
°©us
 = 
	`IPPCª©eRawPùñöe
(
˘x
);

223 if(
°©us
 !
NVMEDIA_STATUS_OK
) {

224 
	`LOG_ERR
("%s: FaûedÅÿ¸óã Raw Pùñöê\n", 
__func__
);

225 
Áûed
;

229 
°©us
 = 
	`NvMedüIPPM™agîSëEvítCÆlback
(
˘x
->
ùpM™agî
, ctx, 
IPPEvítH™dÀr
);

230 i‡(
°©us
 !
NVMEDIA_STATUS_OK
) {

231 
	`LOG_ERR
("%s: FaûedÅÿ£àevíàˇŒback\n", 
__func__
);

232  
°©us
;

235  
NVMEDIA_STATUS_OK
;

237 
Áûed
:

238 
	`LOG_ERR
("%s: Faûed", 
__func__
);

239 
	`IPPFöi
(
˘x
);

240  
NVMEDIA_STATUS_ERROR
;

242 
d⁄e
:

243  
°©us
;

244 
	}
}

246 
NvMedüSètus


247 
	$IPPSèπ
 (

248 
IPPCtx
 *
˘x
)

250 
NvU32
 
i
;

253 
i
=0; i<
˘x
->
ùpNum
; i++) {

254 i‡(
	`IsFaûed
(
	`NvMedüIPPPùñöeSèπ
(
˘x
->
ùp
[
i
]))) {

255 
	`LOG_ERR
("%s: Faûed sèπögÖùñöê%d\n", 
__func__
, 
i
);

256 
Áûed
;

260 #i‡
BOARD_CODE_NAME
 >
DRIVE_PX2_BOARD


262 if(
˘x
->
extImgDevi˚
)

263 
	`ExtImgDevSèπ
(
˘x
->
extImgDevi˚
);

266  
NVMEDIA_STATUS_OK
;

268 
Áûed
:

269 
	`LOG_ERR
("%s: Faûed", 
__func__
);

270 
	`IPPFöi
(
˘x
);

272  
NVMEDIA_STATUS_ERROR
;

273 
	}
}

274 
NvMedüSètus


275 
	$IPPSt›
 (
IPPCtx
 *
˘x
)

277 i‡(!
˘x
)

278  
NVMEDIA_STATUS_OK
;

280 
NvU32
 
i
;

282 
i
 = 0; i < 
˘x
->
ùpNum
; i++) {

283 i‡(!
˘x
->
ùp
[
i
])

286 i‡(
	`IsFaûed
(
	`NvMedüIPPPùñöeSt›
(
˘x
->
ùp
[
i
])))

288 
	`LOG_ERR
("%s: Faûed st›Öùñöê%d\n", 
__func__
, 
i
);

289  
NVMEDIA_STATUS_ERROR
;

292 
˘x
->
ùp
[
i
] = 
NULL
;

294  
NVMEDIA_STATUS_OK
;

295 
	}
}

297 
NvMedüSètus


298 
	$IPPFöi
 (
IPPCtx
 *
˘x
)

300 i‡(!
˘x
)

301  
NVMEDIA_STATUS_OK
;

303 
˘x
->
quô
 = 
NVMEDIA_TRUE
;

305 i‡(
˘x
->
ùpM™agî
)

307 
	`NvMedüIPPM™agîDe°roy
(
˘x
->
ùpM™agî
);

308 
˘x
->
ùpM™agî
 = 
NULL
;

311 if(
˘x
->
extImgDevi˚
)

313 
	`ExtImgDevDeöô
(
˘x
->
extImgDevi˚
);

314 
˘x
->
extImgDevi˚
 = 
NULL
;

317 if(
˘x
->
devi˚
)

319 
	`NvMedüDevi˚De°roy
(
˘x
->
devi˚
);

320 
˘x
->
devi˚
 = 
NULL
;

323  
NVMEDIA_STATUS_OK
;

324 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/ipp_raw.hpp

10 #i‚de‡
NVMEDIA_IPP_RAW_HPP


11 
	#NVMEDIA_IPP_RAW_HPP


	)

13 #ifde‡
USE_CSI_OV10640


15 
	~<cudaEGL.h
>

17 
	~"buf„r_utûs.h
"

18 
	~"log_utûs.h
"

19 
	~"misc_utûs.h
"

20 
	~"nvmedü_ùp.h
"

21 
	~"nvmedü_egl°ªam.h
"

22 
	~"nvmedü_i˝.h
"

23 
	~"nvmedü_isc.h
"

24 
	~"nvmedü_2d.h
"

26 
	~"thªad_utûs.h
"

27 
	~"img_dev.h
"

28 
	~"nv…m.h
"

30 
	~"maö.hµ
"

31 
	~"egl°rm_£tup.hµ
"

33 
	#IMAGE_BUFFERS_POOL_SIZE
 3

	)

34 
	#STATS_BUFFERS_POOL_SIZE
 3

	)

35 
	#SENSOR_BUFFERS_POOL_SIZE
 3

	)

36 
	#MAX_CAPTURE_BUFFERS
 2

	)

38 
	#ISP_STATS_NUM_BINS
 256

	)

39 
	#ISP_STATS_HEIGHT_PERCENTAGE
 12

	)

40 
	#ISP_STATS_RANGE_LOW
 0

	)

41 
	#ISP_STATS_RANGE_HIGH
 8192

	)

43 
	#ENQUEUE_TIMEOUT
 100

	)

44 
	#FEED_FRAME_TIMEOUT
 100

	)

45 
	#WAIT_FOR_IDLE_TIMEOUT
 100

	)

46 
	#MAX_ERROR_QUEUE_SIZE
 20

	)

49 *
	m˘x
;

50 
NvU32
 
	mid
;

51 } 
	tThªadD©a
;

54 
NvMedüBoﬁ
 
	mˇ±uªE«bÀd
;

55 
NvMedüBoﬁ
 
	mi•E«bÀd
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

56 
NvMedüBoﬁ
 
	mouçutE«bÀd
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

57 
NvMedüBoﬁ
 
	mc⁄åﬁAlg‹ôhmE«bÀd
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

59 *
	mi•C⁄figFûe
;

60 
NvMedüDevi˚
 *
	mdevi˚
;

61 
NvMedüIPADevi˚
 *
	mùaDevi˚
;

64 
NvMedüIPPM™agî
 *
	mùpM™agî
;

66 
NvMedüIPPPùñöe
 *
	mùp
[
NVMEDIA_MAX_PIPELINES_PER_MANAGER
];

69 
NvMedüIPPComp⁄ít
 *
	mùpComp⁄íts
[
NVMEDIA_MAX_PIPELINES_PER_MANAGER
][
NVMEDIA_MAX_COMPONENTS_PER_PIPELINE
];

71 
NvMedüIPPComp⁄ít
 *
	mùpI•Comp⁄íts
[
NVMEDIA_MAX_PIPELINES_PER_MANAGER
];

73 
NvMedüIPPComp⁄ít
 *
	mùpIscComp⁄íts
[
NVMEDIA_MAX_PIPELINES_PER_MANAGER
];

75 
NvMedüIPPComp⁄ít
 *
	mùpC⁄åﬁAlg‹ôhmComp⁄íts
[
NVMEDIA_MAX_PIPELINES_PER_MANAGER
];

77 
NvU32
 
	mcomp⁄ítNum
[
NVMEDIA_MAX_PIPELINES_PER_MANAGER
];

79 
NvMedüIPPComp⁄ít
 *
	mouçutComp⁄ít
[
NVMEDIA_MAX_PIPELINES_PER_MANAGER
];

80 
NvMedüBoﬁ
 
	mgëIPPOuçutThªadExôed
;

81 
NvThªad
 *
	mgëOuçutThªad
;

84 
NvMedüICPSëtögs
 
	mˇ±uªSëtögs
;

87 
ExtImgDevi˚
 *
	mextImgDevi˚
;

88 
ExtImgDevM≠Info
 
	mˇmM≠
;

90 
NvMuãx
 *
	m¥o˚ss‹Muãx
;

92 
NvMedüBoﬁ
 
	mquô
;

93 
NvMedüIPPRawCom¥essi⁄F‹m©
 
	møwCom¥essi⁄F‹m©
;

94 
NvU32
 
	möputF‹m©WidthMu…ùlõr
;

95 
NvMedüSurÁ˚Ty≥
 
	möputSurfTy≥
;

96 
NvU32
 
	möputSurfAâribuãs
;

97 
NvMedüImageAdv™˚dC⁄fig
 
	möputSurfAdvC⁄fig
;

98 
NvU32
 
	möputWidth
;

99 
NvU32
 
	möputHeight
;

101 
NvMedüSurÁ˚Ty≥
 
	mouçutSurfTy≥
;

103 
NvU32
 
	mdi•œyId
;

105 
NvMedüBoﬁ
 
	mu£Off£tsFœg
;

106 
NvU32
 
	møwByãsPîPixñ
;

107 
NvMedüBoﬁ
 
	maggªg©eFœg
;

108 
NvU32
 
	mimagesNum
;

109 
NvU32
 
	mùpNum
;

110 
NvMedüSurÁ˚Ty≥
 
	mi•OutTy≥
;

111 
NvU32
 
	m‰amesPro˚s£d
;

112 
NvMedüBoﬁ
 
	mshowTimeSèmp
;

113 
NvMedüSurÁ˚Ty≥
 
	meglSurÁ˚Ty≥
;

114 
NvMedüBoﬁ
 
	mshowMëad©aFœg
;

115 
NvMedüACPlugöTy≥
 
	m∂ugöFœg
;

118 
NvMedüEGLSåómProdu˚r
 * 
	meglProdu˚r
;

119 
EGLSåómKHR
 
	meglSåóm
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

120 
EGLDi•œy
 
	meglDi•œy
;

123 
CUeglSåómC⁄√˘i⁄
 
	mcudaC⁄√˘i⁄
[
NVMEDIA_MAX_AGGREGATE_IMAGES
];

125 } 
	tIPPCtx
;

127 
	$NvMedüSètus
 (* 
	tPro˚ss‹Func
Ë(
	tIPPCtx
 *
	t˘x
);

133 
NvMedüSètus


134 
	`IPPInô
 (
IPPCtx
 *
˘x
,

135 c⁄° 
C≠tuªC⁄figP¨ams
 & 
ˇ±uªP¨ams
);

140 
NvMedüSètus


141 
	`IPPSèπ
 (
IPPCtx
 *
˘x
);

146 
NvMedüSètus


147 
	`IPPSt›
 (
IPPCtx
 *
˘x
);

153 
NvMedüSètus


154 
	`IPPFöi
 (
IPPCtx
 *
˘x
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/main.hpp

10 #i‚de‡
NVMEDIA_IPP_MAIN_HPP


11 
	#NVMEDIA_IPP_MAIN_HPP


	)

13 #ifde‡
USE_CSI_OV10640


15 
	~<°dlib.h
>

16 
	~<°rög.h
>

18 
	~"nvcomm⁄.h
"

19 
	~"nvmedü.h
"

20 
	~"nvmedü_image.h
"

21 
	~"nvmedü_i•.h
"

22 
	~"thªad_utûs.h
"

24 
	~"FømeSour˚/NvMedü/NvMedüCamîaC⁄figP¨ams.hµ
"

26 
	~<°rög
>

28 
	#MAX_STRING_SIZE
 256

	)

29 
	#MAX_CONFIG_SECTIONS
 20

	)

33 
	mNVMEDIA_NOACPLUGIN
,

34 
	mNVMEDIA_SIMPLEACPLUGIN
,

35 
	mNVMEDIA_NVACPLUGIN


36 } 
	tNvMedüACPlugöTy≥
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVBaseFrameSource.hpp

29 #i‚de‡
OPENCVBASEFRAMESOURCE_HPP


30 
	#OPENCVBASEFRAMESOURCE_HPP


	)

32 #ifde‡
USE_OPENCV


34 
	~<°rög
>

36 
	~<›ícv2/c‹e/c‹e.hµ
>

38 
	~"FømeSour˚/FømeSour˚Im∂.hµ
"

40 
	~"Priv©e/LogUtûs.hµ
"

42 
«me•a˚
 
	gnvidüio


45 ˛as†
	cO≥nCVBa£FømeSour˚


47 
	gpublic
:

48 
O≥nCVBa£FømeSour˚
(
FømeSour˚
::
Sour˚Ty≥
 
ty≥
, c⁄° 
°d
::
°rög
 & 
«me
):

49 
sour˚Ty≥
(
ty≥
),

50 
sour˚Name
(
«me
)

53 
vútuÆ
 
boﬁ
 
›í
() = 0;

54 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
) = 0;

55 
vútuÆ
 
	gFømeSour˚
::
P¨amëîs
 
gëC⁄figuøti⁄
() = 0;

56 
vútuÆ
 
	gcv
::
M©
 
„tch
() = 0;

57 
vútuÆ
 
boﬁ
 
gøb
() = 0;

58 
vútuÆ
 
˛o£
() = 0;

59 
	gvútuÆ
 ~
O≥nCVBa£FømeSour˚
()

62 
	gFømeSour˚
::
Sour˚Ty≥
 
gëSour˚Ty≥
() const

64  
sour˚Ty≥
;

67 
	g°d
::
°rög
 
gëSour˚Name
() const

69  
sour˚Name
;

72 
	g¥Ÿe˘ed
:

73 c⁄° 
FømeSour˚
::
Sour˚Ty≥
 
sour˚Ty≥
;

74 c⁄° 
	g°d
::
°rög
 
sour˚Name
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVFrameSourceImpl.cpp

29 #ifde‡
USE_OPENCV


31 
	~<sy°em_îr‹
>

32 
	~<m≠
>

34 
	~<cuda_ru¡ime.h
>

36 
	~"FømeSour˚/O≥nCV/O≥nCVFømeSour˚Im∂.hµ
"

38 
	~<NVX/Aµliˇti⁄.hµ
>

39 
	~<NVX/ProfûîR™ge.hµ
>

41 
«me•a˚
 
	gnvidüio


44 
c⁄vîtFøme
(
nvxcu_°ªam_exec_èrgë_t
 &
exec_èrgë
,

45 c⁄° 
image_t
 & 
image
,

46 c⁄° 
FømeSour˚
::
P¨amëîs
 & 
c⁄figuøti⁄
,

47 
width
, 
height
,

48 
boﬁ
 
u£Pôch
, 
size_t
 
pôch
,

49 
dïth
, * 
decodedPå
,

50 
boﬁ
 
is_cuda
,

51 *& 
devMem
,

52 
size_t
 & 
devMemPôch
);

54 
vx_image
 
wøpNVXIOImage
(
vx_c⁄ãxt
 
c⁄ãxt
,

55 c⁄° 
image_t
 & 
image
);

57 
	gO≥nCVFømeSour˚Im∂
::
O≥nCVFømeSour˚Im∂
(
°d
::
unique_±r
<
O≥nCVBa£FømeSour˚
> 
sour˚
):

58 
FømeSour˚
(
sour˚
->
gëSour˚Ty≥
(), sour˚->
gëSour˚Name
()),

59 
Æive_
(
Ál£
),

60 
sour˚_
(
°d
::
move
(
sour˚
)),

61 
queue_
(4u),

62 
devi˚ID
(-1),

63 
	gexec_èrgë
 { },

64 
devMem
(
nuŒ±r
),

65 
devMemPôch
(0)

67 
CUDA_SAFE_CALL
–
cudaGëDevi˚
(&
devi˚ID
) );

68 
	gexec_èrgë
.
	gba£
.
	gexec_èrgë_ty≥
 = 
NVXCU_STREAM_EXEC_TARGET
;

69 
	gexec_èrgë
.
	g°ªam
 = 
nuŒ±r
;

70 
CUDA_SAFE_CALL
–
cudaGëDevi˚Pr›îtõs
(&
exec_èrgë
.
dev_¥›
, 
devi˚ID
) );

73 
boﬁ
 
	gO≥nCVFømeSour˚Im∂
::
›í
()

75 
nvxio
::
ProfûîR™ge
 
ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "FrameSource::open (NVXIO)");

77 i‡(!
	gsour˚_
)

78  
	gÁl£
;

80 i‡(
	gÆive_
)

81 
˛o£
();

83 
	gåy


85 
	gÆive_
 = 
sour˚_
->
›í
();

87 
ˇtch
 (c⁄° 
cv
::
Ex˚±i⁄
 &)

89 
Æive_
 = 
Ál£
;

90 
	gsour˚_
->
˛o£
();

93 i‡(
	gÆive_
)

95 
	gåy


97 
	gthªad
 = 
°d
::
thªad
(&
O≥nCVFømeSour˚Im∂
::
thªadFunc
, 
this
);

98  
	gåue
;

100 
ˇtch
 (
°d
::
sy°em_îr‹
 &)

102 
Æive_
 = 
Ál£
;

103 
	gsour˚_
->
˛o£
();

107  
	gÆive_
;

110 
	gFømeSour˚
::
P¨amëîs
 
O≥nCVFømeSour˚Im∂
::
gëC⁄figuøti⁄
()

112  
sour˚_
->
gëC⁄figuøti⁄
();

115 
boﬁ
 
	gO≥nCVFømeSour˚Im∂
::
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
 &
∑øms
)

117  
sour˚_
->
£tC⁄figuøti⁄
(
∑øms
);

120 
	gFømeSour˚
::
FømeSètus
 
O≥nCVFømeSour˚Im∂
::
„tch
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
timeout
)

122 
	gnvxio
::
ProfûîR™ge
 
ønge
(
nvxio
::
COLOR_ARGB_FUSCHIA
, "FrameSource::fetch (NVXIO)");

124 
	gcv
::
M©
 
‰ame
;

126 i‡(
	gqueue_
.
p›
(
‰ame
, 
timeout
))

128 
	gFømeSour˚
::
P¨amëîs
 
c⁄figuøti⁄
 = 
sour˚_
->
gëC⁄figuøti⁄
();

129 
NVXIO_ASSERT
(
°©ic_ˇ°
<
vx_uöt32
>(
‰ame
.
cﬁs
Ë=
c⁄figuøti⁄
.
‰ameWidth
);

130 
NVXIO_ASSERT
(
°©ic_ˇ°
<
vx_uöt32
>(
‰ame
.
rows
Ë=
c⁄figuøti⁄
.
‰ameHeight
);

132 
	g˙
 = 
‰ame
.
ch™√ls
();

133 
nvxcu_df_image_e
 
	gf‹m©
 = 
˙
 =1 ? 
NVXCU_DF_IMAGE_U8
 :

134 
˙
 =3 ? 
NVXCU_DF_IMAGE_RGB
 : 
NVXCU_DF_IMAGE_RGBX
;

136 
c⁄vîtFøme
(
exec_èrgë
,

137 
image
,

138 
c⁄figuøti⁄
,

139 
‰ame
.
cﬁs
, føme.
rows
,

140 
åue
, 
‰ame
.
°ï
,

141 
˙
, 
‰ame
.
d©a
,

142 
Ál£
,

143 
devMem
,

144 
devMemPôch
);

145  
	gnvxio
::
FømeSour˚
::
OK
;

149 i‡(
	gÆive_
)

151  
	gnvxio
::
FømeSour˚
::
TIMEOUT
;

155 
˛o£
();

156  
	gnvxio
::
FømeSour˚
::
CLOSED
;

161 
	gO≥nCVFømeSour˚Im∂
::
˛o£
()

163 
nvxio
::
ProfûîR™ge
 
ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "FrameSource::close (NVXIO)");

165 
	gÆive_
 = 
Ál£
;

166 i‡(
	gthªad
.
joöabÀ
())

167 
	gthªad
.
joö
();

169 
	gqueue_
.
˛ór
();

170 
	gsour˚_
->
˛o£
();

172 i‡(
	gdevMem
)

174 
cudaFªe
(
devMem
);

175 
	gdevMem
 = 
nuŒ±r
;

179 
	gO≥nCVFømeSour˚Im∂
::~
O≥nCVFømeSour˚Im∂
()

181 
˛o£
();

184 
	gO≥nCVFømeSour˚Im∂
::
thªadFunc
()

186 c⁄° 
timeout
 = 30;

188 
	gÆive_
 && 
	gsour˚_
->
gøb
())

190 
	gcv
::
M©
 
tmp
 = 
sour˚_
->
„tch
();

191 
	gÆive_
 && !
	gqueue_
.
push
(
tmp
, 
timeout
)) { }

194 
	gÆive_
 = 
Ál£
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVFrameSourceImpl.hpp

29 #i‚de‡
OPENCVFRAMESOURCEIMPL_HPP


30 
	#OPENCVFRAMESOURCEIMPL_HPP


	)

32 #ifde‡
USE_OPENCV


34 
	~<mem‹y
>

35 
	~<thªad
>

37 
	~<NVX/ThªadSa„Queue.hµ
>

39 
	~"FømeSour˚/O≥nCV/O≥nCVBa£FømeSour˚.hµ
"

41 
«me•a˚
 
	gnvidüio


44 ˛as†
	cO≥nCVFømeSour˚Im∂
 :

45 
public
 
FømeSour˚


47 
public
:

48 
ex∂icô
 
O≥nCVFømeSour˚Im∂
(
°d
::
unique_±r
<
O≥nCVBa£FømeSour˚
> 
sour˚
);

49 
vútuÆ
 
boﬁ
 
›í
();

50 
vútuÆ
 
FømeSètus
 
„tch
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
timeout
 = 5u );

51 
vútuÆ
 
P¨amëîs
 
gëC⁄figuøti⁄
();

52 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
P¨amëîs
& 
∑øms
);

53 
vútuÆ
 
˛o£
();

54 
	gvútuÆ
 ~
O≥nCVFømeSour˚Im∂
();

56 
	g¥Ÿe˘ed
:

57 
thªadFunc
();

59 vﬁ©ûê
boﬁ
 
	gÆive_
;

60 
	g°d
::
unique_±r
<
O≥nCVBa£FømeSour˚
> 
sour˚_
;

61 
	gnvxio
::
ThªadSa„Queue
<
cv
::
M©
> 
queue_
;

62 
	g°d
::
thªad
Åhread;

64 
öt32_t
 
	gdevi˚ID
;

65 
nvxcu_°ªam_exec_èrgë_t
 
	gexec_èrgë
;

67 
	g¥iv©e
:

69 * 
devMem
;

70 
size_t
 
	gdevMemPôch
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVImageFrameSource.cpp

29 #ifde‡
USE_OPENCV


31 
	~"FømeSour˚/O≥nCV/O≥nCVImageFømeSour˚.hµ
"

33 
	~<›ícv2/img¥oc/img¥oc.hµ
>

34 
	~<›ícv2/highgui/highgui.hµ
>

36 
«me•a˚
 
	gnvidüio


39 
	gO≥nCVImageFømeSour˚
::
O≥nCVImageFømeSour˚
(c⁄° 
°d
::
°rög
& 
_fûeName
):

40 
O≥nCVBa£FømeSour˚
(
nvxio
::
FømeSour˚
::
SINGLE_IMAGE_SOURCE
, "OpenCVImageSource"),

41 
fûeName
(
_fûeName
),

42 
›íed
(
Ál£
)

46 
	gO≥nCVImageFømeSour˚
::
upd©eC⁄figuøti⁄
()

48 
CV_As£π
(!
image
.
em±y
());

50 
	gc⁄figuøti⁄
.
	g‰ameWidth
 = 
°©ic_ˇ°
<
uöt32_t
>(
image
.
cﬁs
);

51 
	gc⁄figuøti⁄
.
	g‰ameHeight
 = 
°©ic_ˇ°
<
uöt32_t
>(
image
.
rows
);

52 
	gc⁄figuøti⁄
.
	gÂs
 = 30u;

54 
	g˙
 = 
image
.
ch™√ls
();

55 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
˙
 =1 ? 
NVXCU_DF_IMAGE_U8
 :

56 
˙
 =3 ? 
NVXCU_DF_IMAGE_RGB
 : 
NVXCU_DF_IMAGE_RGBX
;

59 
boﬁ
 
	gO≥nCVImageFømeSour˚
::
›í
()

61 
image
 = 
cv
::
imªad
(
fûeName
, cv::
IMREAD_ANYCOLOR
);

64 
	g˙
 = 
image
.
ch™√ls
();

65 i‡(
	g˙
 == 3)

66 
cv
::
cvtCﬁ‹
(
image
, image, 
CV_BGR2RGB
);

67 i‡(
	g˙
 == 4)

68 
cv
::
cvtCﬁ‹
(
image
, image, 
CV_BGRA2RGBA
);

70 
upd©eC⁄figuøti⁄
();

72  
	g›íed
 = !
image
.
em±y
();

75 
boﬁ
 
	gO≥nCVImageFømeSour˚
::
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
)

77 
NVXIO_ASSERT
(!
›íed
);

79 
boﬁ
 
	gªsu…
 = 
åue
;

82 i‡(
	g∑øms
.
	g‰ameWidth
 !(
uöt32_t
)-1)

83 
ªsu…
 = 
Ál£
;

84 i‡(
	g∑øms
.
	g‰ameHeight
 !(
uöt32_t
)-1)

85 
ªsu…
 = 
Ál£
;

86 i‡(
	g∑øms
.
	gÂs
 !(
uöt32_t
)-1)

87 
ªsu…
 = 
Ál£
;

89 
NVXIO_ASSERT
((
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
) ||

90 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
) ||

91 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
) ||

92 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
)||

93 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
));

95 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
∑øms
.
f‹m©
;

97  
	gªsu…
;

100 
	gFømeSour˚
::
P¨amëîs
 
O≥nCVImageFømeSour˚
::
gëC⁄figuøti⁄
()

102  
c⁄figuøti⁄
;

105 
	gcv
::
M©
 
O≥nCVImageFømeSour˚
::
„tch
()

107 
›íed
 = 
Ál£
;

108  
	gimage
;

111 
boﬁ
 
	gO≥nCVImageFømeSour˚
::
gøb
()

113  
›íed
;

116 
	gO≥nCVImageFømeSour˚
::
˛o£
()

118 
›íed
 = 
Ál£
;

121 
	gO≥nCVImageFømeSour˚
::~
O≥nCVImageFømeSour˚
()

123 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVImageFrameSource.hpp

29 #i‚de‡
OPENCVIMAGEFRAMESOURCE_HPP


30 
	#OPENCVIMAGEFRAMESOURCE_HPP


	)

32 #ifde‡
USE_OPENCV


34 
	~"FømeSour˚/O≥nCV/O≥nCVBa£FømeSour˚.hµ
"

36 
	~<°rög
>

38 
	~<›ícv2/c‹e/c‹e.hµ
>

40 
«me•a˚
 
	gnvidüio


43 ˛as†
	cO≥nCVImageFømeSour˚
 :

44 
public
 
O≥nCVBa£FømeSour˚


46 
public
:

47 
ex∂icô
 
O≥nCVImageFømeSour˚
(c⁄° 
°d
::
°rög
& 
_fûeName
);

48 
vútuÆ
 
boﬁ
 
›í
();

49 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
);

50 
vútuÆ
 
	gFømeSour˚
::
P¨amëîs
 
gëC⁄figuøti⁄
();

51 
vútuÆ
 
	gcv
::
M©
 
„tch
();

52 
vútuÆ
 
boﬁ
 
gøb
();

53 
vútuÆ
 
˛o£
();

54 
	gvútuÆ
 ~
O≥nCVImageFømeSour˚
();

55 
	g¥Ÿe˘ed
:

56 
upd©eC⁄figuøti⁄
();

58 
	g°d
::
°rög
 
fûeName
;

59 
	gFømeSour˚
::
P¨amëîs
 
c⁄figuøti⁄
;

60 
boﬁ
 
	g›íed
;

62 
	gcv
::
M©
 
image
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVVideoFrameSource.cpp

29 #ifde‡
USE_OPENCV


31 
	~"FømeSour˚/O≥nCV/O≥nCVVideoFømeSour˚.hµ
"

33 
	~<›ícv2/img¥oc/img¥oc.hµ
>

35 
«me•a˚
 
	gnvidüio


38 
	gO≥nCVVideoFømeSour˚
::
O≥nCVVideoFømeSour˚
(
_ˇmîaId
):

39 
O≥nCVBa£FømeSour˚
(
nvxio
::
FømeSour˚
::
CAMERA_SOURCE
, "OpenCVVideoFrameSource"),

40 
fûeName
(),

41 
ˇmîaId
(
_ˇmîaId
)

45 
	gO≥nCVVideoFømeSour˚
::
O≥nCVVideoFømeSour˚
(c⁄° 
°d
::
°rög
& 
_fûeName
, 
boﬁ
 
£quí˚
):

46 
O≥nCVBa£FømeSour˚
(
£quí˚
 ? 
nvxio
::
FømeSour˚
::
IMAGE_SEQUENCE_SOURCE
 :

47 
nvxio
::
FømeSour˚
::
VIDEO_SOURCE
,

49 
fûeName
(
_fûeName
),

50 
ˇmîaId
(-1)

54 
boﬁ
 
	gO≥nCVVideoFømeSour˚
::
›í
()

56 
boﬁ
 
›íed
 = 
Ál£
;

58 i‡(
	gfûeName
.
em±y
())

59 
	g›íed
 = 
ˇ±uª
.
›í
(
ˇmîaId
);

61 
	g›íed
 = 
ˇ±uª
.
›í
(
fûeName
);

63 i‡(
	g›íed
)

64 
upd©eC⁄figuøti⁄
();

66  
	g›íed
;

69 
boﬁ
 
	gO≥nCVVideoFømeSour˚
::
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
)

71 
NVXIO_ASSERT
(!
ˇ±uª
.
isO≥√d
());

73 
boﬁ
 
	gªsu…
 = 
åue
;

76 i‡(
	g∑øms
.
	g‰ameWidth
 !(
uöt32_t
)-1)

77 
ªsu…
 = 
Ál£
;

78 i‡(
	g∑øms
.
	g‰ameHeight
 !(
uöt32_t
)-1)

79 
ªsu…
 = 
Ál£
;

80 i‡(
	g∑øms
.
	gÂs
 !(
uöt32_t
)-1)

81 
ªsu…
 = 
Ál£
;

83 
NVXIO_ASSERT
((
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
) ||

84 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
) ||

85 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
) ||

86 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
)||

87 (
∑øms
.
f‹m©
 =
NVXCU_DF_IMAGE_NONE
));

89 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
∑øms
.
f‹m©
;

91  
	gªsu…
;

94 
	gO≥nCVVideoFømeSour˚
::
upd©eC⁄figuøti⁄
()

96 
c⁄figuøti⁄
.
Âs
 = 
°©ic_ˇ°
<
uöt32_t
>(
ˇ±uª
.
gë
(
CV_CAP_PROP_FPS
));

97 
	gc⁄figuøti⁄
.
	g‰ameWidth
 = 
°©ic_ˇ°
<
uöt32_t
>(
ˇ±uª
.
gë
(
CV_CAP_PROP_FRAME_WIDTH
));

98 
	gc⁄figuøti⁄
.
	g‰ameHeight
 = 
°©ic_ˇ°
<
uöt32_t
>(
ˇ±uª
.
gë
(
CV_CAP_PROP_FRAME_HEIGHT
));

100 
	gty≥
 = 
ˇ±uª
.
gë
(
CV_CAP_PROP_FORMAT
), 
	gdïth
 = 
CV_MAT_DEPTH
(
ty≥
);

101 
NVXIO_ASSERT
(
dïth
 =
CV_8U
);

113 
	gc⁄figuøti⁄
.
	gf‹m©
 = 
NVXCU_DF_IMAGE_RGBX
;

116 
	gFømeSour˚
::
P¨amëîs
 
O≥nCVVideoFømeSour˚
::
gëC⁄figuøti⁄
()

118  
c⁄figuøti⁄
;

121 
	gcv
::
M©
 
O≥nCVVideoFømeSour˚
::
„tch
()

123 
cv
::
M©
 
imagec⁄v
;

125 i‡(!
	gˇ±uª
.
ªåõve
(
image
))

127 
˛o£
();

128  
	gimagec⁄v
;

132 
	g˙
 = 
image
.
ch™√ls
();

133 i‡(
	g˙
 == 3)

134 
cv
::
cvtCﬁ‹
(
image
, 
imagec⁄v
, 
CV_BGR2RGB
);

135 i‡(
	g˙
 == 4)

136 
cv
::
cvtCﬁ‹
(
image
, 
imagec⁄v
, 
CV_BGRA2RGBA
);

138 
	gimage
.
c›yTo
(
imagec⁄v
);

140  
	gimagec⁄v
;

143 
boﬁ
 
	gO≥nCVVideoFømeSour˚
::
gøb
()

145  
ˇ±uª
.
gøb
();

148 
	gO≥nCVVideoFømeSour˚
::
˛o£
()

150 
ˇ±uª
.
ªÀa£
();

153 
	gO≥nCVVideoFømeSour˚
::~
O≥nCVVideoFømeSour˚
()

155 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVVideoFrameSource.hpp

29 #i‚de‡
OPENCVVIDEOFRAMESOURCE_HPP


30 
	#OPENCVVIDEOFRAMESOURCE_HPP


	)

32 #ifde‡
USE_OPENCV


34 
	~"FømeSour˚/O≥nCV/O≥nCVBa£FømeSour˚.hµ
"

36 
	~<›ícv2/c‹e/c‹e.hµ
>

37 
	~<›ícv2/highgui/highgui.hµ
>

39 
«me•a˚
 
	gnvidüio


42 ˛as†
	cO≥nCVVideoFømeSour˚
 :

43 
public
 
O≥nCVBa£FømeSour˚


45 
public
:

46 
ex∂icô
 
O≥nCVVideoFømeSour˚
(
_ˇmîaId
);

47 
O≥nCVVideoFømeSour˚
(c⁄° 
°d
::
°rög
& 
_fûeName
, 
boﬁ
 
£quí˚
);

49 
vútuÆ
 
boﬁ
 
›í
();

50 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
);

51 
vútuÆ
 
	gFømeSour˚
::
P¨amëîs
 
gëC⁄figuøti⁄
();

52 
vútuÆ
 
	gcv
::
M©
 
„tch
();

53 
vútuÆ
 
boﬁ
 
gøb
();

54 
vútuÆ
 
˛o£
();

55 
	gvútuÆ
 ~
O≥nCVVideoFømeSour˚
();

56 
	g¥Ÿe˘ed
:

57 
upd©eC⁄figuøti⁄
();

59 
	g°d
::
°rög
 
fûeName
;

60 
	gˇmîaId
;

61 
	gFømeSour˚
::
P¨amëîs
 
c⁄figuøti⁄
;

62 
	gcv
::
VideoC≠tuª
 
ˇ±uª
;

64 
	gcv
::
M©
 
image
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/Wrappers/FrameSourceWrapper.cpp

29 
	~"FømeSour˚Wøµî.hµ
"

32 
	~<c°rög
>

33 
	~<s°ªam
>

34 
	~<io°ªam
>

36 
«me•a˚
 
	gnvxio


38 
	#THROW_EXCEPTION
(
msg
) \

40 
°d
::
o°rög°ªam
 
o°r_
; \

41 
o°r_
 << 
msg
; \

42 
throw
 
°d
::
	`ru¡ime_îr‹
(
o°r_
.
	`°r
()); \

43 } 0)

	)

45 
	#ASSERT
(
c⁄d
) \

48 
boﬁ
 
°©
 = (
c⁄d
); \

49 i‡(!
°©
) \

51 
	`THROW_EXCEPTION
(#c⁄d << " faûuª i¿fûê" << 
__FILE__
 << "Üöê" << 
__LINE__
); \

53 } 0)

	)

56 
	gFømeSour˚Wøµî
::
FømeSour˚Wøµî
(
°d
::
unique_±r
<
nvidüio
::
FømeSour˚
> 
sour˚
) :

57 
FømeSour˚
(
°©ic_ˇ°
<FømeSour˚::
Sour˚Ty≥
>(
sour˚
->
gëSour˚Ty≥
()),

58 
sour˚
->
gëSour˚Name
()),

59 
sour˚_
(
°d
::
move
(
sour˚
)), 
›íed
(
Ál£
)

61 
ASSERT
(
sour˚_
!=
nuŒ±r
);

64 
boﬁ
 
	gFømeSour˚Wøµî
::
›í
()

66  
›íed
 = 
sour˚_
->
›í
();

69 
	gFømeSour˚
::
FømeSètus
 
FømeSour˚Wøµî
::
„tch
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
image
, 
uöt32_t
 
timeout
)

71 i‡(!
	g›íed
)

73 
	gsour˚_
->
˛o£
();

74  
	gFømeSour˚
::
CLOSED
;

77 
	gnvidüio
::
FømeSour˚
::
FømeSètus
 
°©us
 = 
sour˚_
->
„tch
(
nvidüio
::
image_t
(
image
), 
timeout
);

79  
	g°©ic_ˇ°
<
	gFømeSour˚
::
FømeSètus
>(
°©us
);

82 
	gFømeSour˚
::
P¨amëîs
 
FømeSour˚Wøµî
::
gëC⁄figuøti⁄
()

84 
nvidüio
::
FømeSour˚
::
P¨amëîs
 
cuda_∑øms
 = 
sour˚_
->
gëC⁄figuøti⁄
();

85 
	gFømeSour˚
::
P¨amëîs
 
∑øms
 = { };

87 
ASSERT
((
cuda_∑øms
Ë=(
∑øms
));

88 
	g°d
::
mem˝y
(&
∑øms
, &
cuda_∑øms
, (cuda_params));

90  
	g∑øms
;

93 
boﬁ
 
	gFømeSour˚Wøµî
::
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
)

95 
nvidüio
::
FømeSour˚
::
P¨amëîs
 
cuda_∑øms
 = { };

97 
ASSERT
((
cuda_∑øms
Ë=(
∑øms
));

98 
	g°d
::
mem˝y
(&
cuda_∑øms
, &
∑øms
, (params));

100  
	gsour˚_
->
£tC⁄figuøti⁄
(
cuda_∑øms
);

103 
	gFømeSour˚Wøµî
::
˛o£
()

105 
sour˚_
->
˛o£
();

106 
	g›íed
 = 
Ál£
;

109 
	gFømeSour˚Wøµî
::~
FømeSour˚Wøµî
()

111 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/Wrappers/FrameSourceWrapper.hpp

29 #i‚de‡
FRAMESOURCE_NVXCU_WRAPPER_HPP


30 
	#FRAMESOURCE_NVXCU_WRAPPER_HPP


	)

32 
	~<mem‹y
>

34 
	~<NVX/FømeSour˚.hµ
>

36 
	~"FømeSour˚/FømeSour˚Im∂.hµ
"

38 
«me•a˚
 
	gnvxio


41 ˛as†
	cFømeSour˚Wøµî
 :

42 
public
 
FømeSour˚


44 
public
:

45 
ex∂icô
 
FømeSour˚Wøµî
(
°d
::
unique_±r
<
nvidüio
::
FømeSour˚
> 
sour˚
);

46 
vútuÆ
 
boﬁ
 
›í
();

47 
vútuÆ
 
	gFømeSour˚
::
FømeSètus
 
„tch
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
image
, 
uöt32_t
 
timeout
 = 5u );

48 
vútuÆ
 
	gFømeSour˚
::
P¨amëîs
 
gëC⁄figuøti⁄
();

49 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
);

50 
vútuÆ
 
˛o£
();

51 
	gvútuÆ
 ~
FømeSour˚Wøµî
();

53 
	g¥iv©e
:

54 
°d
::
unique_±r
<
nvidüio
::
FømeSour˚
> 
sour˚_
;

55 
boﬁ
 
	g›íed
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/NVXIOFeatures.cpp

29 
	~<OVX/UtûôyOVX.hµ
>

31 
	~"FømeSour˚/NvMedü/NvMedüCamîaC⁄figP¨ams.hµ
"

33 
	~<Æg‹ôhm
>

35 
«me•a˚
 
	gnvxio


38 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
gëSuµ‹ãdFótuªs
()

40 
°d
::
ve˘‹
<°d::
°rög
> 
„©uªs
;

45 #ifde‡
USE_GUI


46 
	g„©uªs
.
push_back
( { "render2d:window:opengl" } );

47 
	g„©uªs
.
push_back
( { "render2d:video:gstreamer" } );

48 
	g„©uªs
.
push_back
( { "render2d:image:gstreamer" } );

50 
	g„©uªs
.
push_back
( { "render3d:window:opengl" } );

52 #ifde‡
USE_OPENCV


53 
	g„©uªs
.
push_back
( { "render2d:window:opencv" } );

54 
	g„©uªs
.
push_back
( { "render2d:image:opencv" } );

55 
	g„©uªs
.
push_back
( { "render2d:video:opencv" } );

61 #ifde‡
USE_OPENCV


62 
	g„©uªs
.
push_back
( { "source:video:opencv" } );

63 
	g„©uªs
.
push_back
( { "source:image:opencv" } );

65 #ifde‡
USE_GSTREAMER


66 
	g„©uªs
.
push_back
( { "source:image:gstreamer" } );

67 
	g„©uªs
.
push_back
( { "source:video:gstreamer" } );

68 
	g„©uªs
.
push_back
( { "source:camera:v4l2:gstreamer" } );

70 #ifde‡
USE_NVGSTCAMERA


71 
	g„©uªs
.
push_back
( { "source:camera:nvidia:gstreamer" } );

73 #ifde‡
USE_GSTREAMER_NVMEDIA


74 
	g„©uªs
.
push_back
( { "source:video:nvmedia:gstreamer" } );

76 #ifde‡
USE_GSTREAMER_OMX


77 
	g„©uªs
.
push_back
( { "source:video:openmax:gstreamer" } );

79 #ifde‡
USE_NVMEDIA


80 
	g„©uªs
.
push_back
( { "source:video:nvmedia:pure" } );

83 #i‡
deföed
 
USE_CSI_OV10635
 || deföed 
USE_CSI_OV10640


84 c⁄°áutÿ& 
	g∑ú
 : 
ˇmîaC⁄figCﬁÀ˘i⁄
)

86 c⁄° 
°d
::
°rög
 & 
c⁄figName
 = 
∑ú
.
fú°
;

87 
	g°d
::
°rög
 
„©uªName
;

89 #ifde‡
USE_CSI_OV10635


90 i‡(
	gc⁄figName
.
föd
("ov10635"Ë!
°d
::
°rög
::
≈os
)

91 
„©uªName
 = "sour˚:ˇmîa:nvmedü:puª:" + 
c⁄figName
;

93 #ifde‡
USE_CSI_OV10640


94 i‡(
	gc⁄figName
.
föd
("ov10640"Ë!
°d
::
°rög
::
≈os
)

95 
„©uªName
 = "sour˚:ˇmîa:nvmedü:puª:" + 
c⁄figName
;

97 i‡(!
	g„©uªName
.
em±y
())

98 
	g„©uªs
.
push_back
(
„©uªName
);

103 
	g°d
::
s‹t
(
„©uªs
.
begö
(), fótuªs.
íd
());

105  
	g„©uªs
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/OptionHandler.cpp

29 
	~<ˇs£π
>

30 
	~<cm©h
>

31 
	~<limôs
>

32 
	~<s°ªam
>

33 
	~<ty≥_åaôs
>

35 
	~<NVX/Aµliˇti⁄.hµ
>

36 
	~<OVX/UtûôyOVX.hµ
>

38 
«me•a˚
 
	gnvxio
 {

40 
	g«me•a˚
 {

42 ˛as†
	cO±i⁄H™dÀrSåög
 : 
public
 
O±i⁄H™dÀr


44 
public
:

45 
ex∂icô
 
O±i⁄H™dÀrSåög
(
°d
::
°rög
 *
ªsu…
) :Ñesult(result),

46 
deÁu…Såög
(
°d
::
°rög
("\""Ë+ *
ªsu…
 + std::string("\""))

50 
°d
::
°rög
 
gëPœ˚hﬁdî
() const {  "STRING"; }

52 
	g°d
::
°rög
 
gëDeÁu…Såög
(Ëc⁄° {  
deÁu…Såög
; }

54 
	g°d
::
°rög
 
¥o˚ssVÆue
(c⁄° 
°d
::°rög &
vÆueSå
) const {

55 *
ªsu…
 = 
vÆueSå
;

56  
	g°d
::
°rög
();

59 
	g¥iv©e
:

60 
°d
::
°rög
 *
ªsu…
;

61 
	g°d
::
°rög
 
deÁu…Såög
;

64 
	gãm∂©e
 <
ty≥«me
 
	gT
>

65 
	g°d
::
°rög
 
ª¥e£¡R™ge
(c⁄° 
R™ge
<
T
> &
ønge
)

67 i‡(!
ønge
.
lowC⁄°øöed
(Ë&& !ønge.
highC⁄°øöed
())  "";

69 
	g°d
::
o°rög°ªam
 
osLow
, 
	gosHigh
;

70 
	gosLow
 << (
	gønge
.
	glowIn˛usive
 ? ">=" : ">"Ë<< ' ' << 
ønge
.
low
;

71 
	gosHigh
 << (
	gønge
.
	ghighIn˛usive
 ? "<=" : "<"Ë<< ' ' << 
ønge
.
high
;

73 i‡(!
	gønge
.
lowC⁄°øöed
())

74  
	gosHigh
.
°r
();

75 i‡(!
	gønge
.
highC⁄°øöed
())

76  
	gosLow
.
°r
();

78  
	gosLow
.
°r
(Ë+ "ánd " + 
	gosHigh
.str();

81 
	gãm∂©e
 <
ty≥«me
 
	gT
>

82 
ty≥«me
 
	g°d
::
íabÀ_if
<
°d
::
is_öãgøl
<
T
>::
vÆue
, 
	gboﬁ
>::
ty≥


83 
isFöôe
(
T
Ë{  
åue
; }

85 
	gãm∂©e
 <
ty≥«me
 
	gT
>

86 
ty≥«me
 
	g°d
::
íabÀ_if
<
°d
::
is_Êﬂtög_poöt
<
T
>::
vÆue
, 
	gboﬁ
>::
ty≥


87 
isFöôe
(
T
 
x
Ë{  
°d
::
isföôe
(x); }

89 
	gãm∂©e
 <
ty≥«me
 
	gT
>

90 ˛as†
	cO±i⁄H™dÀrSåómBa£d
 : 
public
 
O±i⁄H™dÀr


92 
public
:

93 
O±i⁄H™dÀrSåómBa£d
(
T
 *
ªsu…
, c⁄° 
R™ge
<T> &
vÆidR™ge
)

94 : 
ªsu…
‘esu…), 
vÆidR™ge
(validRange)

96 
as£π
(
vÆidR™ge
.
c⁄èös
(*
ªsu…
));

97 
	g°d
::
o°rög°ªam
 
os
;

98 
	gos
 << *
	gªsu…
;

99 
	gdeÁu…Såög
 = 
os
.
°r
();

102 
	g°d
::
°rög
 
gëDeÁu…Såög
() const {

103  
deÁu…Såög
;

106 
	g°d
::
°rög
 
¥o˚ssVÆue
(c⁄° 
°d
::°rög &
vÆueSå
) const {

107 
°d
::
i°rög°ªam
 
is
(
vÆueSå
);

108 
	g°d
::
noskùws
(
is
);

113 *
	gªsu…
 = 
T
();

115 
	gis
 >> *
	gªsu…
;

117 
	g°d
::
ios_ba£
::
io°©e
 io°©ê
is
.
rd°©e
();

118 
	gis
.
˛ór
();

120 i‡(
	gis
.
≥ek
(Ë!
EOF
Ë 
gëP¨£Eº‹Såög
();

122 c⁄° 
T
 
	glowe°
 = 
°d
::
numîic_limôs
<T>::
lowe°
();

123 c⁄° 
T
 
	ghighe°
 = 
°d
::
numîic_limôs
<T>::
max
();

125 i‡(
	gio°©e
 & 
	g°d
::
ios_ba£
::
Áûbô
)

130 i‡(*
ªsu…
 =
lowe°
 || *ªsu… =
highe°
)

132 i‡(!
vÆidR™ge
.
c⁄èös
(*
ªsu…
))

133  
gëC⁄°øötSåög
();

139 
	g°d
::
o°rög°ªam
 
mesßge
;

140 
	gmesßge
 << "must be ";

141 i‡(*
	gªsu…
 =
lowe°
)

142 
mesßge
 << ">" << 
lowe°
;

144 
	gmesßge
 << "<" << 
	ghighe°
;

145  
	gmesßge
.
°r
();

149  
gëP¨£Eº‹Såög
();

153 i‡(!
isFöôe
(*
ªsu…
))

156 i‡(!
	gvÆidR™ge
.
c⁄èös
(*
ªsu…
))

157  
gëC⁄°øötSåög
();

162 
	g°d
::
°rög
 
gëC⁄°øötSåög
() const {

163 
°d
::
°rög
 
øngeSå
 = 
ª¥e£¡R™ge
(
vÆidR™ge
);

164 i‡(
	gøngeSå
.
em±y
()) ÑangeStr;

165  "mu° bê" + 
	gøngeSå
;

168 
	g¥Ÿe˘ed
:

169 
vútuÆ
 
°d
::
°rög
 
gëP¨£Eº‹Såög
() const = 0;

171 
	g¥iv©e
:

172 
T
 *
ªsu…
;

173 
	gR™ge
<
	gT
> 
	gvÆidR™ge
;

174 
	g°d
::
°rög
 
deÁu…Såög
;

177 
˛ass
 
	gO±i⁄H™dÀrI¡egî
 : 
public
 
O±i⁄H™dÀrSåómBa£d
<>

179 
public
:

180 
O±i⁄H™dÀrI¡egî
(*
ªsu…
, c⁄° 
R™ge
<> &
vÆidR™ge
)

181 : 
O±i⁄H™dÀrSåómBa£d
<>(
ªsu…
, 
	gvÆidR™ge
)

184 
	g°d
::
°rög
 
gëPœ˚hﬁdî
() const {  "INTEGER"; }

186 
	g¥Ÿe˘ed
:

187 
°d
::
°rög
 
gëP¨£Eº‹Såög
() const {  "must beán integer"; }

190 
˛ass
 
	gO±i⁄H™dÀrUnsig√dI¡egî
 : 
public
 
O±i⁄H™dÀrSåómBa£d
<>

192 
public
:

193 
O±i⁄H™dÀrUnsig√dI¡egî
(*
ªsu…
, c⁄° 
R™ge
<> &
vÆidR™ge
)

194 : 
O±i⁄H™dÀrSåómBa£d
<>(
ªsu…
, 
	gvÆidR™ge
)

197 
	g°d
::
°rög
 
¥o˚ssVÆue
(c⁄° 
°d
::°rög &
vÆueSå
) const

201 i‡(!
vÆueSå
.
em±y
(Ë&& vÆueSå.
‰⁄t
() == '-')

202  
gëP¨£Eº‹Såög
();

203  
	gO±i⁄H™dÀrSåómBa£d
<>::
¥o˚ssVÆue
(
vÆueSå
);

206 
	g°d
::
°rög
 
gëPœ˚hﬁdî
() const {  "INTEGER"; }

208 
	g¥Ÿe˘ed
:

209 
°d
::
°rög
 
gëP¨£Eº‹Såög
() const {  "must beáÇon-negative integer"; }

212 
	gãm∂©e
 <
ty≥«me
 
	gT
>

213 
˛ass
 
	gO±i⁄H™dÀrRól
 : 
public
 
O±i⁄H™dÀrSåómBa£d
<
T
>

215 
public
:

216 
O±i⁄H™dÀrRól
(
T
 *
ªsu…
, c⁄° 
R™ge
<T> &
vÆidR™ge
)

217 : 
O±i⁄H™dÀrSåómBa£d
<
T
>(
ªsu…
, 
	gvÆidR™ge
)

220 
	g°d
::
°rög
 
gëPœ˚hﬁdî
() const {  "REAL"; }

222 
	g¥Ÿe˘ed
:

223 
°d
::
°rög
 
gëP¨£Eº‹Såög
() const {  "must beáÑealÇumber"; }

228 
	gO±i⁄H™dÀr
::~
	$O±i⁄H™dÀr
()

229 {
	}
}

231 
°d
::
°rög
 
O±i⁄H™dÀr
::
	$gëC⁄°øötSåög
() const

233  
°d
::
	`°rög
();

234 
	}
}

236 
	gO±i⁄H™dÀr
::
±r
 
O±i⁄H™dÀr
::
	$°rög
(
°d
::
°rög
 *
ªsu…
)

238  
makeUP
<
O±i⁄H™dÀrSåög
>(
ªsu…
);

239 
	}
}

241 
	gO±i⁄H™dÀr
::
±r
 
O±i⁄H™dÀr
::
öãgî
(*
ªsu…
, c⁄° 
R™ge
<> &
vÆidR™ge
)

243  
	gmakeUP
<
	gO±i⁄H™dÀrI¡egî
>(
	gªsu…
, 
	gvÆidR™ge
);

246 
	gO±i⁄H™dÀr
::
±r
 
O±i⁄H™dÀr
::
unsig√dI¡egî
(*
ªsu…
, c⁄° 
R™ge
<> &
vÆidR™ge
)

248  
	gmakeUP
<
	gO±i⁄H™dÀrUnsig√dI¡egî
>(
	gªsu…
, 
	gvÆidR™ge
);

251 
	gO±i⁄H™dÀr
::
±r
 
O±i⁄H™dÀr
::
ªÆ
(*
ªsu…
, c⁄° 
R™ge
<> &
vÆidR™ge
)

253  
	gmakeUP
<
	gO±i⁄H™dÀrRól
<>>(
	gªsu…
, 
	gvÆidR™ge
);

256 
	gO±i⁄H™dÀr
::
±r
 
O±i⁄H™dÀr
::
ªÆ
(*
ªsu…
, c⁄° 
R™ge
<> &
vÆidR™ge
)

258  
	gmakeUP
<
	gO±i⁄H™dÀrRól
<>>(
	gªsu…
, 
	gvÆidR™ge
);

261 
	gO±i⁄H™dÀr
::
±r
 
O±i⁄H™dÀr
::
⁄eOf
(
°d
::
°rög
 *
ªsu…
, std::
öôülizî_li°
<°d::°rög> 
ÆlowedVÆues
)

263 
°d
::
ve˘‹
<°d::
∑ú
<°d::
°rög
, 
	g°d
::°rög>> 
ÆlowedPaús
;

264 
	gÆlowedPaús
.
ª£rve
(
ÆlowedVÆues
.
size
());

266 c⁄°áutÿ&
	gv
: 
ÆlowedVÆues
)

267 
ÆlowedPaús
.
em∂a˚_back
(
v
, v);

269  
	gmakeUP
<
	gdëaû
::
O±i⁄H™dÀrO√Of
<
°d
::
°rög
>>(
ªsu…
, 
	gÆlowedPaús
.
begö
(),áŒowedPaús.
íd
());

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Private/GStreamerUtils.hpp

29 #i‚de‡
GSTREAMER_UTILS_HPP


30 
	#GSTREAMER_UTILS_HPP


	)

32 #ifde‡
USE_GSTREAMER


34 
	~<g°/g°.h
>

36 
	#VERSION_NUM
(
maj‹
, 
mö‹
, 
mi¸o
Ë(maj‹ * 1000000 + mö‹ * 1000 + mi¸o)

	)

37 
	#FULL_GST_VERSION
 
	`VERSION_NUM
(
GST_VERSION_MAJOR
, 
GST_VERSION_MINOR
, 
GST_VERSION_MICRO
)

	)

39 #i‡
GST_VERSION_MAJOR
 == 0

40 
	#COLOR_ELEM
 "ffm≥gcﬁ‹•a˚"

	)

41 
	#ENCODE_ELEM
 "f„nc_m≥g4"

	)

42 #ñi‡
GST_VERSION_MAJOR
 == 1

43 
	#COLOR_ELEM
 "videoc⁄vît"

	)

44 
	#ENCODE_ELEM
 "avíc_m≥g4"

	)

49 
«me•a˚
 
	gnvidüio
 {

51 
	sGlibDñëî


53 
›î©‹
 ()(*
	gp
) const

55 
g_‰ì
(
p
);

59 
	sGSåómîObje˘Dñëî


61 
›î©‹
 ()(
G°Buf„r
 *
	gb
) const

63 
g°_buf„r_uƒef
(
b
);

66 
›î©‹
 ()(
G°C≠s
 *
	gc
) const

68 
g°_ˇps_uƒef
(
c
);

71 
›î©‹
 ()(
G°Pad
 *
	gp
) const

73 
g°_obje˘_uƒef
(
p
);

76 
›î©‹
 ()(
G°Mesßge
 *
	gm
) const

78 
g°_mesßge_uƒef
(
m
);

81 
›î©‹
 ()(
G°EÀmítFa˘‹y
 *
	gf
) const

83 
g°_obje˘_uƒef
(
f
);

86 #i‡
GST_VERSION_MAJOR
 > 0

87 
›î©‹
 ()(
G°Sam∂e
 *
	gs
) const

89 
g°_ßm∂e_uƒef
(
s
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Private/LogUtils.cpp

29 
	~<c°dio
>

30 
	~<c°dlib
>

31 
	~<c°d¨g
>

32 
	~<√w
>

33 
	~<s°ªam
>

35 #ifde‡
__löux__


36 
	~<loˇÀ.h
>

37 
	~<°rög.h
>

40 #ifde‡
_WIN32


41 
	#NOMINMAX


	)

42 
	~<Wödows.h
>

45 #i‚de‡
__ANDROID__


46 
	~<NVX/Aµliˇti⁄.hµ
>

49 
«me•a˚
 
	gnvxio
 {Çame•a˚ 
	göã∫Æ
 {

51 #i‚de‡
__ANDROID__


52 
nvxio_¥ötf
(c⁄° * 
f‹m©
, ...)

54 i‡(
	gnvxio
::
Aµliˇti⁄
::
gë
().
gëVîbo£Fœg
())

56 
°d
::
va_li°
 
¨g
;

57 
va_°¨t
(
¨g
, 
f‹m©
);

58 
	g°d
::
v¥ötf
(
f‹m©
, 
¨g
);

59 
va_íd
(
¨g
);

60 
	g°d
::
putch¨
('\n');

65 #i‡
deföed
 
__löux__


67 ˛as†
	cPosixLoˇÀ
 {

68 
	gpublic
:

69 
ex∂icô
 
PosixLoˇÀ
(
loˇÀ_t
 
ba£
Ë: 
loˇÀ
(
du∂oˇÀ
(base))

71 i‡(
loˇÀ
 =(
loˇÀ_t
)0Ë
throw
 
°d
::
bad_Æloc
();

74 
PosixLoˇÀ
(c⁄° PosixLoˇÀ &Ë
dñëe
;

75 
	gPosixLoˇÀ
 & 
	g›î©‹
 = (c⁄° 
PosixLoˇÀ
 &Ë
dñëe
;

77 c⁄° *
gëEº‹Såög
(
î∫um
)

79 #ifde‡
__ANDROID__


80  
°ªº‹
(
î∫um
);

82  
°ªº‹_l
(
î∫um
, 
loˇÀ
);

86 ~
PosixLoˇÀ
()

88 
‰ìloˇÀ
(
loˇÀ
);

91 
	g¥iv©e
:

92 
loˇÀ_t
 
loˇÀ
;

95 
	g°d
::
°rög
 
î∫oToSåög
(
î∫um
)

97 
°d
::
o°rög°ªam
 
os
;

98 
	gos
 << 
	gî∫um
;

100 
PosixLoˇÀ
 
cuºítLoˇÀ
(
u£loˇÀ
((
loˇÀ_t
)0));

102 i‡(c⁄° *
	gîr‹Såög
 = 
cuºítLoˇÀ
.
gëEº‹Såög
(
î∫um
))

103 
os
 << " - " << 
îr‹Såög
;

105  
	gos
.
°r
();

109 #i‡
deföed
 
_WIN32


110 
	g°d
::
°rög
 
wöEº‹ToSåög
(
îr‹
)

112 
°d
::
o°rög°ªam
 
os
;

113 
	gos
 << 
	gîr‹
;

115 *
	gîr‹Såög
;

117 
DWORD
 
	gÀngth
 = 
F‹m©MesßgeA
(

118 
FORMAT_MESSAGE_ALLOCATE_BUFFER
 | 
FORMAT_MESSAGE_FROM_SYSTEM


119 | 
FORMAT_MESSAGE_IGNORE_INSERTS
 | 
FORMAT_MESSAGE_MAX_WIDTH_MASK
,

120 
nuŒ±r
, 
îr‹
, 0, (
LPSTR
)&
îr‹Såög
, 0,Çullptr);

122 i‡(
	gÀngth
 == 0)

124 
os
 << " - unknownÉrror";

125  
	gos
.
°r
();

128 
	gåy


130 
	gos
 << " - " << 
	gîr‹Såög
;

131 
LoˇlFªe
(
îr‹Såög
);

133 
ˇtch
 (...)

135 
LoˇlFªe
(
îr‹Såög
);

136 
	gthrow
;

139  
	gos
.
°r
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Private/LogUtils.hpp

29 #i‚de‡
LOG_UTILS_HPP


30 
	#LOG_UTILS_HPP


	)

32 
	~<°rög
>

34 
	~<OVX/UtûôyOVX.hµ
>

36 
«me•a˚
 
	gnvxio
 {Çame•a˚ 
	göã∫Æ
 {

38 #i‚de‡
__ANDROID__


39 
nvxio_¥ötf
(c⁄° * 
f‹m©
, ...);

42 #i‡
deföed
 
__löux__


43 
	g°d
::
°rög
 
î∫oToSåög
(
î∫um
);

46 #i‡
deföed
 
_WIN32


47 
	g°d
::
°rög
 
wöEº‹ToSåög
(
îr‹
);

52 #ifde‡
__ANDROID__


53 
	#NVXIO_PRINT
(...Ë
	`NVXIO_LOGE
("NVXIO", 
__VA_ARGS__
)

	)

55 
	#NVXIO_PRINT
(
f‹m©
, ...Ë::
nvxio
::
öã∫Æ
::
	`nvxio_¥ötf
(f‹m©, ## 
__VA_ARGS__
)

	)

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Private/Types.cpp

29 
	~<OVX/UtûôyOVX.hµ
>

31 
	~"Ty≥s.hµ
"

33 
	~<cuda_ru¡ime_≠i.h
>

34 
	~<c°rög
>

36 
«me•a˚
 
	gnvidüio


39 
size_t
 
gëIãmSize
(
nvxcu_¨øy_ôem_ty≥_e
 
ôem_ty≥
)

41 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_RECTANGLE
)

42  (
nvxcu_ª˘™gÀ_t
);

43 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_KEYPOINT
)

44  (
nvxcu_keypoöt_t
);

45 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_COORDINATES2D
)

46  (
nvxcu_co‹dö©es2d_t
);

47 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_COORDINATES3D
)

48  (
nvxcu_co‹dö©es3d_t
);

50 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_POINT2F
)

51  (
nvxcu_poöt2f_t
);

52 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_POINT3F
)

53  (
nvxcu_poöt3f_t
);

54 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_POINT4F
)

55  (
nvxcu_poöt4f_t
);

56 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_KEYPOINTF
)

57  (
nvxcu_keypoötf_t
);

66 
	gimage_t
::
image_t
() :

67 
f‹m©
(),

68 
width
(0u),

69 
height
(0u),

70 
∂™es_
(0ul),

71 
	g∂™es
 { }

76 
	gimage_t
::
image_t
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
image
) :

77 
f‹m©
(
image
.
ba£
.format),

78 
width
(
image
.
ba£
.width),

79 
height
(
image
.
ba£
.height),

80 
∂™es_
(),

81 
	g∂™es
 { }

83 
	g∂™es_
 = 1u;

85 
NVXIO_ASSERT
(
f‹m©
 =
NVXCU_DF_IMAGE_U8
 ||

86 
f‹m©
 =
NVXCU_DF_IMAGE_RGB
 ||

87 
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ||

88 
f‹m©
 =
NVXCU_DF_IMAGE_NV12
);

90 
NVXIO_ASSERT
(
image
.
ba£
.
image_ty≥
 =
NVXCU_PITCH_LINEAR_IMAGE
);

92 i‡(
	gf‹m©
 =
NVXCU_DF_IMAGE_NV12
)

93 
∂™es_
 = 2u;

95 
uöt32_t
 
	gp
 = 0u;Ö < 
	g∂™es_
; ++p)

97 
	g∂™es
[
p
].
	g±r
 = 
image
.
∂™es
[p].
dev_±r
;

98 
	g∂™es
[
p
].
	gpôch_ö_byãs
 = 
image
.
∂™es
[p].
pôch_ö_byãs
;

106 
	g¨øy_t
::
¨øy_t
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
¨øy
) :

107 
ôem_ty≥
(
¨øy
.
ba£
.item_type),

108 
±r
(
¨øy
.
dev_±r
),

109 
num_ôems
(0u),

110 
ˇ∑côy
(
¨øy
.
ba£
.capacity)

112 
NVXIO_ASSERT
(
¨øy
.
ba£
.
¨øy_ty≥
 =
NVXCU_PLAIN_ARRAY
);

114 
cudaSåóm_t
 
	g°ªam
 = 
nuŒ±r
;

116 
NVXIO_CUDA_SAFE_CALL
–
cudaMem˝yAsync
(&
num_ôems
, 
¨øy
.
num_ôems_dev_±r
,

117 (
num_ôems
),

118 
cudaMem˝yDevi˚ToHo°
, 
°ªam
) );

120 
NVXIO_CUDA_SAFE_CALL
–
cudaSåómSynchr⁄ize
(
°ªam
) );

123 
	g¨øy_t
::
¨øy_t
() :

124 
ôem_ty≥
(),

125 
±r
(
nuŒ±r
),

126 
num_ôems
(0u),

127 
ˇ∑côy
(0u)

136 
	gAºay2CPUPoöãrM≠≥r
::
Aºay2CPUPoöãrM≠≥r
(c⁄° 
¨øy_t
 & 
¨øy
, 
°d
::
ve˘‹
<
uöt8_t
> * 
˝uD©a
) :

137 
˝uD©a_
 { },

138 
˝uD©aPoöãr_
(
nuŒ±r
)

140 
size_t
 
	gsize
 = 
¨øy
.
num_ôems
 * 
gëIãmSize
◊ºay.
ôem_ty≥
);

141 
NVXIO_ASSERT
(
size
 > 0ul);

143 
	g°d
::
ve˘‹
<
uöt8_t
> & 
vec
 = 
˝uD©a
 ? *˝uD©®: 
˝uD©a_
;

144 
	gvec
.
ªsize
(
size
);

146 
	g˝uD©aPoöãr_
 = &
vec
[0];

148 
cudaSåóm_t
 
	g°ªam
 = 
nuŒ±r
;

149 
NVXIO_CUDA_SAFE_CALL
–
cudaMem˝yAsync
(
˝uD©aPoöãr_
, 
¨øy
.
±r
, 
size
,

150 
cudaMem˝yDevi˚ToHo°
, 
°ªam
) );

151 
NVXIO_CUDA_SAFE_CALL
–
cudaSåómSynchr⁄ize
(
°ªam
) );

154 
	gImage2CPUPoöãrM≠≥r
::
Image2CPUPoöãrM≠≥r
(c⁄° 
image_t
 & 
image
) :

155 
˝uD©a_
 { }

157 
NVXIO_ASSERT
(
image
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
 ||

158 
image
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
 ||

159 
image
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ||

160 
image
.
f‹m©
 =
NVXCU_DF_IMAGE_2F32
);

162 
size_t
 
	gpôch
 = 
image
.
width
 *

163 (
image
.
f‹m©
 =
NVXCU_DF_IMAGE_U8
 ? (
uöt8_t
) :

164 
image
.
f‹m©
 =
NVXCU_DF_IMAGE_RGB
 ? 3 * (
uöt8_t
) :

165 
image
.
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ? 4 * (
uöt8_t
) :

166 
image
.
f‹m©
 =
NVXCU_DF_IMAGE_2F32
 ? 2 * () : 0ul);

167 
size_t
 
	gsize
 = 
pôch
 * 
image
.
height
;

168 
NVXIO_ASSERT
(
size
 > 0ul);

170 
	g˝uD©a_
.
ªsize
(
size
);

172 
cudaSåóm_t
 
	g°ªam
 = 
nuŒ±r
;

173 
NVXIO_CUDA_SAFE_CALL
–
cudaMem˝y2DAsync
(&
˝uD©a_
[0], 
pôch
,

174 
image
.
∂™es
[0].
±r
, image.∂™es[0].
pôch_ö_byãs
,

175 
pôch
, 
image
.
height
,

176 
cudaMem˝yDevi˚ToHo°
, 
°ªam
) );

177 
NVXIO_CUDA_SAFE_CALL
–
cudaSåómSynchr⁄ize
(
°ªam
) );

184 
	gm©rix4x4f_t
::
m©rix4x4f_t
() :

185 
±r
(
°‹age_
), 
	g°‹age_
{ }

189 
	gm©rix4x4f_t
::
m©rix4x4f_t
(c⁄° m©rix4x4f_à& 
¨øy
) :

190 
±r
(
°‹age_
), 
	g°‹age_
{ }

192 
	g°d
::
mem˝y
(
±r
, 
¨øy
.±r, ◊ºay.
°‹age_
));

195 
	gm©rix4x4f_t
::
m©rix4x4f_t
(* 
¨øy
) :

196 
±r
(
¨øy
), 
	g°‹age_
{ }

201 
	gm©rix4x4f_t
 & m©rix4x4f_t::
›î©‹
 = (c⁄° 
m©rix4x4f_t
 & 
¨øy
)

203 i‡(
this
 !&
¨øy
)

205 
°d
::
mem£t
(
°‹age_
, 0, (storage_));

206 
	g°d
::
mem˝y
(
±r
, 
¨øy
.±r, ◊ºay.
°‹age_
));

209  *
	gthis
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Private/Types.hpp

29 #i‚de‡
TYPES_HPP


30 
	#TYPES_HPP


	)

32 
	~<c°döt
>

33 
	~<ve˘‹
>

35 
	~<NVX/nvxcu.h
>

36 
	~<VX/vx.h
>

38 
«me•a˚
 
	gnvidüio


41 
	#NVXCU_DF_IMAGE_NONE
 
°©ic_ˇ°
<
nvxcu_df_image_e
>(0)

	)

43 
size_t
 
gëIãmSize
(
nvxcu_¨øy_ôem_ty≥_e
 
ôem_ty≥
);

49 
	#NVIDIAIO_NB_MAX_PLANES
 (4u)

	)

51 ˛as†
	cimage_t


53 
	gpublic
:

54 
nvxcu_df_image_e
 
f‹m©
;

55 
uöt32_t
 
	gwidth
;

56 
uöt32_t
 
	gheight
;

57 
size_t
 
	g∂™es_
;

61 * 
	g±r
;

62 
öt32_t
 
	gpôch_ö_byãs
;

63 } 
	g∂™es
[
NVIDIAIO_NB_MAX_PLANES
];

65 
ex∂icô
 
image_t
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
image
);

66 
image_t
();

68 
	gãm∂©e
 <
ty≥«me
 
	gT
>

69 
›î©‹
 c⁄° 
	gT
 * () const;

73 
	g¥iv©e
:

75 
image_t
(c⁄° image_à&Ë
dñëe
;

76 
	gimage_t
 & 
	g›î©‹
 = (c⁄° 
image_t
 &Ë
dñëe
;

80 ˛as†
	cImage2CPUPoöãrM≠≥r


82 
	gpublic
:

83 
ex∂icô
 
Image2CPUPoöãrM≠≥r
(c⁄° 
image_t
 & 
image
);

85 
	gãm∂©e
 <
ty≥«me
 
	gT
>

86 
›î©‹
 c⁄° 
	gT
 * () const;

88 
	g¥iv©e
:

89 
Image2CPUPoöãrM≠≥r
(c⁄° Image2CPUPoöãrM≠≥∏&Ë
dñëe
;

90 c⁄° 
	gImage2CPUPoöãrM≠≥r
 & 
	g›î©‹
(c⁄° 
Image2CPUPoöãrM≠≥r
 &Ë
dñëe
;

92 
	g°d
::
ve˘‹
<
uöt8_t
> 
˝uD©a_
;

95 
	gãm∂©e
 <
ty≥«me
 
	gT
>

96 
	gImage2CPUPoöãrM≠≥r
::
›î©‹
 c⁄° 
T
 * () const

98  (c⁄° 
T
 *)&
˝uD©a_
[0];

105 ˛as†
	c¨øy_t


107 
	gpublic
:

108 
nvxcu_¨øy_ôem_ty≥_e
 
ôem_ty≥
;

109 * 
	g±r
;

110 
uöt32_t
 
	gnum_ôems
;

111 
uöt32_t
 
	gˇ∑côy
;

113 
¨øy_t
();

114 
ex∂icô
 
¨øy_t
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
¨øy
);

116 
	g¥iv©e
:

118 
¨øy_t
(c⁄°áºay_à&Ë
dñëe
;

119 
	g¨øy_t
 & 
	g›î©‹
 = (c⁄° 
¨øy_t
 &Ë
dñëe
;

123 ˛as†
	cAºay2CPUPoöãrM≠≥r


125 
	gpublic
:

126 
ex∂icô
 
Aºay2CPUPoöãrM≠≥r
(c⁄° 
¨øy_t
 & 
¨øy
, 
°d
::
ve˘‹
<
uöt8_t
> * 
˝uD©a
 = 
nuŒ±r
);

128 
	gãm∂©e
 <
ty≥«me
 
	gT
>

129 
›î©‹
 c⁄° 
	gT
 * () const;

131 
	g¥iv©e
:

132 
Aºay2CPUPoöãrM≠≥r
(c⁄° Aºay2CPUPoöãrM≠≥∏&Ë
dñëe
;

133 c⁄° 
	gAºay2CPUPoöãrM≠≥r
 & 
	g›î©‹
(c⁄° 
Aºay2CPUPoöãrM≠≥r
 &Ë
dñëe
;

135 
	g°d
::
ve˘‹
<
uöt8_t
> 
˝uD©a_
;

136 
uöt8_t
 * 
	g˝uD©aPoöãr_
;

139 
	gãm∂©e
 <
ty≥«me
 
	gT
>

140 
	gAºay2CPUPoöãrM≠≥r
::
›î©‹
 c⁄° 
T
 * () const

142  (c⁄° 
T
 *)
˝uD©aPoöãr_
;

149 ˛as†
	cm©rix4x4f_t


151 
	gpublic
:

152 * 
±r
;

154 
m©rix4x4f_t
();

155 
ex∂icô
 
m©rix4x4f_t
(c⁄° m©rix4x4f_à& 
¨øy
);

156 
ex∂icô
 
m©rix4x4f_t
(* 
¨øy
);

157 
	gm©rix4x4f_t
 & 
	g›î©‹
 = (c⁄° 
m©rix4x4f_t
 &);

159 
	g¥iv©e
:

162 
°‹age_
[4 * 4];

168 
«me•a˚
 
	gnvxio


171 ˛as†
	cimage_t
 : 
public
 
nvidüio
::
image_t


175 ˛as†
	cm©rix4x4f_t
 : 
public
 
nvidüio
::
m©rix4x4f_t


	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/ProfilerRange.cpp

29 
	~<NVX/ProfûîR™ge.hµ
>

31 #ifde‡
USE_NVTX


32 
	~<nvToﬁsExt.h
>

35 
	gnvxio
::
ProfûîR™ge
::
	$ProfûîR™ge
(
uöt32_t
 
cﬁ‹
, c⁄° * 
mesßge
)

37 ()
cﬁ‹
;

38 ()
mesßge
;

40 #ifde‡
USE_NVTX


41 
nvtxEvítAâribuãs_t
 
©å
 = {0};

42 
©å
.
vîsi⁄
 = 
NVTX_VERSION
;

43 
©å
.
size
 = 
NVTX_EVENT_ATTRIB_STRUCT_SIZE
;

44 
©å
.
cﬁ‹
 = color;

45 
©å
.
cﬁ‹Ty≥
 = 
NVTX_COLOR_ARGB
;

46 
©å
.
mesßge
.
ascii
 = message;

47 
©å
.
mesßgeTy≥
 = 
NVTX_MESSAGE_TYPE_ASCII
;

48 
	`nvtxR™gePushEx
(&
©å
);

50 
	}
}

52 
	gnvxio
::
ProfûîR™ge
::~
	$ProfûîR™ge
()

54 #ifde‡
USE_NVTX


55 
	`nvtxR™geP›
();

57 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/BaseRender3DImpl.cpp

29 #ifde‡
USE_GUI


31 
	~<Eigí/Dí£
>

33 
	~<c°rög
>

34 
	~<cm©h
>

36 
	~<NVX/Aµliˇti⁄.hµ
>

37 
	~<NVX/ProfûîR™ge.hµ
>

39 
	~"Rídî/CUDA-O≥nGL/Ba£Rídî3DIm∂.hµ
"

42 
	gEigí
::
	tM©rix
<, 4, 4, 
	tEigí
::
	tRowMaj‹
> 
	tM©rix4f_rm
;

48 
	g«me•a˚


51 
toRadüns
(
degªes
)

53  
	gdegªes
 * 0.017453292519f;

56 
mu…ùlyM©rix
(c⁄° 
nvidüio
::
m©rix4x4f_t
 & 
m1
,

57 c⁄° 
nvidüio
::
m©rix4x4f_t
 & 
m2
,

58 
nvidüio
::
m©rix4x4f_t
 & 
ªs
)

60 
°d
::
mem£t
((*)
ªs
.
±r
, 0, () * 16);

62 
öt32_t
 
	gi
 = 0; i < 4; ++i)

63 
öt32_t
 
	gj
 = 0; j < 4; ++j)

64 
öt32_t
 
	gk
 = 0; k < 4; ++k)

65 
	gªs
.
	g±r
[4 *
i
 + 
j
] +
m1
.
±r
[4 * i + 
k
] * 
m2
.ptr[4 * k + j];

68 
ˇlcProje˘i⁄M©rix
(
fovY
, 
a•e˘
, 
zNór
, 
zF¨
, 
nvidüio
::
m©rix4x4f_t
 & 
¥oje˘i⁄
)

70 
°d
::
mem£t
((*)
¥oje˘i⁄
.
±r
, 0, () * 16);

72 
	g˘g
 = 1.‡/ 
èn
–
fovY
/2 );

74 
	g¥oje˘i⁄
.
	g±r
[0] = 
˘g
 / 
a•e˘
;

75 
	g¥oje˘i⁄
.
	g±r
[5] = 
˘g
;

76 
	g¥oje˘i⁄
.
	g±r
[10] = - (
zF¨
 + 
zNór
) / (zFar - zNear);

77 
	g¥oje˘i⁄
.
	g±r
[11] = - 1.f;

78 
	g¥oje˘i⁄
.
	g±r
[14] = - 2.‡* 
zF¨
 * 
zNór
 / (zFar - zNear);

81 
M©rix4f_rm
 
yawPôchRﬁl
(
yaw
, 
pôch
, 
rﬁl
)

83 
	gtmp_ch
 = 
°d
::
cos
(
yaw
);

84 
	gtmp_sh
 = 
°d
::
sö
(
yaw
);

85 
	gtmp_˝
 = 
°d
::
cos
(
pôch
);

86 
	gtmp_•
 = 
°d
::
sö
(
pôch
);

87 
	gtmp_cb
 = 
°d
::
cos
(
rﬁl
);

88 
	gtmp_sb
 = 
°d
::
sö
(
rﬁl
);

90 
M©rix4f_rm
 
	gResu…
;

91 
Resu…
(0,0Ë
tmp_ch
 * 
tmp_cb
 + 
tmp_sh
 * 
tmp_•
 * 
tmp_sb
;

92 
Resu…
(0,1Ë
tmp_sb
 * 
tmp_˝
;

93 
Resu…
(0,2Ë-
tmp_sh
 * 
tmp_cb
 + 
tmp_ch
 * 
tmp_•
 * 
tmp_sb
;

94 
Resu…
(0,3) = 0.0f;

95 
Resu…
(1,0Ë-
tmp_ch
 * 
tmp_sb
 + 
tmp_sh
 * 
tmp_•
 * 
tmp_cb
;

96 
Resu…
(1,1Ë
tmp_cb
 * 
tmp_˝
;

97 
Resu…
(1,2Ë
tmp_sb
 * 
tmp_sh
 + 
tmp_ch
 * 
tmp_•
 * 
tmp_cb
;

98 
Resu…
(1,3) = 0.0f;

99 
Resu…
(2,0Ë
tmp_sh
 * 
tmp_˝
;

100 
Resu…
(2,1Ë-
tmp_•
;

101 
Resu…
(2,2Ë
tmp_ch
 * 
tmp_˝
;

102 
Resu…
(2,3) = 0.0f;

103 
Resu…
(3,0) = 0.0f;

104 
Resu…
(3,1) = 0.0f;

105 
Resu…
(3,2) = 0.0f;

106 
Resu…
(3,3) = 1.0f;

108  
	gResu…
;

111 
lookAt
(
nvidüio
::
m©rix4x4f_t
 & 
võw
, c⁄° 
Eigí
::
Ve˘‹3f
& 
eye
, c⁄° Eigí::Ve˘‹3f& 
˚¡î
, c⁄° Eigí::Ve˘‹3f& 
up
)

113 
Eigí
::
Ve˘‹3f
 
f
 = Eigí::Ve˘‹3f(
˚¡î
 - 
eye
).
n‹mÆized
();

114 
	gEigí
::
Ve˘‹3f
 
s
 = 
f
.
¸oss
(
up
).
n‹mÆized
();

115 
	gEigí
::
Ve˘‹3f
 
u
 = 
s
.
¸oss
(
f
);

117 
M©rix4f_rm
 
	gªsu…
 = M©rix4f_rm::
Idítôy
();

118 
ªsu…
(0,0Ë
s
(0);

119 
ªsu…
(1,0Ë
s
(1);

120 
ªsu…
(2,0Ë
s
(2);

121 
ªsu…
(0,1Ë
u
(0);

122 
ªsu…
(1,1Ë
u
(1);

123 
ªsu…
(2,1Ë
u
(2);

124 
ªsu…
(0,2Ë-
f
(0);

125 
ªsu…
(1,2Ë-
f
(1);

126 
ªsu…
(2,2Ë-
f
(2);

127 
ªsu…
(3,0Ë-
s
.
dŸ
(
eye
);

128 
ªsu…
(3,1Ë-
u
.
dŸ
(
eye
);

129 
ªsu…
(3,2Ë
f
.
dŸ
(
eye
);

131 
	g°d
::
mem˝y
(
võw
.
±r
, 
ªsu…
.
d©a
(), () * 16);

134 
upd©eOrbôCamîa
(
nvidüio
::
m©rix4x4f_t
 & 
võw
, 
xr
, 
yr
, 
di°™˚
, c⁄° 
Eigí
::
Ve˘‹3f
 & 
èrgë
)

136 
M©rix4f_rm
 
R
 = 
yawPôchRﬁl
(
xr
, 
yr
, 0.0f);

138 
	gEigí
::
Ve˘‹3f
 
T
(0.0f, 0.0f, -
di°™˚
);

140 
	gEigí
::
Ve˘‹4f
 
T_
 = 
R
 * 
Eigí
::Ve˘‹4f(
T
(0), T(1), T(2), 0.0f);

142 
	gT
 = 
Eigí
::
Ve˘‹3f
(
T_
(0), T_(1), T_(2));

144 
	gEigí
::
Ve˘‹3f
 
posôi⁄
 = 
èrgë
 + 
T
;

146 
	gEigí
::
Ve˘‹4f
 
up_
 = 
R
*
Eigí
::Vector4f(0.0f, -1.0f, 0.0f, 0.0f);

148 
	gEigí
::
Ve˘‹3f
 
up
(
up_
[0], up_[1], up_[2]);

150 
lookAt
(
võw
, 
posôi⁄
, 
èrgë
, 
up
);

153 
m©rixSëEye
(
nvidüio
::
m©rix4x4f_t
 & 
m
)

155 c⁄° 
d©a
[4*4] = {1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1};

156 
	g°d
::
mem˝y
(
m
.
±r
, 
d©a
, (data));

165 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$íabÀDeÁu…KeybﬂrdEvítCÆlback
()

167 i‡(!
u£DeÁu…CÆlback_
)

169 
u£DeÁu…CÆlback_
 = 
åue
;

171 
fov_
 = 
deÁu…FOV_
;

172 
	`öôMVP
();

174 
	}
}

176 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$dißbÀDeÁu…KeybﬂrdEvítCÆlback
()

178 if(
u£DeÁu…CÆlback_
)

180 
u£DeÁu…CÆlback_
 = 
Ál£
;

182 
fov_
 = 
deÁu…FOV_
;

183 
‹bôCamîaP¨ams_
.
	`£tDeÁu…
();

184 
	`öôMVP
();

186 
	}
}

188 
boﬁ
 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$u£DeÁu…KeybﬂrdEvítCÆlback
()

190  
u£DeÁu…CÆlback_
;

191 
	}
}

193 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$£tOnKeybﬂrdEvítCÆlback
(
nvidüio
::
Rídî3D
::
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
)

195 
keybﬂrdCÆlback_
 = 
ˇŒback
;

196 
keybﬂrdCÆlbackC⁄ãxt_
 = 
c⁄ãxt
;

198 
	`glfwSëKeyCÆlback
(
wödow_
, 
keybﬂrdCÆlback
);

199 
	}
}

201 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$keybﬂrdCÆlbackDeÁu…
(
GLFWwödow
* 
wödow
, 
key
, , 
a˘i⁄
, )

203 
nvidüio
::
Ba£Rídî3DIm∂
* 
im∂
 = 
°©ic_ˇ°
<nvidüio::Ba£Rídî3DIm∂*>(
	`glfwGëWödowU£rPoöãr
(
wödow
));

205 i‡(
a˘i⁄
 =
GLFW_PRESS
)

207 c⁄° 
°ïAngÀ
 = 
	`toRadüns
(4);

208 c⁄° 
°ïR
 = 1;

210 
key
)

212 
GLFW_KEY_ESCAPE
:

214 
	`glfwSëWödowShouldClo£
(
wödow
, 1);

217 
GLFW_KEY_MINUS
:

219 
im∂
->
‹bôCamîaP¨ams_
.
R
 +
°ïR
;

222 
GLFW_KEY_EQUAL
:

224 
im∂
->
‹bôCamîaP¨ams_
.
R
 -
°ïR
;

228 
GLFW_KEY_A
:

230 
im∂
->
‹bôCamîaP¨ams_
.
xr
 -
°ïAngÀ
;

233 
GLFW_KEY_D
:

235 
im∂
->
‹bôCamîaP¨ams_
.
xr
 +
°ïAngÀ
;

238 
GLFW_KEY_W
:

240 
im∂
->
‹bôCamîaP¨ams_
.
yr
 +
°ïAngÀ
;

243 
GLFW_KEY_S
:

245 
im∂
->
‹bôCamîaP¨ams_
.
yr
 -
°ïAngÀ
;

249 
im∂
->
	`upd©eVõw
();

251 
	}
}

253 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$keybﬂrdCÆlback
(
GLFWwödow
* 
wödow
, 
key
, 
sˇncode
, 
a˘i⁄
, 
mods
)

255 
nvidüio
::
Ba£Rídî3DIm∂
* 
im∂
 = 
°©ic_ˇ°
<nvidüio::Ba£Rídî3DIm∂*>(
	`glfwGëWödowU£rPoöãr
(
wödow
));

257 i‡(
a˘i⁄
 =
GLFW_PRESS
)

259 
x
, 
y
;

260 
	`glfwGëCurs‹Pos
(
wödow
, &
x
, &
y
);

262 i‡(
key
 =
GLFW_KEY_ESCAPE
)

263 
key
 = 27;

265 if(
im∂
->
keybﬂrdCÆlback_
)

266 (
im∂
->
keybﬂrdCÆlback_
)(im∂->
keybﬂrdCÆlbackC⁄ãxt_
, 
	`tﬁowî
(
key
),

267 
°©ic_ˇ°
<
uöt32_t
>(
x
),

268 
°©ic_ˇ°
<
uöt32_t
>(
y
));

270 i‡(
im∂
->
	`u£DeÁu…KeybﬂrdEvítCÆlback
())

272 
	`keybﬂrdCÆlbackDeÁu…
(
wödow
, 
key
, 
sˇncode
, 
a˘i⁄
, 
mods
);

275 
	}
}

277 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
)

279 
mou£CÆlback_
 = 
ˇŒback
;

280 
mou£CÆlbackC⁄ãxt_
 = 
c⁄ãxt
;

282 
	`glfwSëMou£Buâ⁄CÆlback
(
wödow_
, 
mou£_buâ⁄
);

283 
	`glfwSëCurs‹PosCÆlback
(
wödow_
, 
curs‹_pos
);

284 
	}
}

286 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$mou£_buâ⁄
(
GLFWwödow
* 
wödow
, 
buâ⁄
, 
a˘i⁄
, )

288 
Ba£Rídî3DIm∂
* 
im∂
 = 
°©ic_ˇ°
<Ba£Rídî3DIm∂*>(
	`glfwGëWödowU£rPoöãr
(
wödow
));

290 i‡(
im∂
->
mou£CÆlback_
)

292 
Rídî3D
::
Mou£Buâ⁄Evít
 
evít
 = 
nvxio
::Rídî3D::
Mou£Move
;

294 i‡(
buâ⁄
 =
GLFW_MOUSE_BUTTON_LEFT
)

296 i‡(
a˘i⁄
 =
GLFW_RELEASE
)

297 
evít
 = 
nvxio
::
Rídî3D
::
Le·Buâ⁄Up
;

299 
evít
 = 
nvxio
::
Rídî3D
::
Le·Buâ⁄Down
;

301 i‡(
buâ⁄
 =
GLFW_MOUSE_BUTTON_RIGHT
)

303 i‡(
a˘i⁄
 =
GLFW_RELEASE
)

304 
evít
 = 
nvxio
::
Rídî3D
::
RightBuâ⁄Up
;

306 
evít
 = 
nvxio
::
Rídî3D
::
RightBuâ⁄Down
;

308 i‡(
buâ⁄
 =
GLFW_MOUSE_BUTTON_MIDDLE
)

310 i‡(
a˘i⁄
 =
GLFW_RELEASE
)

311 
evít
 = 
nvxio
::
Rídî3D
::
MiddÀBuâ⁄Up
;

313 
evít
 = 
nvxio
::
Rídî3D
::
MiddÀBuâ⁄Down
;

316 
x
 = 0.0, 
y
 = 0.0;

317 
	`glfwGëCurs‹Pos
(
wödow
, &
x
, &
y
);

318 (
im∂
->
mou£CÆlback_
)(im∂->
mou£CÆlbackC⁄ãxt_
, 
evít
,

319 
°©ic_ˇ°
<
uöt32_t
>(
x
),

320 
°©ic_ˇ°
<
uöt32_t
>(
y
));

322 
	}
}

324 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$curs‹_pos
(
GLFWwödow
* 
wödow
, 
x
, 
y
)

326 
Ba£Rídî3DIm∂
* 
im∂
 = 
°©ic_ˇ°
<Ba£Rídî3DIm∂*>(
	`glfwGëWödowU£rPoöãr
(
wödow
));

328 i‡(
im∂
->
mou£CÆlback_
)

329 (
im∂
->
mou£CÆlback_
)(im∂->
mou£CÆlbackC⁄ãxt_
, 
nvxio
::
Rídî3D
::
Mou£Move
,

330 
°©ic_ˇ°
<
uöt32_t
>(
x
),

331 
°©ic_ˇ°
<
uöt32_t
>(
y
));

332 
	}
}

338 
	gnvidüio
::
Ba£Rídî3DIm∂
::
OrbôCamîaP¨ams
::
	$OrbôCamîaP¨ams
(
R_mö_
, 
R_max_
) :

339 
	`R_mö
(
R_mö_
), 
	$R_max
(
R_max_
)

341 
	`£tDeÁu…
();

342 
	}
}

344 
	gnvidüio
::
Ba£Rídî3DIm∂
::
OrbôCamîaP¨ams
::
	$≠∂yC⁄°øöts
()

346 i‡(
R
 < 
R_mö
) R = R_min;

347 i‡(
R
 > 
R_max
) R = R_max;

349 i‡(
yr
 > 2 * 
ovxio
::
PI_F
) yr -= 2 * ovxio::PI_F;

350 i‡(
yr
 < 0Ëy∏+2 * 
ovxio
::
PI_F
;

352 i‡(
xr
 > 2 * 
ovxio
::
PI_F
) xr -= 2 * ovxio::PI_F;

353 i‡(
xr
 < 0Ëx∏+2 * 
ovxio
::
PI_F
;

354 
	}
}

356 
	gnvidüio
::
Ba£Rídî3DIm∂
::
OrbôCamîaP¨ams
::
	$£tDeÁu…
()

358 
R
 = 
R_mö
;

359 
xr
 = 0.0f;

360 
yr
 = 0.0f;

361 
	}
}

367 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$£tDeÁu…FOV
(
fov
)

369 
deÁu…FOV_
 = 
°d
::
	`max
(°d::
	`mö
(
fov
, 180.0f), 0.0f);

370 
	}
}

372 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$£tVõwM©rix
(c⁄° 
m©rix4x4f_t
 & 
võw
)

374 
võw_
 = 
võw
;

375 
	}
}

377 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$£tProje˘i⁄M©rix
(c⁄° 
m©rix4x4f_t
 & 
¥oje˘i⁄
)

379 
¥oje˘i⁄_
 = 
¥oje˘i⁄
;

380 
	}
}

382 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$gëVõwM©rix
(
m©rix4x4f_t
 & 
võw
) const

384 
võw
 = 
võw_
;

385 
	}
}

387 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$gëProje˘i⁄M©rix
(
m©rix4x4f_t
 & 
¥oje˘i⁄
) const

389 
¥oje˘i⁄
 = 
¥oje˘i⁄_
;

390 
	}
}

392 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$£tModñM©rix
(c⁄° 
m©rix4x4f_t
 & 
modñ
)

394 
modñ_
 = 
modñ
;

395 
	}
}

401 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$putPoötCloud
(c⁄° 
¨øy_t
 & 
poöts
, c⁄° 
m©rix4x4f_t
 & 
modñ
, c⁄° 
PoötCloudStyÀ
& 
°yÀ
)

403 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render3D::putPointCloud (NVXIO)");

405 
	`£tModñM©rix
(
modñ
);

408 
m©rix4x4f_t
 
MVP
;

410 
	`mu…ùlyM©rix
(
modñ_
, 
võw_
, 
MVP
);

411 
	`mu…ùlyM©rix
(
	`m©rix4x4f_t
(
MVP
), 
¥oje˘i⁄_
, MVP);

413 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

416 
poötCloudRídî_
.
	`ªndî
(
poöts
, 
MVP
, 
°yÀ
);

417 
	}
}

419 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$putPœ√s
(c⁄° 
¨øy_t
 & 
∂™es
, c⁄° 
m©rix4x4f_t
 & 
modñ
, c⁄° 
nvidüio
::
Rídî3D
::
Pœ√StyÀ
& 
°yÀ
)

421 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render3D::putPlanes (NVXIO)");

423 
	`£tModñM©rix
(
modñ
);

426 
m©rix4x4f_t
 
MVP
;

428 
	`mu…ùlyM©rix
(
modñ_
, 
võw_
, 
MVP
);

429 
	`mu…ùlyM©rix
(
	`m©rix4x4f_t
(
MVP
), 
¥oje˘i⁄_
, MVP);

431 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

434 
„n˚Pœ√Rídî_
.
	`ªndî
(
∂™es
, 
MVP
, 
°yÀ
);

435 
	}
}

437 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$putImage
(c⁄° 
image_t
 & 
image
)

439 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render3D::putImage (NVXIO)");

443 
uöt32_t
 
imageWidth
 = 
image
.
width
, 
imageHeight
 = image.
height
;

445 
widthR©io
 = 
°©ic_ˇ°
<>(
wödowWidth_
Ë/ 
imageWidth
;

446 
heightR©io
 = 
°©ic_ˇ°
<>(
wödowHeight_
Ë/ 
imageHeight
;

447 
sˇÀR©io_
 = 
°d
::
	`mö
(
widthR©io
, 
heightR©io
);

449 
ãxtuªWidth_
 = 
°©ic_ˇ°
<
uöt32_t
>(
sˇÀR©io_
 * 
imageWidth
);

450 
ãxtuªHeight_
 = 
°©ic_ˇ°
<
uöt32_t
>(
sˇÀR©io_
 * 
imageHeight
);

452 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

454 i‡(
image
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
)

455 
nv12ImageRídî_
.
	`ªndî
(
image
, 
ãxtuªWidth_
, 
ãxtuªHeight_
);

457 
imageRídî_
.
	`ªndî
(
image
, 
ãxtuªWidth_
, 
ãxtuªHeight_
);

458 
	}
}

460 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$putText
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
nvidüio
::
Rídî
::
TextBoxStyÀ
& 
°yÀ
)

462 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render3D::putText (NVXIO)");

464 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

465 
ãxtRídî_
.
	`ªndî
(
ãxt
, *(c⁄° 
nvidüio
::
Rídî
::
TextBoxStyÀ
 *)&
°yÀ
, 
ãxtuªWidth_
, 
ãxtuªHeight_
, 
sˇÀR©io_
);

466 
	}
}

472 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$Ba£Rídî3DIm∂
():

473 
nvidüio
::
	`Rídî3D
(
nvxio
::
Rídî3D
::
BASE_RENDER_3D
, "BaseOpenGlRender3D"),

474 
	`gl_
(
nuŒ±r
),

475 
	`modñ_
(),

476 
	`võw_
(),

477 
	`¥oje˘i⁄_
(),

478 
	`wödow_
(
nuŒ±r
),

479 
	`hﬁdî_
(
nuŒ±r
),

480 
	`keybﬂrdCÆlback_
(
nuŒ±r
),

481 
	`keybﬂrdCÆlbackC⁄ãxt_
(
nuŒ±r
),

482 
	`u£DeÁu…CÆlback_
(
åue
),

483 
	`wödowWidth_
(0u),

484 
	`wödowHeight_
(0u),

485 
	`ãxtuªWidth_
(0u),

486 
	`ãxtuªHeight_
(0u),

487 
	`deÁu…FOV_
(70),

488 
	`Z_NEAR_
(0.01f),

489 
	`Z_FAR_
(500.0f),

490 
	`fov_
(
deÁu…FOV_
),

491 
	`‹bôCamîaP¨ams_
(1e-6f, 100.f)

493 
	}
}

495 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$öôMVP
()

497 
	`m©rixSëEye
(
modñ_
);

499 c⁄° 
võwD©a
[4*4] = {1, 0, 0, 0,

504 
°d
::
	`mem˝y
(
võw_
.
±r
, 
võwD©a
, (viewData));

506 
	`ˇlcProje˘i⁄M©rix
(
	`toRadüns
(
fov_
), ()
wödowWidth_
 / 
wödowHeight_
, 
Z_NEAR_
, 
Z_FAR_
, 
¥oje˘i⁄_
);

507 
	}
}

509 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$upd©eVõw
()

511 
‹bôCamîaP¨ams_
.
	`≠∂yC⁄°øöts
();

512 
	`upd©eOrbôCamîa
(
võw_
, 
‹bôCamîaP¨ams_
.
xr
, orbôCamîaP¨ams_.
yr
, orbôCamîaP¨ams_.
R
, 
Eigí
::
	`Ve˘‹3f
(0, 0, 0));

513 
	}
}

515 
	g«me•a˚
 {

517 ˛as†
	cGLFWC⁄ãxtHﬁdîIm∂
 :

518 
public
 
nvidüio
::
O≥nGLC⁄ãxtHﬁdî


520 
public
:

521 
ex∂icô
 
GLFWC⁄ãxtHﬁdîIm∂
(
GLFWwödow
 * 
cuºítWödow_
) :

522 
¥evWödow
(
nuŒ±r
), 
cuºítWödow
(
cuºítWödow_
)

524 i‡(!
	gcuºítWödow
)

525 
NVXIO_THROW_EXCEPTION
("TheÑender is closed, you must open it before");

528 
vútuÆ
 
£t
()

531 
	g¥evWödow
 = 
glfwGëCuºítC⁄ãxt
();

533 
glfwMakeC⁄ãxtCuºít
(
cuºítWödow
);

536 
vútuÆ
 
un£t
()

539 
glfwMakeC⁄ãxtCuºít
(
¥evWödow
);

542 
	g¥iv©e
:

543 
GLFWwödow
 * 
¥evWödow
, * 
	gcuºítWödow
;

548 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$¸óãO≥nGLC⁄ãxtHﬁdî
()

550 
hﬁdî_
 = 
°d
::
make_sh¨ed
<
GLFWC⁄ãxtHﬁdîIm∂
>(
wödow_
);

551 
	}
}

553 
boﬁ
 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$›í
(
öt32_t
 
xPos
, i¡32_à
yPos
, 
uöt32_t
 
wödowWidth
, uöt32_à
wödowHeight
, c⁄° 
°d
::
°rög
& 
wödowTôÀ
)

555 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render3D::open (NVXIO)");

557 
wödowWidth_
 = 
wödowWidth
;

558 
wödowHeight_
 = 
wödowHeight
;

560 i‡(!
nvxio
::
Aµliˇti⁄
::
	`gë
().
	`öôGui
())

562 
	`NVXIO_PRINT
("Error: FailedÅo init GUI");

563  
Ál£
;

566 
boﬁ
 
ªsu…
 = 
	`öôWödow
(
xPos
, 
yPos
, 
wödowWidth_
, 
wödowHeight_
, 
wödowTôÀ
.
	`c_°r
());

568 
fov_
 = 
deÁu…FOV_
;

569 
	`öôMVP
();

571  
ªsu…
;

572 
	}
}

574 
boﬁ
 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$öôWödow
(
öt32_t
 
xpos
, i¡32_à
ypos
, 
uöt32_t
 
width
, uöt32_à
height
, c⁄° 
°d
::
°rög
& 
wötôÀ
)

576 
cou¡
 = 0;

577 
GLFWm⁄ô‹
 ** 
m⁄ô‹s
 = 
	`glfwGëM⁄ô‹s
(&
cou¡
);

578 i‡(
cou¡
 == 0)

580 
	`NVXIO_THROW_EXCEPTION
("GLFW:Ço monitors found");

583 
maxPixñs
 = 0;

584 c⁄° 
GLFWvidmode
* 
mode
 = 
nuŒ±r
;

586 
i
 = 0; i < 
cou¡
; ++i)

588 c⁄° 
GLFWvidmode
* 
cuºítMode
 = 
	`glfwGëVideoMode
(
m⁄ô‹s
[
i
]);

589 
cuºítPixñs
 = 
cuºítMode
->
width
 * cuºítMode->
height
;

591 i‡(
maxPixñs
 < 
cuºítPixñs
)

593 
mode
 = 
cuºítMode
;

594 
maxPixñs
 = 
cuºítPixñs
;

598 
uöt32_t
 
cur_width
 = 0u, 
cur_height
 = 0u;

599 i‡((
width
 <(
uöt32_t
)
mode
->widthË&& (
height
 <= (uint32_t)mode->height))

601 
cur_width
 = 
width
;

602 
cur_height
 = 
height
;

606 
widthR©io
 = 
°©ic_ˇ°
<>(
mode
->
width
) / width;

607 
heightR©io
 = 
°©ic_ˇ°
<>(
mode
->
height
) / height;

608 
sˇÀR©io
 = 
°d
::
	`mö
(
widthR©io
, 
heightR©io
);

609 
cur_width
 = 
°©ic_ˇ°
<
uöt32_t
>(
sˇÀR©io
 * 
width
);

610 
cur_height
 = 
°©ic_ˇ°
<
uöt32_t
>(
sˇÀR©io
 * 
height
);

613 
	`glfwWödowHöt
(
GLFW_RESIZABLE
, 0);

614 #ifde‡
USE_GLES


615 
	`glfwWödowHöt
(
GLFW_CLIENT_API
, 
GLFW_OPENGL_ES_API
);

616 
	`glfwWödowHöt
(
GLFW_CONTEXT_VERSION_MAJOR
, 3);

618 
	`glfwWödowHöt
(
GLFW_CONTEXT_VERSION_MAJOR
, 3);

619 
	`glfwWödowHöt
(
GLFW_CONTEXT_VERSION_MINOR
, 3);

620 
	`glfwWödowHöt
(
GLFW_OPENGL_PROFILE
, 
GLFW_OPENGL_CORE_PROFILE
);

622 
wödow_
 = 
	`glfwCª©eWödow
(
cur_width
, 
cur_height
,

623 
wötôÀ
.
	`c_°r
(),

624 
nuŒ±r
,Çullptr);

625 i‡(!
wödow_
)

627 
	`NVXIO_PRINT
("Error: FailedÅo create GLFW window");

628  
Ál£
;

631 
	`glfwSëWödowU£rPoöãr
(
wödow_
, 
this
);

632 
	`glfwSëWödowPos
(
wödow_
, 
xpos
, 
ypos
);

633 
	`glfwSëI≈utMode
(
wödow_
, 
GLFW_STICKY_KEYS
, 
GL_TRUE
);

637 
	`¸óãO≥nGLC⁄ãxtHﬁdî
();

638 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

642 i‡(!
gl_
)

644 
gl_
 = 
°d
::
make_sh¨ed
<
nvidüio
::
GLFun˘i⁄s
>();

645 
nvidüio
::
	`lﬂdGLFun˘i⁄s
(
gl_
.
	`gë
());

648 i‡(!
imageRídî_
.
	`öô
(
gl_
, 
width
, 
height
))

649  
Ál£
;

651 i‡(!
nv12ImageRídî_
.
	`öô
(
gl_
, 
width
, 
height
))

652  
Ál£
;

654 i‡(!
ãxtRídî_
.
	`öô
(
gl_
))

655  
Ál£
;

657 i‡(!
poötCloudRídî_
.
	`öô
(
gl_
))

658  
Ál£
;

660 i‡(!
„n˚Pœ√Rídî_
.
	`öô
(
gl_
))

661  
Ál£
;

663  
åue
;

664 
	}
}

666 
boﬁ
 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$Êush
()

668 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render3D::flush (NVXIO)");

670 i‡(!
wödow_
)

671 
	`NVXIO_THROW_EXCEPTION
("TheÑender is closed, you must open it before");

673 i‡(
	`glfwWödowShouldClo£
(
wödow_
))

675 
	`˛o£
();

676  
Ál£
;

684 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

685 
	`glfwSw≠Buf„rs
(
wödow_
);

688 
	`glfwPﬁlEvíts
();

690 
	`˛órGlBuf„r
();

692  
åue
;

693 
	}
}

695 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$˛órGlBuf„r
()

697 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

699 
gl_
->
	`CÀ¨Cﬁ‹
(0.0f, 0.0f, 0.0f, 1.0f);

700 
	`NVXIO_CHECK_GL_ERROR
();

701 
gl_
->
	`CÀ¨
(
GL_COLOR_BUFFER_BIT
 | 
GL_DEPTH_BUFFER_BIT
);

702 
	`NVXIO_CHECK_GL_ERROR
();

703 
	}
}

705 
	gnvidüio
::
Ba£Rídî3DIm∂
::
	$˛o£
()

707 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render3D::close (NVXIO)");

709 i‡(
wödow_
)

711 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

713 
ãxtRídî_
.
	`ªÀa£
();

714 
imageRídî_
.
	`ªÀa£
();

715 
nv12ImageRídî_
.
	`ªÀa£
();

716 
poötCloudRídî_
.
	`ªÀa£
();

717 
„n˚Pœ√Rídî_
.
	`ªÀa£
();

719 
	`glfwDe°royWödow
(
wödow_
);

720 
wödow_
 = 
nuŒ±r
;

722 
	}
}

724 
	gnvidüio
::
Ba£Rídî3DIm∂
::~
	$Ba£Rídî3DIm∂
()

726 
	`˛o£
();

727 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/BaseRender3DImpl.hpp

29 #i‚de‡
BASE_RENDER3D_IMPL_HPP


30 
	#BASE_RENDER3D_IMPL_HPP


	)

32 
	#GLFW_INCLUDE_NONE


	)

33 
	~<GLFW/glfw3.h
>

35 #ifde‡
USE_GUI


36 
	~"Rídî/CUDA-O≥nGL/O≥nGL.hµ
"

39 
	~"Rídî/Rídî3DIm∂.hµ
"

40 
	~"Rídî/CUDA-O≥nGL/O≥nGLRídîIm∂.hµ
"

41 
	~"Rídî/CUDA-O≥nGL/O≥nGLBasicRídîs.hµ
"

43 
«me•a˚
 
	gnvidüio


46 ˛as†
	cBa£Rídî3DIm∂
 :

47 
public
 
Rídî3D


49 
public
:

50 
Ba£Rídî3DIm∂
();

52 
vútuÆ
 
putPœ√s
(c⁄° 
¨øy_t
 & 
∂™es
, c⁄° 
m©rix4x4f_t
 & 
modñ
, c⁄° 
Pœ√StyÀ
 & 
°yÀ
);

53 
vútuÆ
 
putPoötCloud
(c⁄° 
¨øy_t
 & 
poöts
, c⁄° 
m©rix4x4f_t
 & 
modñ
, c⁄° 
PoötCloudStyÀ
 & 
°yÀ
);

54 
vútuÆ
 
putImage
(c⁄° 
image_t
 & 
image
);

55 
vútuÆ
 
putText
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
Rídî
::
TextBoxStyÀ
 & 
°yÀ
);

57 
vútuÆ
 
boﬁ
 
Êush
();

59 
vútuÆ
 
boﬁ
 
›í
(
öt32_t
 
xPos
, i¡32_à
yPos
, 
uöt32_t
 
wödowWidth
, uöt32_à
wödowHeight
, c⁄° 
°d
::
°rög
 & 
wödowTôÀ
);

60 
vútuÆ
 
˛o£
();

62 
vútuÆ
 
£tVõwM©rix
(c⁄° 
m©rix4x4f_t
 & 
võw
);

63 
vútuÆ
 
gëVõwM©rix
(
m©rix4x4f_t
 & 
võw
) const;

65 
vútuÆ
 
£tProje˘i⁄M©rix
(c⁄° 
m©rix4x4f_t
 & 
¥oje˘i⁄
);

66 
vútuÆ
 
gëProje˘i⁄M©rix
(
m©rix4x4f_t
 & 
¥oje˘i⁄
) const;

68 
vútuÆ
 
£tDeÁu…FOV
(
fov
);

70 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

72 
vútuÆ
 
íabÀDeÁu…KeybﬂrdEvítCÆlback
();

73 
vútuÆ
 
dißbÀDeÁu…KeybﬂrdEvítCÆlback
();

74 
vútuÆ
 
boﬁ
 
u£DeÁu…KeybﬂrdEvítCÆlback
();

76 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

78 
vútuÆ
 
uöt32_t
 
gëWidth
() const

80  
	gwödowWidth_
;

83 
vútuÆ
 
uöt32_t
 
gëHeight
() const

85  
	gwödowHeight_
;

88 
	gvútuÆ
 ~
Ba£Rídî3DIm∂
();

90 
	g¥Ÿe˘ed
:

91 
°d
::
sh¨ed_±r
<
nvidüio
::
GLFun˘i⁄s
> 
gl_
;

93 
m©rix4x4f_t
 
	gmodñ_
;

94 
m©rix4x4f_t
 
	gvõw_
;

95 
m©rix4x4f_t
 
	g¥oje˘i⁄_
;

97 
GLFWwödow
 * 
	gwödow_
;

98 
	g°d
::
sh¨ed_±r
<
O≥nGLC⁄ãxtHﬁdî
> 
hﬁdî_
;

100 
öôMVP
();

102 
£tModñM©rix
(c⁄° 
m©rix4x4f_t
 & 
modñ
);

104 
¸óãO≥nGLC⁄ãxtHﬁdî
();

105 
boﬁ
 
öôWödow
(
öt32_t
 
xpos
, i¡32_à
ypos
, 
uöt32_t
 
width
, uöt32_à
height
, c⁄° 
°d
::
°rög
& 
wötôÀ
);

107 
OnKeybﬂrdEvítCÆlback
 
	gkeybﬂrdCÆlback_
;

108 * 
	gkeybﬂrdCÆlbackC⁄ãxt_
;

110 
OnMou£EvítCÆlback
 
	gmou£CÆlback_
;

111 * 
	gmou£CÆlbackC⁄ãxt_
;

113 
mou£_buâ⁄
(
GLFWwödow
* 
wödow
, 
buâ⁄
, 
a˘i⁄
, 
mods
);

114 
curs‹_pos
(
GLFWwödow
* 
wödow
, 
x
, 
y
);

116 
keybﬂrdCÆlbackDeÁu…
(
GLFWwödow
* 
wödow
, 
key
, 
sˇncode
, 
a˘i⁄
, 
mods
);

117 
keybﬂrdCÆlback
(
GLFWwödow
* 
wödow
, 
key
, 
sˇncode
, 
a˘i⁄
, 
mods
);

119 
boﬁ
 
	gu£DeÁu…CÆlback_
;

121 
uöt32_t
 
	gwödowWidth_
;

122 
uöt32_t
 
	gwödowHeight_
;

124 
uöt32_t
 
	gãxtuªWidth_
;

125 
uöt32_t
 
	gãxtuªHeight_
;

127 
	gdeÁu…FOV_
;

128 c⁄° 
	gZ_NEAR_
;

129 c⁄° 
	gZ_FAR_
;

130 
	gfov_
;

132 
	sOrbôCamîaP¨ams


134 c⁄° 
	gR_mö
;

135 c⁄° 
	gR_max
;

136 
	gxr
;

137 
	gyr
;

138 
	gR
;

140 
OrbôCamîaP¨ams
(
R_mö_
, 
R_max_
);

142 
≠∂yC⁄°øöts
();

143 
£tDeÁu…
();

146 
OrbôCamîaP¨ams
 
	g‹bôCamîaP¨ams_
;

148 
upd©eVõw
();

149 
˛órGlBuf„r
();

151 
	gnvidüio
::
ImageRídî
 
imageRídî_
;

152 
	gnvidüio
::
NV12ImageRídî
 
nv12ImageRídî_
;

153 
	gnvidüio
::
TextRídî
 
ãxtRídî_
;

154 
	gnvidüio
::
PoötCloudRídî
 
poötCloudRídî_
;

155 
	gnvidüio
::
Fí˚Pœ√Rídî
 
„n˚Pœ√Rídî_
;

157 
	gsˇÀR©io_
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/OpenGL.cpp

29 
	~"O≥nGL.hµ
"

31 #ifde‡
USE_GLFW


32 
	#GLFW_INCLUDE_NONE


	)

33 
	~<GLFW/glfw3.h
>

36 
«me•a˚
 
	gnvidüio


39 
lﬂdGLFun˘i⁄s
(
GLFun˘i⁄s
 *
f
)

41 #ifde‡
USE_GLES


42 
	#LOAD
(
«me
Ë
f
->«mê
gl
 ## 
	)
name

43 #ñi‡
USE_GLFW


44 
	#LOAD
(
«me
Ë
f
->«mê
ªöãΩªt_ˇ°
<
	`de˛ty≥
(f->«me)>(
	`glfwGëProcAddªss
("gl" #«me))

	)

46 
	#LOAD
(
«me
Ë
f
->«mê
nuŒ±r


	)

49 
LOAD
(
A˘iveTextuª
);

50 
LOAD
(
AâachShadî
);

51 
LOAD
(
BödBuf„r
);

52 
LOAD
(
BödTextuª
);

53 
LOAD
(
BödVîãxAºay
);

54 
LOAD
(
BÀndFunc
);

55 
LOAD
(
Buf„rD©a
);

56 
LOAD
(
CÀ¨
);

57 
LOAD
(
CÀ¨Cﬁ‹
);

58 
LOAD
(
CompûeShadî
);

59 
LOAD
(
Cª©eProgøm
);

60 
LOAD
(
Cª©eShadî
);

61 
LOAD
(
DñëeBuf„rs
);

62 
LOAD
(
DñëeProgøm
);

63 
LOAD
(
DñëeShadî
);

64 
LOAD
(
DñëeTextuªs
);

65 
LOAD
(
DñëeVîãxAºays
);

66 
LOAD
(
DïthFunc
);

67 
LOAD
(
DißbÀ
);

68 
LOAD
(
DißbÀVîãxAâribAºay
);

69 
LOAD
(
DøwAºays
);

70 
LOAD
(
DøwEÀmíts
);

71 
LOAD
(
E«bÀ
);

72 
LOAD
(
E«bÀVîãxAâribAºay
);

73 
LOAD
(
GíBuf„rs
);

74 
LOAD
(
GíTextuªs
);

75 
LOAD
(
GíVîãxAºays
);

76 
LOAD
(
GëAâribLoˇti⁄
);

77 
LOAD
(
GëEº‹
);

78 
LOAD
(
GëProgømInfoLog
);

79 
LOAD
(
GëProgømiv
);

80 
LOAD
(
GëShadîInfoLog
);

81 
LOAD
(
GëShadîiv
);

82 
LOAD
(
IsBuf„r
);

83 
LOAD
(
IsTextuª
);

84 
LOAD
(
IsVîãxAºay
);

85 
LOAD
(
LökProgøm
);

86 
LOAD
(
M≠Buf„rR™ge
);

87 
LOAD
(
ShadîSour˚
);

88 
LOAD
(
TexP¨amëîf
);

89 
LOAD
(
TexP¨amëîi
);

90 
LOAD
(
TexSubImage2D
);

91 
LOAD
(
TexImage2D
);

92 
LOAD
(
Unif‹m1f
);

93 
LOAD
(
Unif‹m1i
);

94 
LOAD
(
Unif‹mM©rix4fv
);

95 
LOAD
(
Unm≠Buf„r
);

96 
LOAD
(
U£Progøm
);

97 
LOAD
(
VÆid©eProgøm
);

98 
LOAD
(
VîãxAâribPoöãr
);

99 
LOAD
(
RódPixñs
);

100 
LOAD
(
PixñSt‹ei
);

101 
LOAD
(
IsShadî
);

102 
LOAD
(
IsProgøm
);

103 
LOAD
(
GëFlﬂtv
);

104 
LOAD
(
LöeWidth
);

105 
LOAD
(
Unif‹m4f
);

106 
LOAD
(
Buf„rSubD©a
);

107 #i‚de‡
USE_GLES


108 
LOAD
(
CÀ¨TexImage
);

110 
LOAD
(
DøwAºaysIn°™˚d
);

111 
LOAD
(
VîãxAâribDivis‹
);

112 
LOAD
(
GëBoﬁónv
);

113 
LOAD
(
DñëeFømebuf„rs
);

114 
LOAD
(
IsFømebuf„r
);

115 
LOAD
(
BödFømebuf„r
);

116 
LOAD
(
Fømebuf„rTextuª2D
);

117 
LOAD
(
CheckFømebuf„rSètus
);

118 
LOAD
(
GíFømebuf„rs
);

119 
LOAD
(
GëI¡egîv
);

120 
LOAD
(
Unif‹m2f
);

121 
LOAD
(
Di•©chCompuã
);

122 
LOAD
(
BödBuf„rBa£
);

123 
LOAD
(
BödImageTextuª
);

124 
LOAD
(
Mem‹yB¨rõr
);

125 
LOAD
(
Unif‹m1ui
);

126 
LOAD
(
TexSt‹age2D
);

127 
LOAD
(
GíProgømPùñöes
);

128 
LOAD
(
DñëeProgømPùñöes
);

129 
LOAD
(
BödProgømPùñöe
);

130 
LOAD
(
U£ProgømSèges
);

131 
LOAD
(
Cª©eShadîProgømv
);

132 
LOAD
(
ProgømUnif‹m1f
);

133 
LOAD
(
ProgømUnif‹m2f
);

134 
LOAD
(
ProgømUnif‹m4f
);

135 
LOAD
(
GëTexLevñP¨amëîiv
);

136 
LOAD
(
Võwp‹t
);

137 
LOAD
(
Höt
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/OpenGL.hpp

29 #i‚de‡
OPENGL_HPP


30 
	#OPENGL_HPP


	)

32 #ifde‡
USE_GLES


33 
	~<GLES3/gl31.h
>

35 #ifde‡
_WIN32


37 
	#NOMINMAX


	)

39 
	~<GL/glc‹órb.h
>

42 #ifde‡
USE_GLES


43 
	#NVXIO_DECLARE_GL_FUNC
(
«me
, 
«me_upˇ£
Ë
	`de˛ty≥
(
gl
 ##ÇameË*
	)
name

45 
	#NVXIO_DECLARE_GL_FUNC
(
«me
, 
«me_upˇ£
Ë
PFNGL
 ##Çame_upˇ£ ## 
PROC
 
	)
name

48 
«me•a˚
 
	gnvidüio
 {

50 
	sGLFun˘i⁄s


52 
NVXIO_DECLARE_GL_FUNC
(
A˘iveTextuª
, 
ACTIVETEXTURE
);

53 
NVXIO_DECLARE_GL_FUNC
(
AâachShadî
, 
ATTACHSHADER
);

54 
NVXIO_DECLARE_GL_FUNC
(
BödBuf„r
, 
BINDBUFFER
);

55 
NVXIO_DECLARE_GL_FUNC
(
BödTextuª
, 
BINDTEXTURE
);

56 
NVXIO_DECLARE_GL_FUNC
(
BödVîãxAºay
, 
BINDVERTEXARRAY
);

57 
NVXIO_DECLARE_GL_FUNC
(
BÀndFunc
, 
BLENDFUNC
);

58 
NVXIO_DECLARE_GL_FUNC
(
Buf„rD©a
, 
BUFFERDATA
);

59 
NVXIO_DECLARE_GL_FUNC
(
CÀ¨Cﬁ‹
, 
CLEARCOLOR
);

60 
NVXIO_DECLARE_GL_FUNC
(
CÀ¨
, 
CLEAR
);

61 
NVXIO_DECLARE_GL_FUNC
(
CompûeShadî
, 
COMPILESHADER
);

62 
NVXIO_DECLARE_GL_FUNC
(
Cª©eProgøm
, 
CREATEPROGRAM
);

63 
NVXIO_DECLARE_GL_FUNC
(
Cª©eShadî
, 
CREATESHADER
);

64 
NVXIO_DECLARE_GL_FUNC
(
DñëeBuf„rs
, 
DELETEBUFFERS
);

65 
NVXIO_DECLARE_GL_FUNC
(
DñëeProgøm
, 
DELETEPROGRAM
);

66 
NVXIO_DECLARE_GL_FUNC
(
DñëeShadî
, 
DELETESHADER
);

67 
NVXIO_DECLARE_GL_FUNC
(
DñëeTextuªs
, 
DELETETEXTURES
);

68 
NVXIO_DECLARE_GL_FUNC
(
DñëeVîãxAºays
, 
DELETEVERTEXARRAYS
);

69 
NVXIO_DECLARE_GL_FUNC
(
DïthFunc
, 
DEPTHFUNC
);

70 
NVXIO_DECLARE_GL_FUNC
(
DißbÀ
, 
DISABLE
);

71 
NVXIO_DECLARE_GL_FUNC
(
DißbÀVîãxAâribAºay
, 
DISABLEVERTEXATTRIBARRAY
);

72 
NVXIO_DECLARE_GL_FUNC
(
DøwAºays
, 
DRAWARRAYS
);

73 
NVXIO_DECLARE_GL_FUNC
(
DøwEÀmíts
, 
DRAWELEMENTS
);

74 
NVXIO_DECLARE_GL_FUNC
(
E«bÀ
, 
ENABLE
);

75 
NVXIO_DECLARE_GL_FUNC
(
E«bÀVîãxAâribAºay
, 
ENABLEVERTEXATTRIBARRAY
);

76 
NVXIO_DECLARE_GL_FUNC
(
GíBuf„rs
, 
GENBUFFERS
);

77 
NVXIO_DECLARE_GL_FUNC
(
GíTextuªs
, 
GENTEXTURES
);

78 
NVXIO_DECLARE_GL_FUNC
(
GíVîãxAºays
, 
GENVERTEXARRAYS
);

79 
NVXIO_DECLARE_GL_FUNC
(
GëAâribLoˇti⁄
, 
GETATTRIBLOCATION
);

80 
NVXIO_DECLARE_GL_FUNC
(
GëEº‹
, 
GETERROR
);

81 
NVXIO_DECLARE_GL_FUNC
(
GëProgømInfoLog
, 
GETPROGRAMINFOLOG
);

82 
NVXIO_DECLARE_GL_FUNC
(
GëProgømiv
, 
GETPROGRAMIV
);

83 
NVXIO_DECLARE_GL_FUNC
(
GëShadîInfoLog
, 
GETSHADERINFOLOG
);

84 
NVXIO_DECLARE_GL_FUNC
(
GëShadîiv
, 
GETSHADERIV
);

85 
NVXIO_DECLARE_GL_FUNC
(
IsBuf„r
, 
ISBUFFER
);

86 
NVXIO_DECLARE_GL_FUNC
(
IsTextuª
, 
ISTEXTURE
);

87 
NVXIO_DECLARE_GL_FUNC
(
IsVîãxAºay
, 
ISVERTEXARRAY
);

88 
NVXIO_DECLARE_GL_FUNC
(
LökProgøm
, 
LINKPROGRAM
);

89 
NVXIO_DECLARE_GL_FUNC
(
M≠Buf„rR™ge
, 
MAPBUFFERRANGE
);

90 
NVXIO_DECLARE_GL_FUNC
(
ShadîSour˚
, 
SHADERSOURCE
);

91 
NVXIO_DECLARE_GL_FUNC
(
TexP¨amëîf
, 
TEXPARAMETERF
);

92 
NVXIO_DECLARE_GL_FUNC
(
TexP¨amëîi
, 
TEXPARAMETERI
);

93 
NVXIO_DECLARE_GL_FUNC
(
TexSubImage2D
, 
TEXSUBIMAGE2D
);

94 
NVXIO_DECLARE_GL_FUNC
(
TexImage2D
, 
TEXIMAGE2D
);

95 
NVXIO_DECLARE_GL_FUNC
(
Unif‹m1f
, 
UNIFORM1F
);

96 
NVXIO_DECLARE_GL_FUNC
(
Unif‹m1i
, 
UNIFORM1I
);

97 
NVXIO_DECLARE_GL_FUNC
(
Unif‹mM©rix4fv
, 
UNIFORMMATRIX4FV
);

98 
NVXIO_DECLARE_GL_FUNC
(
Unm≠Buf„r
, 
UNMAPBUFFER
);

99 
NVXIO_DECLARE_GL_FUNC
(
U£Progøm
, 
USEPROGRAM
);

100 
NVXIO_DECLARE_GL_FUNC
(
VÆid©eProgøm
, 
VALIDATEPROGRAM
);

101 
NVXIO_DECLARE_GL_FUNC
(
VîãxAâribPoöãr
, 
VERTEXATTRIBPOINTER
);

102 
NVXIO_DECLARE_GL_FUNC
(
RódPixñs
, 
READPIXELS
);

103 
NVXIO_DECLARE_GL_FUNC
(
PixñSt‹ei
, 
PIXELSTOREI
);

104 
NVXIO_DECLARE_GL_FUNC
(
IsShadî
, 
ISSHADER
);

105 
NVXIO_DECLARE_GL_FUNC
(
IsProgøm
, 
ISPROGRAM
);

106 
NVXIO_DECLARE_GL_FUNC
(
GëFlﬂtv
, 
GETFLOATV
);

107 
NVXIO_DECLARE_GL_FUNC
(
LöeWidth
, 
LINEWIDTH
);

108 
NVXIO_DECLARE_GL_FUNC
(
Unif‹m4f
, 
UNIFORM4F
);

109 
NVXIO_DECLARE_GL_FUNC
(
Buf„rSubD©a
, 
BUFFERSUBDATA
);

110 #i‚de‡
USE_GLES


111 
NVXIO_DECLARE_GL_FUNC
(
CÀ¨TexImage
, 
CLEARTEXIMAGE
);

113 
NVXIO_DECLARE_GL_FUNC
(
DøwAºaysIn°™˚d
, 
DRAWARRAYSINSTANCED
);

114 
NVXIO_DECLARE_GL_FUNC
(
VîãxAâribDivis‹
, 
VERTEXATTRIBDIVISOR
);

115 
NVXIO_DECLARE_GL_FUNC
(
GëBoﬁónv
, 
GETBOOLEANV
);

116 
NVXIO_DECLARE_GL_FUNC
(
DñëeFømebuf„rs
, 
DELETEFRAMEBUFFERS
);

117 
NVXIO_DECLARE_GL_FUNC
(
IsFømebuf„r
, 
ISFRAMEBUFFER
);

118 
NVXIO_DECLARE_GL_FUNC
(
GíFømebuf„rs
, 
GENFRAMEBUFFERS
);

119 
NVXIO_DECLARE_GL_FUNC
(
BödFømebuf„r
, 
BINDFRAMEBUFFER
);

120 
NVXIO_DECLARE_GL_FUNC
(
Fømebuf„rTextuª2D
, 
FRAMEBUFFERTEXTURE2D
);

121 
NVXIO_DECLARE_GL_FUNC
(
CheckFømebuf„rSètus
, 
CHECKFRAMEBUFFERSTATUS
);

122 
NVXIO_DECLARE_GL_FUNC
(
GëI¡egîv
, 
GETINTEGERV
);

123 
NVXIO_DECLARE_GL_FUNC
(
Unif‹m2f
, 
UNIFORM2F
);

124 
NVXIO_DECLARE_GL_FUNC
(
Di•©chCompuã
, 
DISPATCHCOMPUTE
);

125 
NVXIO_DECLARE_GL_FUNC
(
BödBuf„rBa£
, 
BINDBUFFERBASE
);

126 
NVXIO_DECLARE_GL_FUNC
(
BödImageTextuª
, 
BINDIMAGETEXTURE
);

127 
NVXIO_DECLARE_GL_FUNC
(
Mem‹yB¨rõr
, 
MEMORYBARRIER
);

128 
NVXIO_DECLARE_GL_FUNC
(
Unif‹m1ui
, 
UNIFORM1UI
);

129 
NVXIO_DECLARE_GL_FUNC
(
TexSt‹age2D
, 
TEXSTORAGE2D
);

130 
NVXIO_DECLARE_GL_FUNC
(
GíProgømPùñöes
, 
GENPROGRAMPIPELINES
);

131 
NVXIO_DECLARE_GL_FUNC
(
DñëeProgømPùñöes
, 
DELETEPROGRAMPIPELINES
);

132 
NVXIO_DECLARE_GL_FUNC
(
BödProgømPùñöe
, 
BINDPROGRAMPIPELINE
);

133 
NVXIO_DECLARE_GL_FUNC
(
U£ProgømSèges
, 
USEPROGRAMSTAGES
);

134 
NVXIO_DECLARE_GL_FUNC
(
Cª©eShadîProgømv
, 
CREATESHADERPROGRAMV
);

135 
NVXIO_DECLARE_GL_FUNC
(
ProgømUnif‹m1f
, 
PROGRAMUNIFORM1F
);

136 
NVXIO_DECLARE_GL_FUNC
(
ProgømUnif‹m2f
, 
PROGRAMUNIFORM2F
);

137 
NVXIO_DECLARE_GL_FUNC
(
ProgømUnif‹m4f
, 
PROGRAMUNIFORM4F
);

138 
NVXIO_DECLARE_GL_FUNC
(
GëTexLevñP¨amëîiv
, 
GETTEXLEVELPARAMETERIV
);

139 
NVXIO_DECLARE_GL_FUNC
(
Võwp‹t
, 
VIEWPORT
);

140 
NVXIO_DECLARE_GL_FUNC
(
Höt
, 
HINT
);

144 
lﬂdGLFun˘i⁄s
(
GLFun˘i⁄s
 * 
f
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/OpenGLBasicRenders.cpp

29 #ifde‡
USE_GUI


31 
	~"O≥nGLBasicRídîs.hµ
"

33 
	~<Æg‹ôhm
>

34 
	~<c°rög
>

35 
	~<cÊﬂt
>

37 #ifde‡
_WIN32


39 
	#NOMINMAX


	)

40 
	~<wödows.h
>

43 
	~<cuda_gl_öãr›.h
>

45 
	~"RídîUtûs.hµ
"

46 
	~"Priv©e/Ty≥s.hµ
"

48 
	~"O≥nGLShadîs.hµ
"

50 #i‚de‡
NDEBUG


51 
__checkGlEº‹
(
°d
::
sh¨ed_±r
<
nvidüio
::
GLFun˘i⁄s
> 
gl_
, c⁄° * 
fûe
, 
löe
)

53 
GLíum
 
	gîr
 = 
gl_
->
GëEº‹
();

54 i‡(
	gîr
 !
GL_NO_ERROR
)

56 c⁄° *
îrSå
;

57 
	gîr
)

59 
	gGL_INVALID_ENUM
: 
îrSå
 = "GL_INVALID_ENUM"; ;

60 
	gGL_INVALID_VALUE
: 
îrSå
 = "GL_INVALID_VALUE"; ;

61 
	gGL_INVALID_OPERATION
: 
îrSå
 = "GL_INVALID_OPERATION"; ;

62 
	gGL_OUT_OF_MEMORY
: 
îrSå
 = "GL_OUT_OF_MEMORY"; ;

63 
	gGL_INVALID_FRAMEBUFFER_OPERATION
: 
îrSå
 = "GL_INVALID_FRAMEBUFFER_OPERATION"; ;

64 : 
îrSå
 = "UKNOWN OPENGL ERROR CODE"; ;

66 
NVXIO_PRINT
("[%s:%d] O≥nGL Eº‹: 0x%xák®%s", 
fûe
, 
löe
, 
îr
, 
îrSå
);

71 
	g«me•a˚


73 
	sVe˘‹2f


75 
GLÊﬂt
 
	gx
;

76 
GLÊﬂt
 
	gy
;

78 
Ve˘‹2f
()

80 
	gx
 = 
y
 = 0.0f;

83 
Ve˘‹2f
(
GLÊﬂt
 
_x
, GLÊﬂà
_y
)

85 
	gx
 = 
_x
;

86 
	gy
 = 
_y
;

90 
	sVîãx


92 
Ve˘‹2f
 
	gpos
;

93 
Ve˘‹2f
 
	gãx
;

95 
Vîãx
(c⁄° 
Ve˘‹2f
 & 
p
, c⁄° Ve˘‹2‡& 
t
) :

96 
pos
(
p
), 
ãx
(
t
)

101 ˛as†
	cLöesRídîögRuÀs


103 
	gpublic
:

104 
LöesRídîögRuÀs
(
°d
::
sh¨ed_±r
<
nvidüio
::
GLFun˘i⁄s
> 
gl
, 
GLÊﬂt
 
löeWidth
) :

105 
gl_
(
gl
), 
isLöeSmoŸh_
(
GL_FALSE
), 
löeSmoŸhHöt_
(
GL_DONT_CARE
), 
ﬁdLöeWidth_
(0.0f)

109 #i‚de‡
USE_GLES


110 
	ggl_
->
GëBoﬁónv
(
GL_LINE_SMOOTH
, &
isLöeSmoŸh_
);

111 
NVXIO_CHECK_GL_ERROR
();

112 
	ggl_
->
GëI¡egîv
(
GL_LINE_SMOOTH_HINT
, &
löeSmoŸhHöt_
);

113 
NVXIO_CHECK_GL_ERROR
();

116 
	ggl_
->
GëFlﬂtv
(
GL_LINE_WIDTH
, &
ﬁdLöeWidth_
);

117 
NVXIO_CHECK_GL_ERROR
();

121 
checkWidth
(
löeWidth
);

125 #i‚de‡
USE_GLES


126 
	ggl_
->
E«bÀ
(
GL_LINE_SMOOTH
);

127 
NVXIO_CHECK_GL_ERROR
();

128 
	ggl_
->
Höt
(
GL_LINE_SMOOTH_HINT
, 
GL_NICEST
);

129 
NVXIO_CHECK_GL_ERROR
();

132 
	ggl_
->
LöeWidth
(
löeWidth
);

133 
NVXIO_CHECK_GL_ERROR
();

136 ~
LöesRídîögRuÀs
()

138 #i‚de‡
USE_GLES


139 i‡(!
	gisLöeSmoŸh_
)

141 
	ggl_
->
DißbÀ
(
GL_LINE_SMOOTH
);

142 
NVXIO_CHECK_GL_ERROR
();

144 
	ggl_
->
Höt
(
GL_LINE_SMOOTH_HINT
, 
löeSmoŸhHöt_
);

145 
NVXIO_CHECK_GL_ERROR
();

148 
	ggl_
->
LöeWidth
(
ﬁdLöeWidth_
);

149 
NVXIO_CHECK_GL_ERROR
();

152 
	g¥iv©e
:

154 
checkWidth
(
GLÊﬂt
 
löeWidth
) const

157 
GLÊﬂt
 
widths
[2];

158 
	ggl_
->
GëFlﬂtv
(
GL_ALIASED_LINE_WIDTH_RANGE
, 
widths
);

159 
NVXIO_CHECK_GL_ERROR
();

161 i‡((
	glöeWidth
 < 
	gwidths
[0]) ||

162 (
	glöeWidth
 > 
	gwidths
[1]))

164 
NVXIO_ASSERT
(
löeWidth
 > 0);

166 
NVXIO_PRINT
("The specifiedÜine width '%f' is clippedÅo fit intoÅhe [%f, %f] interval.\n"

167 "It'†≥rf‹medáutom©iˇŒy by O≥nGL.", 
löeWidth
, 
widths
[0], widths[1]);

171 
	g°d
::
sh¨ed_±r
<
nvidüio
::
GLFun˘i⁄s
> 
gl_
;

173 
GLboﬁón
 
	gisLöeSmoŸh_
;

174 
GLöt
 
	glöeSmoŸhHöt_
;

175 
GLÊﬂt
 
	gﬁdLöeWidth_
;

178 
boﬁ
 
©èchShadî
(
°d
::
sh¨ed_±r
<
nvidüio
::
GLFun˘i⁄s
> 
gl_
, 
GLuöt
 
shadîProgøm
,

179 c⁄° * 
shadîText
, 
GLíum
 
shadîTy≥
, c⁄° * c⁄° 
›ti⁄s
)

181 
GLuöt
 
	gshadîObj
 = 
gl_
->
Cª©eShadî
(
shadîTy≥
);

182 
NVXIO_CHECK_GL_ERROR
();

184 c⁄° * 
	gshadîTy≥Så
 =

185 
shadîTy≥
 =
GL_VERTEX_SHADER
 ? "VERTEX" :

186 
shadîTy≥
 =
GL_FRAGMENT_SHADER
 ? "FRAGMENT" : "COMPUTE";

188 i‡(
	ggl_
->
IsShadî
(
shadîObj
Ë=
GL_FALSE
)

190 
NVXIO_PRINT
("Eº‹ whûê¸ótög %†shadî", 
shadîTy≥Så
);

191  
	gÁl£
;

194 c⁄° 
GLch¨
* 
	gsour˚s
[] =

196 #ifde‡
USE_GLES


198 
›ti⁄s
 ? options : "\n",

202 
›ti⁄s
 ? options : "\n",

204 
shadîText
,

207 
	ggl_
->
ShadîSour˚
(
shadîObj
, 
°©ic_ˇ°
<
GLsizei
>(
ovxio
::
dimOf
(
sour˚s
)), sour˚s, 
nuŒ±r
);

208 
NVXIO_CHECK_GL_ERROR
();

210 
	ggl_
->
CompûeShadî
(
shadîObj
);

211 
NVXIO_CHECK_GL_ERROR
();

213 
GLöt
 
	g°©us
 = 
GL_FALSE
;

214 
GLch¨
 
	göfoLog
[1024] = { 0 };

216 
	ggl_
->
GëShadîiv
(
shadîObj
, 
GL_COMPILE_STATUS
, &
°©us
);

217 
NVXIO_CHECK_GL_ERROR
();

218 i‡(
	g°©us
 =
GL_FALSE
)

220 
gl_
->
GëShadîInfoLog
(
shadîObj
, (
öfoLog
), 
nuŒ±r
, infoLog);

221 
NVXIO_CHECK_GL_ERROR
();

222 
NVXIO_PRINT
("Error compiling %s shaderÅype: %s",

223 
shadîTy≥Så
, 
öfoLog
);

225 
	ggl_
->
DñëeShadî
(
shadîObj
);

226 
NVXIO_CHECK_GL_ERROR
();

228  
	gÁl£
;

231 
	ggl_
->
AâachShadî
(
shadîProgøm
, 
shadîObj
);

232 
NVXIO_CHECK_GL_ERROR
();

234 
	ggl_
->
DñëeShadî
(
shadîObj
);

235 
NVXIO_CHECK_GL_ERROR
();

237  
	gåue
;

240 
boﬁ
 
checkProgømLog
(
°d
::
sh¨ed_±r
<
nvidüio
::
GLFun˘i⁄s
> 
gl_
, 
GLuöt
 
shadîProgøm
)

242 
GLöt
 
	g°©us
 = 
GL_FALSE
;

243 
GLch¨
 
	göfoLog
[1024] = { 0 };

245 
	ggl_
->
GëProgømiv
(
shadîProgøm
, 
GL_LINK_STATUS
, &
°©us
);

246 i‡(
	g°©us
 =
GL_FALSE
)

248 
gl_
->
GëProgømInfoLog
(
shadîProgøm
, (
öfoLog
), 
nuŒ±r
, infoLog);

249 
NVXIO_CHECK_GL_ERROR
();

250 
NVXIO_PRINT
("Eº‹Üökög shadîÖrogøm: %s", 
öfoLog
);

251  
	gÁl£
;

254 
	ggl_
->
VÆid©eProgøm
(
shadîProgøm
);

255 
NVXIO_CHECK_GL_ERROR
();

257 
	ggl_
->
GëProgømiv
(
shadîProgøm
, 
GL_VALIDATE_STATUS
, &
°©us
);

258 i‡(
	g°©us
 =
GL_FALSE
)

260 
gl_
->
GëProgømInfoLog
(
shadîProgøm
, (
öfoLog
), 
nuŒ±r
, infoLog);

261 
NVXIO_CHECK_GL_ERROR
();

262 
NVXIO_PRINT
("InvÆid shadîÖrogøm: %s", 
öfoLog
);

263  
	gÁl£
;

266  
	gåue
;

269 
boﬁ
 
compûeProgøm
(
°d
::
sh¨ed_±r
<
nvidüio
::
GLFun˘i⁄s
> 
gl_
, 
GLuöt
 
shadîProgøm
,

270 c⁄° * c⁄° 
vîãxShadî
,

271 c⁄° * c⁄° 
‰agmítShadî
,

272 c⁄° * c⁄° 
compuãShadî
 = 
nuŒ±r
,

273 c⁄° * c⁄° 
›ti⁄s
 = 
nuŒ±r
)

275 i‡(!
gl_
->
IsProgøm
(
shadîProgøm
))

276  
Ál£
;

278 i‡(
	gvîãxShadî
)

280 i‡(!
©èchShadî
(
gl_
, 
shadîProgøm
, 
vîãxShadî
, 
GL_VERTEX_SHADER
, 
›ti⁄s
))

281  
	gÁl£
;

284 i‡(
	g‰agmítShadî
)

286 i‡(!
©èchShadî
(
gl_
, 
shadîProgøm
, 
‰agmítShadî
, 
GL_FRAGMENT_SHADER
, 
›ti⁄s
))

287  
	gÁl£
;

290 i‡(
	gcompuãShadî
)

292 i‡(!
©èchShadî
(
gl_
, 
shadîProgøm
, 
compuãShadî
, 
GL_COMPUTE_SHADER
, 
›ti⁄s
))

293  
	gÁl£
;

296 
	ggl_
->
LökProgøm
(
shadîProgøm
);

297 
NVXIO_CHECK_GL_ERROR
();

299  
checkProgømLog
(
gl_
, 
shadîProgøm
);

302 
GLuöt
 
¸óãSï¨abÀProgøm
(
°d
::
sh¨ed_±r
<
nvidüio
::
GLFun˘i⁄s
> 
gl_
,

303 
GLíum
 
shadîTy≥
, c⁄° * c⁄° 
shadîText
,

304 c⁄° * c⁄° 
›ti⁄s
 = 
nuŒ±r
)

306 c⁄° 
GLch¨
 * 
sour˚s
[] =

308 #ifde‡
USE_GLES


310 
›ti⁄s
 ? options : "\n",

314 
›ti⁄s
 ? options : "\n",

316 
shadîText
,

319 
GLuöt
 
	gshadîProgøm
 = 
gl_
->
Cª©eShadîProgømv
(
shadîTy≥
, 
°©ic_ˇ°
<
GLsizei
>(
ovxio
::
dimOf
(
sour˚s
)),

320 
sour˚s
);

322 i‡(!
checkProgømLog
(
gl_
, 
shadîProgøm
))

324 
	ggl_
->
DñëeProgøm
(
shadîProgøm
);

325 
NVXIO_CHECK_GL_ERROR
();

327 
	gshadîProgøm
 = 0;

330  
	gshadîProgøm
;

333 
boﬁ
 
	$dëe˘Mu…iGPUI¡î›
()

335 
boﬁ
 
mu…iGPU
 = 
Ál£
;

336 #ifde‡
USE_DGPU


340 
cudaDevi˚Pr›
 
devi˚Pr›
;

341 
dev
;

342 
	`NVXIO_CUDA_SAFE_CALL
(
	`cudaGëDevi˚
(&
dev
));

343 
	`NVXIO_CUDA_SAFE_CALL
(
	`cudaGëDevi˚Pr›îtõs
(&
devi˚Pr›
, 
dev
));

345 i‡(
	`°∫cmp
(
devi˚Pr›
.
«me
, "GP10B", 5) != 0) {

346 
mu…iGPU
 = 
åue
;

347 #i‚de‡
NDEBUG


348 
	`NVXIO_PRINT
("\nDëe˘ed mu…i-GPU CUDA (%sË<=> GL (GP10BËöãr›\n", 
devi˚Pr›
.
«me
);

352  
mu…iGPU
;

353 
	}
}

360 
	gnvidüio
::
ImageRídî
::
	$ImageRídî
() :

361 
	`gl_
(
nuŒ±r
), 
	`wndWidth_
(0u), 
	`wndHeight_
(0u),

362 
	`vao_
(0u), 
	`vbo_
(0u), 
	`ödex_
(-1), 
	`sˇÀUnif‹mX_
(1.0f), 
	`sˇÀUnif‹mY_
(1.0f),

363 
	$mu…iGPUI¡î›_
(
Ál£
)

365 
°d
::
	`mem£t
(
ãx_
, 0u, (tex_));

366 
°d
::
	`mem£t
(
pùñöe_
, 0u, (pipeline_));

367 
°d
::
	`mem£t
(
ªs_
, 0u, (res_));

368 
°d
::
	`mem£t
(
‰agmítProgøm_
, 0u, (fragmentProgram_));

369 
°d
::
	`mem£t
(
ho°_±r_
, 0u, (host_ptr_));

370 
	}
}

372 
boﬁ
 
	gnvidüio
::
ImageRídî
::
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
, 
uöt32_t
 
wndWidth
, uöt32_à
wndHeight
)

374 
	ggl_
 = 
_gl
;

376 
	gwndWidth_
 = 
wndWidth
;

377 
	gwndHeight_
 = 
wndHeight
;

381 c⁄° * c⁄° 
	gdeföes
[] =

393 
	ggl_
->
GíTextuªs
(3, 
ãx_
);

394 
NVXIO_CHECK_GL_ERROR
();

396 
	ggl_
->
GíProgømPùñöes
(3, 
pùñöe_
);

397 
NVXIO_CHECK_GL_ERROR
();

399 
GLuöt
 
	gvîãxProgøm
 = ::
¸óãSï¨abÀProgøm
(
gl_
, 
GL_VERTEX_SHADER
,

400 
image_ªndî_shadî_vs_code
,

403 
size_t
 
	gi
 = 0; i < 
	govxio
::
dimOf
(
deföes
); ++i)

405 
	g‰agmítProgøm_
[
i
] = ::
¸óãSï¨abÀProgøm
(
gl_
, 
GL_FRAGMENT_SHADER
,

406 
image_ªndî_shadî_fs_code
,

407 
deföes
[
i
]);

409 
	ggl_
->
U£ProgømSèges
(
pùñöe_
[
i
], 
GL_VERTEX_SHADER_BIT
, 
vîãxProgøm
);

410 
NVXIO_CHECK_GL_ERROR
();

411 
	ggl_
->
U£ProgømSèges
(
pùñöe_
[
i
], 
GL_FRAGMENT_SHADER_BIT
, 
‰agmítProgøm_
[i]);

412 
NVXIO_CHECK_GL_ERROR
();

415 
	ggl_
->
DñëeProgøm
(
vîãxProgøm
);

416 
NVXIO_CHECK_GL_ERROR
();

420 
	ggl_
->
GíVîãxAºays
(1, &
vao_
);

421 
NVXIO_CHECK_GL_ERROR
();

422 
	ggl_
->
GíBuf„rs
(1, &
vbo_
);

423 
NVXIO_CHECK_GL_ERROR
();

425 
	ggl_
->
BödVîãxAºay
(
vao_
);

426 
NVXIO_CHECK_GL_ERROR
();

428 c⁄° 
Vîãx
 
	gvîti˚s
[] =

430 
Vîãx
(
Ve˘‹2f
(-1.0f, -1.0f), Vector2f(0.0f, 1.0f)),

431 
Vîãx
(
Ve˘‹2f
(-1.0f, 1.0f), Vector2f(0.0f, 0.0f)),

432 
Vîãx
(
Ve˘‹2f
( 1.0f, -1.0f), Vector2f(1.0f, 1.0f)),

433 
Vîãx
(
Ve˘‹2f
( 1.0f, 1.0f), Vector2f(1.0f, 0.0f)),

436 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
);

437 
NVXIO_CHECK_GL_ERROR
();

438 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, (
vîti˚s
), vîti˚s, 
GL_STATIC_DRAW
);

439 
NVXIO_CHECK_GL_ERROR
();

441 
	ggl_
->
VîãxAâribPoöãr
(0, 2, 
GL_FLOAT
, 
GL_FALSE
, (
Vîãx
), 0);

442 
NVXIO_CHECK_GL_ERROR
();

443 
	ggl_
->
E«bÀVîãxAâribAºay
(0);

444 
NVXIO_CHECK_GL_ERROR
();

445 
	ggl_
->
VîãxAâribPoöãr
(1, 2, 
GL_FLOAT
, 
GL_FALSE
, (
Vîãx
), (c⁄° 
GLvoid
*)(
Ve˘‹2f
));

446 
NVXIO_CHECK_GL_ERROR
();

447 
	ggl_
->
E«bÀVîãxAâribAºay
(1);

448 
NVXIO_CHECK_GL_ERROR
();

450 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

451 
NVXIO_CHECK_GL_ERROR
();

452 
	ggl_
->
BödVîãxAºay
(0);

453 
NVXIO_CHECK_GL_ERROR
();

455 
	gmu…iGPUI¡î›_
 = 
dëe˘Mu…iGPUI¡î›
();

457  
	gåue
;

460 
	gnvidüio
::
ImageRídî
::
	$ªÀa£
()

462 i‡(!
gl_
)

465 
gl_
->
	`DñëeTextuªs
(3, 
ãx_
);

466 
	`NVXIO_CHECK_GL_ERROR
();

468 
gl_
->
	`DñëeProgømPùñöes
(3, 
pùñöe_
);

469 
	`NVXIO_CHECK_GL_ERROR
();

471 
size_t
 
i
 = 0; i < 
ovxio
::
	`dimOf
(
ªs_
); ++i)

473 i‡(
mu…iGPUI¡î›_
)

475 
dñëe
 [] 
ho°_±r_
[
i
];

477 i‡(
ªs_
[
i
])

479 
	`cudaGøphicsUƒegi°îResour˚
(
ªs_
[
i
]);

480 
ªs_
[
i
] = 
nuŒ±r
;

483 
gl_
->
	`DñëeProgøm
(
‰agmítProgøm_
[
i
]);

484 
	`NVXIO_CHECK_GL_ERROR
();

485 
‰agmítProgøm_
[
i
] = 0;

488 
gl_
->
	`DñëeBuf„rs
(1, &
vbo_
);

489 
	`NVXIO_CHECK_GL_ERROR
();

490 
vbo_
 = 0;

492 
gl_
->
	`DñëeVîãxAºays
(1, &
vao_
);

493 
	`NVXIO_CHECK_GL_ERROR
();

494 
vao_
 = 0;

495 
	}
}

497 
	gnvidüio
::
ImageRídî
::
	$ªndî
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
imageWidth
, uöt32_à
imageHeight
)

499 
	`upd©eTextuª
(
image
, 
imageWidth
, 
imageHeight
);

500 
	`ªndîTextuª
();

501 
	}
}

503 
	gnvidüio
::
ImageRídî
::
	$upd©eTextuª
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
imageWidth
, uöt32_à
imageHeight
)

505 
cudaSåóm_t
 
°ªam
 = 
nuŒ±r
;

507 
nvxcu_df_image_e
 
f‹m©
 = 
image
.format;

508 
	`NVXIO_ASSERT
–
f‹m©
 =
NVXCU_DF_IMAGE_U8
 || f‹m© =
NVXCU_DF_IMAGE_RGB
 || f‹m© =
NVXCU_DF_IMAGE_RGBX
 );

510 
GLuöt
 
ch™√ls
 = 
f‹m©
 =
NVXCU_DF_IMAGE_U8
 ? 1 :

511 
f‹m©
 =
NVXCU_DF_IMAGE_RGB
 ? 3 : 4;

512 
ödex_
 = 
f‹m©
 =
NVXCU_DF_IMAGE_U8
 ? 0 :

513 
f‹m©
 =
NVXCU_DF_IMAGE_RGB
 ? 1 : 2;

517 
GLuöt
 
a˘uÆTexWidth_
 = 0u, 
a˘uÆTexHeight_
 = 0u;

519 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 
ãx_
[
ödex_
]);

520 
	`NVXIO_CHECK_GL_ERROR
();

521 
gl_
->
	`GëTexLevñP¨amëîiv
(
GL_TEXTURE_2D
, 0, 
GL_TEXTURE_WIDTH
, (
GLöt
 *)&
a˘uÆTexWidth_
);

522 
	`NVXIO_CHECK_GL_ERROR
();

523 
gl_
->
	`GëTexLevñP¨amëîiv
(
GL_TEXTURE_2D
, 0, 
GL_TEXTURE_HEIGHT
, (
GLöt
 *)&
a˘uÆTexHeight_
);

524 
	`NVXIO_CHECK_GL_ERROR
();

526 i‡(
f‹m©
 =
NVXCU_DF_IMAGE_RGB
)

527 
a˘uÆTexWidth_
 /
ch™√ls
;

529 i‡((
image
.
width
 !
a˘uÆTexWidth_
Ë|| (image.
height
 !
a˘uÆTexHeight_
))

531 c⁄° 
GLíum
 
öã∫ÆF‹m©s
[] = { 
GL_R8
, GL_R8, 
GL_RGBA8
 };

533 
sˇÀUnif‹mX_
 = 
°©ic_ˇ°
<
GLÊﬂt
>(
imageWidth
Ë/ 
image
.
width
;

534 
sˇÀUnif‹mY_
 = 
°©ic_ˇ°
<
GLÊﬂt
>(
imageHeight
Ë/ 
image
.
height
;

538 i‡(
mu…iGPUI¡î›_
)

540 
dñëe
 [] 
ho°_±r_
[
ödex_
];

542 i‡(
ªs_
[
ödex_
])

544 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsUƒegi°îResour˚
(
ªs_
[
ödex_
]) );

545 
ªs_
[
ödex_
] = 
nuŒ±r
;

548 i‡(
ãx_
[
ödex_
])

550 
gl_
->
	`DñëeTextuªs
(1, 
ãx_
 + 
ödex_
);

551 
	`NVXIO_CHECK_GL_ERROR
();

556 
gl_
->
	`GíTextuªs
(1, 
ãx_
 + 
ödex_
);

557 
	`NVXIO_CHECK_GL_ERROR
();

559 
gl_
->
	`A˘iveTextuª
(
GL_TEXTURE0
);

560 
	`NVXIO_CHECK_GL_ERROR
();

561 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 
ãx_
[
ödex_
]);

562 
	`NVXIO_CHECK_GL_ERROR
();

563 
gl_
->
	`TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_NEAREST
);

564 
	`NVXIO_CHECK_GL_ERROR
();

565 
gl_
->
	`TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_NEAREST
);

566 
	`NVXIO_CHECK_GL_ERROR
();

567 
gl_
->
	`TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
GL_CLAMP_TO_EDGE
);

568 
	`NVXIO_CHECK_GL_ERROR
();

569 
gl_
->
	`TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
GL_CLAMP_TO_EDGE
);

570 
	`NVXIO_CHECK_GL_ERROR
();

571 
gl_
->
	`TexSt‹age2D
(
GL_TEXTURE_2D
, 1, 
öã∫ÆF‹m©s
[
ödex_
],

572 (
ödex_
 =1 ? 
ch™√ls
 : 1Ë* 
image
.
width
, image.
height
);

573 
	`NVXIO_CHECK_GL_ERROR
();

575 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 0);

576 
	`NVXIO_CHECK_GL_ERROR
();

578 i‡(
mu…iGPUI¡î›_
)

580 
ho°_±r_
[
ödex_
] = 
√w
 
GLubyã
[
image
.
height
 * image.
width
 * (GLubyãË* 
ch™√ls
];

585 
cudaEº‹_t
 
îr
 = 
	`cudaGøphicsGLRegi°îImage
(
ªs_
 + 
ödex_
, 
ãx_
[ödex_], 
GL_TEXTURE_2D
,

586 
cudaGøphicsRegi°îFœgsSurÁ˚LﬂdSt‹e
);

587 i‡(
îr
 !
cudaSuc˚ss
)

589 
	`NVXIO_PRINT
("ImageRídîÉº‹: %s", 
	`cudaGëEº‹Såög
(
îr
));

595 
sˇÀ
 = 
°d
::
	`mö
(
sˇÀUnif‹mX_
, 
sˇÀUnif‹mY_
);

597 
GLöt
 
võwp‹tWidth
 = 
°©ic_ˇ°
<GLöt>(
image
.
width
 * 
sˇÀ
);

598 
GLöt
 
võwp‹tHeight
 = 
°©ic_ˇ°
<GLöt>(
image
.
height
 * 
sˇÀ
);

600 
	`NVXIO_ASSERT
(
wndWidth_
 >(
GLuöt
)
võwp‹tWidth
);

601 
	`NVXIO_ASSERT
(
wndHeight_
 >(
GLuöt
)
võwp‹tHeight
);

603 
GLöt
 
xB‹dî
 = 
°©ic_ˇ°
<GLöt>(
wndWidth_
 - 
võwp‹tWidth
) >> 1;

604 
GLöt
 
yB‹dî
 = 
°©ic_ˇ°
<GLöt>(
wndHeight_
 - 
võwp‹tHeight
) >> 1;

606 
gl_
->
	`Võwp‹t
(
xB‹dî
, 
yB‹dî
,

607 
võwp‹tWidth
, 
võwp‹tHeight
);

608 
	`NVXIO_CHECK_GL_ERROR
();

611 i‡(
mu…iGPUI¡î›_
)

613 c⁄° 
GLíum
 
f‹m©s
[] = { 
GL_RED
, GL_RED, 
GL_RGBA
 };

615 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝y2DAsync
 (
ho°_±r_
[
ödex_
],

616 
image
.
width
 * (
GLubyã
Ë* 
ch™√ls
,

617 
image
.
∂™es
[0].
±r
,

618 
image
.
∂™es
[0].
pôch_ö_byãs
,

619 
image
.
width
 * (
GLubyã
Ë* 
ch™√ls
,

620 
image
.
height
,

621 
cudaMem˝yDevi˚ToHo°
,

622 
°ªam
) );

624 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

627 
gl_
->
	`A˘iveTextuª
(
GL_TEXTURE0
);

628 
	`NVXIO_CHECK_GL_ERROR
();

629 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 
ãx_
[
ödex_
]);

630 
	`NVXIO_CHECK_GL_ERROR
();

631 
gl_
->
	`TexSubImage2D
(
GL_TEXTURE_2D
, 0, 0, 0, (
ödex_
 =1 ? 
ch™√ls
 : 1Ë* 
image
.
width
,

632 
image
.
height
, 
f‹m©s
[
ödex_
], 
GL_UNSIGNED_BYTE
, 
ho°_±r_
[index_]);

633 
	`NVXIO_CHECK_GL_ERROR
();

634 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 0);

635 
	`NVXIO_CHECK_GL_ERROR
();

640 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsM≠Resour˚s
(1, 
ªs_
 + 
ödex_
, 
°ªam
) );

642 
cudaAºay_t
 
cudaAº
 = 
nuŒ±r
;

643 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsSubResour˚GëM≠≥dAºay
(&
cudaAº
, 
ªs_
[
ödex_
], 0, 0) );

644 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝y2DToAºayAsync
(
cudaAº
, 0, 0, 
image
.
∂™es
[0].
±r
, image.∂™es[0].
pôch_ö_byãs
,

645 
image
.
width
 * (
GLubyã
Ë* 
ch™√ls
, image.
height
,

646 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
) );

647 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsUnm≠Resour˚s
(1, 
ªs_
 + 
ödex_
, 
°ªam
) );

649 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

651 
	}
}

653 
	gnvidüio
::
ImageRídî
::
	$ªndîTextuª
()

655 
gl_
->
	`BödProgømPùñöe
(
pùñöe_
[
ödex_
]);

656 
	`NVXIO_CHECK_GL_ERROR
();

658 
gl_
->
	`BödVîãxAºay
(
vao_
);

659 
	`NVXIO_CHECK_GL_ERROR
();

661 
gl_
->
	`A˘iveTextuª
(
GL_TEXTURE0
);

662 
	`NVXIO_CHECK_GL_ERROR
();

663 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 
ãx_
[
ödex_
]);

664 
	`NVXIO_CHECK_GL_ERROR
();

666 
GLÊﬂt
 
sˇÀ
 = 
°d
::
	`mö
(
sˇÀUnif‹mX_
, 
sˇÀUnif‹mY_
);

667 i‡(
ödex_
 == 1)

669 
gl_
->
	`ProgømUnif‹m2f
(
‰agmítProgøm_
[
ödex_
], 0,

670 1 / 
sˇÀ
, 1 / scale);

671 
	`NVXIO_CHECK_GL_ERROR
();

673 
GLöt
 
võwp‹t
[4];

674 
gl_
->
	`GëI¡egîv
(
GL_VIEWPORT
, 
võwp‹t
);

675 
	`NVXIO_CHECK_GL_ERROR
();

677 
gl_
->
	`ProgømUnif‹m2f
(
‰agmítProgøm_
[
ödex_
], 1,

678 
°©ic_ˇ°
<
GLÊﬂt
>(
võwp‹t
[0]),

679 
°©ic_ˇ°
<
GLÊﬂt
>(
võwp‹t
[1]));

683 
gl_
->
	`ProgømUnif‹m2f
(
‰agmítProgøm_
[
ödex_
], 0,

684 
sˇÀUnif‹mX_
 / 
sˇÀ
,

685 
sˇÀUnif‹mY_
 / 
sˇÀ
);

687 
	`NVXIO_CHECK_GL_ERROR
();

689 
gl_
->
	`DøwAºays
(
GL_TRIANGLE_STRIP
, 0, 4);

690 
	`NVXIO_CHECK_GL_ERROR
();

693 
gl_
->
	`BödVîãxAºay
(0);

694 
	`NVXIO_CHECK_GL_ERROR
();

695 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 0);

696 
	`NVXIO_CHECK_GL_ERROR
();

697 
gl_
->
	`BödProgømPùñöe
(0);

698 
	`NVXIO_CHECK_GL_ERROR
();

699 
	}
}

705 
	gnvidüio
::
NV12ImageRídî
::
	$NV12ImageRídî
() :

706 
	`gl_
(
nuŒ±r
), 
	`wndWidth_
(0u), 
	`wndHeight_
(0u),

707 
	`vao_
(0u), 
	`vbo_
(0u), 
	`¥ogøm_
(0u),

708 
	`sˇÀUnif‹mX_
(1.0f), 
	`sˇÀUnif‹mY_
(1.0f),

709 
	$mu…iGPUI¡î›_
(
Ál£
)

711 
°d
::
	`mem£t
(
ãx_
, 0u, (tex_));

712 
°d
::
	`mem£t
(
ªs_
, 0u, (res_));

713 
°d
::
	`mem£t
(
ho°_±r_
, 0u, (host_ptr_));

714 
	}
}

716 
boﬁ
 
	gnvidüio
::
NV12ImageRídî
::
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
, 
vx_uöt32
 
wndWidth
, vx_uöt32 
wndHeight
)

718 
	ggl_
 = 
_gl
;

720 
	gwndWidth_
 = 
wndWidth
;

721 
	gwndHeight_
 = 
wndHeight
;

725 
	ggl_
->
GíTextuªs
(2, 
ãx_
);

726 
NVXIO_CHECK_GL_ERROR
();

730 
	ggl_
->
GíVîãxAºays
(1, &
vao_
);

731 
NVXIO_CHECK_GL_ERROR
();

732 
	ggl_
->
GíBuf„rs
(1, &
vbo_
);

733 
NVXIO_CHECK_GL_ERROR
();

735 
	ggl_
->
BödVîãxAºay
(
vao_
);

736 
NVXIO_CHECK_GL_ERROR
();

738 c⁄° 
Vîãx
 
	gvîti˚s
[] =

740 
Vîãx
(
Ve˘‹2f
(-1.0f, -1.0f), Vector2f(0.0f, 1.0f)),

741 
Vîãx
(
Ve˘‹2f
(-1.0f, 1.0f), Vector2f(0.0f, 0.0f)),

742 
Vîãx
(
Ve˘‹2f
( 1.0f, -1.0f), Vector2f(1.0f, 1.0f)),

743 
Vîãx
(
Ve˘‹2f
( 1.0f, 1.0f), Vector2f(1.0f, 0.0f)),

746 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
);

747 
NVXIO_CHECK_GL_ERROR
();

748 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, (
vîti˚s
), vîti˚s, 
GL_STATIC_DRAW
);

749 
NVXIO_CHECK_GL_ERROR
();

751 
	ggl_
->
VîãxAâribPoöãr
(0, 2, 
GL_FLOAT
, 
GL_FALSE
, (
Vîãx
), 0);

752 
NVXIO_CHECK_GL_ERROR
();

753 
	ggl_
->
E«bÀVîãxAâribAºay
(0);

754 
NVXIO_CHECK_GL_ERROR
();

755 
	ggl_
->
VîãxAâribPoöãr
(1, 2, 
GL_FLOAT
, 
GL_FALSE
, (
Vîãx
), (c⁄° 
GLvoid
*)(
Ve˘‹2f
));

756 
NVXIO_CHECK_GL_ERROR
();

757 
	ggl_
->
E«bÀVîãxAâribAºay
(1);

758 
NVXIO_CHECK_GL_ERROR
();

760 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

761 
NVXIO_CHECK_GL_ERROR
();

762 
	ggl_
->
BödVîãxAºay
(0);

763 
NVXIO_CHECK_GL_ERROR
();

767 
	g¥ogøm_
 = 
gl_
->
Cª©eProgøm
();

768 
NVXIO_CHECK_GL_ERROR
();

770 i‡(
	ggl_
->
IsProgøm
(
¥ogøm_
Ë=
GL_FALSE
)

772 
NVXIO_PRINT
("NV12ImageRender:Érror creating shaderÖrogram");

773  
	gÁl£
;

776 i‡(!
compûeProgøm
(
gl_
, 
¥ogøm_
,

777 
image_ªndî_shadî_vs_code
,

778 
nv12image_ªndî_shadî_fs_code
,

779 
nuŒ±r
,

781  
	gÁl£
;

783 
	gmu…iGPUI¡î›_
 = 
dëe˘Mu…iGPUI¡î›
();

785  
	gåue
;

788 
	gnvidüio
::
NV12ImageRídî
::
	$ªÀa£
()

790 i‡(!
gl_
)

793 
gl_
->
	`DñëeTextuªs
(2, 
ãx_
);

794 
	`NVXIO_CHECK_GL_ERROR
();

796 
gl_
->
	`DñëeProgøm
(
¥ogøm_
);

797 
	`NVXIO_CHECK_GL_ERROR
();

798 
¥ogøm_
 = 0;

800 
size_t
 
i
 = 0; i < 
ovxio
::
	`dimOf
(
ªs_
); ++i)

802 i‡(
mu…iGPUI¡î›_
)

804 
dñëe
 [] 
ho°_±r_
[
i
];

806 i‡(
ªs_
[
i
])

808 
	`cudaGøphicsUƒegi°îResour˚
(
ªs_
[
i
]);

809 
ªs_
[
i
] = 
nuŒ±r
;

813 
gl_
->
	`DñëeBuf„rs
(1, &
vbo_
);

814 
	`NVXIO_CHECK_GL_ERROR
();

815 
vbo_
 = 0;

817 
gl_
->
	`DñëeVîãxAºays
(1, &
vao_
);

818 
	`NVXIO_CHECK_GL_ERROR
();

819 
vao_
 = 0;

820 
	}
}

822 
	gnvidüio
::
NV12ImageRídî
::
	$ªndî
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
imageWidth
, uöt32_à
imageHeight
)

824 
	`upd©eTextuª
(
image
, 
imageWidth
, 
imageHeight
);

825 
	`ªndîTextuª
();

826 
	}
}

828 
	gnvidüio
::
NV12ImageRídî
::
	$upd©eTextuª
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
imageWidth
, uöt32_à
imageHeight
)

830 
cudaSåóm_t
 
°ªam
 = 
nuŒ±r
;

832 
	`NVXIO_ASSERT
–
image
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
 );

836 
GLuöt
 
a˘uÆTexWidth_
 = 0u, 
a˘uÆTexHeight_
 = 0u;

838 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 
ãx_
[0]);

839 
	`NVXIO_CHECK_GL_ERROR
();

840 
gl_
->
	`GëTexLevñP¨amëîiv
(
GL_TEXTURE_2D
, 0, 
GL_TEXTURE_WIDTH
, (
GLöt
 *)&
a˘uÆTexWidth_
);

841 
	`NVXIO_CHECK_GL_ERROR
();

842 
gl_
->
	`GëTexLevñP¨amëîiv
(
GL_TEXTURE_2D
, 0, 
GL_TEXTURE_HEIGHT
, (
GLöt
 *)&
a˘uÆTexHeight_
);

843 
	`NVXIO_CHECK_GL_ERROR
();

845 i‡((
image
.
width
 !
a˘uÆTexWidth_
Ë|| (image.
height
 !
a˘uÆTexHeight_
))

847 
sˇÀUnif‹mX_
 = 
°©ic_ˇ°
<
GLÊﬂt
>(
imageWidth
Ë/ 
image
.
width
;

848 
sˇÀUnif‹mY_
 = 
°©ic_ˇ°
<
GLÊﬂt
>(
imageHeight
Ë/ 
image
.
height
;

852 
vx_size
 
i
 = 0; i < 
ovxio
::
	`dimOf
(
ãx_
); ++i)

854 i‡(
mu…iGPUI¡î›_
)

856 
dñëe
 [] 
ho°_±r_
[
i
];

858 i‡(
ªs_
[
i
])

860 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsUƒegi°îResour˚
(
ªs_
[
i
]) );

861 
ªs_
[
i
] = 
nuŒ±r
;

865 
gl_
->
	`DñëeTextuªs
(2, 
ãx_
);

866 
	`NVXIO_CHECK_GL_ERROR
();

870 
gl_
->
	`GíTextuªs
(2, 
ãx_
);

871 
	`NVXIO_CHECK_GL_ERROR
();

873 
GLíum
 
öã∫ÆF‹m©s
[2] = { 
GL_R8
, 
GL_RG8
 };

875 
vx_size
 
i
 = 0; i < 
ovxio
::
	`dimOf
(
ãx_
); ++i)

877 
gl_
->
	`A˘iveTextuª
(
GL_TEXTURE0
 + 
i
);

878 
	`NVXIO_CHECK_GL_ERROR
();

879 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 
ãx_
[
i
]);

880 
	`NVXIO_CHECK_GL_ERROR
();

881 
gl_
->
	`TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_NEAREST
);

882 
	`NVXIO_CHECK_GL_ERROR
();

883 
gl_
->
	`TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_NEAREST
);

884 
	`NVXIO_CHECK_GL_ERROR
();

885 
gl_
->
	`TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
GL_CLAMP_TO_EDGE
);

886 
	`NVXIO_CHECK_GL_ERROR
();

887 
gl_
->
	`TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
GL_CLAMP_TO_EDGE
);

888 
	`NVXIO_CHECK_GL_ERROR
();

889 
gl_
->
	`TexSt‹age2D
(
GL_TEXTURE_2D
, 1, 
öã∫ÆF‹m©s
[
i
], 
image
.
width
 >> i, image.
height
 >> i);

890 
	`NVXIO_CHECK_GL_ERROR
();

891 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 0);

892 
	`NVXIO_CHECK_GL_ERROR
();

894 i‡(
mu…iGPUI¡î›_
)

896 
ho°_±r_
[
i
] = 
√w
 
GLubyã
[(
image
.
height
 >> iË* (image.
width
 >> i) * (GLubyte) * (i == 1 ? 2 : 1)];

901 
cudaEº‹_t
 
îr
 = 
	`cudaGøphicsGLRegi°îImage
(
ªs_
 + 
i
, 
ãx_
[i], 
GL_TEXTURE_2D
,

902 
cudaGøphicsRegi°îFœgsSurÁ˚LﬂdSt‹e
);

903 i‡(
îr
 !
cudaSuc˚ss
)

905 
	`NVXIO_PRINT
("ImageRídîÉº‹: %s", 
	`cudaGëEº‹Såög
(
îr
));

913 
sˇÀ
 = 
°d
::
	`mö
(
sˇÀUnif‹mX_
, 
sˇÀUnif‹mY_
);

915 
GLöt
 
võwp‹tWidth
 = 
°©ic_ˇ°
<GLöt>(
image
.
width
 * 
sˇÀ
);

916 
GLöt
 
võwp‹tHeight
 = 
°©ic_ˇ°
<GLöt>(
image
.
height
 * 
sˇÀ
);

918 
	`NVXIO_ASSERT
(
wndWidth_
 >(
GLuöt
)
võwp‹tWidth
);

919 
	`NVXIO_ASSERT
(
wndHeight_
 >(
GLuöt
)
võwp‹tHeight
);

921 
GLöt
 
xB‹dî
 = 
°©ic_ˇ°
<GLöt>(
wndWidth_
 - 
võwp‹tWidth
) >> 1;

922 
GLöt
 
yB‹dî
 = 
°©ic_ˇ°
<GLöt>(
wndHeight_
 - 
võwp‹tHeight
) >> 1;

924 
gl_
->
	`Võwp‹t
(
xB‹dî
, 
yB‹dî
,

925 
võwp‹tWidth
, 
võwp‹tHeight
);

926 
	`NVXIO_CHECK_GL_ERROR
();

929 i‡(
mu…iGPUI¡î›_
)

931 c⁄° 
GLíum
 
f‹m©s
[] = { 
GL_RED
, 
GL_RG
 };

932 
uöt32_t
 
width
 = 
image
.width, 
height
 = image.height, 
ch™√ls
 = 1u;

934 
vx_size
 
i
 = 0; i < 
ovxio
::
	`dimOf
(
ãx_
); ++i)

936 i‡(
i
 == 1)

938 
width
 >>= 1;

939 
height
 >>= 1;

940 
ch™√ls
 = 2u;

944 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝y2DAsync
 (
ho°_±r_
[
i
],

945 
width
 * (
GLubyã
Ë* 
ch™√ls
,

946 
image
.
∂™es
[
i
].
±r
,

947 
image
.
∂™es
[
i
].
pôch_ö_byãs
,

948 
width
 * (
GLubyã
Ë* 
ch™√ls
,

949 
height
,

950 
cudaMem˝yDevi˚ToHo°
,

951 
°ªam
) );

953 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

956 
gl_
->
	`A˘iveTextuª
(
GL_TEXTURE0
);

957 
	`NVXIO_CHECK_GL_ERROR
();

958 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 
ãx_
[
i
]);

959 
	`NVXIO_CHECK_GL_ERROR
();

960 
gl_
->
	`TexSubImage2D
(
GL_TEXTURE_2D
, 0, 0, 0, 
width
, 
height
, 
f‹m©s
[
i
], 
GL_UNSIGNED_BYTE
, 
ho°_±r_
[i]);

961 
	`NVXIO_CHECK_GL_ERROR
();

962 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 0);

963 
	`NVXIO_CHECK_GL_ERROR
();

970 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsM≠Resour˚s
(2, 
ªs_
, 
°ªam
) );

972 
vx_size
 
i
 = 0; i < 
ovxio
::
	`dimOf
(
ãx_
); ++i)

974 
cudaAºay_t
 
cudaAº
 = 
nuŒ±r
;

975 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsSubResour˚GëM≠≥dAºay
(&
cudaAº
, 
ªs_
[
i
], 0, 0) );

977 
uöt32_t
 
width
 = 
image
.width, 
height
 = image.height, 
ch™√ls
 = 1u;

979 i‡(
i
 == 1)

981 
width
 >>= 1;

982 
height
 >>= 1;

983 
ch™√ls
 = 2u;

986 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝y2DToAºayAsync
(
cudaAº
, 0, 0, 
image
.
∂™es
[
i
].
±r
,

987 
image
.
∂™es
[
i
].
pôch_ö_byãs
,

988 
width
 * 
ch™√ls
, 
height
,

989 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
) );

992 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsUnm≠Resour˚s
(2, 
ªs_
, 
°ªam
) );

994 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

996 
	}
}

998 
	gnvidüio
::
NV12ImageRídî
::
	$ªndîTextuª
()

1000 
gl_
->
	`U£Progøm
(
¥ogøm_
);

1001 
	`NVXIO_CHECK_GL_ERROR
();

1003 
gl_
->
	`BödVîãxAºay
(
vao_
);

1004 
	`NVXIO_CHECK_GL_ERROR
();

1006 
gl_
->
	`A˘iveTextuª
(
GL_TEXTURE0
);

1007 
	`NVXIO_CHECK_GL_ERROR
();

1008 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 
ãx_
[0]);

1009 
	`NVXIO_CHECK_GL_ERROR
();

1011 
gl_
->
	`A˘iveTextuª
(
GL_TEXTURE1
);

1012 
	`NVXIO_CHECK_GL_ERROR
();

1013 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 
ãx_
[1]);

1014 
	`NVXIO_CHECK_GL_ERROR
();

1016 
GLÊﬂt
 
sˇÀ
 = 
°d
::
	`mö
(
sˇÀUnif‹mX_
, 
sˇÀUnif‹mY_
);

1017 
gl_
->
	`Unif‹m2f
(0, 1.0‡/ 
sˇÀ
, 1.0f / scale);

1018 
	`NVXIO_CHECK_GL_ERROR
();

1020 
GLöt
 
võwp‹t
[4];

1021 
gl_
->
	`GëI¡egîv
(
GL_VIEWPORT
, 
võwp‹t
);

1022 
	`NVXIO_CHECK_GL_ERROR
();

1024 
gl_
->
	`Unif‹m2f
(1,

1025 
°©ic_ˇ°
<
GLÊﬂt
>(
võwp‹t
[0]),

1026 
°©ic_ˇ°
<
GLÊﬂt
>(
võwp‹t
[1]));

1028 
gl_
->
	`DøwAºays
(
GL_TRIANGLE_STRIP
, 0, 4);

1029 
	`NVXIO_CHECK_GL_ERROR
();

1032 
gl_
->
	`BödVîãxAºay
(0);

1033 
	`NVXIO_CHECK_GL_ERROR
();

1034 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 0);

1035 
	`NVXIO_CHECK_GL_ERROR
();

1036 
gl_
->
	`BödProgømPùñöe
(0);

1037 
	`NVXIO_CHECK_GL_ERROR
();

1038 
	}
}

1044 
	gnvidüio
::
Re˘™gÀRídî
::
	$Re˘™gÀRídî
() :

1045 
	`gl_
(
nuŒ±r
), 
	`vbo_
(0u), 
	`vao_
(0u), 
	$¥ogøm_
(0u)

1047 
	}
}

1049 
boﬁ
 
	gnvidüio
::
Re˘™gÀRídî
::
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
)

1051 
gl_
 = 
_gl
;

1055 
	ggl_
->
GíVîãxAºays
(1, &
vao_
);

1056 
NVXIO_CHECK_GL_ERROR
();

1060 
	ggl_
->
GíBuf„rs
(1, &
vbo_
);

1061 
NVXIO_CHECK_GL_ERROR
();

1063 
	ggl_
->
BödVîãxAºay
(
vao_
);

1064 
NVXIO_CHECK_GL_ERROR
();

1066 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
);

1067 
NVXIO_CHECK_GL_ERROR
();

1068 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, (
Ve˘‹2f
Ë* 4, 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

1069 
NVXIO_CHECK_GL_ERROR
();

1070 
	ggl_
->
VîãxAâribPoöãr
(0, 2, 
GL_FLOAT
, 
GL_FALSE
, 2 * (
GLÊﬂt
), 
nuŒ±r
);

1071 
NVXIO_CHECK_GL_ERROR
();

1072 
	ggl_
->
E«bÀVîãxAâribAºay
(0);

1073 
NVXIO_CHECK_GL_ERROR
();

1075 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

1076 
NVXIO_CHECK_GL_ERROR
();

1077 
	ggl_
->
BödVîãxAºay
(0);

1078 
NVXIO_CHECK_GL_ERROR
();

1082 
	g¥ogøm_
 = 
gl_
->
Cª©eProgøm
();

1083 
NVXIO_CHECK_GL_ERROR
();

1085 i‡(
	ggl_
->
IsProgøm
(
¥ogøm_
Ë=
GL_FALSE
)

1087 
NVXIO_PRINT
("RectangleRender:Érror creating shaderÖrogram");

1088  
	gÁl£
;

1091 i‡(!
compûeProgøm
(
gl_
, 
¥ogøm_
,

1092 
ª˘™gÀ_ªndî_shadî_vs_code
,

1093 
ª˘™gÀ_ªndî_shadî_fs_code
))

1094  
	gÁl£
;

1096  
	gåue
;

1099 
	gnvidüio
::
Re˘™gÀRídî
::
	$ªÀa£
()

1101 i‡(!
gl_
)

1104 
gl_
->
	`DñëeBuf„rs
(1, &
vbo_
);

1105 
	`NVXIO_CHECK_GL_ERROR
();

1106 
vbo_
 = 0;

1108 
gl_
->
	`DñëeVîãxAºays
(1, &
vao_
);

1109 
	`NVXIO_CHECK_GL_ERROR
();

1110 
vao_
 = 0;

1112 
gl_
->
	`DñëeProgøm
(
¥ogøm_
);

1113 
	`NVXIO_CHECK_GL_ERROR
();

1114 
¥ogøm_
 = 0;

1115 
	}
}

1117 
	gnvidüio
::
Re˘™gÀRídî
::
	$ªndî
(c⁄° 
nvxcu_ª˘™gÀ_t
 & 
loˇti⁄
, c⁄° 
Rídî
::
Dëe˘edObje˘StyÀ
& 
°yÀ
,

1118 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀ
)

1120 
	`upd©eAºay
(
loˇti⁄
, 
width
, 
height
, 
sˇÀ
);

1121 
	`ªndîAºay
(
°yÀ
);

1122 
	}
}

1124 
	gnvidüio
::
Re˘™gÀRídî
::
	$upd©eAºay
(c⁄° 
nvxcu_ª˘™gÀ_t
 & 
loˇti⁄
, 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀ
)

1126 
GLÊﬂt
 
widthSˇÀ
 = 2.0‡* 
sˇÀ
 / (
width
 - 1);

1127 
GLÊﬂt
 
heightSˇÀ
 = 2.0‡* 
sˇÀ
 / (
height
 - 1);

1130 
GLÊﬂt
 
°¨t_x
 = 
loˇti⁄
.°¨t_x * 
widthSˇÀ
 - 1;

1131 
GLÊﬂt
 
íd_x
 = 
loˇti⁄
.íd_x * 
widthSˇÀ
 - 1;

1132 
GLÊﬂt
 
°¨t_y
 = 1 - 
loˇti⁄
.°¨t_y * 
heightSˇÀ
;

1133 
GLÊﬂt
 
íd_y
 = 1 - 
loˇti⁄
.íd_y * 
heightSˇÀ
;

1136 
Ve˘‹2f
 
ve˘‹s
[4] =

1138 
	`Ve˘‹2f
(
°¨t_x
, 
°¨t_y
),

1139 
	`Ve˘‹2f
(
íd_x
, 
°¨t_y
),

1140 
	`Ve˘‹2f
(
°¨t_x
, 
íd_y
),

1141 
	`Ve˘‹2f
(
íd_x
, 
íd_y
),

1144 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
);

1145 
	`NVXIO_CHECK_GL_ERROR
();

1146 
gl_
->
	`Buf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, (
ve˘‹s
), vectors);

1147 
	`NVXIO_CHECK_GL_ERROR
();

1148 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

1149 
	`NVXIO_CHECK_GL_ERROR
();

1150 
	}
}

1152 
	gnvidüio
::
Re˘™gÀRídî
::
	$ªndîAºay
(c⁄° 
Rídî
::
Dëe˘edObje˘StyÀ
& 
°yÀ
)

1154 
gl_
->
	`U£Progøm
(
¥ogøm_
);

1155 
	`NVXIO_CHECK_GL_ERROR
();

1157 
gl_
->
	`BödVîãxAºay
(
vao_
);

1158 
	`NVXIO_CHECK_GL_ERROR
();

1160 
gl_
->
	`Unif‹m4f
(0,

1161 
°yÀ
.
cﬁ‹
[0] / 255.0f,

1162 
°yÀ
.
cﬁ‹
[1] / 255.0f,

1163 
°yÀ
.
cﬁ‹
[2] / 255.0f,

1164 
°yÀ
.
cﬁ‹
[3] / 710.0f);

1165 
	`NVXIO_CHECK_GL_ERROR
();

1167 
gl_
->
	`DøwAºays
(
GL_TRIANGLE_STRIP
, 0, 4);

1168 
	`NVXIO_CHECK_GL_ERROR
();

1171 
gl_
->
	`BödVîãxAºay
(0);

1172 
	`NVXIO_CHECK_GL_ERROR
();

1173 
gl_
->
	`U£Progøm
(0);

1174 
	`NVXIO_CHECK_GL_ERROR
();

1175 
	}
}

1181 
	gnvidüio
::
FótuªsRídî
::
	$FótuªsRídî
() :

1182 
	`gl_
(
nuŒ±r
), 
	`bufC≠acôy_
(1000), 
	`vbo_
(0), 
	`vboStyÀs_
(0), 
	`vao_
(0),

1183 
	`ªs_
(
nuŒ±r
), 
	`ªsStyÀs_
(nullptr),

1184 
	`ho°_ªs_
(
nuŒ±r
), 
	`ho°_ªs_°yÀs_
(nullptr),

1185 
	`pùñöe_
(0), 
	`vîãxShadîPoöts_
(0), 
	`vîãxShadîKeyPoöts_
(0),

1186 
	`vîãxShadîPoötsPîFótuª_
(0), 
	`vîãxShadîKeyPoötsPîFótuª_
(0),

1187 
	`‰agmítShadî_
(0), 
	`‰agmítShadîPîFótuª_
(0),

1188 
	`cuºítFótuªTy≥_
(
NVXCU_TYPE_RECTANGLE
), 
	`≥rFótuªStyÀ_
(
Ál£
),

1189 
	$mu…iGPUI¡î›_
(
Ál£
)

1191 
	}
}

1193 
boﬁ
 
	gnvidüio
::
FótuªsRídî
::
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
)

1195 
gl_
 = 
_gl
;

1199 
	ggl_
->
GíVîãxAºays
(1, &
vao_
);

1200 
NVXIO_CHECK_GL_ERROR
();

1204 
	ggl_
->
GíBuf„rs
(1, &
vbo_
);

1205 
NVXIO_CHECK_GL_ERROR
();

1207 
	ggl_
->
GíBuf„rs
(1, &
vboStyÀs_
);

1208 
NVXIO_CHECK_GL_ERROR
();

1212 
	ggl_
->
BödVîãxAºay
(
vao_
);

1213 
NVXIO_CHECK_GL_ERROR
();

1214 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
vboStyÀs_
);

1215 
NVXIO_CHECK_GL_ERROR
();

1216 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, 
bufC≠acôy_
 * (
Rídî
::
FótuªStyÀ
), 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

1217 
NVXIO_CHECK_GL_ERROR
();

1218 
	ggl_
->
VîãxAâribPoöãr
(2, 4, 
GL_UNSIGNED_BYTE
, 
GL_TRUE
, 
°©ic_ˇ°
<
GLsizei
>((
Rídî
::
FótuªStyÀ
)),

1219 (c⁄° 
GLvoid
 *)
off£tof
(
Rídî
::
FótuªStyÀ
, 
cﬁ‹
));

1220 
	ggl_
->
VîãxAâribPoöãr
(3, 1, 
GL_FLOAT
, 
GL_FALSE
, 
°©ic_ˇ°
<
GLsizei
>((
Rídî
::
FótuªStyÀ
)),

1221 (c⁄° 
GLvoid
 *)
off£tof
(
Rídî
::
FótuªStyÀ
, 
ødius
));

1222 
NVXIO_CHECK_GL_ERROR
();

1223 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

1224 
NVXIO_CHECK_GL_ERROR
();

1225 
	ggl_
->
BödVîãxAºay
(0);

1226 
NVXIO_CHECK_GL_ERROR
();

1230 
	ggl_
->
GíProgømPùñöes
(1, &
pùñöe_
);

1231 
NVXIO_CHECK_GL_ERROR
();

1233 
	gvîãxShadîPoöts_
 = ::
¸óãSï¨abÀProgøm
(
gl_
,

1234 
GL_VERTEX_SHADER
,

1235 
„©uª_ªndî_shadî_vs_code
,

1239 
	gvîãxShadîPoötsPîFótuª_
 = ::
¸óãSï¨abÀProgøm
(
gl_
,

1240 
GL_VERTEX_SHADER
,

1241 
„©uª_ªndî_shadî_vs_code
,

1246 
	gvîãxShadîKeyPoöts_
 = ::
¸óãSï¨abÀProgøm
(
gl_
,

1247 
GL_VERTEX_SHADER
,

1248 
„©uª_ªndî_shadî_vs_code
,

1252 
	gvîãxShadîKeyPoötsPîFótuª_
 = ::
¸óãSï¨abÀProgøm
(
gl_
,

1253 
GL_VERTEX_SHADER
,

1254 
„©uª_ªndî_shadî_vs_code
,

1259 
	g‰agmítShadî_
 = ::
¸óãSï¨abÀProgøm
(
gl_
,

1260 
GL_FRAGMENT_SHADER
,

1261 
„©uª_ªndî_shadî_fs_code
);

1263 
	g‰agmítShadîPîFótuª_
 = ::
¸óãSï¨abÀProgøm
(
gl_
,

1264 
GL_FRAGMENT_SHADER
,

1265 
„©uª_ªndî_shadî_fs_code
,

1268 
	gmu…iGPUI¡î›_
 = 
dëe˘Mu…iGPUI¡î›
();

1270 i‡(
	gmu…iGPUI¡î›_
)

1272 
	gho°_ªs_°yÀs_
 = 
√w
 
GLubyã
[
bufC≠acôy_
 * (
nvidüio
::
Rídî
::
FótuªStyÀ
)];

1277 
NVXIO_CUDA_SAFE_CALL
–
cudaGøphicsGLRegi°îBuf„r
(&
ªsStyÀs_
, 
vboStyÀs_
, 
cudaGøphicsM≠FœgsWrôeDisˇrd
) );

1280  
	gåue
;

1283 
	gnvidüio
::
FótuªsRídî
::
	$ªÀa£
()

1285 i‡(!
gl_
)

1288 
gl_
->
	`DñëeBuf„rs
(1, &
vbo_
);

1289 
	`NVXIO_CHECK_GL_ERROR
();

1290 
vbo_
 = 0;

1292 
gl_
->
	`DñëeBuf„rs
(1, &
vboStyÀs_
);

1293 
	`NVXIO_CHECK_GL_ERROR
();

1294 
vboStyÀs_
 = 0;

1296 
gl_
->
	`DñëeVîãxAºays
(1, &
vao_
);

1297 
	`NVXIO_CHECK_GL_ERROR
();

1298 
vao_
 = 0;

1300 i‡(
mu…iGPUI¡î›_
)

1302 
dñëe
 [] 
ho°_ªs_
;

1303 
dñëe
 [] 
ho°_ªs_°yÀs_
;

1308 i‡(
ªs_
)

1310 
	`cudaGøphicsUƒegi°îResour˚
(
ªs_
);

1311 
ªs_
 = 0;

1314 i‡(
ªsStyÀs_
)

1316 
	`cudaGøphicsUƒegi°îResour˚
(
ªsStyÀs_
);

1317 
ªsStyÀs_
 = 0;

1323 
gl_
->
	`DñëeProgømPùñöes
(1, &
pùñöe_
);

1324 
	`NVXIO_CHECK_GL_ERROR
();

1328 
GLuöt
 * 
shadîs
[] = { &
vîãxShadîKeyPoötsPîFótuª_
,

1329 &
vîãxShadîPoöts_
,

1330 &
vîãxShadîKeyPoöts_
,

1331 &
vîãxShadîPoötsPîFótuª_
,

1332 &
vîãxShadîKeyPoötsPîFótuª_
,

1333 &
‰agmítShadî_
,

1334 &
‰agmítShadîPîFótuª_


1337 
vx_size
 
i
 = 0; i < 
ovxio
::
	`dimOf
(
shadîs
); ++i)

1339 
gl_
->
	`DñëeProgøm
(*(
shadîs
[
i
]));

1340 
	`NVXIO_CHECK_GL_ERROR
();

1341 *(
shadîs
[
i
]) = 0;

1343 
	}
}

1345 
	gnvidüio
::
FótuªsRídî
::
	$ªndî
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄° 
nvidüio
::
Rídî
::
FótuªStyÀ
& 
°yÀ
,

1346 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀ
)

1349 
≥rFótuªStyÀ_
 = 
Ál£
;

1351 
uöt32_t
 
°¨t_x
 = 0u; sèπ_x < 
loˇti⁄
.
num_ôems
; sèπ_x +
bufC≠acôy_
)

1353 
uöt32_t
 
íd_x
 = 
°d
::
	`mö
(
°¨t_x
 + 
bufC≠acôy_
, 
loˇti⁄
.
num_ôems
);

1354 
	`upd©eAºay
(
°¨t_x
, 
íd_x
, 
loˇti⁄
, 
	`¨øy_t
());

1355 
	`ªndîAºay
(
íd_x
 - 
°¨t_x
, 
width
, 
height
, 
sˇÀ
, 
°yÀ
);

1357 
	}
}

1359 
	gnvidüio
::
FótuªsRídî
::
	$ªndî
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄°áºay_à& 
°yÀs
,

1360 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀ
)

1362 
	`NVXIO_ASSERT
(
loˇti⁄
.
num_ôems
 =
°yÀs
.num_items);

1365 
≥rFótuªStyÀ_
 = 
åue
;

1367 
uöt32_t
 
°¨t_x
 = 0; sèπ_x < 
loˇti⁄
.
num_ôems
; sèπ_x +
bufC≠acôy_
)

1369 
uöt32_t
 
íd_x
 = 
°d
::
	`mö
(
°¨t_x
 + 
bufC≠acôy_
, 
loˇti⁄
.
num_ôems
);

1370 
	`upd©eAºay
(
°¨t_x
, 
íd_x
, 
loˇti⁄
, 
°yÀs
);

1371 
	`ªndîAºay
(
íd_x
 - 
°¨t_x
, 
width
, 
height
, 
sˇÀ
, 
Rídî
::
	`FótuªStyÀ
());

1374 
	}
}

1377 
	gnvidüio
::
FótuªsRídî
::
	$upd©eAºay
(
uöt32_t
 
°¨t_x
, uöt32_à
íd_x
,

1378 c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄°áºay_à& 
°yÀs
)

1380 
cudaSåóm_t
 
°ªam
 = 
nuŒ±r
;

1382 
nvxcu_¨øy_ôem_ty≥_e
 
ôem_ty≥
 = 
loˇti⁄
.item_type;

1383 
	`NVXIO_ASSERT
–(
ôem_ty≥
 =
NVXCU_TYPE_KEYPOINT
Ë|| (ôem_ty≥ =
NVXCU_TYPE_POINT2F
Ë|| (ôem_ty≥ =
NVXCU_TYPE_KEYPOINTF
) );

1385 
size_t
 
ñemSize
 = 
	`gëIãmSize
(
ôem_ty≥
);

1389 i‡(
cuºítFótuªTy≥_
 !
ôem_ty≥
)

1391 
gl_
->
	`BödVîãxAºay
(
vao_
);

1392 
	`NVXIO_CHECK_GL_ERROR
();

1393 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
);

1394 
	`NVXIO_CHECK_GL_ERROR
();

1395 
gl_
->
	`Buf„rD©a
(
GL_ARRAY_BUFFER
, 
bufC≠acôy_
 * 
ñemSize
, 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

1396 
	`NVXIO_CHECK_GL_ERROR
();

1400 i‡(
ôem_ty≥
 =
NVXCU_TYPE_POINT2F
)

1402 
gl_
->
	`VîãxAâribPoöãr
(0, 2, 
GL_FLOAT
, 
GL_FALSE
, 
°©ic_ˇ°
<
GLsizei
>(
ñemSize
),

1403 (c⁄° 
GLvoid
 *)
	`off£tof
(
nvxcu_poöt2f_t
, 
x
));

1404 
	`NVXIO_CHECK_GL_ERROR
();

1406 i‡(
ôem_ty≥
 =
NVXCU_TYPE_KEYPOINT
)

1408 
gl_
->
	`VîãxAâribPoöãr
(0, 2, 
GL_INT
, 
GL_FALSE
, 
°©ic_ˇ°
<
GLsizei
>(
ñemSize
),

1409 (c⁄° 
GLvoid
 *)
	`off£tof
(
nvxcu_keypoöt_t
, 
x
));

1410 
	`NVXIO_CHECK_GL_ERROR
();

1414 
gl_
->
	`VîãxAâribPoöãr
(0, 2, 
GL_FLOAT
, 
GL_FALSE
, 
°©ic_ˇ°
<
GLsizei
>(
ñemSize
),

1415 (c⁄° 
GLvoid
 *)
	`off£tof
(
nvxcu_keypoötf_t
, 
x
));

1416 
	`NVXIO_CHECK_GL_ERROR
();

1419 i‡(!
≥rFótuªStyÀ_
)

1421 
gl_
->
	`VîãxAâribDivis‹
(0, 1);

1422 
	`NVXIO_CHECK_GL_ERROR
();

1425 
gl_
->
	`E«bÀVîãxAâribAºay
(0);

1426 
	`NVXIO_CHECK_GL_ERROR
();

1430 i‡(
ôem_ty≥
 !
NVXCU_TYPE_POINT2F
)

1432 i‡(
ôem_ty≥
 =
NVXCU_TYPE_KEYPOINT
)

1434 
gl_
->
	`VîãxAâribPoöãr
(1, 1, 
GL_INT
, 
GL_FALSE
, 
°©ic_ˇ°
<
GLsizei
>(
ñemSize
),

1435 (c⁄° 
GLvoid
 *)
	`off£tof
(
nvxcu_keypoöt_t
, 
åackög_°©us
));

1436 
	`NVXIO_CHECK_GL_ERROR
();

1440 
gl_
->
	`VîãxAâribPoöãr
(1, 1, 
GL_INT
, 
GL_FALSE
, 
°©ic_ˇ°
<
GLsizei
>(
ñemSize
),

1441 (c⁄° 
GLvoid
 *)
	`off£tof
(
nvxcu_keypoötf_t
, 
åackög_°©us
));

1442 
	`NVXIO_CHECK_GL_ERROR
();

1445 i‡(!
≥rFótuªStyÀ_
)

1447 
gl_
->
	`VîãxAâribDivis‹
(1, 1);

1448 
	`NVXIO_CHECK_GL_ERROR
();

1451 
gl_
->
	`E«bÀVîãxAâribAºay
(1);

1452 
	`NVXIO_CHECK_GL_ERROR
();

1456 
gl_
->
	`DißbÀVîãxAâribAºay
(1);

1457 
	`NVXIO_CHECK_GL_ERROR
();

1460 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

1461 
	`NVXIO_CHECK_GL_ERROR
();

1462 
gl_
->
	`BödVîãxAºay
(0);

1463 
	`NVXIO_CHECK_GL_ERROR
();

1465 i‡(
mu…iGPUI¡î›_
)

1467 
dñëe
 [] 
ho°_ªs_
;

1468 
ho°_ªs_
 = 
√w
 
GLubyã
[
bufC≠acôy_
 * 
ñemSize
];

1472 i‡(
ªs_
)

1475 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsUƒegi°îResour˚
(
ªs_
) );

1476 
ªs_
 = 
nuŒ±r
;

1478 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsGLRegi°îBuf„r
(&
ªs_
, 
vbo_
, 
cudaGøphicsM≠FœgsWrôeDisˇrd
) );

1481 
cuºítFótuªTy≥_
 = 
ôem_ty≥
;

1484 i‡(
mu…iGPUI¡î›_
)

1486 * 
§c_±r
 = (*)((
uöt8_t
 *)
loˇti⁄
.
±r
 + 
ñemSize
 * 
°¨t_x
);

1488 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝yAsync
(
ho°_ªs_
, 
§c_±r
, (
íd_x
 - 
°¨t_x
Ë* 
ñemSize
,

1489 
cudaMem˝yDevi˚ToHo°
, 
°ªam
) );

1491 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

1493 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
);

1494 
	`NVXIO_CHECK_GL_ERROR
();

1495 
gl_
->
	`Buf„rD©a
(
GL_ARRAY_BUFFER
, (
íd_x
 - 
°¨t_x
Ë* 
ñemSize
, 
ho°_ªs_
, 
GL_DYNAMIC_DRAW
);

1496 
	`NVXIO_CHECK_GL_ERROR
();

1497 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

1498 
	`NVXIO_CHECK_GL_ERROR
();

1502 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsM≠Resour˚s
(1, &
ªs_
, 
°ªam
) );

1504 * 
d°_±r
 = 
nuŒ±r
, * 
§c_±r
 = (*)((
uöt8_t
 *)
loˇti⁄
.
±r
 + 
ñemSize
 * 
°¨t_x
);

1505 
size_t
 
size
 = 0ul;

1506 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsResour˚GëM≠≥dPoöãr
(&
d°_±r
, &
size
, 
ªs_
) );

1510 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝yAsync
(
d°_±r
, 
§c_±r
, (
íd_x
 - 
°¨t_x
Ë* 
ñemSize
,

1511 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
) );

1513 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsUnm≠Resour˚s
(1, &
ªs_
, 
°ªam
) );

1515 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

1520 i‡(
≥rFótuªStyÀ_
)

1522 
	`NVXIO_ASSERT
(
°yÀs
.
±r
);

1527 i‡(
mu…iGPUI¡î›_
)

1529 * 
°yÀs_±r
 = (*)((
uöt8_t
 *)
°yÀs
.
±r
 + (
Rídî
::
FótuªStyÀ
Ë* 
°¨t_x
);

1531 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝yAsync
(
ho°_ªs_°yÀs_
, 
°yÀs_±r
, (
íd_x
 - 
°¨t_x
Ë* (
nvidüio
::
Rídî
::
FótuªStyÀ
),

1532 
cudaMem˝yDevi˚ToHo°
, 
°ªam
) );

1533 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

1535 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 
vboStyÀs_
);

1536 
	`NVXIO_CHECK_GL_ERROR
();

1537 
gl_
->
	`Buf„rD©a
(
GL_ARRAY_BUFFER
, (
íd_x
 - 
°¨t_x
Ë* (
Rídî
::
FótuªStyÀ
), 
ho°_ªs_°yÀs_
, 
GL_DYNAMIC_DRAW
);

1538 
	`NVXIO_CHECK_GL_ERROR
();

1539 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

1540 
	`NVXIO_CHECK_GL_ERROR
();

1544 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsM≠Resour˚s
(1, &
ªsStyÀs_
, 
°ªam
) );

1547 * 
d°_°yÀs_±r
 = 
nuŒ±r
, * 
°yÀs_±r
 = (*)((
uöt8_t
 *)
°yÀs
.
±r
 +

1548 (
Rídî
::
FótuªStyÀ
Ë* 
°¨t_x
);

1549 
size_t
 
°yÀs_size
 = 0ul;

1550 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsResour˚GëM≠≥dPoöãr
(&
d°_°yÀs_±r
, &
°yÀs_size
, 
ªsStyÀs_
) );

1552 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝yAsync
(
d°_°yÀs_±r
, 
°yÀs_±r
, (
íd_x
 - 
°¨t_x
Ë* (
nvidüio
::
Rídî
::
FótuªStyÀ
),

1553 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
) );

1555 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsUnm≠Resour˚s
(1, &
ªsStyÀs_
, 
°ªam
) );

1557 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

1561 
gl_
->
	`BödVîãxAºay
(
vao_
);

1562 
	`NVXIO_CHECK_GL_ERROR
();

1563 
gl_
->
	`E«bÀVîãxAâribAºay
(2);

1564 
	`NVXIO_CHECK_GL_ERROR
();

1565 
gl_
->
	`E«bÀVîãxAâribAºay
(3);

1566 
	`NVXIO_CHECK_GL_ERROR
();

1567 
gl_
->
	`BödVîãxAºay
(0);

1568 
	`NVXIO_CHECK_GL_ERROR
();

1574 
gl_
->
	`BödVîãxAºay
(
vao_
);

1575 
	`NVXIO_CHECK_GL_ERROR
();

1576 
gl_
->
	`DißbÀVîãxAâribAºay
(2);

1577 
	`NVXIO_CHECK_GL_ERROR
();

1578 
gl_
->
	`DißbÀVîãxAâribAºay
(3);

1579 
	`NVXIO_CHECK_GL_ERROR
();

1580 
gl_
->
	`BödVîãxAºay
(0);

1581 
	`NVXIO_CHECK_GL_ERROR
();

1583 
	}
}

1585 
	gnvidüio
::
FótuªsRídî
::
	$ªndîAºay
(
uöt32_t
 
num_ôems
, uöt32_à
width
, uöt32_à
height
, 
sˇÀ
,

1586 c⁄° 
nvidüio
::
Rídî
::
FótuªStyÀ
 & 
°yÀ
)

1588 #ifde‡
GL_ALIASED_POINT_SIZE_RANGE


1589 
GLÊﬂt
 
poötSizes
[2];

1591 
gl_
->
	`GëFlﬂtv
(
GL_ALIASED_POINT_SIZE_RANGE
, 
poötSizes
);

1592 
	`NVXIO_CHECK_GL_ERROR
();

1594 i‡((
poötSizes
[0] > 
°yÀ
.
ødius
) ||

1595 (
°yÀ
.
ødius
 > 
poötSizes
[1]))

1597 
	`NVXIO_PRINT
("The specified feature size '%f' is clippedÅo fit intoÅhe [%f, %f] interval.\n"

1598 "It'†≥rf‹medáutom©iˇŒy by O≥nGL.", 
°yÀ
.
ødius
, 
poötSizes
[0],ÖointSizes[1]);

1602 #i‚de‡
USE_GLES


1603 
GLboﬁón
 
¥ogømPoötSize
 = 
GL_FALSE
;

1604 
gl_
->
	`GëBoﬁónv
(
GL_VERTEX_PROGRAM_POINT_SIZE
, &
¥ogømPoötSize
);

1605 
	`NVXIO_CHECK_GL_ERROR
();

1607 i‡(
¥ogømPoötSize
 =
GL_FALSE
)

1609 
gl_
->
	`E«bÀ
(
GL_VERTEX_PROGRAM_POINT_SIZE
);

1610 
	`NVXIO_CHECK_GL_ERROR
();

1615 
GLuöt
 
vîãxShadî
 = 0, 
‰agmítShadî
 = 0;

1617 i‡(
cuºítFótuªTy≥_
 =
NVXCU_TYPE_POINT2F
)

1618 
vîãxShadî
 = 
≥rFótuªStyÀ_
 ? 
vîãxShadîPoötsPîFótuª_
 : 
vîãxShadîPoöts_
;

1620 
vîãxShadî
 = 
≥rFótuªStyÀ_
 ? 
vîãxShadîKeyPoötsPîFótuª_
 : 
vîãxShadîKeyPoöts_
;

1622 
‰agmítShadî
 = 
≥rFótuªStyÀ_
 ? 
‰agmítShadîPîFótuª_
 : 
‰agmítShadî_
;

1624 
gl_
->
	`U£ProgømSèges
(
pùñöe_
, 
GL_VERTEX_SHADER_BIT
, 
vîãxShadî
);

1625 
	`NVXIO_CHECK_GL_ERROR
();

1626 
gl_
->
	`U£ProgømSèges
(
pùñöe_
, 
GL_FRAGMENT_SHADER_BIT
, 
‰agmítShadî
);

1627 
	`NVXIO_CHECK_GL_ERROR
();

1631 
gl_
->
	`BödProgømPùñöe
(
pùñöe_
);

1632 
	`NVXIO_CHECK_GL_ERROR
();

1634 
gl_
->
	`BödVîãxAºay
(
vao_
);

1635 
	`NVXIO_CHECK_GL_ERROR
();

1637 
GLÊﬂt
 
sˇÀR©ioX
 = 2.0‡* 
sˇÀ
 / (
width
 - 1);

1638 
GLÊﬂt
 
sˇÀR©ioY
 = 2.0‡* 
sˇÀ
 / (
height
 - 1);

1640 
gl_
->
	`ProgømUnif‹m2f
(
vîãxShadî
, 0,

1641 
sˇÀR©ioX
,

1642 
sˇÀR©ioY
);

1643 
	`NVXIO_CHECK_GL_ERROR
();

1645 i‡(!
≥rFótuªStyÀ_
)

1647 
gl_
->
	`ProgømUnif‹m1f
(
vîãxShadî
,

1648 1, 
°yÀ
.
ødius
);

1649 
	`NVXIO_CHECK_GL_ERROR
();

1651 
gl_
->
	`ProgømUnif‹m4f
(
‰agmítShadî
, 0,

1652 
°yÀ
.
cﬁ‹
[0] / 255.0f,

1653 
°yÀ
.
cﬁ‹
[1] / 255.0f,

1654 
°yÀ
.
cﬁ‹
[2] / 255.0f,

1655 
°yÀ
.
cﬁ‹
[3] / 255.0f);

1656 
	`NVXIO_CHECK_GL_ERROR
();

1659 
gl_
->
	`DøwAºaysIn°™˚d
(
GL_POINTS
, 0, 1, 
°©ic_ˇ°
<
GLsizei
>(
num_ôems
));

1660 
	`NVXIO_CHECK_GL_ERROR
();

1664 
gl_
->
	`DøwAºays
(
GL_POINTS
, 0, 
°©ic_ˇ°
<
GLsizei
>(
num_ôems
));

1665 
	`NVXIO_CHECK_GL_ERROR
();

1669 
gl_
->
	`BödVîãxAºay
(0);

1670 
	`NVXIO_CHECK_GL_ERROR
();

1671 
gl_
->
	`BödProgømPùñöe
(0);

1672 
	`NVXIO_CHECK_GL_ERROR
();

1674 #i‚de‡
USE_GLES


1675 i‡(
¥ogømPoötSize
 =
GL_FALSE
)

1677 
gl_
->
	`DißbÀ
(
GL_VERTEX_PROGRAM_POINT_SIZE
);

1678 
	`NVXIO_CHECK_GL_ERROR
();

1681 
	}
}

1687 
	gnvidüio
::
LöesRídî
::
	$LöesRídî
() :

1688 
	`gl_
(
nuŒ±r
), 
	`ªs_
“uŒ±r), 
	`ho°_±r_
“uŒ±r), 
	`bufC≠acôy_
(500u), 
	`¥ogøm_
(0u), 
	`isCPU
(
GL_FALSE
),

1689 
	$mu…iGPUI¡î›_
(
Ál£
)

1691 
°d
::
	`mem£t
(
vbo_
, 0u, (vbo_));

1692 
°d
::
	`mem£t
(
vao_
, 0u, (vao_));

1693 
	}
}

1695 
boﬁ
 
	gnvidüio
::
LöesRídî
::
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
)

1697 
gl_
 = 
_gl
;

1701 
	ggl_
->
GíVîãxAºays
(2, 
vao_
);

1702 
NVXIO_CHECK_GL_ERROR
();

1704 
	ggl_
->
GíBuf„rs
(2, 
vbo_
);

1705 
NVXIO_CHECK_GL_ERROR
();

1709 
vx_size
 
	gi
 = 0; i < 
	govxio
::
dimOf
(
vbo_
); ++i)

1711 
	ggl_
->
BödVîãxAºay
(
vao_
[
i
]);

1712 
NVXIO_CHECK_GL_ERROR
();

1713 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
[
i
]);

1714 
NVXIO_CHECK_GL_ERROR
();

1716 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, 
bufC≠acôy_
 * 4 * (), 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

1717 
NVXIO_CHECK_GL_ERROR
();

1718 
	ggl_
->
VîãxAâribPoöãr
(0, 2, 
GL_FLOAT
, 
GL_FALSE
, 2 * (), 
nuŒ±r
);

1719 
NVXIO_CHECK_GL_ERROR
();

1720 
	ggl_
->
E«bÀVîãxAâribAºay
(0);

1721 
NVXIO_CHECK_GL_ERROR
();

1724 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

1725 
NVXIO_CHECK_GL_ERROR
();

1726 
	ggl_
->
BödVîãxAºay
(0);

1727 
NVXIO_CHECK_GL_ERROR
();

1731 
	g¥ogøm_
 = 
gl_
->
Cª©eProgøm
();

1732 
NVXIO_CHECK_GL_ERROR
();

1734 i‡(
	ggl_
->
IsProgøm
(
¥ogøm_
Ë=
GL_FALSE
)

1736 
NVXIO_PRINT
("LinesRender:Érror creating shaderÖrogram");

1737  
	gÁl£
;

1740 i‡(!
compûeProgøm
(
gl_
, 
¥ogøm_
,

1741 
löe_ªndî_shadî_vs_code
,

1742 
löe_ªndî_shadî_fs_code
))

1743  
	gÁl£
;

1745 
	gmu…iGPUI¡î›_
 = 
dëe˘Mu…iGPUI¡î›
();

1747 i‡(
	gmu…iGPUI¡î›_
)

1749 
	gho°_±r_
 = 
√w
 
GLubyã
[
bufC≠acôy_
 * 4 * ()];

1754 
cudaEº‹_t
 
	gîr
 = 
cudaGøphicsGLRegi°îBuf„r
(&
ªs_
, 
vbo_
[0], 
cudaGøphicsM≠FœgsWrôeDisˇrd
);

1755 i‡(
	gîr
 !
cudaSuc˚ss
)

1757 
NVXIO_PRINT
("LöesRídîÉº‹: %s", 
cudaGëEº‹Såög
(
îr
));

1758  
	gÁl£
;

1762  
	gåue
;

1765 
	gnvidüio
::
LöesRídî
::
	$ªÀa£
()

1767 i‡(!
gl_
)

1770 
gl_
->
	`DñëeBuf„rs
(2, 
vbo_
);

1771 
	`NVXIO_CHECK_GL_ERROR
();

1772 
°d
::
	`mem£t
(
vbo_
, 0, (vbo_));

1774 
gl_
->
	`DñëeVîãxAºays
(2, 
vao_
);

1775 
	`NVXIO_CHECK_GL_ERROR
();

1776 
°d
::
	`mem£t
(
vao_
, 0, (vao_));

1778 i‡(
mu…iGPUI¡î›_
)

1780 
dñëe
 [] 
ho°_±r_
;

1782 i‡(
ªs_
)

1784 
	`cudaGøphicsUƒegi°îResour˚
(
ªs_
);

1785 
ªs_
 = 
nuŒ±r
;

1788 
gl_
->
	`DñëeProgøm
(
¥ogøm_
);

1789 
	`NVXIO_CHECK_GL_ERROR
();

1790 
¥ogøm_
 = 0u;

1791 
	}
}

1793 
	gnvidüio
::
LöesRídî
::
	$ªndî
(c⁄° 
¨øy_t
 & 
löes
, c⁄° 
nvidüio
::
Rídî
::
LöeStyÀ
& 
°yÀ
,

1794 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀ
)

1796 
isCPU
 = 
GL_FALSE
;

1798 
uöt32_t
 
°¨t_x
 = 0u; sèπ_x < 
löes
.
num_ôems
; sèπ_x +
bufC≠acôy_
)

1800 
uöt32_t
 
íd_x
 = 
°d
::
	`mö
(
°¨t_x
 + 
bufC≠acôy_
, 
löes
.
num_ôems
);

1801 
	`upd©eAºay
(
°¨t_x
, 
íd_x
, 
löes
);

1802 
	`ªndîAºay
(
íd_x
 - 
°¨t_x
, 
°yÀ
, 
width
, 
height
, 
sˇÀ
);

1804 
	}
}

1806 
	gnvidüio
::
LöesRídî
::
ªndî
(c⁄° 
°d
::
ve˘‹
<
nvxcu_poöt4f_t
> & 
löes
, c⁄° 
nvidüio
::
Rídî
::
LöeStyÀ
& 
°yÀ
,

1807 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀ
)

1809 
	gisCPU
 = 
GL_TRUE
;

1811 
uöt32_t
 
	gnum_ôems
 = 
°©ic_ˇ°
<uöt32_t>(
löes
.
size
());

1813 
uöt32_t
 
	g°¨t_x
 = 0u; sèπ_x < 
	gnum_ôems
; sèπ_x +
bufC≠acôy_
)

1815 
uöt32_t
 
íd_x
 = 
°d
::
mö
(
°¨t_x
 + 
bufC≠acôy_
, 
num_ôems
);

1816 
upd©eAºay
(
°¨t_x
, 
íd_x
, 
löes
);

1817 
ªndîAºay
(
íd_x
 - 
°¨t_x
, 
°yÀ
, 
width
, 
height
, 
sˇÀ
);

1821 
	gnvidüio
::
LöesRídî
::
	$upd©eAºay
(
uöt32_t
 
°¨t_x
, uöt32_à
íd_x
, c⁄° 
¨øy_t
 & 
löes
)

1823 
cudaSåóm_t
 
°ªam
 = 
nuŒ±r
;

1824 * 
§c_±r
 = (*)((
uöt8_t
 *)
löes
.
±r
 + (
nvxcu_poöt4f_t
Ë* 
°¨t_x
);

1826 
	`NVXIO_ASSERT
–
löes
.
ôem_ty≥
 =
NVXCU_TYPE_POINT4F
 );

1828 i‡(
mu…iGPUI¡î›_
)

1830 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝yAsync
(
ho°_±r_
, 
§c_±r
, (
íd_x
 - 
°¨t_x
Ë* (
nvxcu_poöt4f_t
),

1831 
cudaMem˝yDevi˚ToHo°
, 
°ªam
) );

1833 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

1835 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
[0]);

1836 
	`NVXIO_CHECK_GL_ERROR
();

1837 
gl_
->
	`Buf„rD©a
(
GL_ARRAY_BUFFER
, (
íd_x
 - 
°¨t_x
Ë* (
nvxcu_poöt4f_t
), 
ho°_±r_
, 
GL_DYNAMIC_DRAW
);

1838 
	`NVXIO_CHECK_GL_ERROR
();

1839 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

1840 
	`NVXIO_CHECK_GL_ERROR
();

1844 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsM≠Resour˚s
(1, &
ªs_
, 
°ªam
) );

1846 * 
d°_±r
 = 
nuŒ±r
;

1847 
size_t
 
size
 = 0;

1849 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsResour˚GëM≠≥dPoöãr
(&
d°_±r
, &
size
, 
ªs_
) );

1851 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝yAsync
(
d°_±r
, 
§c_±r
, (
íd_x
 - 
°¨t_x
Ë* (
nvxcu_poöt4f_t
),

1852 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
) );

1854 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsUnm≠Resour˚s
(1, &
ªs_
, 
°ªam
) );

1856 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

1858 
	}
}

1860 
	gnvidüio
::
LöesRídî
::
upd©eAºay
(
uöt32_t
 
°¨t_x
, uöt32_à
íd_x
, c⁄° 
°d
::
ve˘‹
<
nvxcu_poöt4f_t
> & 
löes
)

1862 
gl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
[1]);

1863 
NVXIO_CHECK_GL_ERROR
();

1864 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, (
íd_x
 - 
°¨t_x
Ë* (
nvxcu_poöt4f_t
), &
löes
[°¨t_x], 
GL_DYNAMIC_DRAW
);

1865 
NVXIO_CHECK_GL_ERROR
();

1866 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

1867 
NVXIO_CHECK_GL_ERROR
();

1870 
	gnvidüio
::
LöesRídî
::
	$ªndîAºay
(
uöt32_t
 
num_ôems
, c⁄° 
nvidüio
::
Rídî
::
LöeStyÀ
 & 
°yÀ
,

1871 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀ
)

1873 
LöesRídîögRuÀs
 
	`ruÀs
(
gl_
, 
°yÀ
.
thick√ss
);

1874 ()
ruÀs
;

1876 
gl_
->
	`U£Progøm
(
¥ogøm_
);

1877 
	`NVXIO_CHECK_GL_ERROR
();

1879 
gl_
->
	`BödVîãxAºay
(
isCPU
 ? 
vao_
[1] : vao_[0]);

1880 
	`NVXIO_CHECK_GL_ERROR
();

1882 
GLÊﬂt
 
sˇÀR©ioX
 = 2.0‡* 
sˇÀ
 / (
width
 - 1);

1883 
GLÊﬂt
 
sˇÀR©ioY
 = 2.0‡* 
sˇÀ
 / (
height
 - 1);

1885 
gl_
->
	`Unif‹m2f
(0,

1886 
sˇÀR©ioX
,

1887 
sˇÀR©ioY
);

1888 
	`NVXIO_CHECK_GL_ERROR
();

1890 
gl_
->
	`Unif‹m4f
(1,

1891 
°yÀ
.
cﬁ‹
[0] / 255.0f,

1892 
°yÀ
.
cﬁ‹
[1] / 255.0f,

1893 
°yÀ
.
cﬁ‹
[2] / 255.0f,

1894 
°yÀ
.
cﬁ‹
[3] / 255.0f);

1895 
	`NVXIO_CHECK_GL_ERROR
();

1897 
gl_
->
	`DøwAºays
(
GL_LINES
, 0, 
°©ic_ˇ°
<
GLsizei
>(2 * 
num_ôems
));

1898 
	`NVXIO_CHECK_GL_ERROR
();

1901 
gl_
->
	`BödVîãxAºay
(0);

1902 
	`NVXIO_CHECK_GL_ERROR
();

1903 
gl_
->
	`U£Progøm
(0);

1904 
	`NVXIO_CHECK_GL_ERROR
();

1905 
	}
}

1911 
	gnvidüio
::
AºowsRídî
::
	$AºowsRídî
() :

1912 
	`gl_
(
nuŒ±r
), 
	`ªsOld_
“uŒ±r), 
	`ªsNew_
(nullptr),

1913 
	`ho°_ﬁd_ssbo_±r_
(
nuŒ±r
), 
	`ho°_√w_ssbo_±r_
(nullptr),

1914 
	`bufC≠acôy_
(1000u), 
	`vbo_
(0u), 
	`ssboOld_
(0u),

1915 
	`ssboNew_
(0u), 
	`vao_
(0u), 
	`¥ogøm_
(0u), 
	`compuãShadîProgømPoöts_
(0u),

1916 
	`compuãShadîProgømVxKeyPoöts_
(0u), 
	`compuãShadîProgømNvxKeyPoöts_
(0),

1917 
	`„©uªTy≥_
(
NVXCU_TYPE_RECTANGLE
), 
	$mu…iGPUI¡î›_
(
Ál£
)

1919 
	}
}

1921 
boﬁ
 
	gnvidüio
::
AºowsRídî
::
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
)

1923 
gl_
 = 
_gl
;

1927 
	ggl_
->
GíVîãxAºays
(1, &
vao_
);

1928 
NVXIO_CHECK_GL_ERROR
();

1932 
	ggl_
->
GíBuf„rs
(1, &
vbo_
);

1933 
NVXIO_CHECK_GL_ERROR
();

1935 
	ggl_
->
GíBuf„rs
(1, &
ssboOld_
);

1936 
NVXIO_CHECK_GL_ERROR
();

1938 
	ggl_
->
GíBuf„rs
(1, &
ssboNew_
);

1939 
NVXIO_CHECK_GL_ERROR
();

1941 
	ggl_
->
BödVîãxAºay
(
vao_
);

1942 
NVXIO_CHECK_GL_ERROR
();

1943 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
);

1944 
NVXIO_CHECK_GL_ERROR
();

1946 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, 
bufC≠acôy_
 * 6 * 2 * (
GLÊﬂt
), 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

1947 
NVXIO_CHECK_GL_ERROR
();

1948 
	ggl_
->
VîãxAâribPoöãr
(0, 2, 
GL_FLOAT
, 
GL_FALSE
, 2 * (
GLÊﬂt
), 
nuŒ±r
);

1949 
NVXIO_CHECK_GL_ERROR
();

1950 
	ggl_
->
E«bÀVîãxAâribAºay
(0);

1951 
NVXIO_CHECK_GL_ERROR
();

1953 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

1954 
NVXIO_CHECK_GL_ERROR
();

1955 
	ggl_
->
BödVîãxAºay
(0);

1956 
NVXIO_CHECK_GL_ERROR
();

1958 
size_t
 
	gmaxEÀmSize
 = 
°d
::
max
((
nvxcu_poöt2f_t
), std::max((
nvxcu_keypoötf_t
), (
nvxcu_keypoöt_t
)));

1960 
	ggl_
->
BödBuf„r
(
GL_SHADER_STORAGE_BUFFER
, 
ssboOld_
);

1961 
NVXIO_CHECK_GL_ERROR
();

1962 
	ggl_
->
Buf„rD©a
(
GL_SHADER_STORAGE_BUFFER
, 
bufC≠acôy_
 * 
maxEÀmSize
, 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

1963 
NVXIO_CHECK_GL_ERROR
();

1964 
	ggl_
->
BödBuf„r
(
GL_SHADER_STORAGE_BUFFER
, 0);

1965 
NVXIO_CHECK_GL_ERROR
();

1967 
	ggl_
->
BödBuf„r
(
GL_SHADER_STORAGE_BUFFER
, 
ssboNew_
);

1968 
NVXIO_CHECK_GL_ERROR
();

1969 
	ggl_
->
Buf„rD©a
(
GL_SHADER_STORAGE_BUFFER
, 
bufC≠acôy_
 * 
maxEÀmSize
, 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

1970 
NVXIO_CHECK_GL_ERROR
();

1971 
	ggl_
->
BödBuf„r
(
GL_SHADER_STORAGE_BUFFER
, 0);

1972 
NVXIO_CHECK_GL_ERROR
();

1974 
	gmu…iGPUI¡î›_
 = 
dëe˘Mu…iGPUI¡î›
();

1976 i‡(
	gmu…iGPUI¡î›_
)

1978 
	gho°_ﬁd_ssbo_±r_
 = 
√w
 
GLubyã
[
bufC≠acôy_
 * 
maxEÀmSize
];

1979 
	gho°_√w_ssbo_±r_
 = 
√w
 
GLubyã
[
bufC≠acôy_
 * 
maxEÀmSize
];

1984 
cudaEº‹_t
 
	gîr
 = 
cudaGøphicsGLRegi°îBuf„r
(&
ªsOld_
, 
ssboOld_
, 
cudaGøphicsM≠FœgsWrôeDisˇrd
);

1985 i‡(
	gîr
 !
cudaSuc˚ss
)

1987 
NVXIO_PRINT
("AºowsRídîÉº‹: %s", 
cudaGëEº‹Såög
(
îr
));

1988  
	gÁl£
;

1991 
	gîr
 = 
cudaGøphicsGLRegi°îBuf„r
(&
ªsNew_
, 
ssboNew_
, 
cudaGøphicsM≠FœgsWrôeDisˇrd
);

1992 i‡(
	gîr
 !
cudaSuc˚ss
)

1994 
NVXIO_PRINT
("AºowsRídîÉº‹: %s", 
cudaGëEº‹Såög
(
îr
));

1995  
	gÁl£
;

2001 
	g¥ogøm_
 = 
gl_
->
Cª©eProgøm
();

2002 
NVXIO_CHECK_GL_ERROR
();

2004 i‡(
	ggl_
->
IsProgøm
(
¥ogøm_
Ë=
GL_FALSE
)

2006 
NVXIO_PRINT
("ArrowsRender:Érror creating shaderÖrogram");

2007  
	gÁl£
;

2010 i‡(!
compûeProgøm
(
gl_
, 
¥ogøm_
,

2011 
¨row_ªndî_shadî_vs_code
,

2012 
¨row_ªndî_shadî_fs_code
))

2013  
	gÁl£
;

2017 
GLuöt
 * 
	gcompuãProgøms
[] =

2019 &
compuãShadîProgømPoöts_
,

2020 &
compuãShadîProgømVxKeyPoöts_
,

2021 &
compuãShadîProgømNvxKeyPoöts_


2024 c⁄° * c⁄° 
	g›ti⁄s
[] =

2031 
size_t
 
	gi
 = 0; i < 
	govxio
::
dimOf
(
compuãProgøms
); ++i)

2033 
GLuöt
 
	gcompuãShadîProgøm
 = 
gl_
->
Cª©eProgøm
();

2034 
NVXIO_CHECK_GL_ERROR
();

2036 i‡(
	ggl_
->
IsProgøm
(
compuãShadîProgøm
Ë=
GL_FALSE
)

2038 
NVXIO_PRINT
("ArrowsRender:Érror creating compute shaderÖrogram");

2039  
	gÁl£
;

2042 i‡(!
compûeProgøm
(
gl_
, 
compuãShadîProgøm
,

2043 
nuŒ±r
,ÇuŒ±r, 
¨row_compuã_shadî_cs_code
,

2044 
›ti⁄s
[
i
]))

2045  
	gÁl£
;

2047 *
	gcompuãProgøms
[
i
] = 
compuãShadîProgøm
;

2050  
	gåue
;

2053 
	gnvidüio
::
AºowsRídî
::
	$ªÀa£
()

2055 i‡(!
gl_
)

2058 
GLuöt
 * 
buf„rs
[] = { &
vbo_
, &
ssboOld_
, &
ssboNew_
 };

2060 
size_t
 
i
 = 0; i < 
ovxio
::
	`dimOf
(
buf„rs
); ++i)

2062 
gl_
->
	`DñëeBuf„rs
(1, 
buf„rs
[
i
]);

2063 
	`NVXIO_CHECK_GL_ERROR
();

2064 *
buf„rs
[
i
] = 0;

2067 
gl_
->
	`DñëeVîãxAºays
(1, &
vao_
);

2068 
	`NVXIO_CHECK_GL_ERROR
();

2069 
vao_
 = 0;

2071 i‡(
mu…iGPUI¡î›_
)

2073 
dñëe
 [] 
ho°_ﬁd_ssbo_±r_
;

2074 
dñëe
 [] 
ho°_√w_ssbo_±r_
;

2078 i‡(
ªsOld_
)

2080 
	`cudaGøphicsUƒegi°îResour˚
(
ªsOld_
);

2081 
ªsOld_
 = 0;

2084 i‡(
ªsNew_
)

2086 
	`cudaGøphicsUƒegi°îResour˚
(
ªsNew_
);

2087 
ªsNew_
 = 0;

2091 
GLuöt
 * 
¥ogøms
[] = { &
¥ogøm_
,

2092 &
compuãShadîProgømPoöts_
,

2093 &
compuãShadîProgømVxKeyPoöts_
,

2094 &
compuãShadîProgømNvxKeyPoöts_
 };

2096 
size_t
 
i
 = 0; i < 
ovxio
::
	`dimOf
(
¥ogøms
); ++i)

2098 
gl_
->
	`DñëeProgøm
(
¥ogøm_
);

2099 
	`NVXIO_CHECK_GL_ERROR
();

2100 *
¥ogøms
[
i
] = 0;

2102 
	}
}

2104 
	gnvidüio
::
AºowsRídî
::
	$ªndî
(c⁄° 
¨øy_t
 & 
ﬁd_poöts
, c⁄°áºay_à& 
√w_poöts
, c⁄° 
nvidüio
::
Rídî
::
LöeStyÀ
 & 
löe_°yÀ
,

2105 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
)

2107 
uöt32_t
 
num_ôems
 = 
°d
::
	`mö
(
ﬁd_poöts
.num_ôems, 
√w_poöts
.num_items);

2109 
uöt32_t
 
°¨t_x
 = 0u; sèπ_x < 
num_ôems
; sèπ_x +
bufC≠acôy_
)

2111 
uöt32_t
 
íd_x
 = 
°d
::
	`mö
(
°¨t_x
 + 
bufC≠acôy_
, 
num_ôems
);

2112 
	`upd©eLöesAºay
(
°¨t_x
, 
íd_x
, 
ﬁd_poöts
, 
√w_poöts
, 
width
, 
height
, 
sˇÀR©io
);

2113 
	`ªndîAºay
(
íd_x
 - 
°¨t_x
, 
löe_°yÀ
);

2115 
	}
}

2117 
	gnvidüio
::
AºowsRídî
::
	$ªndîAºay
(
uöt32_t
 
num_ôems
, c⁄° 
nvidüio
::
Rídî
::
LöeStyÀ
& 
°yÀ
)

2119 
LöesRídîögRuÀs
 
	`ruÀs
(
gl_
, 
°©ic_ˇ°
<
GLÊﬂt
>(
°yÀ
.
thick√ss
));

2120 ()
ruÀs
;

2122 
gl_
->
	`U£Progøm
(
¥ogøm_
);

2123 
	`NVXIO_CHECK_GL_ERROR
();

2125 
gl_
->
	`BödVîãxAºay
(
vao_
);

2126 
	`NVXIO_CHECK_GL_ERROR
();

2128 
gl_
->
	`Unif‹m4f
(0,

2129 
°yÀ
.
cﬁ‹
[0] / 255.0f,

2130 
°yÀ
.
cﬁ‹
[1] / 255.0f,

2131 
°yÀ
.
cﬁ‹
[2] / 255.0f,

2132 
°yÀ
.
cﬁ‹
[3] / 255.0f);

2133 
	`NVXIO_CHECK_GL_ERROR
();

2135 
gl_
->
	`DøwAºays
(
GL_LINES
, 0, 
°©ic_ˇ°
<
GLsizei
>(
num_ôems
 * 6));

2136 
	`NVXIO_CHECK_GL_ERROR
();

2139 
gl_
->
	`BödVîãxAºay
(0);

2140 
	`NVXIO_CHECK_GL_ERROR
();

2141 
gl_
->
	`U£Progøm
(0);

2142 
	`NVXIO_CHECK_GL_ERROR
();

2143 
	}
}

2145 
	gnvidüio
::
AºowsRídî
::
	$upd©eLöesAºay
(
uöt32_t
 
°¨t_x
, uöt32_à
íd_x
,

2146 c⁄° 
¨øy_t
 & 
ﬁd_poöts
, c⁄°áºay_à& 
√w_poöts
,

2147 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
)

2149 
cudaSåóm_t
 
°ªam
 = 
nuŒ±r
;

2151 
„©uªTy≥_
 = 
ﬁd_poöts
.
ôem_ty≥
;

2152 
	`NVXIO_ASSERT
(
ﬁd_poöts
.
ôem_ty≥
 =
√w_poöts
.item_type);

2154 
	`NVXIO_ASSERT
–(
„©uªTy≥_
 =
NVXCU_TYPE_POINT2F
Ë|| („©uªTy≥_ =
NVXCU_TYPE_KEYPOINTF
Ë|| („©uªTy≥_ =
NVXCU_TYPE_KEYPOINT
) );

2156 
size_t
 
ñemSize
 = 
	`gëIãmSize
(
„©uªTy≥_
);

2158 * 
ﬁd_§c_±r
 = (*)((
uöt8_t
 *)
ﬁd_poöts
.
±r
 + 
ñemSize
 * 
°¨t_x
),

2159 * 
√w_§c_±r
 = (*)((
uöt8_t
 *)
√w_poöts
.
±r
 + 
ñemSize
 * 
°¨t_x
);

2161 i‡(
mu…iGPUI¡î›_
)

2163 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝yAsync
(
ho°_ﬁd_ssbo_±r_
, 
ﬁd_§c_±r
,

2164 
ñemSize
 * (
íd_x
 - 
°¨t_x
),

2165 
cudaMem˝yDevi˚ToHo°
, 
°ªam
) );

2167 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝yAsync
(
ho°_√w_ssbo_±r_
, 
√w_§c_±r
,

2168 
ñemSize
 * (
íd_x
 - 
°¨t_x
),

2169 
cudaMem˝yDevi˚ToHo°
, 
°ªam
) );

2171 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

2173 
gl_
->
	`BödBuf„r
(
GL_SHADER_STORAGE_BUFFER
, 
ssboOld_
);

2174 
	`NVXIO_CHECK_GL_ERROR
();

2175 
gl_
->
	`Buf„rD©a
(
GL_SHADER_STORAGE_BUFFER
, 
ñemSize
 * (
íd_x
 - 
°¨t_x
), 
ho°_ﬁd_ssbo_±r_
, 
GL_DYNAMIC_DRAW
);

2176 
	`NVXIO_CHECK_GL_ERROR
();

2177 
gl_
->
	`BödBuf„r
(
GL_SHADER_STORAGE_BUFFER
, 0);

2178 
	`NVXIO_CHECK_GL_ERROR
();

2180 
gl_
->
	`BödBuf„r
(
GL_SHADER_STORAGE_BUFFER
, 
ssboNew_
);

2181 
	`NVXIO_CHECK_GL_ERROR
();

2182 
gl_
->
	`Buf„rD©a
(
GL_SHADER_STORAGE_BUFFER
, 
ñemSize
 * (
íd_x
 - 
°¨t_x
), 
ho°_√w_ssbo_±r_
, 
GL_DYNAMIC_DRAW
);

2183 
	`NVXIO_CHECK_GL_ERROR
();

2184 
gl_
->
	`BödBuf„r
(
GL_SHADER_STORAGE_BUFFER
, 0);

2185 
	`NVXIO_CHECK_GL_ERROR
();

2190 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsM≠Resour˚s
(1, &
ªsOld_
, 
°ªam
) );

2191 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsM≠Resour˚s
(1, &
ªsNew_
, 
°ªam
) );

2193 * 
ﬁdPå
 = 
nuŒ±r
, * 
√wPå
 =Çullptr;

2194 
size_t
 
sizeOld
 = 0ul, 
sizeNew
 = 0ul;

2196 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsResour˚GëM≠≥dPoöãr
(&
ﬁdPå
, &
sizeOld
, 
ªsOld_
) );

2197 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsResour˚GëM≠≥dPoöãr
(&
√wPå
, &
sizeNew
, 
ªsNew_
) );

2199 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝yAsync
(
ﬁdPå
, 
ﬁd_§c_±r
,

2200 
ñemSize
 * (
íd_x
 - 
°¨t_x
),

2201 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
) );

2203 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝yAsync
(
√wPå
, 
√w_§c_±r
,

2204 
ñemSize
 * (
íd_x
 - 
°¨t_x
),

2205 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
) );

2207 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsUnm≠Resour˚s
(1, &
ªsOld_
, 
°ªam
) );

2208 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsUnm≠Resour˚s
(1, &
ªsNew_
, 
°ªam
) );

2210 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

2215 
gl_
->
	`U£Progøm
(
„©uªTy≥_
 =
NVXCU_TYPE_POINT2F
 ? 
compuãShadîProgømPoöts_
 :

2216 
„©uªTy≥_
 =
NVXCU_TYPE_KEYPOINTF
 ? 
compuãShadîProgømNvxKeyPoöts_
 :

2217 
compuãShadîProgømVxKeyPoöts_
);

2218 
	`NVXIO_CHECK_GL_ERROR
();

2220 
gl_
->
	`BödBuf„rBa£
(
GL_SHADER_STORAGE_BUFFER
, 0, 
ssboOld_
);

2221 
	`NVXIO_CHECK_GL_ERROR
();

2222 
gl_
->
	`BödBuf„rBa£
(
GL_SHADER_STORAGE_BUFFER
, 1, 
ssboNew_
);

2223 
	`NVXIO_CHECK_GL_ERROR
();

2224 
gl_
->
	`BödBuf„rBa£
(
GL_SHADER_STORAGE_BUFFER
, 2, 
vbo_
);

2225 
	`NVXIO_CHECK_GL_ERROR
();

2227 
GLÊﬂt
 
sˇÀR©ioX
 = 2.0‡* 
sˇÀR©io
 / (
width
 - 1);

2228 
GLÊﬂt
 
sˇÀR©ioY
 = 2.0‡* 
sˇÀR©io
 / (
height
 - 1);

2230 
gl_
->
	`Unif‹m2f
(0, 
sˇÀR©ioX
, 
sˇÀR©ioY
);

2231 
	`NVXIO_CHECK_GL_ERROR
();

2233 
gl_
->
	`Unif‹m1i
(1, 
°©ic_ˇ°
<
GLöt
>(
íd_x
 - 
°¨t_x
));

2234 
	`NVXIO_CHECK_GL_ERROR
();

2236 
gl_
->
	`Di•©chCompuã
(
°©ic_ˇ°
<
GLuöt
>(
íd_x
 - 
°¨t_x
 + 255) / 256, 1, 1);

2237 
	`NVXIO_CHECK_GL_ERROR
();

2239 
gl_
->
	`Mem‹yB¨rõr
(
GL_SHADER_STORAGE_BARRIER_BIT
);

2240 
	`NVXIO_CHECK_GL_ERROR
();

2242 
gl_
->
	`U£Progøm
(0);

2243 
	`NVXIO_CHECK_GL_ERROR
();

2244 
	}
}

2250 
	gnvidüio
::
MŸi⁄FõldRídî
::
	$MŸi⁄FõldRídî
() :

2251 
	`gl_
(
nuŒ±r
), 
	`ˇ∑côy_
(0u), 
	`numPoöts_
(0u), 
	`ssbo_
(0u), 
	`vao_
(0u), 
	`ªs_
“uŒ±r), 
	`ho°_±r_
(nullptr),

2252 
	`¥ogøm_
(0u), 
	`compuãShadîProgøm_
(0u), 
	`ssboTex_
(0u), 
	$mu…iGPUI¡î›_
(
Ál£
)

2254 
	}
}

2256 
boﬁ
 
	gnvidüio
::
MŸi⁄FõldRídî
::
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
, 
uöt32_t
 
width
, uöt32_à
height
)

2258 
	ggl_
 = 
_gl
;

2260 
	gmu…iGPUI¡î›_
 = 
dëe˘Mu…iGPUI¡î›
();

2264 
	ggl_
->
GíVîãxAºays
(1, &
vao_
);

2265 
NVXIO_CHECK_GL_ERROR
();

2270 
	gˇ∑côy_
 = (
width
 / 16Ë* (
height
 / 16) * 6;

2272 
	ggl_
->
GíBuf„rs
(1, &
ssbo_
);

2273 
NVXIO_CHECK_GL_ERROR
();

2275 
	ggl_
->
BödVîãxAºay
(
vao_
);

2276 
NVXIO_CHECK_GL_ERROR
();

2277 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
ssbo_
);

2278 
NVXIO_CHECK_GL_ERROR
();

2280 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, 
ˇ∑côy_
 * 2 * (
GLÊﬂt
), 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

2281 
NVXIO_CHECK_GL_ERROR
();

2282 
	ggl_
->
VîãxAâribPoöãr
(0, 2, 
GL_FLOAT
, 
GL_FALSE
, 2 * (
GLÊﬂt
), 
nuŒ±r
);

2283 
NVXIO_CHECK_GL_ERROR
();

2284 
	ggl_
->
E«bÀVîãxAâribAºay
(0);

2285 
NVXIO_CHECK_GL_ERROR
();

2287 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

2288 
NVXIO_CHECK_GL_ERROR
();

2289 
	ggl_
->
BödVîãxAºay
(0);

2290 
NVXIO_CHECK_GL_ERROR
();

2294 
	ggl_
->
GíTextuªs
(1, &
ssboTex_
);

2295 
NVXIO_CHECK_GL_ERROR
();

2297 
	ggl_
->
A˘iveTextuª
(
GL_TEXTURE0
);

2298 
NVXIO_CHECK_GL_ERROR
();

2299 
	ggl_
->
BödTextuª
(
GL_TEXTURE_2D
, 
ssboTex_
);

2300 
NVXIO_CHECK_GL_ERROR
();

2301 
	ggl_
->
TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_NEAREST
);

2302 
NVXIO_CHECK_GL_ERROR
();

2303 
	ggl_
->
TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_NEAREST
);

2304 
NVXIO_CHECK_GL_ERROR
();

2305 
	ggl_
->
TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
GL_CLAMP_TO_EDGE
);

2306 
NVXIO_CHECK_GL_ERROR
();

2307 
	ggl_
->
TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
GL_CLAMP_TO_EDGE
);

2308 
NVXIO_CHECK_GL_ERROR
();

2309 
	ggl_
->
TexSt‹age2D
(
GL_TEXTURE_2D
, 1, 
GL_R32F
, 
width
 * 2, 
height
);

2310 
NVXIO_CHECK_GL_ERROR
();

2312 
	ggl_
->
BödTextuª
(
GL_TEXTURE_2D
, 0);

2313 
NVXIO_CHECK_GL_ERROR
();

2315 i‡(
	gmu…iGPUI¡î›_
)

2317 
	gho°_±r_
 = 
√w
 
GLÊﬂt
[
width
 * 
height
 * 2];

2323 
cudaEº‹_t
 
	gîr
 = 
cudaGøphicsGLRegi°îImage
(&
ªs_
, 
ssboTex_
, 
GL_TEXTURE_2D
,

2324 
cudaGøphicsM≠FœgsWrôeDisˇrd
);

2325 i‡(
	gîr
 !
cudaSuc˚ss
)

2327 
NVXIO_PRINT
("MŸi⁄FõldRídîÉº‹: %s", 
cudaGëEº‹Såög
(
îr
));

2328  
	gÁl£
;

2333 
	g¥ogøm_
 = 
gl_
->
Cª©eProgøm
();

2334 
NVXIO_CHECK_GL_ERROR
();

2336 i‡(
	ggl_
->
IsProgøm
(
¥ogøm_
Ë=
GL_FALSE
)

2338 
NVXIO_PRINT
("MotionFieldRender:Érror creating shaderÖrogram");

2339  
	gÁl£
;

2342 i‡(!
compûeProgøm
(
gl_
, 
¥ogøm_
,

2343 
¨row_ªndî_shadî_vs_code
,

2344 
¨row_ªndî_shadî_fs_code
))

2345  
	gÁl£
;

2349 
	gcompuãShadîProgøm_
 = 
gl_
->
Cª©eProgøm
();

2350 
NVXIO_CHECK_GL_ERROR
();

2352 i‡(
	ggl_
->
IsProgøm
(
compuãShadîProgøm_
Ë=
GL_FALSE
)

2354 
NVXIO_PRINT
("MotionFieldRender:Érror creating shaderÖrogram");

2355  
	gÁl£
;

2358 i‡(!
compûeProgøm
(
gl_
, 
compuãShadîProgøm_
,

2359 
nuŒ±r
,Çullptr,

2360 
mŸi⁄_fõld_compuã_shadî_cs_code
))

2362 
NVXIO_PRINT
("MotionFieldRender:Érror creating compute shaderÖrogram");

2363  
	gÁl£
;

2366  
	gåue
;

2369 
	gnvidüio
::
MŸi⁄FõldRídî
::
	$ªÀa£
()

2371 i‡(!
gl_
)

2374 
gl_
->
	`DñëeBuf„rs
(1, &
ssbo_
);

2375 
	`NVXIO_CHECK_GL_ERROR
();

2376 
ssbo_
 = 0u;

2378 
gl_
->
	`DñëeTextuªs
(1, &
ssboTex_
);

2379 
	`NVXIO_CHECK_GL_ERROR
();

2380 
ssboTex_
 = 0u;

2382 
gl_
->
	`DñëeVîãxAºays
(1, &
vao_
);

2383 
	`NVXIO_CHECK_GL_ERROR
();

2384 
vao_
 = 0u;

2386 i‡(
mu…iGPUI¡î›_
)

2388 
dñëe
 [] 
ho°_±r_
;

2390 i‡(
ªs_
)

2392 
	`cudaGøphicsUƒegi°îResour˚
(
ªs_
);

2393 
ªs_
 = 
nuŒ±r
;

2396 
gl_
->
	`DñëeProgøm
(
¥ogøm_
);

2397 
	`NVXIO_CHECK_GL_ERROR
();

2398 
¥ogøm_
 = 0u;

2400 
gl_
->
	`DñëeProgøm
(
compuãShadîProgøm_
);

2401 
	`NVXIO_CHECK_GL_ERROR
();

2402 
compuãShadîProgøm_
 = 0u;

2403 
	}
}

2405 
	gnvidüio
::
MŸi⁄FõldRídî
::
	$ªndî
(c⁄° 
image_t
 & 
fõld
, c⁄° 
nvidüio
::
Rídî
::
MŸi⁄FõldStyÀ
& 
°yÀ
,

2406 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
)

2408 
	`upd©eAºay
(
fõld
, 
width
, 
height
, 
sˇÀR©io
);

2409 
	`ªndîAºay
(
°yÀ
);

2410 
	}
}

2412 
	gnvidüio
::
MŸi⁄FõldRídî
::
	$upd©eAºay
(c⁄° 
image_t
 & 
fõld
, 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
)

2414 
cudaSåóm_t
 
°ªam
 = 
nuŒ±r
;

2415 
uöt32_t
 
fõld_width
 = 
fõld
.
width
, 
fõld_height
 = fõld.
height
;

2417 
	`NVXIO_ASSERT
–
fõld
.
f‹m©
 =
NVXCU_DF_IMAGE_2F32
 );

2419 
numPoöts_
 = (
width
 / 16uË* (
height
 / 16u) * 6u;

2421 
uöt32_t
 
mf_sˇÀ
 = 
°d
::
	`mö
(
	`Ãötf
((
width
 / 
sˇÀR©io
Ë/ 
fõld_width
),

2422 
	`Ãötf
((
height
 / 
sˇÀR©io
Ë/ 
fõld_height
));

2424 i‡(
mu…iGPUI¡î›_
)

2426 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝y2DAsync
(
ho°_±r_
,

2427 
fõld_width
 * (
GLÊﬂt
) * 2,

2428 
fõld
.
∂™es
[0].
±r
,

2429 
fõld
.
∂™es
[0].
pôch_ö_byãs
,

2430 
fõld_width
 * (
GLÊﬂt
) * 2,

2431 
fõld_height
,

2432 
cudaMem˝yDevi˚ToHo°
,

2433 
°ªam
) );

2435 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

2438 
gl_
->
	`A˘iveTextuª
(
GL_TEXTURE0
);

2439 
	`NVXIO_CHECK_GL_ERROR
();

2440 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 
ssboTex_
);

2441 
	`NVXIO_CHECK_GL_ERROR
();

2442 
gl_
->
	`TexSubImage2D
(
GL_TEXTURE_2D
, 0, 0, 0, 
fõld_width
 * 2, 
fõld_height
, 
GL_RED
, 
GL_FLOAT
, 
ho°_±r_
);

2443 
	`NVXIO_CHECK_GL_ERROR
();

2444 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 0);

2445 
	`NVXIO_CHECK_GL_ERROR
();

2449 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsM≠Resour˚s
(1, &
ªs_
, 
°ªam
) );

2451 
cudaAºay_t
 
cudaAº
 = 
nuŒ±r
;

2452 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsSubResour˚GëM≠≥dAºay
(&
cudaAº
, 
ªs_
, 0, 0) );

2455 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaMem˝y2DToAºayAsync
(
cudaAº
, 0, 0,

2456 
fõld
.
∂™es
[0].
±r
, fõld.∂™es[0].
pôch_ö_byãs
,

2457 
fõld_width
 * (
GLÊﬂt
Ë* 2, 
fõld_height
,

2458 
cudaMem˝yDevi˚ToDevi˚
, 
°ªam
) );

2460 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaGøphicsUnm≠Resour˚s
(1, &
ªs_
, 
°ªam
) );

2462 
	`NVXIO_CUDA_SAFE_CALL
–
	`cudaSåómSynchr⁄ize
(
°ªam
) );

2467 
gl_
->
	`U£Progøm
(
compuãShadîProgøm_
);

2468 
	`NVXIO_CHECK_GL_ERROR
();

2470 
gl_
->
	`BödImageTextuª
(0, 
ssboTex_
, 0, 
GL_FALSE
, 0,

2471 
GL_READ_ONLY
, 
GL_R32F
);

2472 
	`NVXIO_CHECK_GL_ERROR
();

2473 
gl_
->
	`BödBuf„rBa£
(
GL_SHADER_STORAGE_BUFFER
, 0, 
ssbo_
);

2474 
	`NVXIO_CHECK_GL_ERROR
();

2476 
GLÊﬂt
 
sˇÀR©ioX
 = 2.0‡/ (
width
 - 1);

2477 
GLÊﬂt
 
sˇÀR©ioY
 = 2.0‡/ (
height
 - 1);

2479 
gl_
->
	`Unif‹m2f
(0, 
sˇÀR©ioX
, 
sˇÀR©ioY
);

2480 
	`NVXIO_CHECK_GL_ERROR
();

2482 
gl_
->
	`Unif‹m1f
(1, 
sˇÀR©io
);

2483 
	`NVXIO_CHECK_GL_ERROR
();

2485 
gl_
->
	`Unif‹m1ui
(2, 
mf_sˇÀ
);

2486 
	`NVXIO_CHECK_GL_ERROR
();

2488 
gl_
->
	`Di•©chCompuã
(
width
 / 16, 
height
 / 16, 1);

2489 
	`NVXIO_CHECK_GL_ERROR
();

2491 
gl_
->
	`Mem‹yB¨rõr
(
GL_SHADER_STORAGE_BARRIER_BIT
);

2492 
	`NVXIO_CHECK_GL_ERROR
();

2494 
gl_
->
	`U£Progøm
(0);

2495 
	`NVXIO_CHECK_GL_ERROR
();

2496 
	}
}

2498 
	gnvidüio
::
MŸi⁄FõldRídî
::
	$ªndîAºay
(c⁄° 
nvidüio
::
Rídî
::
MŸi⁄FõldStyÀ
 & 
°yÀ
)

2500 
gl_
->
	`U£Progøm
(
¥ogøm_
);

2501 
	`NVXIO_CHECK_GL_ERROR
();

2503 
gl_
->
	`BödVîãxAºay
(
vao_
);

2504 
	`NVXIO_CHECK_GL_ERROR
();

2506 
gl_
->
	`Unif‹m4f
(0,

2507 
°yÀ
.
cﬁ‹
[0] / 255.0f,

2508 
°yÀ
.
cﬁ‹
[1] / 255.0f,

2509 
°yÀ
.
cﬁ‹
[2] / 255.0f,

2510 
°yÀ
.
cﬁ‹
[3] / 255.0f);

2511 
	`NVXIO_CHECK_GL_ERROR
();

2513 
gl_
->
	`DøwAºays
(
GL_LINES
, 0, 
°©ic_ˇ°
<
GLsizei
>(
numPoöts_
));

2514 
	`NVXIO_CHECK_GL_ERROR
();

2517 
gl_
->
	`BödVîãxAºay
(0);

2518 
	`NVXIO_CHECK_GL_ERROR
();

2519 
gl_
->
	`U£Progøm
(0);

2520 
	`NVXIO_CHECK_GL_ERROR
();

2521 
	}
}

2527 
	gnvidüio
::
Cú˛esRídî
::
	$Cú˛esRídî
() :

2528 
	`gl_
(
nuŒ±r
), 
	`bufC≠acôy_
(3000u), 
	`vbo_
(0u), 
	`vao_
(0u), 
	$¥ogøm_
(0u)

2530 
	}
}

2532 
boﬁ
 
	gnvidüio
::
Cú˛esRídî
::
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
)

2534 
gl_
 = 
_gl
;

2538 
	ggl_
->
GíVîãxAºays
(1, &
vao_
);

2539 
NVXIO_CHECK_GL_ERROR
();

2543 
	ggl_
->
GíBuf„rs
(1, &
vbo_
);

2544 
NVXIO_CHECK_GL_ERROR
();

2546 
	ggl_
->
BödVîãxAºay
(
vao_
);

2547 
NVXIO_CHECK_GL_ERROR
();

2548 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
);

2549 
NVXIO_CHECK_GL_ERROR
();

2551 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, 
bufC≠acôy_
 * 4 * (
GLÊﬂt
), 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

2552 
NVXIO_CHECK_GL_ERROR
();

2553 
	ggl_
->
VîãxAâribPoöãr
(0, 2, 
GL_FLOAT
, 
GL_FALSE
, 2 * (
GLÊﬂt
), 
nuŒ±r
);

2554 
NVXIO_CHECK_GL_ERROR
();

2555 
	ggl_
->
E«bÀVîãxAâribAºay
(0);

2556 
NVXIO_CHECK_GL_ERROR
();

2558 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

2559 
NVXIO_CHECK_GL_ERROR
();

2560 
	ggl_
->
BödVîãxAºay
(0);

2561 
NVXIO_CHECK_GL_ERROR
();

2565 
	g¥ogøm_
 = 
gl_
->
Cª©eProgøm
();

2566 
NVXIO_CHECK_GL_ERROR
();

2568 i‡(
	ggl_
->
IsProgøm
(
¥ogøm_
Ë=
GL_FALSE
)

2570 
NVXIO_PRINT
("CirclesRender:Érror creating shaderÖrogram");

2571  
	gÁl£
;

2574 i‡(!
compûeProgøm
(
gl_
, 
¥ogøm_
,

2575 
löe_ªndî_shadî_vs_code
,

2576 
löe_ªndî_shadî_fs_code
))

2577  
	gÁl£
;

2579  
	gåue
;

2582 
	gnvidüio
::
Cú˛esRídî
::
	$ªÀa£
()

2584 i‡(!
gl_
)

2587 
gl_
->
	`DñëeBuf„rs
(1, &
vbo_
);

2588 
	`NVXIO_CHECK_GL_ERROR
();

2589 
vbo_
 = 0u;

2591 
gl_
->
	`DñëeVîãxAºays
(1, &
vao_
);

2592 
	`NVXIO_CHECK_GL_ERROR
();

2593 
vao_
 = 0u;

2595 
gl_
->
	`DñëeProgøm
(
¥ogøm_
);

2596 
	`NVXIO_CHECK_GL_ERROR
();

2597 
¥ogøm_
= 0u;

2598 
	}
}

2600 
	gnvidüio
::
Cú˛esRídî
::
	$ªndî
(c⁄° 
¨øy_t
 & 
cú˛es
, c⁄° 
nvidüio
::
Rídî
::
Cú˛eStyÀ
& 
°yÀ
,

2601 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
)

2603 
	`upd©eAºay
(
cú˛es
);

2604 
	`ªndîAºay
(
°yÀ
, 
width
, 
height
, 
sˇÀR©io
);

2605 
	}
}

2607 
	gnvidüio
::
Cú˛esRídî
::
	$upd©eAºay
(c⁄° 
¨øy_t
 & 
cú˛es
)

2609 
	`NVXIO_ASSERT
(
cú˛es
.
ôem_ty≥
 =
NVXCU_TYPE_POINT3F
);

2611 
poöts_
.
	`˛ór
();

2613 i‡(
cú˛es
.
num_ôems
 > 0u)

2615 
Aºay2CPUPoöãrM≠≥r
 
	`m≠≥r
(
cú˛es
, &
tmpAºay_
);

2617 c⁄° 
nvxcu_poöt3f_t
 * 
±r
 = 
°©ic_ˇ°
<c⁄°Çvxcu_poöt3f_à*>(
m≠≥r
);

2619 
uöt32_t
 
i
 = 0u; i < 
cú˛es
.
num_ôems
; ++i)

2621 c⁄° 
nvxcu_poöt3f_t
 & 
c
 = 
±r
[
i
];

2622 
num_£gmíts
 = 
	`gëNumCú˛eSegmíts
(
c
.
z
);

2624 
	`gíCú˛eLöes
(
poöts_
, 
c
.
x
, c.
y
, c.
z
, 
num_£gmíts
);

2627 
	}
}

2629 
	gnvidüio
::
Cú˛esRídî
::
	$ªndîAºay
(c⁄° 
nvidüio
::
Rídî
::
Cú˛eStyÀ
& 
°yÀ
,

2630 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
)

2632 
LöesRídîögRuÀs
 
	`ruÀs
(
gl_
, 
°©ic_ˇ°
<
GLÊﬂt
>(
°yÀ
.
thick√ss
));

2633 ()
ruÀs
;

2635 
gl_
->
	`U£Progøm
(
¥ogøm_
);

2636 
	`NVXIO_CHECK_GL_ERROR
();

2638 
gl_
->
	`BödVîãxAºay
(
vao_
);

2639 
	`NVXIO_CHECK_GL_ERROR
();

2641 
GLÊﬂt
 
sˇÀR©ioX
 = 2.0‡* 
sˇÀR©io
 / (
width
 - 1);

2642 
GLÊﬂt
 
sˇÀR©ioY
 = 2.0‡* 
sˇÀR©io
 / (
height
 - 1);

2644 
gl_
->
	`Unif‹m2f
(0, 
sˇÀR©ioX
, 
sˇÀR©ioY
);

2645 
	`NVXIO_CHECK_GL_ERROR
();

2647 
gl_
->
	`Unif‹m4f
(1,

2648 
°yÀ
.
cﬁ‹
[0] / 255.0f,

2649 
°yÀ
.
cﬁ‹
[1] / 255.0f,

2650 
°yÀ
.
cﬁ‹
[2] / 255.0f,

2651 
°yÀ
.
cﬁ‹
[3] / 255.0f);

2652 
	`NVXIO_CHECK_GL_ERROR
();

2654 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
);

2655 
	`NVXIO_CHECK_GL_ERROR
();

2657 
size_t
 
°¨t_x
 = 0; sèπ_x < 
poöts_
.
	`size
(); sèπ_x +
bufC≠acôy_
)

2659 
vx_size
 
íd_x
 = 
°d
::
	`mö
(
°¨t_x
 + 
bufC≠acôy_
, 
poöts_
.
	`size
());

2661 
gl_
->
	`Buf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, (
íd_x
 - 
°¨t_x
Ë* 4 * (
GLÊﬂt
), &
poöts_
[start_x]);

2662 
	`NVXIO_CHECK_GL_ERROR
();

2664 
gl_
->
	`DøwAºays
(
GL_LINES
, 0, 
°©ic_ˇ°
<
GLsizei
>(2 * (
íd_x
 - 
°¨t_x
)));

2665 
	`NVXIO_CHECK_GL_ERROR
();

2669 
gl_
->
	`BödVîãxAºay
(0);

2670 
	`NVXIO_CHECK_GL_ERROR
();

2672 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

2673 
	`NVXIO_CHECK_GL_ERROR
();

2674 
gl_
->
	`U£Progøm
(0);

2675 
	`NVXIO_CHECK_GL_ERROR
();

2676 
	}
}

2682 c⁄° 
	gf⁄tSize
 = 20;

2684 
	gnvidüio
::
TextRídî
::
	$TextRídî
() :

2685 
	`gl_
(
nuŒ±r
), 
	`·_
“uŒ±r), 
	`Á˚_
“uŒ±r), 
	`¥ogømBg_
(0u), 
	`¥ogøm_
(0u),

2686 
	`ãx_
(0u), 
	`bufC≠acôy_
(3000u), 
	`vbo_
(0u), 
	`vboEA_
(0u), 
	`vao_
(0u), 
	`bgVbo_
(0u), 
	`bgVao_
(0u),

2687 
	`©œsWidth_
(0), 
	$©œsHeight_
(0)

2689 
	`mem£t
(&
c
[0], 0, (c));

2690 
	}
}

2692 
	gnvidüio
::
TextRídî
::~
	$TextRídî
()

2694 
	`FT_D⁄e_Fa˚
(
Á˚_
);

2695 
	`FT_D⁄e_FªeTy≥
(
·_
);

2696 
	}
}

2698 
boﬁ
 
	gnvidüio
::
TextRídî
::
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
)

2700 
gl_
 = 
_gl
;

2704 i‡(
FT_Inô_FªeTy≥
(&
·_
Ë!
FT_Eº_Ok
)

2706 
NVXIO_PRINT
("TextRender: couldÇot init freetypeÜibrary");

2707  
	gÁl£
;

2710 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN64
Ë|| deföed(
__CYGWIN__
)

2711 
	g°d
::
°rög
 
f⁄tFûe
 = "calibri.ttf";

2713 
CHAR
 
	gwöDú
[
MAX_PATH
];

2714 
GëWödowsDúe˘‹yA
(
wöDú
, 
MAX_PATH
);

2716 
	g°d
::
°rög°ªam
 
°ªam
;

2717 
	g°ªam
 << 
	gwöDú
 << "\\F⁄ts\\" << 
	gf⁄tFûe
;

2719 
	g°d
::
°rög
 
f⁄tP©h
 = 
°ªam
.
°r
();

2720 #ñi‡
deföed
(
__ANDROID__
)

2721 
	g°d
::
°rög
 
f⁄tP©h
 = "/system/fonts/DroidSans.ttf";

2723 
	g°d
::
°rög
 
f⁄tP©h
 = "/usr/share/fonts/truetype/freefont/FreeSans.ttf";

2726 i‡(
FT_New_Fa˚
(
·_
, 
f⁄tP©h
.
c_°r
(), 0, &
Á˚_
Ë!
FT_Eº_Ok
)

2728 
NVXIO_PRINT
("TextRender: couldÇot open FreeSans font");

2729  
	gÁl£
;

2732 i‡(
FT_Së_Pixñ_Sizes
(
Á˚_
, 0, 
f⁄tSize
Ë!
FT_Eº_Ok
)

2734 
NVXIO_PRINT
("TextRender: failedÅo set font size");

2735  
	gÁl£
;

2740 
	g¥ogøm_
 = 
gl_
->
Cª©eProgøm
();

2741 
NVXIO_CHECK_GL_ERROR
();

2743 i‡(
	ggl_
->
IsProgøm
(
¥ogøm_
Ë=
GL_FALSE
)

2745 
NVXIO_PRINT
("TextRender:Érror creating shaderÖrogram");

2746  
	gÁl£
;

2749 i‡(!
compûeProgøm
(
gl_
, 
¥ogøm_
,

2750 
ãxt_ªndî_shadî_vs_code
,

2751 
ãxt_ªndî_shadî_fs_code
))

2752  
	gÁl£
;

2756 
	g¥ogømBg_
 = 
gl_
->
Cª©eProgøm
();

2757 
NVXIO_CHECK_GL_ERROR
();

2759 i‡(!
	ggl_
->
IsProgøm
(
¥ogømBg_
))

2761 
NVXIO_PRINT
("TextRender:Érror creating shaderÖrogram");

2762  
	gÁl£
;

2765 i‡(!
compûeProgøm
(
gl_
, 
¥ogømBg_
,

2766 
ãxtbg_ªndî_shadî_vs_code
,

2767 
ãxtbg_ªndî_shadî_fs_code
))

2768  
	gÁl£
;

2772 
	ggl_
->
GíVîãxAºays
(1, &
bgVao_
);

2773 
NVXIO_CHECK_GL_ERROR
();

2775 
	ggl_
->
GíVîãxAºays
(1, &
vao_
);

2776 
NVXIO_CHECK_GL_ERROR
();

2780 
FT_GlyphSlŸ
 
	gg
 = 
Á˚_
->
glyph
;

2782 
	gw
 = 0;

2783 
	gh
 = 0;

2785 
	gi
 = 32; i < 128; i++)

2787 i‡(
FT_Lﬂd_Ch¨
(
Á˚_
, 
i
, 
FT_LOAD_RENDER
Ë!
FT_Eº_Ok
)

2790 
	gw
 +
g
->
bôm≠
.
width
;

2791 
	gh
 = 
°d
::
max
<>(
h
, 
	gg
->
	gbôm≠
.
	grows
);

2794 
	g©œsWidth_
 = 
w
;

2795 
	g©œsHeight_
 = 
h
;

2797 
	ggl_
->
GíTextuªs
(1, &
ãx_
);

2798 
NVXIO_CHECK_GL_ERROR
();

2799 
	ggl_
->
A˘iveTextuª
(
GL_TEXTURE0
);

2800 
NVXIO_CHECK_GL_ERROR
();

2801 
	ggl_
->
BödTextuª
(
GL_TEXTURE_2D
, 
ãx_
);

2802 
NVXIO_CHECK_GL_ERROR
();

2803 
	ggl_
->
TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_NEAREST
);

2804 
NVXIO_CHECK_GL_ERROR
();

2805 
	ggl_
->
TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_NEAREST
);

2806 
NVXIO_CHECK_GL_ERROR
();

2807 
	ggl_
->
TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
GL_CLAMP_TO_EDGE
);

2808 
NVXIO_CHECK_GL_ERROR
();

2809 
	ggl_
->
TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
GL_CLAMP_TO_EDGE
);

2810 
NVXIO_CHECK_GL_ERROR
();

2811 
	ggl_
->
PixñSt‹ei
(
GL_UNPACK_ALIGNMENT
, 1);

2812 
NVXIO_CHECK_GL_ERROR
();

2813 
	ggl_
->
TexSt‹age2D
(
GL_TEXTURE_2D
, 1, 
GL_R8
, 
w
, 
h
);

2814 
NVXIO_CHECK_GL_ERROR
();

2816 
	gx
 = 0;

2817 
	gi
 = 32; i < 128; i++)

2819 i‡(
FT_Lﬂd_Ch¨
(
Á˚_
, 
i
, 
FT_LOAD_RENDER
Ë!
FT_Eº_Ok
)

2821 
NVXIO_PRINT
("TextRídî: faûedÅÿlﬂd ch¨achã∏%c", ()
i
);

2825 
	ggl_
->
TexSubImage2D
(
GL_TEXTURE_2D
, 0, 
x
, 0, 
g
->
bôm≠
.
width
, g->bôm≠.
rows
, 
GL_RED
, 
GL_UNSIGNED_BYTE
, g->bôm≠.
buf„r
);

2826 
NVXIO_CHECK_GL_ERROR
();

2828 
	gc
[
i
].
	gax
 = 
°©ic_ˇ°
<>(
g
->
adv™˚
.
x
 >> 6);

2829 
	gc
[
i
].
	gay
 = 
°©ic_ˇ°
<>(
g
->
adv™˚
.
y
 >> 6);

2831 
	gc
[
i
].
	gbw
 = 
°©ic_ˇ°
<>(
g
->
bôm≠
.
width
);

2832 
	gc
[
i
].
	gbh
 = 
°©ic_ˇ°
<>(
g
->
bôm≠
.
rows
);

2834 
	gc
[
i
].
	gbl
 = 
°©ic_ˇ°
<>(
g
->
bôm≠_À·
);

2835 
	gc
[
i
].
	gbt
 = 
°©ic_ˇ°
<>(
g
->
bôm≠_t›
);

2837 
	gc
[
i
].
	gtx
 = ()
x
 / 
w
;

2839 
	gx
 +
g
->
bôm≠
.
width
;

2842 
	ggl_
->
BödTextuª
(
GL_TEXTURE_2D
, 0);

2843 
NVXIO_CHECK_GL_ERROR
();

2847 
	ggl_
->
GíBuf„rs
(1, &
vbo_
);

2848 
NVXIO_CHECK_GL_ERROR
();

2849 
	ggl_
->
GíBuf„rs
(1, &
vboEA_
);

2850 
NVXIO_CHECK_GL_ERROR
();

2851 
	ggl_
->
BödVîãxAºay
(
vao_
);

2852 
NVXIO_CHECK_GL_ERROR
();

2853 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
);

2854 
NVXIO_CHECK_GL_ERROR
();

2855 
	ggl_
->
BödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
vboEA_
);

2856 
NVXIO_CHECK_GL_ERROR
();

2857 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, 
bufC≠acôy_
 * 4 * 4 * (
GLÊﬂt
), 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

2858 
NVXIO_CHECK_GL_ERROR
();

2859 
	ggl_
->
Buf„rD©a
(
GL_ELEMENT_ARRAY_BUFFER
, 
bufC≠acôy_
 * 6 * (
GLush‹t
), 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

2860 
NVXIO_CHECK_GL_ERROR
();

2861 
	ggl_
->
VîãxAâribPoöãr
(0, 4, 
GL_FLOAT
, 
GL_FALSE
, 4 * (
GLÊﬂt
), 
nuŒ±r
);

2862 
NVXIO_CHECK_GL_ERROR
();

2863 
	ggl_
->
E«bÀVîãxAâribAºay
(0);

2864 
NVXIO_CHECK_GL_ERROR
();

2865 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

2866 
NVXIO_CHECK_GL_ERROR
();

2867 
	ggl_
->
BödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 0);

2868 
NVXIO_CHECK_GL_ERROR
();

2869 
	ggl_
->
BödVîãxAºay
(0);

2870 
NVXIO_CHECK_GL_ERROR
();

2872 
	ggl_
->
GíBuf„rs
(1, &
bgVbo_
);

2873 
NVXIO_CHECK_GL_ERROR
();

2874 
	ggl_
->
BödVîãxAºay
(
bgVao_
);

2875 
NVXIO_CHECK_GL_ERROR
();

2876 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
bgVbo_
);

2877 
NVXIO_CHECK_GL_ERROR
();

2878 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, 8 * (
GLÊﬂt
), 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

2879 
NVXIO_CHECK_GL_ERROR
();

2880 
	ggl_
->
VîãxAâribPoöãr
(0, 2, 
GL_FLOAT
, 
GL_FALSE
, 2 * (
GLÊﬂt
), 
nuŒ±r
);

2881 
NVXIO_CHECK_GL_ERROR
();

2882 
	ggl_
->
E«bÀVîãxAâribAºay
(0);

2883 
NVXIO_CHECK_GL_ERROR
();

2884 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

2885 
NVXIO_CHECK_GL_ERROR
();

2886 
	ggl_
->
BödVîãxAºay
(0);

2887 
NVXIO_CHECK_GL_ERROR
();

2889  
	gåue
;

2892 
	gnvidüio
::
TextRídî
::
	$ªÀa£
()

2894 i‡(!
gl_
)

2897 
gl_
->
	`DñëeTextuªs
(1, &
ãx_
);

2898 
	`NVXIO_CHECK_GL_ERROR
();

2899 
ãx_
 = 0u;

2901 
gl_
->
	`DñëeBuf„rs
(1, &
vbo_
);

2902 
	`NVXIO_CHECK_GL_ERROR
();

2903 
vbo_
 = 0u;

2905 
gl_
->
	`DñëeBuf„rs
(1, &
vboEA_
);

2906 
	`NVXIO_CHECK_GL_ERROR
();

2907 
vboEA_
 = 0u;

2909 
gl_
->
	`DñëeBuf„rs
(1, &
bgVbo_
);

2910 
	`NVXIO_CHECK_GL_ERROR
();

2911 
bgVbo_
 = 0u;

2913 
gl_
->
	`DñëeVîãxAºays
(1, &
vao_
);

2914 
	`NVXIO_CHECK_GL_ERROR
();

2915 
vao_
 = 0u;

2917 
gl_
->
	`DñëeVîãxAºays
(1, &
bgVao_
);

2918 
	`NVXIO_CHECK_GL_ERROR
();

2919 
bgVao_
 = 0u;

2921 
gl_
->
	`DñëeProgøm
(
¥ogømBg_
);

2922 
	`NVXIO_CHECK_GL_ERROR
();

2923 
¥ogømBg_
 = 0u;

2925 
gl_
->
	`DñëeProgøm
(
¥ogøm_
);

2926 
	`NVXIO_CHECK_GL_ERROR
();

2927 
¥ogøm_
 = 0u;

2928 
	}
}

2930 
addPoöt
(
°d
::
ve˘‹
<
nvxcu_poöt4f_t
> & 
poöts
,

2931 
x
, 
y
, 
tx
, 
ty
,

2932 
sˇÀX
, 
sˇÀY
,

2933 & 
mö_x
, & 
max_x
,

2934 & 
mö_y
, & 
max_y
)

2936 
nvxcu_poöt4f_t
 
	g±
 = { 
x
, 
y
, 
tx
, 
ty
 };

2938 
	g±
.
	gx
 = 2 * 
±
.
x
 * 
sˇÀX
 - 1;

2939 
	g±
.
	gy
 = 1 - 2 * 
±
.
y
 * 
sˇÀY
;

2941 
	gmö_x
 = 
°d
::
mö
(
mö_x
, 
±
.
x
);

2942 
	gmax_x
 = 
°d
::
max
(
max_x
, 
±
.
x
);

2944 
	gmö_y
 = 
°d
::
mö
(
mö_y
, 
±
.
y
);

2945 
	gmax_y
 = 
°d
::
max
(
max_y
, 
±
.
y
);

2947 
	gpoöts
.
push_back
(
±
);

2950 
	gnvidüio
::
TextRídî
::
	$ªndî
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
nvidüio
::
Rídî
::
TextBoxStyÀ
& 
°yÀ
,

2951 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
)

2953 
	`NVXIO_ASSERT
(!
ãxt
.
	`em±y
());

2955 
poöts_
.
	`˛ór
();

2956 
poöts_
.
	`ª£rve
(
ãxt
.
	`size
() * 4u);

2958 
ñemíts_
.
	`˛ór
();

2959 
ñemíts_
.
	`ª£rve
(
ãxt
.
	`size
() * 6u);

2961 
sˇÀX
 = 1.0‡/ (
width
 - 1), 
sˇÀY
 = 1.0‡/ (
height
 - 1);

2962 
nvxcu_poöt2f_t
 
‹igö
 = { 
°©ic_ˇ°
<
GLÊﬂt
>(
°yÀ
.‹igö.
x
Ë* 
sˇÀR©io
,

2963 
°©ic_ˇ°
<
GLÊﬂt
>(
°yÀ
.
‹igö
.
y
Ë* 
sˇÀR©io
 };

2964 
x
 = 
‹igö
.x, 
y
 = origin.y;

2966 
mö_x
 = 
°d
::
numîic_limôs
<>::
	`max
(), 
mö_y
 = min_x;

2967 
max_x
 = -
mö_x
, 
max_y
 = -
mö_y
;

2969 
GLush‹t
 
ei
 = 0;

2970 
size_t
 
i
 = 0; i < 
ãxt
.
	`size
(); ++i, ++
ei
)

2972 
p
 = 
ãxt
[
i
];

2975 i‡(
p
 == '\n')

2977 
x
 = 
‹igö
.x;

2978 
y
 +
f⁄tSize
;

2979 --
ei
;

2983 i‡(
p
 < 32 ||Ö >= 128)

2986 i‡(
poöts_
.
	`size
(Ë+ 6 > 
bufC≠acôy_
)

2989 
x2
 = 
x
 + 
c
[
p
].
bl
;

2990 
y2
 = 
y
 + 
f⁄tSize
 - 
c
[
p
].
bt
;

2991 
w
 = 
c
[
p
].
bw
;

2992 
h
 = 
c
[
p
].
bh
;

2995 
x
 +
c
[
p
].
ax
;

2996 
y
 +
c
[
p
].
ay
;

2998 
	`addPoöt
(
poöts_
, 
x2
 , 
y2
 , 
c
[
p
].
tx
 , 0 , 
sˇÀX
, 
sˇÀY
, 
mö_x
, 
max_x
, 
mö_y
, 
max_y
);

2999 
	`addPoöt
(
poöts_
, 
x2
 + 
w
, 
y2
 , 
c
[
p
].
tx
 + c[p].
bw
 / 
©œsWidth_
, 0 , 
sˇÀX
, 
sˇÀY
, 
mö_x
, 
max_x
, 
mö_y
, 
max_y
);

3000 
	`addPoöt
(
poöts_
, 
x2
 , 
y2
 + 
h
, 
c
[
p
].
tx
 , c[p].
bh
 / 
©œsHeight_
, 
sˇÀX
, 
sˇÀY
, 
mö_x
, 
max_x
, 
mö_y
, 
max_y
);

3001 
	`addPoöt
(
poöts_
, 
x2
 + 
w
, 
y2
 + 
h
, 
c
[
p
].
tx
 + c[p].
bw
 / 
©œsWidth_
, c[p].
bh
 / 
©œsHeight_
, 
sˇÀX
, 
sˇÀY
, 
mö_x
, 
max_x
, 
mö_y
, 
max_y
);

3003 
ñemíts_
.
	`push_back
(
ei
 * 4 + 0);

3004 
ñemíts_
.
	`push_back
(
ei
 * 4 + 1);

3005 
ñemíts_
.
	`push_back
(
ei
 * 4 + 2);

3006 
ñemíts_
.
	`push_back
(
ei
 * 4 + 3);

3007 
ñemíts_
.
	`push_back
(
ei
 * 4 + 1);

3008 
ñemíts_
.
	`push_back
(
ei
 * 4 + 2);

3013 i‡(
°yÀ
.
bgcﬁ‹
[3] != 0)

3015 
gl_
->
	`U£Progøm
(
¥ogømBg_
);

3016 
	`NVXIO_CHECK_GL_ERROR
();

3018 
gl_
->
	`BödVîãxAºay
(
bgVao_
);

3019 
	`NVXIO_CHECK_GL_ERROR
();

3021 
gl_
->
	`Unif‹m4f
(0,

3022 
°yÀ
.
bgcﬁ‹
[0] / 255.0f,

3023 
°yÀ
.
bgcﬁ‹
[1] / 255.0f,

3024 
°yÀ
.
bgcﬁ‹
[2] / 255.0f,

3025 
°yÀ
.
bgcﬁ‹
[3] / 255.0f);

3026 
	`NVXIO_CHECK_GL_ERROR
();

3028 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 
bgVbo_
);

3029 
	`NVXIO_CHECK_GL_ERROR
();

3031 
GLÊﬂt
 
offx
 = 7.0‡/ 
width
, 
offy
 = 7.0‡/ 
height
;

3032 
GLÊﬂt
 
bg_box
[4][2] = {

3033 { 
mö_x
 - 
offx
, 
mö_y
 - 
offy
 },

3034 { 
max_x
 + 
offx
, 
mö_y
 - 
offy
 },

3035 { 
mö_x
 - 
offx
, 
max_y
 + 
offy
 },

3036 { 
max_x
 + 
offx
, 
max_y
 + 
offy
 },

3039 
gl_
->
	`Buf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, (
bg_box
), &bg_box[0][0]);

3040 
	`NVXIO_CHECK_GL_ERROR
();

3042 
gl_
->
	`DøwAºays
(
GL_TRIANGLE_STRIP
, 0, 4);

3043 
	`NVXIO_CHECK_GL_ERROR
();

3048 
gl_
->
	`U£Progøm
(
¥ogøm_
);

3049 
	`NVXIO_CHECK_GL_ERROR
();

3051 
gl_
->
	`BödVîãxAºay
(
vao_
);

3052 
	`NVXIO_CHECK_GL_ERROR
();

3054 
gl_
->
	`Unif‹m4f
(0,

3055 
°yÀ
.
cﬁ‹
[0] / 255.0f,

3056 
°yÀ
.
cﬁ‹
[1] / 255.0f,

3057 
°yÀ
.
cﬁ‹
[2] / 255.0f,

3058 
°yÀ
.
cﬁ‹
[3] / 255.0f);

3059 
	`NVXIO_CHECK_GL_ERROR
();

3061 
gl_
->
	`A˘iveTextuª
(
GL_TEXTURE0
);

3062 
	`NVXIO_CHECK_GL_ERROR
();

3064 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 
ãx_
);

3065 
	`NVXIO_CHECK_GL_ERROR
();

3067 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 
vbo_
);

3068 
	`NVXIO_CHECK_GL_ERROR
();

3070 
gl_
->
	`BödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
vboEA_
);

3071 
	`NVXIO_CHECK_GL_ERROR
();

3073 
gl_
->
	`Buf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, 
poöts_
.
	`size
(Ë* 4 * (
GLÊﬂt
), &points_[0]);

3074 
	`NVXIO_CHECK_GL_ERROR
();

3076 
gl_
->
	`Buf„rSubD©a
(
GL_ELEMENT_ARRAY_BUFFER
, 0, 
ñemíts_
.
	`size
(Ë* (
GLush‹t
), &elements_[0]);

3077 
	`NVXIO_CHECK_GL_ERROR
();

3079 
gl_
->
	`DøwEÀmíts
(
GL_TRIANGLES
, 
°©ic_ˇ°
<
GLsizei
>(
ñemíts_
.
	`size
()), 
GL_UNSIGNED_SHORT
, 
nuŒ±r
);

3080 
	`NVXIO_CHECK_GL_ERROR
();

3083 
gl_
->
	`BödVîãxAºay
(0);

3084 
	`NVXIO_CHECK_GL_ERROR
();

3086 
gl_
->
	`U£Progøm
(0);

3087 
	`NVXIO_CHECK_GL_ERROR
();

3089 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 0);

3090 
	`NVXIO_CHECK_GL_ERROR
();

3092 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

3093 
	`NVXIO_CHECK_GL_ERROR
();

3095 
gl_
->
	`BödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 0);

3096 
	`NVXIO_CHECK_GL_ERROR
();

3097 
	}
}

3099 #i‚de‡
__ANDROID__


3105 
	gnvidüio
::
PoötCloudRídî
::
	$PoötCloudRídî
() :

3106 
	`gl_
(
nuŒ±r
), 
	`poötCloudProgøm_
(0u), 
	`hPoötCloudVBO_
(0u),

3107 
	`hPoötCloudVAO_
(0u), 
	`bufC≠acôy_
(2000u),

3108 
	$d©aMVP_
(
nuŒ±r
)

3110 
	}
}

3112 
boﬁ
 
	gnvidüio
::
PoötCloudRídî
::
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
)

3114 
gl_
 = 
_gl
;

3118 
	ggl_
->
GíVîãxAºays
(1, &
hPoötCloudVAO_
);

3119 
NVXIO_CHECK_GL_ERROR
();

3123 
	ggl_
->
GíBuf„rs
(1, &
hPoötCloudVBO_
);

3124 
NVXIO_CHECK_GL_ERROR
();

3126 
	ggl_
->
BödVîãxAºay
(
hPoötCloudVAO_
);

3127 
NVXIO_CHECK_GL_ERROR
();

3128 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
hPoötCloudVBO_
);

3129 
NVXIO_CHECK_GL_ERROR
();

3131 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, 3 * 
bufC≠acôy_
 * (
GLÊﬂt
), 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

3132 
NVXIO_CHECK_GL_ERROR
();

3133 
	ggl_
->
VîãxAâribPoöãr
((
GLuöt
)0, 3, 
GL_FLOAT
, 
GL_FALSE
, 0, 0);

3134 
NVXIO_CHECK_GL_ERROR
();

3135 
	ggl_
->
E«bÀVîãxAâribAºay
(0);

3136 
NVXIO_CHECK_GL_ERROR
();

3138 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

3139 
NVXIO_CHECK_GL_ERROR
();

3140 
	ggl_
->
BödVîãxAºay
(0);

3141 
NVXIO_CHECK_GL_ERROR
();

3145 
	gpoötCloudProgøm_
 = 
gl_
->
Cª©eProgøm
();

3146 
NVXIO_CHECK_GL_ERROR
();

3148 i‡(
	ggl_
->
IsProgøm
(
poötCloudProgøm_
Ë=
GL_FALSE
)

3150 
NVXIO_PRINT
("PointCloudRender:Érror creating shaderÖrogram");

3151  
	gÁl£
;

3154 i‡(!
compûeProgøm
(
gl_
, 
poötCloudProgøm_
,

3155 
poöt_˛oud_ªndî_shadî_vs_code
,

3156 
poöt_˛oud_ªndî_shadî_fs_code
))

3157  
	gÁl£
;

3159  
	gåue
;

3162 
	gnvidüio
::
PoötCloudRídî
::
	$ªÀa£
()

3164 i‡(!
gl_
)

3167 
gl_
->
	`DñëeBuf„rs
(1, &
hPoötCloudVBO_
);

3168 
	`NVXIO_CHECK_GL_ERROR
();

3169 
hPoötCloudVBO_
 = 0u;

3171 
gl_
->
	`DñëeVîãxAºays
(1, &
hPoötCloudVAO_
);

3172 
	`NVXIO_CHECK_GL_ERROR
();

3173 
hPoötCloudVAO_
 = 0u;

3175 
gl_
->
	`DñëeProgøm
(
poötCloudProgøm_
);

3176 
	`NVXIO_CHECK_GL_ERROR
();

3177 
poötCloudProgøm_
 = 0u;

3178 
	}
}

3180 
	gnvidüio
::
PoötCloudRídî
::
	$ªndî
(c⁄° 
¨øy_t
 & 
poöts
, c⁄° 
m©rix4x4f_t
 & 
MVP
,

3181 c⁄° 
nvidüio
::
Rídî3D
::
PoötCloudStyÀ
& 
°yÀ
)

3183 
	`NVXIO_ASSERT
(
°yÀ
.
maxDi°™˚
 >°yÀ.
möDi°™˚
);

3185 
	`upd©eAºay
(
MVP
);

3186 
	`ªndîAºay
(
poöts
, 
°yÀ
);

3187 
	}
}

3189 
	gnvidüio
::
PoötCloudRídî
::
	$upd©eAºay
(c⁄° 
m©rix4x4f_t
 & 
MVP
)

3191 
d©aMVP_
 = 
MVP
.
±r
;

3192 
	}
}

3194 
	gnvidüio
::
PoötCloudRídî
::
	$ªndîAºay
(c⁄° 
¨øy_t
 & 
poöts
, c⁄° 
nvidüio
::
Rídî3D
::
PoötCloudStyÀ
& 
°yÀ
)

3196 
	`NVXIO_ASSERT
(
poöts
.
ôem_ty≥
 =
NVXCU_TYPE_POINT3F
);

3198 
gl_
->
	`E«bÀ
(
GL_DEPTH_TEST
);

3199 
	`NVXIO_CHECK_GL_ERROR
();

3200 
gl_
->
	`DïthFunc
(
GL_LESS
);

3201 
	`NVXIO_CHECK_GL_ERROR
();

3202 #i‚de‡
USE_GLES


3203 
gl_
->
	`E«bÀ
(
GL_VERTEX_PROGRAM_POINT_SIZE
);

3204 
	`NVXIO_CHECK_GL_ERROR
();

3207 
gl_
->
	`U£Progøm
(
poötCloudProgøm_
);

3208 
	`NVXIO_CHECK_GL_ERROR
();

3210 
gl_
->
	`BödVîãxAºay
(
hPoötCloudVAO_
);

3211 
	`NVXIO_CHECK_GL_ERROR
();

3213 
gl_
->
	`Unif‹mM©rix4fv
(0, 1, 
GL_FALSE
, 
d©aMVP_
);

3214 
	`NVXIO_CHECK_GL_ERROR
();

3215 
gl_
->
	`Unif‹m1f
(1, 
°yÀ
.
maxDi°™˚
);

3216 
	`NVXIO_CHECK_GL_ERROR
();

3217 
gl_
->
	`Unif‹m1f
(2, 
°yÀ
.
möDi°™˚
);

3218 
	`NVXIO_CHECK_GL_ERROR
();

3219 
gl_
->
	`Unif‹m1f
(3, 1.0‡/ (
°yÀ
.
maxDi°™˚
 - styÀ.
möDi°™˚
));

3220 
	`NVXIO_CHECK_GL_ERROR
();

3222 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 
hPoötCloudVBO_
);

3223 
	`NVXIO_CHECK_GL_ERROR
();

3225 i‡(
poöts
.
num_ôems
 > 0u)

3227 
uöt32_t
 
°¨t_x
 = 0u; sèπ_x < 
poöts
.
num_ôems
; sèπ_x +
bufC≠acôy_
)

3229 
uöt32_t
 
íd_x
 = 
°d
::
	`mö
(
°¨t_x
 + 
bufC≠acôy_
, 
poöts
.
num_ôems
);

3231 
gl_
->
	`Buf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, (
íd_x
 - 
°¨t_x
Ë* (
nvxcu_poöt3f_t
),

3232 
°©ic_ˇ°
<c⁄° 
nvxcu_poöt3f_t
 *>(
poöts
.
±r
Ë+ 
°¨t_x
);

3233 
	`NVXIO_CHECK_GL_ERROR
();

3235 
gl_
->
	`DøwAºays
(
GL_POINTS
, 0, 
°©ic_ˇ°
<
GLsizei
>(
íd_x
 - 
°¨t_x
));

3236 
	`NVXIO_CHECK_GL_ERROR
();

3241 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

3242 
	`NVXIO_CHECK_GL_ERROR
();

3243 
gl_
->
	`BödVîãxAºay
(0);

3244 
	`NVXIO_CHECK_GL_ERROR
();

3245 
gl_
->
	`U£Progøm
(0);

3246 
	`NVXIO_CHECK_GL_ERROR
();

3248 
gl_
->
	`DißbÀ
(
GL_DEPTH_TEST
);

3249 
	`NVXIO_CHECK_GL_ERROR
();

3250 #i‚de‡
USE_GLES


3251 
gl_
->
	`DißbÀ
(
GL_VERTEX_PROGRAM_POINT_SIZE
);

3252 
	`NVXIO_CHECK_GL_ERROR
();

3254 
	}
}

3260 
	gnvidüio
::
Fí˚Pœ√Rídî
::
	$Fí˚Pœ√Rídî
() :

3261 
	`gl_
(
nuŒ±r
), 
	`„n˚Pœ√Progøm_
(0u), 
	`hFí˚Pœ√VBO_
(0u),

3262 
	`hFí˚Pœ√EA_
(0u), 
	`hFí˚Pœ√VAO_
(0u), 
	`bufC≠acôy_
(2000u),

3263 
	$d©aMVP_
(
nuŒ±r
)

3265 
	`NVXIO_ASSERT
(
bufC≠acôy_
 % 4u == 0u);

3266 
	}
}

3268 
boﬁ
 
	gnvidüio
::
Fí˚Pœ√Rídî
::
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
)

3270 
gl_
 = 
_gl
;

3272 
	g∂™es_vîti˚s_
.
ª£rve
(
bufC≠acôy_
);

3273 
	g∂™es_ñemíts_
.
ª£rve
((
bufC≠acôy_
 >> 2) * 6);

3277 
	ggl_
->
GíVîãxAºays
(1, &
hFí˚Pœ√VAO_
);

3278 
NVXIO_CHECK_GL_ERROR
();

3282 
	ggl_
->
GíBuf„rs
(1, &
hFí˚Pœ√VBO_
);

3283 
NVXIO_CHECK_GL_ERROR
();

3284 
	ggl_
->
GíBuf„rs
(1, &
hFí˚Pœ√EA_
);

3285 
NVXIO_CHECK_GL_ERROR
();

3287 
	ggl_
->
BödVîãxAºay
(
hFí˚Pœ√VAO_
);

3288 
NVXIO_CHECK_GL_ERROR
();

3289 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 
hFí˚Pœ√VBO_
);

3290 
NVXIO_CHECK_GL_ERROR
();

3291 
	ggl_
->
BödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
hFí˚Pœ√EA_
);

3292 
NVXIO_CHECK_GL_ERROR
();

3294 
	ggl_
->
Buf„rD©a
(
GL_ARRAY_BUFFER
, 
∂™es_vîti˚s_
.
ˇ∑côy
(Ë* (
GLÊﬂt
), 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

3295 
NVXIO_CHECK_GL_ERROR
();

3296 
	ggl_
->
VîãxAâribPoöãr
((
GLuöt
)0, 3, 
GL_FLOAT
, 
GL_FALSE
, 0, 0);

3297 
NVXIO_CHECK_GL_ERROR
();

3298 
	ggl_
->
E«bÀVîãxAâribAºay
(0);

3299 
NVXIO_CHECK_GL_ERROR
();

3300 
	ggl_
->
Buf„rD©a
(
GL_ELEMENT_ARRAY_BUFFER
, 
∂™es_ñemíts_
.
ˇ∑côy
(Ë* (
GLush‹t
), 
nuŒ±r
, 
GL_DYNAMIC_DRAW
);

3301 
NVXIO_CHECK_GL_ERROR
();

3303 
	ggl_
->
BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

3304 
NVXIO_CHECK_GL_ERROR
();

3305 
	ggl_
->
BödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 0);

3306 
NVXIO_CHECK_GL_ERROR
();

3307 
	ggl_
->
BödVîãxAºay
(0);

3308 
NVXIO_CHECK_GL_ERROR
();

3312 
	g„n˚Pœ√Progøm_
 = 
gl_
->
Cª©eProgøm
();

3313 
NVXIO_CHECK_GL_ERROR
();

3315 i‡(
	ggl_
->
IsProgøm
(
„n˚Pœ√Progøm_
Ë=
GL_FALSE
)

3317 
NVXIO_PRINT
("FencePlaneRender:Érror creating shaderÖrogram");

3318  
	gÁl£
;

3321 i‡(!
compûeProgøm
(
gl_
, 
„n˚Pœ√Progøm_
,

3322 
„n˚_∂™e_ªndî_shadî_vs_code
,

3323 
„n˚_∂™e_ªndî_shadî_fs_code
))

3324  
	gÁl£
;

3326  
	gåue
;

3329 
	gnvidüio
::
Fí˚Pœ√Rídî
::
	$ªÀa£
()

3331 i‡(!
gl_
)

3334 
gl_
->
	`DñëeBuf„rs
(1, &
hFí˚Pœ√VBO_
);

3335 
	`NVXIO_CHECK_GL_ERROR
();

3336 
hFí˚Pœ√VBO_
 = 0u;

3338 
gl_
->
	`DñëeBuf„rs
(1, &
hFí˚Pœ√EA_
);

3339 
	`NVXIO_CHECK_GL_ERROR
();

3340 
hFí˚Pœ√EA_
 = 0u;

3342 
gl_
->
	`DñëeVîãxAºays
(1, &
hFí˚Pœ√VAO_
);

3343 
	`NVXIO_CHECK_GL_ERROR
();

3344 
hFí˚Pœ√VAO_
 = 0u;

3346 
gl_
->
	`DñëeProgøm
(
„n˚Pœ√Progøm_
);

3347 
	`NVXIO_CHECK_GL_ERROR
();

3348 
„n˚Pœ√Progøm_
 = 0u;

3349 
	}
}

3351 
	gnvidüio
::
Fí˚Pœ√Rídî
::
	$ªndî
(c⁄° 
¨øy_t
 & 
∂™es
, c⁄° 
m©rix4x4f_t
 & 
MVP
,

3352 c⁄° 
nvidüio
::
Rídî3D
::
Pœ√StyÀ
& 
°yÀ
)

3354 
	`NVXIO_ASSERT
(
°yÀ
.
maxDi°™˚
 >°yÀ.
möDi°™˚
);

3355 
	`NVXIO_ASSERT
(
bufC≠acôy_
 >
∂™es
.
num_ôems
);

3357 
	`upd©eAºay
(
∂™es
, 
MVP
);

3358 
	`ªndîAºay
(
°yÀ
);

3359 
	}
}

3361 
	gnvidüio
::
Fí˚Pœ√Rídî
::
	$upd©eAºay
(c⁄° 
¨øy_t
 & 
∂™es
, c⁄° 
m©rix4x4f_t
 & 
MVP
)

3363 
d©aMVP_
 = 
MVP
.
±r
;

3365 
	`NVXIO_ASSERT
(
∂™es
.
ôem_ty≥
 =
NVXCU_TYPE_POINT3F
);

3367 
∂™es_vîti˚s_
.
	`˛ór
();

3368 
∂™es_ñemíts_
.
	`˛ór
();

3370 
uöt32_t
 
size
 = 
∂™es
.
num_ôems
;

3372 i‡(
size
 == 0)

3375 
	`NVXIO_ASSERT
(
size
 % 4 == 0);

3377 
size
 = 
°d
::
	`mö
(size, 
bufC≠acôy_
);

3379 
∂™es_ñemíts_
.
	`ª£rve
((
size
 >> 2) * 6);

3380 
∂™es_vîti˚s_
.
	`ª£rve
(
size
);

3382 c⁄° 
nvxcu_poöt3f_t
 * 
±r
 = 
°©ic_ˇ°
<c⁄°Çvxcu_poöt3f_à*>(
∂™es
.ptr);

3384 
GLush‹t
 
i
 = 0; i < 
°©ic_ˇ°
<GLush‹t>(
size
); i += 4)

3386 
nvxcu_poöt3f_t
 
±1
 = 
±r
[
i
 + 0];

3387 
nvxcu_poöt3f_t
 
±2
 = 
±r
[
i
 + 1];

3388 
nvxcu_poöt3f_t
 
±3
 = 
±r
[
i
 + 2];

3389 
nvxcu_poöt3f_t
 
±4
 = 
±r
[
i
 + 3];

3391 
∂™es_vîti˚s_
.
	`push_back
(
±1
.
x
);

3392 
∂™es_vîti˚s_
.
	`push_back
(
±1
.
y
);

3393 
∂™es_vîti˚s_
.
	`push_back
(
±1
.
z
);

3395 
∂™es_vîti˚s_
.
	`push_back
(
±2
.
x
);

3396 
∂™es_vîti˚s_
.
	`push_back
(
±2
.
y
);

3397 
∂™es_vîti˚s_
.
	`push_back
(
±2
.
z
);

3399 
∂™es_vîti˚s_
.
	`push_back
(
±3
.
x
);

3400 
∂™es_vîti˚s_
.
	`push_back
(
±3
.
y
);

3401 
∂™es_vîti˚s_
.
	`push_back
(
±3
.
z
);

3403 
∂™es_vîti˚s_
.
	`push_back
(
±4
.
x
);

3404 
∂™es_vîti˚s_
.
	`push_back
(
±4
.
y
);

3405 
∂™es_vîti˚s_
.
	`push_back
(
±4
.
z
);

3407 
∂™es_ñemíts_
.
	`push_back
(
i
);

3408 
∂™es_ñemíts_
.
	`push_back
(
i
 + 1);

3409 
∂™es_ñemíts_
.
	`push_back
(
i
 + 2);

3410 
∂™es_ñemíts_
.
	`push_back
(
i
);

3411 
∂™es_ñemíts_
.
	`push_back
(
i
 + 3);

3412 
∂™es_ñemíts_
.
	`push_back
(
i
 + 2);

3414 
	}
}

3416 
	gnvidüio
::
Fí˚Pœ√Rídî
::
	$ªndîAºay
(c⁄° 
nvidüio
::
Rídî3D
::
Pœ√StyÀ
& 
°yÀ
)

3418 
gl_
->
	`E«bÀ
(
GL_DEPTH_TEST
);

3419 
	`NVXIO_CHECK_GL_ERROR
();

3420 
gl_
->
	`DïthFunc
(
GL_LESS
);

3421 
	`NVXIO_CHECK_GL_ERROR
();

3422 
gl_
->
	`E«bÀ
(
GL_BLEND
);

3423 
	`NVXIO_CHECK_GL_ERROR
();

3424 
gl_
->
	`BÀndFunc
(
GL_SRC_ALPHA
, 
GL_ONE_MINUS_SRC_ALPHA
);

3425 
	`NVXIO_CHECK_GL_ERROR
();

3427 #i‚de‡
USE_GLES


3428 
gl_
->
	`E«bÀ
(
GL_VERTEX_PROGRAM_POINT_SIZE
);

3429 
	`NVXIO_CHECK_GL_ERROR
();

3432 
gl_
->
	`U£Progøm
(
„n˚Pœ√Progøm_
);

3433 
	`NVXIO_CHECK_GL_ERROR
();

3435 
gl_
->
	`BödVîãxAºay
(
hFí˚Pœ√VAO_
);

3436 
	`NVXIO_CHECK_GL_ERROR
();

3438 
gl_
->
	`Unif‹mM©rix4fv
(0, 1, 
GL_FALSE
, 
d©aMVP_
);

3439 
	`NVXIO_CHECK_GL_ERROR
();

3440 
gl_
->
	`Unif‹m1f
(1, 
°yÀ
.
maxDi°™˚
);

3441 
	`NVXIO_CHECK_GL_ERROR
();

3442 
gl_
->
	`Unif‹m1f
(2, 
°yÀ
.
möDi°™˚
);

3443 
	`NVXIO_CHECK_GL_ERROR
();

3444 
gl_
->
	`Unif‹m1f
(3, 1.0‡/ (
°yÀ
.
maxDi°™˚
 - styÀ.
möDi°™˚
));

3445 
	`NVXIO_CHECK_GL_ERROR
();

3447 
size_t
 
nPoötCou¡
 = 
∂™es_ñemíts_
.
	`size
();

3449 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 
hFí˚Pœ√VBO_
);

3450 
	`NVXIO_CHECK_GL_ERROR
();

3451 
gl_
->
	`BödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 
hFí˚Pœ√EA_
);

3452 
	`NVXIO_CHECK_GL_ERROR
();

3454 
gl_
->
	`Buf„rSubD©a
(
GL_ARRAY_BUFFER
, 0, 
∂™es_vîti˚s_
.
	`size
(Ë* (
GLÊﬂt
), (*)&planes_vertices_[0]);

3455 
	`NVXIO_CHECK_GL_ERROR
();

3456 
gl_
->
	`Buf„rSubD©a
(
GL_ELEMENT_ARRAY_BUFFER
, 0, 
nPoötCou¡
 * (
GLush‹t
), (*)&
∂™es_ñemíts_
[0]);

3457 
	`NVXIO_CHECK_GL_ERROR
();

3459 
gl_
->
	`DøwEÀmíts
(
GL_TRIANGLES
, 
°©ic_ˇ°
<
GLsizei
>(
nPoötCou¡
), 
GL_UNSIGNED_SHORT
, 
nuŒ±r
);

3460 
	`NVXIO_CHECK_GL_ERROR
();

3462 
gl_
->
	`BödBuf„r
(
GL_ARRAY_BUFFER
, 0);

3463 
	`NVXIO_CHECK_GL_ERROR
();

3464 
gl_
->
	`BödBuf„r
(
GL_ELEMENT_ARRAY_BUFFER
, 0);

3465 
	`NVXIO_CHECK_GL_ERROR
();

3466 
gl_
->
	`BödVîãxAºay
(0);

3467 
	`NVXIO_CHECK_GL_ERROR
();

3468 
gl_
->
	`U£Progøm
(0);

3469 
	`NVXIO_CHECK_GL_ERROR
();

3471 
gl_
->
	`DißbÀ
(
GL_DEPTH_TEST
);

3472 
	`NVXIO_CHECK_GL_ERROR
();

3473 
gl_
->
	`DißbÀ
(
GL_BLEND
);

3474 
	`NVXIO_CHECK_GL_ERROR
();

3475 #i‚de‡
USE_GLES


3476 
gl_
->
	`DißbÀ
(
GL_VERTEX_PROGRAM_POINT_SIZE
);

3477 
	`NVXIO_CHECK_GL_ERROR
();

3479 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/OpenGLBasicRenders.hpp

29 #i‚de‡
OPENGL_BASIC_RENDERS_HPP


30 
	#OPENGL_BASIC_RENDERS_HPP


	)

32 
	~<ve˘‹
>

33 
	~<s°ªam
>

34 
	~<°dex˚±
>

36 #ifde‡
USE_GUI


37 
	~"O≥nGL.hµ
"

40 
	~<·2buûd.h
>

41 
	gFT_BEGIN_HEADER


42 #ö˛udê
FT_FREETYPE_H


43 
	gFT_END_HEADER


45 
	~<cuda_ru¡ime.h
>

47 #i‚de‡
__ANDROID__


48 
	~"Rídî/RídîIm∂.hµ
"

49 
	~"Rídî/Rídî3DIm∂.hµ
"

51 
	~"RídîIm∂.hµ
"

55 
	~"Priv©e/LogUtûs.hµ
"

57 #i‚de‡
NDEBUG


58 
__checkGlEº‹
(
°d
::
sh¨ed_±r
<
nvidüio
::
GLFun˘i⁄s
> 
gl_
, c⁄° * 
fûe
, 
löe
);

60 
	#NVXIO_CHECK_GL_ERROR
(Ë
	`__checkGlEº‹
(
gl_
, 
__FILE__
, 
__LINE__
)

	)

62 
	#NVXIO_CHECK_GL_ERROR
(Ë

	)

65 
«me•a˚
 
	gnvidüio


68 ˛as†
	cImageRídî


70 
	gpublic
:

71 
ImageRídî
();

73 
boﬁ
 
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
, 
uöt32_t
 
wndWidth
, uöt32_à
wndHeight
);

74 
ªÀa£
();

76 
ªndî
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
imageWidth
, uöt32_à
imageHeight
);

78 
	g¥iv©e
:

79 
upd©eTextuª
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
imageWidth
, uöt32_à
imageHeight
);

80 
ªndîTextuª
();

82 
	g°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
gl_
;

83 
GLuöt
 
	gwndWidth_
, 
	gwndHeight_
;

85 
GLuöt
 
	gãx_
[3];

86 
cudaGøphicsResour˚_t
 
	gªs_
[3];

87 
GLubyã
 *
	gho°_±r_
[3];

88 
GLuöt
 
	gvao_
;

89 
GLuöt
 
	gvbo_
;

91 
GLuöt
 
	gpùñöe_
[3], 
	g‰agmítProgøm_
[3];

92 
GLöt
 
	gödex_
;

93 
GLÊﬂt
 
	gsˇÀUnif‹mX_
, 
	gsˇÀUnif‹mY_
;

94 
boﬁ
 
	gmu…iGPUI¡î›_
;

97 ˛as†
	cNV12ImageRídî


99 
	gpublic
:

100 
NV12ImageRídî
();

102 
boﬁ
 
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
, 
uöt32_t
 
wndWidth
, uöt32_à
wndHeight
);

103 
ªÀa£
();

105 
ªndî
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
imageWidth
, uöt32_à
imageHeight
);

107 
	g¥iv©e
:

108 
upd©eTextuª
(c⁄° 
image_t
 & 
image
, 
uöt32_t
 
imageWidth
, uöt32_à
imageHeight
);

109 
ªndîTextuª
();

111 
	g°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
gl_
;

112 
GLuöt
 
	gwndWidth_
, 
	gwndHeight_
;

114 
GLuöt
 
	gãx_
[2];

115 
cudaGøphicsResour˚_t
 
	gªs_
[2];

116 
GLubyã
 *
	gho°_±r_
[2];

117 
GLuöt
 
	gvao_
;

118 
GLuöt
 
	gvbo_
;

120 
GLuöt
 
	g¥ogøm_
;

121 
GLÊﬂt
 
	gsˇÀUnif‹mX_
, 
	gsˇÀUnif‹mY_
;

122 
boﬁ
 
	gmu…iGPUI¡î›_
;

126 ˛as†
	cRe˘™gÀRídî


128 
	gpublic
:

129 
Re˘™gÀRídî
();

131 
boﬁ
 
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
);

132 
ªÀa£
();

134 
ªndî
(c⁄° 
nvxcu_ª˘™gÀ_t
 & 
loˇti⁄
, c⁄° 
Rídî
::
Dëe˘edObje˘StyÀ
& 
°yÀ
,

135 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀ
);

137 
	g¥iv©e
:

138 
upd©eAºay
(c⁄° 
nvxcu_ª˘™gÀ_t
& 
loˇti⁄
, 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀ
);

139 
ªndîAºay
(c⁄° 
Rídî
::
Dëe˘edObje˘StyÀ
& 
°yÀ
);

141 
	g°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
gl_
;

143 
GLuöt
 
	gvbo_
;

144 
GLuöt
 
	gvao_
;

145 
GLuöt
 
	g¥ogøm_
;

148 ˛as†
	cFótuªsRídî


150 
	gpublic
:

151 
FótuªsRídî
();

153 
boﬁ
 
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
);

154 
ªÀa£
();

156 
ªndî
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄° 
Rídî
::
FótuªStyÀ
& 
°yÀ
,

157 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
);

158 
ªndî
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄°áºay_à& 
°yÀs
, 
uöt32_t
 
width
,

159 
uöt32_t
 
height
, 
sˇÀR©io
);

161 
	g¥iv©e
:

162 
upd©eAºay
(
uöt32_t
 
°¨t_x
, uöt32_à
íd_x
, c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄°áºay_à& 
°yÀs
);

163 
ªndîAºay
(
uöt32_t
 
num_ôems
, uöt32_à
width
, uöt32_à
height
, 
sˇÀR©io
,

164 c⁄° 
Rídî
::
FótuªStyÀ
& 
°yÀ
);

166 
	g°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
gl_
;

168 
uöt32_t
 
	gbufC≠acôy_
;

169 
GLuöt
 
	gvbo_
, 
	gvboStyÀs_
;

170 
GLuöt
 
	gvao_
;

171 
cudaGøphicsResour˚_t
 
	gªs_
, 
	gªsStyÀs_
;

172 
GLubyã
 *
	gho°_ªs_
, *
	gho°_ªs_°yÀs_
;

173 
GLuöt
 
	gpùñöe_
;

174 
GLuöt
 
	gvîãxShadîPoöts_
, 
	gvîãxShadîKeyPoöts_
;

175 
GLuöt
 
	gvîãxShadîPoötsPîFótuª_
, 
	gvîãxShadîKeyPoötsPîFótuª_
;

176 
GLuöt
 
	g‰agmítShadî_
, 
	g‰agmítShadîPîFótuª_
;

178 
nvxcu_¨øy_ôem_ty≥_e
 
	gcuºítFótuªTy≥_
;

179 
boﬁ
 
	g≥rFótuªStyÀ_
;

180 
boﬁ
 
	gmu…iGPUI¡î›_
;

183 ˛as†
	cLöesRídî


185 
	gpublic
:

186 
LöesRídî
();

188 
boﬁ
 
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
);

189 
ªÀa£
();

192 
ªndî
(c⁄° 
¨øy_t
 & 
löes
, c⁄° 
Rídî
::
LöeStyÀ
& 
°yÀ
,

193 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
);

195 
ªndî
(c⁄° 
°d
::
ve˘‹
<
nvxcu_poöt4f_t
> & 
löes
, c⁄° 
Rídî
::
LöeStyÀ
& 
°yÀ
,

196 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
);

198 
	g¥iv©e
:

200 
upd©eAºay
(
uöt32_t
 
°¨t_x
, uöt32_à
íd_x
, c⁄° 
¨øy_t
 & 
löes
);

202 
upd©eAºay
(
uöt32_t
 
°¨t_x
, uöt32_à
íd_x
, c⁄° 
°d
::
ve˘‹
<
nvxcu_poöt4f_t
> & 
löes
);

204 
ªndîAºay
(
uöt32_t
 
num_ôems
, c⁄° 
Rídî
::
LöeStyÀ
& 
°yÀ
,

205 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
);

207 
	g°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
gl_
;

208 
cudaGøphicsResour˚_t
 
	gªs_
;

209 
GLubyã
 *
	gho°_±r_
;

210 
uöt32_t
 
	gbufC≠acôy_
;

212 
GLuöt
 
	gvbo_
[2];

213 
GLuöt
 
	gvao_
[2];

214 
GLuöt
 
	g¥ogøm_
;

215 
GLboﬁón
 
	gisCPU
;

216 
boﬁ
 
	gmu…iGPUI¡î›_
;

219 ˛as†
	cAºowsRídî


221 
	gpublic
:

222 
AºowsRídî
();

224 
boﬁ
 
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
);

225 
ªÀa£
();

227 
ªndî
(c⁄° 
¨øy_t
 & 
ﬁd_poöts
, c⁄°áºay_à& 
√w_poöts
, c⁄° 
Rídî
::
LöeStyÀ
& 
löe_°yÀ
,

228 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
);

230 
	g¥iv©e
:

231 
upd©eLöesAºay
(
uöt32_t
 
°¨t_x
, uöt32_à
íd_x
,

232 c⁄° 
¨øy_t
 & 
ﬁd_poöts
, c⁄°áºay_à& 
√w_poöts
,

233 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
);

235 
ªndîAºay
(
uöt32_t
 
num_ôems
, c⁄° 
Rídî
::
LöeStyÀ
& 
°yÀ
);

237 
	g°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
gl_
;

238 
cudaGøphicsResour˚_t
 
	gªsOld_
, 
	gªsNew_
;

239 
GLubyã
 *
	gho°_ﬁd_ssbo_±r_
, *
	gho°_√w_ssbo_±r_
;

240 
uöt32_t
 
	gbufC≠acôy_
;

242 
GLuöt
 
	gvbo_
, 
	gssboOld_
, 
	gssboNew_
;

243 
GLuöt
 
	gvao_
;

244 
GLuöt
 
	g¥ogøm_
,

245 
	gcompuãShadîProgømPoöts_
,

246 
	gcompuãShadîProgømVxKeyPoöts_
,

247 
	gcompuãShadîProgømNvxKeyPoöts_
;

249 
nvxcu_¨øy_ôem_ty≥_e
 
	g„©uªTy≥_
;

250 
boﬁ
 
	gmu…iGPUI¡î›_
;

253 ˛as†
	cMŸi⁄FõldRídî


255 
	gpublic
:

256 
MŸi⁄FõldRídî
();

258 
boﬁ
 
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
, 
uöt32_t
 
width
, uöt32_à
height
);

259 
ªÀa£
();

261 
ªndî
(c⁄° 
image_t
 & 
fõld
, c⁄° 
Rídî
::
MŸi⁄FõldStyÀ
& 
°yÀ
, 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
);

263 
	g¥iv©e
:

264 
upd©eAºay
(c⁄° 
image_t
 & 
fõld
, 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
);

265 
ªndîAºay
(c⁄° 
Rídî
::
MŸi⁄FõldStyÀ
& 
°yÀ
);

267 
	g°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
gl_
;

269 
uöt32_t
 
	gˇ∑côy_
, 
	gnumPoöts_
;

270 
GLuöt
 
	gssbo_
;

271 
GLuöt
 
	gvao_
;

272 
cudaGøphicsResour˚_t
 
	gªs_
;

273 
GLÊﬂt
 *
	gho°_±r_
;

274 
GLuöt
 
	g¥ogøm_
;

276 
GLuöt
 
	gcompuãShadîProgøm_
;

277 
GLuöt
 
	gssboTex_
;

278 
boﬁ
 
	gmu…iGPUI¡î›_
;

281 ˛as†
	cCú˛esRídî


283 
	gpublic
:

284 
Cú˛esRídî
();

286 
boﬁ
 
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
);

287 
ªÀa£
();

289 
ªndî
(c⁄° 
¨øy_t
 & 
cú˛es
, c⁄° 
Rídî
::
Cú˛eStyÀ
& 
°yÀ
, 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
);

291 
	g¥iv©e
:

292 
upd©eAºay
(c⁄° 
¨øy_t
 & 
cú˛es
);

293 
ªndîAºay
(c⁄° 
Rídî
::
Cú˛eStyÀ
& 
°yÀ
, 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
);

295 
	g°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
gl_
;

297 
	g°d
::
ve˘‹
<
nvxcu_poöt4f_t
> 
poöts_
;

298 
	g°d
::
ve˘‹
<
uöt8_t
> 
tmpAºay_
;

299 
uöt32_t
 
	gbufC≠acôy_
;

300 
GLuöt
 
	gvbo_
;

301 
GLuöt
 
	gvao_
;

302 
GLuöt
 
	g¥ogøm_
;

305 ˛as†
	cTextRídî


307 
	gpublic
:

308 
TextRídî
();

309 ~
TextRídî
();

311 
boﬁ
 
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
);

312 
ªÀa£
();

314 
ªndî
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
Rídî
::
TextBoxStyÀ
& 
°yÀ
,

315 
uöt32_t
 
width
, uöt32_à
height
, 
sˇÀR©io
);

317 
	g¥iv©e
:

318 
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
gl_
;

320 
FT_Libøry
 
	g·_
;

321 
FT_Fa˚
 
	gÁ˚_
;

324 
GLuöt
 
	g¥ogømBg_
;

326 
GLuöt
 
	g¥ogøm_
;

328 
GLuöt
 
	gãx_
;

330 
size_t
 
	gbufC≠acôy_
;

331 
GLuöt
 
	gvbo_
;

332 
GLuöt
 
	gvboEA_
;

333 
GLuöt
 
	gvao_
;

335 
GLuöt
 
	gbgVbo_
;

336 
GLuöt
 
	gbgVao_
;

338 
	sCh¨a˘îInfo


340 
	gax
;

341 
	gay
;

343 
	gbw
;

344 
	gbh
;

346 
	gbl
;

347 
	gbt
;

349 
	gtx
;

350 } 
	gc
[128];

351 
	g©œsWidth_
, 
	g©œsHeight_
;

353 
	g°d
::
ve˘‹
<
nvxcu_poöt4f_t
> 
poöts_
;

354 
	g°d
::
ve˘‹
<
GLush‹t
> 
ñemíts_
;

357 #i‚de‡
__ANDROID__


359 ˛as†
	cPoötCloudRídî


361 
	gpublic
:

362 
PoötCloudRídî
();

364 
boﬁ
 
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
);

365 
ªÀa£
();

367 
ªndî
(c⁄° 
¨øy_t
 & 
poöts
, c⁄° 
m©rix4x4f_t
 & 
MVP
, c⁄° 
nvidüio
::
Rídî3D
::
PoötCloudStyÀ
& 
°yÀ
);

369 
	g¥iv©e
:

370 
upd©eAºay
(c⁄° 
m©rix4x4f_t
 & 
MVP
);

371 
ªndîAºay
(c⁄° 
¨øy_t
 & 
poöts
, c⁄° 
nvidüio
::
Rídî3D
::
PoötCloudStyÀ
& 
°yÀ
);

373 
	g°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
gl_
;

375 
GLuöt
 
	gpoötCloudProgøm_
;

376 
GLuöt
 
	ghPoötCloudVBO_
;

377 
GLuöt
 
	ghPoötCloudVAO_
;

379 
uöt32_t
 
	gbufC≠acôy_
;

381 * 
	gd©aMVP_
;

384 ˛as†
	cFí˚Pœ√Rídî


386 
	gpublic
:

387 
Fí˚Pœ√Rídî
();

389 
boﬁ
 
öô
(
°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
_gl
);

390 
ªÀa£
();

392 
ªndî
(c⁄° 
¨øy_t
 & 
∂™es
, c⁄° 
m©rix4x4f_t
 & 
MVP
, c⁄° 
nvidüio
::
Rídî3D
::
Pœ√StyÀ
 & 
°yÀ
);

394 
	g¥iv©e
:

395 
upd©eAºay
(c⁄° 
¨øy_t
 & 
∂™es
, c⁄° 
m©rix4x4f_t
 & 
MVP
);

396 
ªndîAºay
(c⁄° 
nvidüio
::
Rídî3D
::
Pœ√StyÀ
& 
°yÀ
);

398 
	g°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
gl_
;

400 
GLuöt
 
	g„n˚Pœ√Progøm_
;

401 
GLuöt
 
	ghFí˚Pœ√VBO_
;

402 
GLuöt
 
	ghFí˚Pœ√EA_
;

403 
GLuöt
 
	ghFí˚Pœ√VAO_
;

405 
uöt32_t
 
	gbufC≠acôy_
;

407 * 
	gd©aMVP_
;

409 
	g°d
::
ve˘‹
<
GLÊﬂt
> 
∂™es_vîti˚s_
;

410 
	g°d
::
ve˘‹
<
GLush‹t
> 
∂™es_ñemíts_
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/OpenGLRenderImpl.cpp

29 #ifde‡
USE_GUI


31 
	~"O≥nGLRídîIm∂.hµ
"

33 
	~<cm©h
>

34 
	~<limôs
>

35 
	~<Æg‹ôhm
>

37 #ifde‡
_WIN32


39 
	#NOMINMAX


	)

40 
	~<wödows.h
>

43 
	~<cuda_gl_öãr›.h
>

45 
	~<NVX/ProfûîR™ge.hµ
>

46 #i‚de‡
__ANDROID__


47 
	~<NVX/Aµliˇti⁄.hµ
>

50 
	~"RídîUtûs.hµ
"

52 c⁄° 
	gf⁄tSize
 = 20;

54 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$O≥nGLRídîIm∂
(
T¨gëTy≥
 
ty≥
, c⁄° 
°d
::
°rög
& 
«me
) :

55 
	`Rídî
(
ty≥
, 
«me
),

56 
	`wndWidth_
(0u), 
	`wndHeight_
(0u),

57 
	`fboTex_
(0u), 
	`doSˇÀ_
(
åue
), 
	`ãxtuªWidth_
(0u), 
	`ãxtuªHeight_
(0u),

58 
	`sˇÀR©ioImage_
(1.0f), 
	`fbo_
(0u), 
	`fboOld_
(0u), 
	$imagePut_
(
Ál£
)

60 
	}
}

62 
uöt32_t
 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$gëVõwp‹tWidth
() const

64 i‡(!
imagePut_
)

65 
	`NVXIO_THROW_EXCEPTION
("You haveÅo `putImage` first before invokingÅhis method");

67  
ãxtuªWidth_
;

68 
	}
}

70 
uöt32_t
 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$gëVõwp‹tHeight
() const

72 i‡(!
imagePut_
)

73 
	`NVXIO_THROW_EXCEPTION
("You haveÅo `putImage` first before invokingÅhis method");

75  
ãxtuªHeight_
;

76 
	}
}

78 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$putImage
(c⁄° 
image_t
 & 
image
)

80 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::putImage (NVXIO)");

83 
imagePut_
 = 
åue
;

85 
uöt32_t
 
imageWidth
 = 
image
.
width
, 
imageHeight
 = image.
height
;

89 
boﬁ
 
imageIsBiggîTh™Wödow
 = (
wndWidth_
 < 
imageWidth
 || 
wndHeight_
 < 
imageHeight
);

90 i‡(
imageIsBiggîTh™Wödow
)

92 
	`NVXIO_PRINT
("Image size (%u x %u) is biggerÅhen window (%u x %u). Do scalingÅo fit in window",

93 
imageWidth
, 
imageHeight
, 
wndWidth_
, 
wndHeight_
);

97 i‡(
doSˇÀ_
 || 
imageIsBiggîTh™Wödow
)

99 
widthR©io
 = 
°©ic_ˇ°
<>(
wndWidth_
Ë/ 
imageWidth
;

100 
heightR©io
 = 
°©ic_ˇ°
<>(
wndHeight_
Ë/ 
imageHeight
;

101 
sˇÀR©ioImage_
 = 
°d
::
	`mö
(
widthR©io
, 
heightR©io
);

103 
ãxtuªWidth_
 = 
°©ic_ˇ°
<
uöt32_t
>(
sˇÀR©ioImage_
 * 
imageWidth
);

104 
ãxtuªHeight_
 = 
°©ic_ˇ°
<
uöt32_t
>(
sˇÀR©ioImage_
 * 
imageHeight
);

108 
sˇÀR©ioImage_
 = 1.0f;

109 
ãxtuªWidth_
 = 
imageWidth
;

110 
ãxtuªHeight_
 = 
imageHeight
;

114 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

116 i‡(
image
.
f‹m©
 =
NVXCU_DF_IMAGE_NV12
)

117 
nv12imageRídî_
.
	`ªndî
(
image
, 
ãxtuªWidth_
, 
ãxtuªHeight_
);

119 
imageRídî_
.
	`ªndî
(
image
, 
ãxtuªWidth_
, 
ãxtuªHeight_
);

121 
	}
}

123 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄° 
FótuªStyÀ
& 
°yÀ
)

125 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::putFeatures (NVXIO)");

127 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

128 
„©uªsRídî_
.
	`ªndî
(
loˇti⁄
, 
°yÀ
, 
ãxtuªWidth_
, 
ãxtuªHeight_
, 
sˇÀR©ioImage_
);

129 
	}
}

131 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄°áºay_à& 
°yÀs
)

133 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::putFeatures (NVXIO)");

135 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

136 
„©uªsRídî_
.
	`ªndî
(
loˇti⁄
, 
°yÀs
, 
ãxtuªWidth_
, 
ãxtuªHeight_
, 
sˇÀR©ioImage_
);

137 
	}
}

139 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$putLöes
(c⁄° 
¨øy_t
 & 
löes
, c⁄° 
LöeStyÀ
& 
°yÀ
)

141 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::putLines (NVXIO)");

143 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

144 
löesRídî_
.
	`ªndî
(
löes
, 
°yÀ
, 
ãxtuªWidth_
, 
ãxtuªHeight_
, 
sˇÀR©ioImage_
);

145 
	}
}

147 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$putMŸi⁄Fõld
(c⁄° 
image_t
 & 
fõld
, c⁄° 
MŸi⁄FõldStyÀ
& 
°yÀ
)

149 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::putMotionField (NVXIO)");

151 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

152 
mŸi⁄FõldRídî_
.
	`ªndî
(
fõld
, 
°yÀ
, 
ãxtuªWidth_
, 
ãxtuªHeight_
, 
sˇÀR©ioImage_
);

153 
	}
}

155 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$putCú˛es
(c⁄° 
¨øy_t
 & 
cú˛es
, c⁄° 
Cú˛eStyÀ
& 
°yÀ
)

157 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::putCircles (NVXIO)");

159 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

160 
cú˛esRídî_
.
	`ªndî
(
cú˛es
, 
°yÀ
, 
ãxtuªWidth_
, 
ãxtuªHeight_
, 
sˇÀR©ioImage_
);

161 
	}
}

163 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$putTextVõwp‹t
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
TextBoxStyÀ
& 
°yÀ
)

165 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::putTextViewport (NVXIO)");

167 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

168 
ãxtRídî_
.
	`ªndî
(
ãxt
, 
°yÀ
, 
ãxtuªWidth_
, 
ãxtuªHeight_
, 1.0f);

169 
	}
}

171 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$putObje˘Loˇti⁄
(c⁄° 
nvxcu_ª˘™gÀ_t
& 
loˇti⁄
, c⁄° 
Dëe˘edObje˘StyÀ
& 
°yÀ
)

173 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::putObjectLocation (NVXIO)");

175 i‡(
°yÀ
.
ødius
 > 0 && styÀ.
isHÆfTøn•¨ít
)

177 
	`NVXIO_THROW_EXCEPTION
("'Rounded corners'ánd 'half-transparent' modesáre mutuallyÉxclusiveÇow.");

181 
	`NVXIO_ASSERT
(
loˇti⁄
.
°¨t_x
 <loˇti⁄.
íd_x
);

182 
	`NVXIO_ASSERT
(
loˇti⁄
.
°¨t_y
 <loˇti⁄.
íd_y
);

184 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

187 
GLÊﬂt
 
widths
[2];

188 
gl_
->
	`GëFlﬂtv
(
GL_ALIASED_LINE_WIDTH_RANGE
, 
widths
);

189 
	`NVXIO_CHECK_GL_ERROR
();

191 
GLuöt
 
löeWidth
 = 
°d
::
max
<GLuöt>(°d::
mö
<GLuöt>(
widths
[1], 
°yÀ
.
thick√ss
), widths[0]);

194 
nvxcu_poöt4f_t
 
löes
[4];

196 #i‚de‡
USE_GLES


199 
löeWidth
 -= (lineWidth % 2) ? 1 : 2;

203 
löeWidth
 -= (lineWidth % 2) ? 0 : 1;

206 
GLÊﬂt
 
thick√ss2
 = 
löeWidth
 / 2;

207 
GLÊﬂt
 
thick√ss2_
 = 
löeWidth
 - 
thick√ss2
;

210 
GLÊﬂt
 
maxRadius
 = 
°d
::
	`mö
(
loˇti⁄
.
íd_x
 -Üoˇti⁄.
°¨t_x
,

211 
loˇti⁄
.
íd_y
 -Üoˇti⁄.
°¨t_y
) / 2.0f;

213 
GLÊﬂt
 
ødius
 = 
°©ic_ˇ°
<GLÊﬂt>(
°yÀ
.radius);

215 i‡(
ødius
 > 
maxRadius
)

217 
	`NVXIO_PRINT
("MaxÑadiu†(%fËi†smÆÀ∏th™ s≥cifõd o√ (%f). Cœmpög", 
maxRadius
, 
ødius
);

218 
ødius
 = 
maxRadius
;

222 
löes
[0].
x
 = 
loˇti⁄
.
°¨t_x
 - 
thick√ss2
 + 
ødius
;

223 
löes
[0].
y
 = 
°©ic_ˇ°
<
GLÊﬂt
>(
loˇti⁄
.
°¨t_y
);

224 
löes
[0].
z
 = 
loˇti⁄
.
íd_x
 + 
thick√ss2_
 - 
ødius
;

225 
löes
[0].
w
 = 
°©ic_ˇ°
<
GLÊﬂt
>(
loˇti⁄
.
°¨t_y
);

227 
löes
[1].
x
 = 
loˇti⁄
.
°¨t_x
 - 
thick√ss2
 + 
ødius
;

228 
löes
[1].
y
 = 
°©ic_ˇ°
<
GLÊﬂt
>(
loˇti⁄
.
íd_y
);

229 
löes
[1].
z
 = 
loˇti⁄
.
íd_x
 + 
thick√ss2_
 - 
ødius
;

230 
löes
[1].
w
 = 
°©ic_ˇ°
<
GLÊﬂt
>(
loˇti⁄
.
íd_y
);

232 #i‚de‡
USE_GLES


235 
thick√ss2
 = 
thick√ss2_
 = 0;

239 
löes
[2].
x
 = 
°©ic_ˇ°
<
GLÊﬂt
>(
loˇti⁄
.
íd_x
);

240 
löes
[2].
y
 = 
loˇti⁄
.
°¨t_y
 - 
thick√ss2
 + 
ødius
;

241 
löes
[2].
z
 = 
°©ic_ˇ°
<
GLÊﬂt
>(
loˇti⁄
.
íd_x
);

242 
löes
[2].
w
 = 
loˇti⁄
.
íd_y
 + 
thick√ss2_
 - 
ødius
;

244 
löes
[3].
x
 = 
°©ic_ˇ°
<
GLÊﬂt
>(
loˇti⁄
.
°¨t_x
);

245 
löes
[3].
y
 = 
loˇti⁄
.
°¨t_y
 - 
thick√ss2
 + 
ødius
;

246 
löes
[3].
z
 = 
°©ic_ˇ°
<
GLÊﬂt
>(
loˇti⁄
.
°¨t_x
);

247 
löes
[3].
w
 = 
loˇti⁄
.
íd_y
 + 
thick√ss2_
 - 
ødius
;

251 
tmpLöesCPU_
.
	`˛ór
();

252 
vx_size
 
i
 = 0u; i < 
ovxio
::
	`dimOf
(
löes
); ++i)

253 
tmpLöesCPU_
.
	`push_back
(
löes
[
i
]);

257 
nvxcu_poöt3f_t
 
c
 = { 
loˇti⁄
.
°¨t_x
 + 
ødius
,Üoˇti⁄.
°¨t_y
 +Ñadius,Ñadius };

258 
num_£gmíts
 = 
	`gëNumCú˛eSegmíts
(
c
.
z
);

259 
	`gíCú˛eLöes
(
tmpLöesCPU_
, 
c
.
x
, c.
y
, c.
z
, 
num_£gmíts
, 4, 
ovxio
::
PI_F
);

261 
nvxcu_poöt3f_t
 
c1
 = { 
loˇti⁄
.
íd_x
 - 
ødius
,Üoˇti⁄.
°¨t_y
 +Ñadius,Ñadius };

262 
	`gíCú˛eLöes
(
tmpLöesCPU_
, 
c1
.
x
, c1.
y
, c1.
z
, 
num_£gmíts
, 4, 3.0‡* 
ovxio
::
PI_F
 / 2);

264 
nvxcu_poöt3f_t
 
c2
 = { 
loˇti⁄
.
°¨t_x
 + 
ødius
,Üoˇti⁄.
íd_y
 -Ñadius,Ñadius };

265 
	`gíCú˛eLöes
(
tmpLöesCPU_
, 
c2
.
x
, c2.
y
, c2.
z
, 
num_£gmíts
, 4, 
ovxio
::
PI_F
 / 2);

267 
nvxcu_poöt3f_t
 
c3
 = { 
loˇti⁄
.
íd_x
 - 
ødius
,Üoˇti⁄.
íd_y
 -Ñadius,Ñadius };

268 
	`gíCú˛eLöes
(
tmpLöesCPU_
, 
c3
.
x
, c3.
y
, c3.
z
, 
num_£gmíts
, 4, 0.0f);

271 
LöeStyÀ
 
löeStyÀ
 = {

272 { 
°yÀ
.
cﬁ‹
[0], style.color[1], style.color[2], style.color[3] },

273 
°yÀ
.
thick√ss


276 
löesRídî_
.
	`ªndî
(
tmpLöesCPU_
, 
löeStyÀ
, 
ãxtuªWidth_
, 
ãxtuªHeight_
, 
sˇÀR©ioImage_
);

279 i‡(
°yÀ
.
isHÆfTøn•¨ít
)

280 
ª˘™gÀRídî_
.
	`ªndî
(
loˇti⁄
, 
°yÀ
, 
ãxtuªWidth_
, 
ãxtuªHeight_
, 
sˇÀR©ioImage_
);

283 i‡(!
°yÀ
.
œbñ
.
	`em±y
())

285 
nvxcu_co‹dö©es2d_t
 
ãxtOrigö
 = {

286 
loˇti⁄
.
°¨t_x
,

287 
loˇti⁄
.
°¨t_y
 - 
°©ic_ˇ°
<
uöt32_t
>((
f⁄tSize
 + 5Ë/ 
sˇÀR©ioImage_
)

290 
TextBoxStyÀ
 
ãxtStyÀ
 = {

291 {
°yÀ
.
cﬁ‹
[0], style.color[1], style.color[2], style.color[3]},

293 
ãxtOrigö


296 
ãxtRídî_
.
	`ªndî
(
°yÀ
.
œbñ
, 
ãxtStyÀ
, 
ãxtuªWidth_
, 
ãxtuªHeight_
, 
sˇÀR©ioImage_
);

298 
	}
}

300 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$putAºows
(c⁄° 
¨øy_t
 & 
ﬁd_poöts
, c⁄°áºay_à& 
√w_poöts
,

301 c⁄° 
LöeStyÀ
 & 
löe_°yÀ
)

303 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::putArrows (NVXIO)");

305 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

306 
¨rowsRídî_
.
	`ªndî
(
ﬁd_poöts
, 
√w_poöts
, 
löe_°yÀ
, 
ãxtuªWidth_
, 
ãxtuªHeight_
, 
sˇÀR©ioImage_
);

307 
	}
}

309 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$putC⁄vexPﬁyg⁄
(c⁄° 
¨øy_t
 & 
vîticõs
, c⁄° 
LöeStyÀ
& 
°yÀ
)

311 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::putConvexPolygon (NVXIO)");

313 
uöt32_t
 
vCou¡
 = 
vîticõs
.
num_ôems
;

315 
	`NVXIO_ASSERT
–
vîticõs
.
ôem_ty≥
 =
NVXCU_TYPE_COORDINATES2D
 );

317 i‡(
vCou¡
 > 1u)

319 
Aºay2CPUPoöãrM≠≥r
 
	`m≠≥r
(
vîticõs
);

321 c⁄° 
nvxcu_co‹dö©es2d_t
 * 
±r
 = 
°©ic_ˇ°
<c⁄°Çvxcu_co‹dö©es2d_à*>(
m≠≥r
);

323 
tmpLöesCPU_
.
	`˛ór
();

325 
uöt32_t
 
j
 = 1u; j < 
vCou¡
; ++j)

327 
nvxcu_poöt4f_t
 
löe
 =

329 ()
±r
[
j
-1].
x
, (Ìå[j-1].
y
,

330 ()
±r
[
j
].
x
, (Ìå[j].
y
,

333 
tmpLöesCPU_
.
	`push_back
(
löe
);

338 
nvxcu_poöt4f_t
 
löe
 =

340 ()
±r
[
vCou¡
 - 1].
x
, (Ìå[vCou¡ - 1].
y
,

341 ()
±r
[0].
x
, (Ìå[0].
y
,

344 
tmpLöesCPU_
.
	`push_back
(
löe
);

347 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

348 
löesRídî_
.
	`ªndî
(
tmpLöesCPU_
, 
°yÀ
, 
ãxtuªWidth_
, 
ãxtuªHeight_
, 
sˇÀR©ioImage_
);

350 
	}
}

352 
boﬁ
 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$öôGL
(
uöt32_t
 
wndWidth
, uöt32_à
wndHeight
)

354 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

356 
wndWidth_
 = 
wndWidth
;

357 
wndHeight_
 = 
wndHeight
;

359 i‡(!
gl_
)

361 
gl_
 = 
°d
::
make_sh¨ed
<
GLFun˘i⁄s
>();

364 
	`lﬂdGLFun˘i⁄s
(
gl_
.
	`gë
());

368 i‡((
èrgëTy≥
 =
nvxio
::
Rídî
::
VIDEO_RENDER
) ||

369 (
èrgëTy≥
 =
nvxio
::
Rídî
::
IMAGE_RENDER
))

371 
gl_
->
	`GëI¡egîv
(
GL_FRAMEBUFFER_BINDING
, (
GLöt
 *)&
fboOld_
);

372 
	`NVXIO_CHECK_GL_ERROR
();

374 
gl_
->
	`GíTextuªs
(1, &
fboTex_
);

375 
	`NVXIO_CHECK_GL_ERROR
();

376 
gl_
->
	`A˘iveTextuª
(
GL_TEXTURE0
);

377 
	`NVXIO_CHECK_GL_ERROR
();

378 
gl_
->
	`BödTextuª
(
GL_TEXTURE_2D
, 
fboTex_
);

379 
	`NVXIO_CHECK_GL_ERROR
();

381 i‡(
gl_
->
	`IsTextuª
(
fboTex_
Ë=
GL_FALSE
)

383 
	`NVXIO_CHECK_GL_ERROR
();

384 
	`NVXIO_PRINT
("OpenGLÑender: failedÅo createÅexture object");

385  
Ál£
;

388 
gl_
->
	`TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_NEAREST
);

389 
	`NVXIO_CHECK_GL_ERROR
();

390 
gl_
->
	`TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_NEAREST
);

391 
	`NVXIO_CHECK_GL_ERROR
();

392 
gl_
->
	`TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_S
, 
GL_CLAMP_TO_EDGE
);

393 
	`NVXIO_CHECK_GL_ERROR
();

394 
gl_
->
	`TexP¨amëîi
(
GL_TEXTURE_2D
, 
GL_TEXTURE_WRAP_T
, 
GL_CLAMP_TO_EDGE
);

395 
	`NVXIO_CHECK_GL_ERROR
();

396 
gl_
->
	`TexImage2D
(
GL_TEXTURE_2D
, 0, 
GL_RGBA
, 
wndWidth
, 
wndHeight
, 0, GL_RGBA, 
GL_UNSIGNED_BYTE
, 
nuŒ±r
);

397 
	`NVXIO_CHECK_GL_ERROR
();

399 
gl_
->
	`GíFømebuf„rs
(1, &
fbo_
);

400 
	`NVXIO_CHECK_GL_ERROR
();

401 
gl_
->
	`BödFømebuf„r
(
GL_FRAMEBUFFER
, 
fbo_
);

402 
	`NVXIO_CHECK_GL_ERROR
();

403 i‡(
gl_
->
	`IsFømebuf„r
(
fbo_
Ë=
GL_FALSE
)

405 
	`NVXIO_CHECK_GL_ERROR
();

406 
	`NVXIO_PRINT
("OpenGLÑender: failedÅo create framebuffer object");

407  
Ál£
;

410 
gl_
->
	`Fømebuf„rTextuª2D
(
GL_FRAMEBUFFER
, 
GL_COLOR_ATTACHMENT0
, 
GL_TEXTURE_2D
, 
fboTex_
, 0);

411 
	`NVXIO_CHECK_GL_ERROR
();

412 i‡(
gl_
->
	`CheckFømebuf„rSètus
(
GL_FRAMEBUFFER
Ë!
GL_FRAMEBUFFER_COMPLETE
)

414 
	`NVXIO_CHECK_GL_ERROR
();

415 
	`NVXIO_PRINT
("OpenGLÑender: failedÅoáttach framebuffer");

416  
Ál£
;

420 i‡(!
imageRídî_
.
	`öô
(
gl_
, 
wndWidth_
, 
wndHeight_
))

421  
Ál£
;

423 i‡(!
nv12imageRídî_
.
	`öô
(
gl_
, 
wndWidth_
, 
wndHeight_
))

424  
Ál£
;

426 i‡(!
„©uªsRídî_
.
	`öô
(
gl_
))

427  
Ál£
;

429 i‡(!
löesRídî_
.
	`öô
(
gl_
))

430  
Ál£
;

432 i‡(!
mŸi⁄FõldRídî_
.
	`öô
(
gl_
, 
wndWidth_
, 
wndHeight_
))

433  
Ál£
;

435 i‡(!
cú˛esRídî_
.
	`öô
(
gl_
))

436  
Ál£
;

438 i‡(!
ª˘™gÀRídî_
.
	`öô
(
gl_
))

439  
Ál£
;

441 i‡(!
¨rowsRídî_
.
	`öô
(
gl_
))

442  
Ál£
;

444 i‡(!
ãxtRídî_
.
	`öô
(
gl_
))

445  
Ál£
;

447 
gl_
->
	`E«bÀ
(
GL_BLEND
);

448 
	`NVXIO_CHECK_GL_ERROR
();

449 
gl_
->
	`BÀndFunc
(
GL_SRC_ALPHA
, 
GL_ONE_MINUS_SRC_ALPHA
);

450 
	`NVXIO_CHECK_GL_ERROR
();

452  
åue
;

453 
	}
}

455 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$föÆGL
()

457 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

459 
imageRídî_
.
	`ªÀa£
();

460 
nv12imageRídî_
.
	`ªÀa£
();

461 
„©uªsRídî_
.
	`ªÀa£
();

462 
löesRídî_
.
	`ªÀa£
();

463 
mŸi⁄FõldRídî_
.
	`ªÀa£
();

464 
cú˛esRídî_
.
	`ªÀa£
();

465 
ª˘™gÀRídî_
.
	`ªÀa£
();

466 
¨rowsRídî_
.
	`ªÀa£
();

467 
ãxtRídî_
.
	`ªÀa£
();

469 i‡(
gl_
)

472 i‡(
fboOld_
 != 0u)

474 
gl_
->
	`BödFømebuf„r
(
GL_FRAMEBUFFER
, 
fboOld_
);

475 
	`NVXIO_CHECK_GL_ERROR
();

478 i‡(
fbo_
 != 0u)

480 
gl_
->
	`DñëeFømebuf„rs
(1, &
fbo_
);

481 
	`NVXIO_CHECK_GL_ERROR
();

482 
fbo_
 = 0u;

485 i‡(
fboTex_
 != 0u)

487 
gl_
->
	`DñëeTextuªs
(1, &
fboTex_
);

488 
	`NVXIO_CHECK_GL_ERROR
();

489 
fboTex_
 = 0u;

492 
	}
}

494 #i‚de‡
__ANDROID__


496 
	gnvidüio
::
O≥nGLRídîIm∂
::
	$˛órGlBuf„r
()

498 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

500 
gl_
->
	`CÀ¨Cﬁ‹
(0.0f, 0.0f, 0.0f, 1.0f);

501 
	`NVXIO_CHECK_GL_ERROR
();

502 
gl_
->
	`CÀ¨
(
GL_COLOR_BUFFER_BIT
);

503 
	`NVXIO_CHECK_GL_ERROR
();

504 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/OpenGLRenderImpl.hpp

29 #i‚de‡
OPENGL_RENDER_IMPL_HPP


30 
	#OPENGL_RENDER_IMPL_HPP


	)

32 
	~<ve˘‹
>

33 
	~<mem‹y
>

35 #ifde‡
USE_GUI


36 
	~"O≥nGL.hµ
"

39 #ifde‡
__ANDROID__


40 
	~"RídîIm∂.hµ
"

42 
	~"Rídî/RídîIm∂.hµ
"

45 
	~"O≥nGLBasicRídîs.hµ
"

47 
«me•a˚
 
	gnvidüio


50 ˛as†
	cO≥nGLC⁄ãxtHﬁdî


52 
	gpublic
:

54 
vútuÆ
 
£t
() = 0;

57 
vútuÆ
 
un£t
() = 0;

60 ˛as†
	cO≥nGLC⁄ãxtHﬁdîDummy
 :

61 
public
 
O≥nGLC⁄ãxtHﬁdî


63 
public
:

64 
vútuÆ
 
£t
() { }

65 
vútuÆ
 
un£t
() { }

68 ˛as†
	cO≥nGLC⁄ãxtSa„Sëãr


70 
	gpublic
:

71 
ex∂icô
 
O≥nGLC⁄ãxtSa„Sëãr
(
°d
::
sh¨ed_±r
<
O≥nGLC⁄ãxtHﬁdî
> 
c⁄ãxt
) :

72 
c⁄ãxt_
(
c⁄ãxt
)

74 
c⁄ãxt_
->
£t
();

77 ~
O≥nGLC⁄ãxtSa„Sëãr
()

79 
	gc⁄ãxt_
->
un£t
();

82 
	g¥iv©e
:

83 
°d
::
sh¨ed_±r
<
O≥nGLC⁄ãxtHﬁdî
> 
c⁄ãxt_
;

86 ˛as†
	cO≥nGLRídîIm∂
 :

87 
public
 
Rídî


89 
public
:

90 
vútuÆ
 
putImage
(c⁄° 
image_t
 & 
image
);

91 
vútuÆ
 
putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄° 
FótuªStyÀ
 & 
°yÀ
);

92 
vútuÆ
 
putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄°áºay_à& 
°yÀs
);

93 
vútuÆ
 
putLöes
(c⁄° 
¨øy_t
 & 
löes
, c⁄° 
LöeStyÀ
& 
°yÀ
);

94 
vútuÆ
 
putMŸi⁄Fõld
(c⁄° 
image_t
 & 
fõld
, c⁄° 
MŸi⁄FõldStyÀ
& 
°yÀ
);

95 
vútuÆ
 
putCú˛es
(c⁄° 
¨øy_t
 & 
cú˛es
, c⁄° 
Cú˛eStyÀ
& 
°yÀ
);

96 
vútuÆ
 
putObje˘Loˇti⁄
(c⁄° 
nvxcu_ª˘™gÀ_t
& 
loˇti⁄
, c⁄° 
Dëe˘edObje˘StyÀ
& 
°yÀ
);

97 
vútuÆ
 
putC⁄vexPﬁyg⁄
(c⁄° 
¨øy_t
 & 
vîticõs
, c⁄° 
LöeStyÀ
& 
°yÀ
);

98 
vútuÆ
 
putAºows
(c⁄° 
¨øy_t
 & 
ﬁd_poöts
, c⁄°áºay_à& 
√w_poöts
, c⁄° 
LöeStyÀ
& 
löe_°yÀ
);

99 
vútuÆ
 
putTextVõwp‹t
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
TextBoxStyÀ
& 
°yÀ
);

101 
vútuÆ
 
uöt32_t
 
gëVõwp‹tWidth
() const;

102 
vútuÆ
 
uöt32_t
 
gëVõwp‹tHeight
() const;

104 
	g¥Ÿe˘ed
:

106 
O≥nGLRídîIm∂
(
T¨gëTy≥
 
ty≥
, c⁄° 
°d
::
°rög
& 
«me
);

107 
	gvútuÆ
 ~
O≥nGLRídîIm∂
() { }

109 
boﬁ
 
öôGL
(
uöt32_t
 
wndWidth
, uöt32_à
wndHeight
);

110 
föÆGL
();

113 #ifde‡
__ANDROID__


114 
vútuÆ
 
¸óãO≥nGLC⁄ãxtHﬁdî
()

116 
	ghﬁdî_
 = 
°d
::
make_sh¨ed
<
O≥nGLC⁄ãxtHﬁdîDummy
>();

119 
vútuÆ
 
¸óãO≥nGLC⁄ãxtHﬁdî
() = 0;

121 
˛órGlBuf„r
();

124 
	g°d
::
sh¨ed_±r
<
GLFun˘i⁄s
> 
gl_
;

125 
uöt32_t
 
	gwndWidth_
, 
	gwndHeight_
;

128 
GLuöt
 
	gfboTex_
;

129 
boﬁ
 
	gdoSˇÀ_
;

130 
uöt32_t
 
	gãxtuªWidth_
, 
	gãxtuªHeight_
;

131 
	gsˇÀR©ioImage_
;

133 
	g°d
::
sh¨ed_±r
<
O≥nGLC⁄ãxtHﬁdî
> 
hﬁdî_
;

135 
	g¥iv©e
:

136 
ImageRídî
 
imageRídî_
;

137 
NV12ImageRídî
 
	gnv12imageRídî_
;

138 
FótuªsRídî
 
	g„©uªsRídî_
;

139 
LöesRídî
 
	glöesRídî_
;

140 
MŸi⁄FõldRídî
 
	gmŸi⁄FõldRídî_
;

141 
Cú˛esRídî
 
	gcú˛esRídî_
;

142 
Re˘™gÀRídî
 
	gª˘™gÀRídî_
;

143 
AºowsRídî
 
	g¨rowsRídî_
;

144 
TextRídî
 
	gãxtRídî_
;

146 
	g°d
::
ve˘‹
<
nvxcu_poöt4f_t
> 
tmpLöesCPU_
;

149 
GLuöt
 
	gfbo_
, 
	gfboOld_
;

150 
boﬁ
 
	gimagePut_
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/RenderUtils.hpp

29 #i‚de‡
RENDER_UTILS_HPP


30 
	#RENDER_UTILS_HPP


	)

32 
	~<cm©h
>

33 
	~<ve˘‹
>

35 
	~"Priv©e/Ty≥s.hµ
"

37 
«me•a˚
 
	gnvidüio
 {

39 
ölöe
 
öt32_t
 
gëNumCú˛eSegmíts
(
r
)

41  
	g°©ic_ˇ°
<>(10 * 
sqπf
(
r
));

44 
ölöe
 
addToAºay
(
°d
::
ve˘‹
<
nvxcu_poöt4f_t
> & 
¨øy
, c⁄°Çvxcu_poöt4f_à& 
ñem
)

46 
	g¨øy
.
push_back
(
ñem
);

49 
	gãm∂©e
 <
ty≥«me
 
	gAºayTy≥
>

50 
gíCú˛eLöes
(
AºayTy≥
 & 
löes
, 
cx
, 
cy
, 
r
,

51 
öt32_t
 
num_£gmíts
, i¡32_à
divis‹
 = 1, 
°¨t_™gÀ
 = 0.0f)

53 
thëa
 = 2.0‡* 
ovxio
::
PI_F
 / 
num_£gmíts
;

56 
	gc
 = 
cosf
(
thëa
);

57 
	gs
 = 
söf
(
thëa
);

59 
	gt
 = 0.0f;

62 
	gx
 = 
r
;

63 
	gy
 = 0;

67 
	gcs
 = 
cosf
(
°¨t_™gÀ
);

68 
	gss
 = 
söf
(
°¨t_™gÀ
);

69 
	gt
 = 
x
;

70 
	gx
 = 
cs
 * 
x
 - 
ss
 * 
y
;

71 
	gy
 = 
ss
 * 
t
 + 
cs
 * 
y
;

74 
	gnum_£gmíts
 = (
num_£gmíts
 + 
divis‹
 - 1) / divisor;

76 
öt32_t
 
	gi
 = 0; i < 
	gnum_£gmíts
 ; i++)

79 
nvxcu_poöt4f_t
 
	g±
;

81 
	g±
.
	gx
 = 
x
 + 
cx
;

82 
	g±
.
	gy
 = 
y
 + 
cy
;

85 
	gt
 = 
x
;

86 
	gx
 = 
c
 * 
x
 - 
s
 * 
y
;

87 
	gy
 = 
s
 * 
t
 + 
c
 * 
y
;

89 
	g±
.
	gz
 = 
x
 + 
cx
;

90 
	g±
.
	gw
 = 
y
 + 
cy
;

92 
addToAºay
(
löes
, 
±
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/EventLogger.cpp

30 
	~"Rídî/EvítLoggî.hµ
"

32 
	~<ve˘‹
>

33 
	~<°rög
>

34 
	~<c°rög
>

35 
	~<Æg‹ôhm
>

37 
	~<cuda_ru¡ime_≠i.h
>

39 #ifde‡
USE_OPENCV


40 
	~<›ícv2/img¥oc/img¥oc.hµ
>

41 
	~<›ícv2/highgui/highgui.hµ
>

44 
boﬁ
 
	$Com∑øt‹Poöt3f
 (c⁄° 
nvxcu_poöt3f_t
 & 
a
, c⁄°Çvxcu_poöt3f_à& 
b
)

46 i‡(
a
.
x
 =
b
.x)

48 i‡(
a
.
y
 =
b
.y)

49  
a
.
z
 < 
b
.z;

51  
a
.
y
 < 
b
.y;

54  
a
.
x
 < 
b
.x;

55 
	}
}

57 
boﬁ
 
	$Com∑øt‹Poöt4f
 (c⁄° 
nvxcu_poöt4f_t
 & 
a
, c⁄°Çvxcu_poöt4f_à& 
b
)

59 i‡(
a
.
x
 =
b
.x)

61 i‡(
a
.
y
 =
b
.y)

63 i‡(
a
.
z
 =
b
.z)

64  
a
.
w
 < 
b
.w;

66  
a
.
z
 < 
b
.z;

69  
a
.
y
 < 
b
.y;

72  
a
.
x
 < 
b
.x;

73 
	}
}

75 
«me•a˚
 
	gnvidüio


78 
	gEvítLoggî
::
EvítLoggî
(
boﬁ
 
_wrôeSrc
):

79 
wrôeSrc
(
_wrôeSrc
),

80 
h™dÀ
(
nuŒ±r
),

81 
‰ameCou¡î
(-1),

82 
keyBﬂrdCÆlback
(
nuŒ±r
),

83 
mou£CÆlback
(
nuŒ±r
)

87 
boﬁ
 
	gEvítLoggî
::
öô
(c⁄° 
°d
::
°rög
 &
∑th
)

89 i‡(
h™dÀ
)

92  
åue
;

95 
size_t
 
	gdŸ
 = 
∑th
.
föd_œ°_of
('.');

96 
	g°d
::
°rög
 
ba£Name
 = 
∑th
.
sub°r
(0, 
dŸ
);

97 
	g°d
::
°rög
 
ext
 = 
∑th
.
sub°r
(
dŸ
, 
°d
::°rög::
≈os
);

99 
	gh™dÀ
 = 
f›í
(
∑th
.
c_°r
(), "rt");

100 i‡(
	gh™dÀ
)

103 
	glogNameIdx
 = 0;

106 
f˛o£
(
h™dÀ
);

107 
	glogNameIdx
++;

108 
	gh™dÀ
 = 
f›í
((
ba£Name
+
°d
::
to_°rög
(
logNameIdx
)+
ext
).
c_°r
(), "rt");

110 
	gh™dÀ
);

112 
	g§cImageFûeP©ã∫
 = 
ba£Name
 + 
°d
::
to_°rög
(
logNameIdx
) + "_src_%05d.png";

113 
	gh™dÀ
 = 
f›í
((
ba£Name
+
°d
::
to_°rög
(
logNameIdx
)+
ext
).
c_°r
(), "wt");

117 
	g§cImageFûeP©ã∫
 = 
ba£Name
 + "_src_%05d.png";

118 
	gh™dÀ
 = 
f›í
(
∑th
.
c_°r
(), "wt");

121 
	g‰ameCou¡î
 = 0;

123  
	gh™dÀ
 !
nuŒ±r
;

126 
	gEvítLoggî
::
£tEfficõ¡Rídî
(
°d
::
unique_±r
<
Rídî
> 
ªndî
)

128 
efficõ¡Rídî
 = 
°d
::
move
(
ªndî
);

129 i‡(
	gefficõ¡Rídî
)

131 
	gefficõ¡Rídî
->
£tOnKeybﬂrdEvítCÆlback
(
keybﬂrd
, 
this
);

132 
	gefficõ¡Rídî
->
£tOnMou£EvítCÆlback
(
mou£
, 
this
);

136 
	gEvítLoggî
::
föÆ
()

138 i‡(
h™dÀ
)

139 
f˛o£
(
h™dÀ
);

141 
	g‰ameCou¡î
 = -1;

144 
	gEvítLoggî
::~
EvítLoggî
()

146 
föÆ
();

149 
	gEvítLoggî
::
keybﬂrd
(* 
c⁄ãxt
, 
key
, 
uöt32_t
 
x
, uöt32_à
y
)

151 
EvítLoggî
* 
	g£lf
 = (EvítLoggî*)
c⁄ãxt
;

152 i‡(!
	gc⁄ãxt
)

154 i‡(
	g£lf
->
	gh™dÀ
)

155 
Ârötf
(
£lf
->
h™dÀ
, "%d: keybﬂrd (%d,%u,%u)\n", sñf->
‰ameCou¡î
, 
key
, 
x
, 
y
);

157 i‡(
	g£lf
->
	gkeyBﬂrdCÆlback
)

158 
	g£lf
->
keyBﬂrdCÆlback
(
£lf
->
keybﬂrdCÆlbackC⁄ãxt
, 
key
, 
x
, 
y
);

161 
	gEvítLoggî
::
mou£
(* 
c⁄ãxt
, 
Rídî
::
Mou£Buâ⁄Evít
 
evít
, 
uöt32_t
 
x
, uöt32_à
y
)

163 
EvítLoggî
* 
	g£lf
 = (EvítLoggî*)
c⁄ãxt
;

164 i‡(!
	gc⁄ãxt
)

167 i‡(
	g£lf
->
	gh™dÀ
)

168 
Ârötf
(
£lf
->
h™dÀ
, "%d: mou£ (%d,%u,%u)\n", sñf->
‰ameCou¡î
, ()
evít
, 
x
, 
y
);

170 i‡(
	g£lf
->
	gmou£CÆlback
)

171 
	g£lf
->
mou£CÆlback
(
£lf
->
mou£CÆlbackC⁄ãxt
, 
evít
, 
x
, 
y
);

174 
	gEvítLoggî
::
putTextVõwp‹t
(c⁄° 
°d
::
°rög
 &
ãxt
, c⁄° 
Rídî
::
TextBoxStyÀ
 &
°yÀ
)

176 i‡(
h™dÀ
)

178 
°d
::
°rög
 
fûãªd
 = "";

179 
size_t
 
	gcuº_pos
 = 0;

180 
size_t
 
	g¥ev_pos
 = 0;

181 (
	gcuº_pos
 = 
ãxt
.
föd
("\n", 
¥ev_pos
)Ë!
°d
::
°rög
::
≈os
)

183 
fûãªd
 +
ãxt
.
sub°r
(
¥ev_pos
, 
cuº_pos
-prev_pos);

184 
	gfûãªd
 += "\\n";

185 
	g¥ev_pos
 = 
cuº_pos
+1;

188 
	gfûãªd
 +
ãxt
.
sub°r
(
¥ev_pos
, 
°d
::
°rög
::
≈os
);

190 
Ârötf
(
h™dÀ
, "%d:ÅextBox(color(%u,%u,%u,%u), bkcolor(%u,%u,%u,%u), origin(%u,%u), \"%s\")\n",

191 
‰ameCou¡î
,

192 
°yÀ
.
cﬁ‹
[0], style.color[1], style.color[2], style.color[3],

193 
°yÀ
.
bgcﬁ‹
[0], style.bgcolor[1], style.bgcolor[2], style.bgcolor[3],

194 
°yÀ
.
‹igö
.
x
, styÀ.‹igö.
y
,

195 
fûãªd
.
c_°r
()

199 i‡(
	gefficõ¡Rídî
)

200 
	gefficõ¡Rídî
->
putTextVõwp‹t
(
ãxt
, 
°yÀ
);

203 
	gEvítLoggî
::
putImage
(c⁄° 
image_t
 & 
image
)

205 i‡(
h™dÀ
)

207 
nvxcu_df_image_e
 
f‹m©
 = 
image
.format;

208 
Ârötf
(
h™dÀ
, "%d: image(%d, %dx%d)\n",

209 
‰ameCou¡î
, 
f‹m©
, 
image
.
width
, image.
height
);

211 #ifde‡
USE_OPENCV


212 i‡(
	gwrôeSrc
)

214 
	gm©Ty≥
 = 
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ? 
CV_8UC4
 :

215 
f‹m©
 =
NVXCU_DF_IMAGE_RGB
 ? 
CV_8UC3
 :

216 
f‹m©
 =
NVXCU_DF_IMAGE_U8
 ? 
CV_8UC1
: -1;

218 i‡(
	gm©Ty≥
 < 0)

220 
	gsF‹m©
[(
f‹m©
)+1];

221 
	g°d
::
mem˝y
(
sF‹m©
, &
f‹m©
, (format));

222 
	gsF‹m©
[(
f‹m©
)] = '\0';

224 
NVXIO_THROW_EXCEPTION
–"Dumpög føme†ö f‹m© " << 
sF‹m©
 << " isÇot supported" );

229 
Image2CPUPoöãrM≠≥r
 
m≠≥r
(
image
);

231 
	gcv
::
M©
 
§cFøme
(
image
.
height
, image.
width
, 
m©Ty≥
, (*)(c⁄° *)
m≠≥r
);

232 
	gcv
::
M©
 
n‹mÆizedFøme
;

234 i‡(
	gf‹m©
 =
NVXCU_DF_IMAGE_U8
)

235 
n‹mÆizedFøme
 = 
§cFøme
;

238 
	gcv
::
cvtCﬁ‹
(
§cFøme
, 
n‹mÆizedFøme
,

239 
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
 ? 
CV_RGBA2BGRA
 : 
CV_RGB2BGR
);

242 
	g°d
::
°rög
 
«me
 = 
cv
::
f‹m©
(
§cImageFûeP©ã∫
.
c_°r
(), 
‰ameCou¡î
);

244 i‡(!
	gcv
::
imwrôe
(
«me
, 
n‹mÆizedFøme
))

245 
Ârötf
(
°dîr
, "C™nŸ wrôê‰amêtÿ%s\n", 
«me
.
c_°r
());

251 i‡(
	gefficõ¡Rídî
)

252 
	gefficõ¡Rídî
->
putImage
(
image
);

255 
	gEvítLoggî
::
putObje˘Loˇti⁄
(c⁄° 
nvxcu_ª˘™gÀ_t
 &
loˇti⁄
, c⁄° 
Rídî
::
Dëe˘edObje˘StyÀ
 &
°yÀ
)

257 i‡(
h™dÀ
)

259 
Ârötf
(
h™dÀ
, "%d: object(color(%u,%u,%u,%u),Üocation(%u,%u,%u,%u), \"%s\")\n",

260 
‰ameCou¡î
,

261 
°yÀ
.
cﬁ‹
[0], style.color[1], style.color[2], style.color[3],

262 
loˇti⁄
.
°¨t_x
,Üoˇti⁄.
°¨t_y
,Üoˇti⁄.
íd_x
,Üoˇti⁄.
íd_y
,

263 
°yÀ
.
œbñ
.
c_°r
()

267 i‡(
	gefficõ¡Rídî
)

268 
	gefficõ¡Rídî
->
putObje˘Loˇti⁄
(
loˇti⁄
, 
°yÀ
);

271 
	gEvítLoggî
::
putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄° 
Rídî
::
FótuªStyÀ
 &
°yÀ
)

273 i‡(
h™dÀ
)

275 
nvxcu_¨øy_ôem_ty≥_e
 
ôem_ty≥
 = 
loˇti⁄
.item_type;

276 
NVXIO_ASSERT
–(
ôem_ty≥
 =
NVXCU_TYPE_KEYPOINT
Ë|| (ôem_ty≥ =
NVXCU_TYPE_POINT2F
Ë|| (ôem_ty≥ =
NVXCU_TYPE_KEYPOINTF
) );

278 
Ârötf
(
h™dÀ
, "%d: features(color(%u,%u,%u,%u), %u",

279 
‰ameCou¡î
,

280 
°yÀ
.
cﬁ‹
[0], style.color[1], style.color[2], style.color[3],

281 
loˇti⁄
.
num_ôems
);

283 i‡(
	gloˇti⁄
.
	gnum_ôems
 > 0u)

285 
Aºay2CPUPoöãrM≠≥r
 
m≠≥r
(
loˇti⁄
);

287 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_KEYPOINT
)

289 c⁄° 
nvxcu_keypoöt_t
 * 
„©uªD©a
 = 
°©ic_ˇ°
<c⁄°Çvxcu_keypoöt_à*>(
m≠≥r
);

291 
uöt32_t
 
	gi
 = 0u; i < 
	gloˇti⁄
.
	gnum_ôems
; i++)

293 
nvxcu_keypoöt_t
 
	g„©uª
 = 
„©uªD©a
[
i
];

294 
Ârötf
(
h™dÀ
, ",·r(%d,%d)", 
„©uª
.
x
, fótuª.
y
);

297 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_POINT2F
)

299 c⁄° 
nvxcu_poöt2f_t
 * 
„©uªD©a
 = 
°©ic_ˇ°
<c⁄°Çvxcu_poöt2f_à*>(
m≠≥r
);

301 
uöt32_t
 
	gi
 = 0u; i < 
	gloˇti⁄
.
	gnum_ôems
; i++)

303 
nvxcu_poöt2f_t
 
	g„©uª
 = 
„©uªD©a
[
i
];

304 
Ârötf
(
h™dÀ
, ",·r(%.1f,%.1f)", 
„©uª
.
x
, fótuª.
y
);

307 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_KEYPOINTF
)

309 c⁄° 
nvxcu_keypoötf_t
 * 
„©uªD©a
 = 
°©ic_ˇ°
<c⁄°Çvxcu_keypoötf_à*>(
m≠≥r
);

311 
uöt32_t
 
	gi
 = 0u; i < 
	gloˇti⁄
.
	gnum_ôems
; i++)

313 
nvxcu_keypoötf_t
 
	g„©uª
 = 
„©uªD©a
[
i
];

314 
Ârötf
(
h™dÀ
, ",·r(%.1f,%.1f)", 
„©uª
.
x
, fótuª.
y
);

319 
Ârötf
(
h™dÀ
, ")\n");

322 i‡(
	gefficõ¡Rídî
)

323 
	gefficõ¡Rídî
->
putFótuªs
(
loˇti⁄
, 
°yÀ
);

326 
	gEvítLoggî
::
putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄°áºay_à& 
°yÀs
)

328 i‡(
	gh™dÀ
)

330 
nvxcu_¨øy_ôem_ty≥_e
 
	gôem_ty≥
 = 
loˇti⁄
.
ôem_ty≥
;

331 
NVXIO_ASSERT
–(
ôem_ty≥
 =
NVXCU_TYPE_KEYPOINT
Ë|| (ôem_ty≥ =
NVXCU_TYPE_POINT2F
Ë|| (ôem_ty≥ =
NVXCU_TYPE_KEYPOINTF
) );

332 
NVXIO_ASSERT
–
loˇti⁄
.
num_ôems
 =
°yÀs
.num_items );

334 
Ârötf
(
h™dÀ
, "%d: fótuªs(%u", 
‰ameCou¡î
, 
loˇti⁄
.
num_ôems
);

336 i‡(
	gloˇti⁄
.
	gnum_ôems
 > 0u)

338 
Aºay2CPUPoöãrM≠≥r
 
°yÀM≠≥r
(
°yÀs
), 
loˇti⁄M≠≥r
(
loˇti⁄
);

340 c⁄° 
	gRídî
::
FótuªStyÀ
 * 
°yÀD©a
 = 
°©ic_ˇ°
<c⁄° 
Rídî
::FótuªStyÀ *>(
°yÀM≠≥r
);

342 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_KEYPOINT
)

344 c⁄° 
nvxcu_keypoöt_t
 * 
„©uªD©a
 = 
°©ic_ˇ°
<c⁄°Çvxcu_keypoöt_à*>(
loˇti⁄M≠≥r
);

346 
uöt32_t
 
	gi
 = 0u; i < 
	gloˇti⁄
.
	gnum_ôems
; i++)

348 c⁄° 
	gnvxcu_keypoöt_t
 & 
	g„©uª
 = 
„©uªD©a
[
i
];

349 c⁄° 
	gRídî
::
FótuªStyÀ
 & 
°yÀ
 = 
°yÀD©a
[
i
];

351 
Ârötf
(
h™dÀ
, ",·r(%d,%d,%u,%u,%u,%u)", 
„©uª
.
x
, fótuª.
y
,

352 
°yÀ
.
cﬁ‹
[0], style.color[1], style.color[2], style.color[3]);

355 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_POINT2F
)

357 c⁄° 
nvxcu_poöt2f_t
 * 
„©uªD©a
 = 
°©ic_ˇ°
<c⁄°Çvxcu_poöt2f_à*>(
loˇti⁄M≠≥r
);

359 
uöt32_t
 
	gi
 = 0u; i < 
	gloˇti⁄
.
	gnum_ôems
; i++)

361 c⁄° 
	gnvxcu_poöt2f_t
 & 
	g„©uª
 = 
„©uªD©a
[
i
];

362 c⁄° 
	gRídî
::
FótuªStyÀ
 & 
°yÀ
 = 
°yÀD©a
[
i
];

364 
Ârötf
(
h™dÀ
, ",·r(%.1f,%.1f,%u,%u,%u,%u)", 
„©uª
.
x
, fótuª.
y
,

365 
°yÀ
.
cﬁ‹
[0], style.color[1], style.color[2], style.color[3]);

368 i‡(
	gôem_ty≥
 =
NVXCU_TYPE_KEYPOINTF
)

370 c⁄° 
nvxcu_keypoötf_t
 * 
„©uªD©a
 = 
°©ic_ˇ°
<c⁄°Çvxcu_keypoötf_à*>(
loˇti⁄M≠≥r
);

372 
uöt32_t
 
	gi
 = 0u; i < 
	gloˇti⁄
.
	gnum_ôems
; i++)

374 c⁄° 
	gnvxcu_keypoötf_t
 & 
	g„©uª
 = 
„©uªD©a
[
i
];

375 c⁄° 
	gRídî
::
FótuªStyÀ
 & 
°yÀ
 = 
°yÀD©a
[
i
];

377 
Ârötf
(
h™dÀ
, ",·r(%.1f,%.1f,%u,%u,%u,%u)", 
„©uª
.
x
, fótuª.
y
,

378 
°yÀ
.
cﬁ‹
[0], style.color[1], style.color[2], style.color[3]);

383 
Ârötf
(
h™dÀ
, ")\n");

386 i‡(
	gefficõ¡Rídî
)

387 
	gefficõ¡Rídî
->
putFótuªs
(
loˇti⁄
, 
°yÀs
);

390 
	gEvítLoggî
::
putLöes
(c⁄° 
¨øy_t
 & 
löes
, c⁄° 
Rídî
::
LöeStyÀ
 &
°yÀ
)

392 i‡(
h™dÀ
)

394 
Ârötf
(
h™dÀ
, "%d:Üines(color(%u,%u,%u,%u),Åhickness(%d), %u",

395 
‰ameCou¡î
,

396 
°yÀ
.
cﬁ‹
[0], style.color[1], style.color[2], style.color[3],

397 
°yÀ
.
thick√ss
,

398 
löes
.
num_ôems
);

400 i‡(
	glöes
.
	gnum_ôems
 > 0u)

402 
Aºay2CPUPoöãrM≠≥r
 
m≠≥r
(
löes
);

404 
nvxcu_poöt4f_t
 * 
	glöesD©a
 = (nvxcu_poöt4f_à*)(c⁄°Çvxcu_poöt4f_à*)(
m≠≥r
);

406 
	g°d
::
s‹t
(
löesD©a
,ÜöesD©®+ 
löes
.
num_ôems
, &
Com∑øt‹Poöt4f
);

408 
uöt32_t
 
	gi
 = 0u; i < 
	glöes
.
	gnum_ôems
; i++)

410 
Ârötf
(
h™dÀ
, ",line(%d,%d,%d,%d)",

411 
°©ic_ˇ°
<
öt32_t
>(
löesD©a
[
i
].
x
),

412 
°©ic_ˇ°
<
öt32_t
>(
löesD©a
[
i
].
y
),

413 
°©ic_ˇ°
<
öt32_t
>(
löesD©a
[
i
].
z
),

414 
°©ic_ˇ°
<
öt32_t
>(
löesD©a
[
i
].
w
));

418 
Ârötf
(
h™dÀ
, ")\n");

421 i‡(
	gefficõ¡Rídî
)

422 
	gefficõ¡Rídî
->
putLöes
(
löes
, 
°yÀ
);

425 
	gEvítLoggî
::
putC⁄vexPﬁyg⁄
(c⁄° 
¨øy_t
 & 
vîticõs
, c⁄° 
LöeStyÀ
& 
°yÀ
)

427 i‡(
	gh™dÀ
)

429 
Ârötf
(
h™dÀ
, "%d:Öolygon(color(%u,%u,%u,%u),Åhickness(%d), %u",

430 
‰ameCou¡î
,

431 
°yÀ
.
cﬁ‹
[0], style.color[1], style.color[2], style.color[3],

432 
°yÀ
.
thick√ss
,

433 
vîticõs
.
num_ôems
);

435 i‡(
	gvîticõs
.
	gnum_ôems
 > 0u)

437 
Aºay2CPUPoöãrM≠≥r
 
m≠≥r
(
vîticõs
);

439 c⁄° 
nvxcu_co‹dö©es2d_t
 * 
	gvîticõsD©a
 = 
°©ic_ˇ°
<c⁄°Çvxcu_co‹dö©es2d_à*>(
m≠≥r
);

441 
uöt32_t
 
	gi
 = 0u; i < 
	gvîticõs
.
	gnum_ôems
; i++)

443 c⁄° 
	gnvxcu_co‹dö©es2d_t
 & 
	gôem
 = 
vîticõsD©a
[
i
];

444 
Ârötf
(
h™dÀ
, ",vîãx(%u,%u)", 
ôem
.
x
, iãm.
y
);

448 
Ârötf
(
h™dÀ
, ")\n");

451 i‡(
	gefficõ¡Rídî
)

452 
	gefficõ¡Rídî
->
putC⁄vexPﬁyg⁄
(
vîticõs
, 
°yÀ
);

455 
	gEvítLoggî
::
putMŸi⁄Fõld
(c⁄° 
image_t
 & 
fõld
, c⁄° 
Rídî
::
MŸi⁄FõldStyÀ
 &
°yÀ
)

457 i‡(
h™dÀ
)

458 
Ârötf
(
h™dÀ
, "%d: motionField(color(%u,%u,%u,%u)",

459 
‰ameCou¡î
, 
°yÀ
.
cﬁ‹
[0], style.color[1], style.color[2], style.color[3]);

461 
Ârötf
(
h™dÀ
, ",%dx%d", 
fõld
.
width
, fõld.
height
);

464 
Image2CPUPoöãrM≠≥r
 
m≠≥r
(
fõld
);

466 c⁄° * 
	gfõldD©a
 = 
°©ic_ˇ°
<c⁄° *>(
m≠≥r
);

467 
uöt32_t
 
	gpôch
 = 
fõld
.
width
 << 1;

469 
uöt32_t
 
	gy
 = 0u; y < 
	gfõld
.
	gheight
; y++)

471 c⁄° * 
	gfõldRow
 = 
fõldD©a
 + 
pôch
 * 
y
;

473 
uöt32_t
 
	gx
 = 0u; x < 
	gpôch
; x += 2)

474 
Ârötf
(
h™dÀ
, ",%f,%f", 
fõldRow
[
x
], fieldRow[x + 1]);

478 
Ârötf
(
h™dÀ
, ")\n");

480 i‡(
	gefficõ¡Rídî
)

481 
	gefficõ¡Rídî
->
putMŸi⁄Fõld
(
fõld
, 
°yÀ
);

484 
	gEvítLoggî
::
putCú˛es
(c⁄° 
¨øy_t
 & 
cú˛es
, c⁄° 
Cú˛eStyÀ
& 
°yÀ
)

486 i‡(
	gh™dÀ
)

488 
Ârötf
(
h™dÀ
, "%d: circles(color(%u,%u,%u,%u),Åhickness(%d), %u",

489 
‰ameCou¡î
,

490 
°yÀ
.
cﬁ‹
[0], style.color[1], style.color[2], style.color[3],

491 
°yÀ
.
thick√ss
,

492 
cú˛es
.
num_ôems
);

494 i‡(
	gcú˛es
.
	gnum_ôems
 > 0u)

496 
Aºay2CPUPoöãrM≠≥r
 
m≠≥r
(
cú˛es
);

498 
nvxcu_poöt3f_t
 * 
	gcú˛esD©a
 = (nvxcu_poöt3f_à*)(c⁄°Çvxcu_poöt3f_à*)(
m≠≥r
);

500 
	g°d
::
s‹t
(
cú˛esD©a
, cú˛esD©®+ 
cú˛es
.
num_ôems
, &
Com∑øt‹Poöt3f
);

502 
uöt32_t
 
	gi
 = 0u; i < 
	gcú˛es
.
	gnum_ôems
; i++)

504 c⁄° 
	gnvxcu_poöt3f_t
 & 
	gcú˛e
 = 
cú˛esD©a
[
i
];

505 
Ârötf
(
h™dÀ
, ",cú˛e(%f,%f,%f)", 
cú˛e
.
x
, cú˛e.
y
, cú˛e.
z
);

509 
Ârötf
(
h™dÀ
, ")\n");

512 i‡(
	gefficõ¡Rídî
)

513 
	gefficõ¡Rídî
->
putCú˛es
(
cú˛es
, 
°yÀ
);

516 
	gEvítLoggî
::
putAºows
(c⁄° 
¨øy_t
 & 
ﬁd_poöts
, c⁄°áºay_à& 
√w_poöts
,

517 c⁄° 
LöeStyÀ
& 
löe_°yÀ
)

519 i‡(
	gh™dÀ
)

521 
uöt32_t
 
	gnum_ôems
 = 
°d
::
mö
(
ﬁd_poöts
.
num_ôems
, 
√w_poöts
.num_items);

523 
Ârötf
(
h™dÀ
, "%d:árrows(color(%u,%u,%u,%u),Åhickness(%d), %u)\n",

524 
‰ameCou¡î
,

525 
löe_°yÀ
.
cﬁ‹
[0],Üine_style.color[1],Üine_style.color[2],Üine_style.color[3],

526 
löe_°yÀ
.
thick√ss
,

527 
num_ôems
);

530 i‡(
	gefficõ¡Rídî
)

531 
	gefficõ¡Rídî
->
putAºows
(
ﬁd_poöts
, 
√w_poöts
, 
löe_°yÀ
);

534 
boﬁ
 
	gEvítLoggî
::
Êush
()

536 ++
‰ameCou¡î
;

538 i‡(
	gh™dÀ
)

539 
fÊush
(
h™dÀ
);

541 i‡(
	gefficõ¡Rídî
)

542  
	gefficõ¡Rídî
->
Êush
();

544  
	gåue
;

547 
	gEvítLoggî
::
˛o£
()

549 
‰ameCou¡î
 = -1;

551 i‡(
	gefficõ¡Rídî
)

552 
	gefficõ¡Rídî
->
˛o£
();

555 
	gEvítLoggî
::
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, *
c⁄ãxt
)

557 
	gkeyBﬂrdCÆlback
 = 
ˇŒback
;

558 
	gkeybﬂrdCÆlbackC⁄ãxt
 = 
c⁄ãxt
;

561 
	gEvítLoggî
::
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, *
c⁄ãxt
)

563 
	gmou£CÆlback
 = 
ˇŒback
;

564 
	gmou£CÆlbackC⁄ãxt
 = 
c⁄ãxt
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/EventLogger.hpp

29 #i‚de‡
EVENTLOGGER_HPP


30 
	#EVENTLOGGER_HPP


	)

32 
	~<c°dio
>

33 
	~<mem‹y
>

34 
	~<°rög
>

36 
	~"Rídî/RídîIm∂.hµ
"

38 
«me•a˚
 
	gnvidüio


41 ˛as†
	cEvítLoggî
:

42 
public
 
Rídî


44 
public
:

45 
ex∂icô
 
EvítLoggî
(
boﬁ
 
_wrôeSrc
);

46 
£tEfficõ¡Rídî
(
°d
::
unique_±r
<
Rídî
> 
ªndî
);

47 
boﬁ
 
öô
(c⁄° 
°d
::
°rög
& 
∑th
);

48 
föÆ
();

49 
	gvútuÆ
 ~
EvítLoggî
();

51 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

52 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

54 
vútuÆ
 
putImage
(c⁄° 
image_t
 & 
image
);

55 
vútuÆ
 
putTextVõwp‹t
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
Rídî
::
TextBoxStyÀ
& 
°yÀ
);

56 
vútuÆ
 
putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄° 
Rídî
::
FótuªStyÀ
& 
°yÀ
);

57 
vútuÆ
 
putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄°áºay_à& 
°yÀs
);

58 
vútuÆ
 
putLöes
(c⁄° 
¨øy_t
 & 
löes
, c⁄° 
Rídî
::
LöeStyÀ
& 
°yÀ
);

59 
vútuÆ
 
putC⁄vexPﬁyg⁄
(c⁄° 
¨øy_t
 & 
vîticõs
, c⁄° 
LöeStyÀ
& 
°yÀ
);

60 
vútuÆ
 
putMŸi⁄Fõld
(c⁄° 
image_t
 & 
fõld
, c⁄° 
Rídî
::
MŸi⁄FõldStyÀ
& 
°yÀ
);

61 
vútuÆ
 
putObje˘Loˇti⁄
(c⁄° 
nvxcu_ª˘™gÀ_t
& 
loˇti⁄
, c⁄° 
Rídî
::
Dëe˘edObje˘StyÀ
& 
°yÀ
);

62 
vútuÆ
 
putCú˛es
(c⁄° 
¨øy_t
 & 
cú˛es
, c⁄° 
Cú˛eStyÀ
& 
°yÀ
);

63 
vútuÆ
 
putAºows
(c⁄° 
¨øy_t
 & 
ﬁd_poöts
, c⁄°áºay_à& 
√w_poöts
, c⁄° 
LöeStyÀ
& 
löe_°yÀ
);

65 
vútuÆ
 
boﬁ
 
Êush
();

66 
vútuÆ
 
˛o£
();

68 
vútuÆ
 
uöt32_t
 
gëVõwp‹tWidth
() const

70 i‡(
	gefficõ¡Rídî
)

72  
	gefficõ¡Rídî
->
gëVõwp‹tWidth
();

79 
vútuÆ
 
uöt32_t
 
gëVõwp‹tHeight
() const

81 i‡(
	gefficõ¡Rídî
)

83  
	gefficõ¡Rídî
->
gëVõwp‹tHeight
();

91 
	g¥Ÿe˘ed
:

92 
keybﬂrd
(* 
c⁄ãxt
, 
key
, 
uöt32_t
 
x
, uöt32_à
y
);

93 
mou£
(* 
c⁄ãxt
, 
Rídî
::
Mou£Buâ⁄Evít
 
evít
, 
uöt32_t
 
x
, uöt32_à
y
);

95 
	g°d
::
unique_±r
<
Rídî
> 
efficõ¡Rídî
;

96 
boﬁ
 
	gwrôeSrc
;

97 
FILE
* 
	gh™dÀ
;

98 
	g°d
::
°rög
 
§cImageFûeP©ã∫
;

99 
	g‰ameCou¡î
;

100 
OnKeybﬂrdEvítCÆlback
 
	gkeyBﬂrdCÆlback
;

101 * 
	gkeybﬂrdCÆlbackC⁄ãxt
;

102 
OnMou£EvítCÆlback
 
	gmou£CÆlback
;

103 * 
	gmou£CÆlbackC⁄ãxt
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/EventPlayer.cpp

29 
	~<Æg‹ôhm
>

31 
	~"Rídî/EvítPœyî.hµ
"

33 
«me•a˚
 
	gnvidüio


36 
boﬁ
 
	gEvítPœyî
::
öô
(c⁄° 
°d
::
°rög
 &
∑th
, 
lo›s
)

38 i‡(
	glogFûe
.
is_›í
())

41  
	gÁl£
;

44 i‡(
	glo›s
 < 1)

45  
	gÁl£
;

47 
	glo›Cou¡
 = 
lo›s
;

48 
	gmaxFømeIndex
 = -1;

49 
	gcuºítLo›Idx
 = 0;

51 
	glogFûe
.
›í
(
∑th
);

52 
	g‰ameCou¡î
 = 0;

54  
	glogFûe
.
is_›í
();

59 
	gEvítPœyî
::
£tEfficõ¡Rídî
(
°d
::
unique_±r
<
Rídî
> 
ªndî
)

61 
efficõ¡Rídî
 = 
°d
::
move
(
ªndî
);

64 
boﬁ
 
	gEvítPœyî
::
ªadFømeEvíts
()

66 
evíts
.
˛ór
();

67 
öt32_t
 
	g‰ameIdx
;

68 
I≈utEvít
 
	gevít
;

69 
	gtmp
[256];

71 i‡(
	gcuºítLo›Idx
 >
lo›Cou¡
)

73  
åue
;

78 i‡(!
	glogLöe
.
em±y
())

80 
	g°©us
 = 
ssˇnf
(
logLöe
.
c_°r
(), "%d: %255†(%d,%d,%d)\n", &
‰ameIdx
, 
tmp
, &
evít
.
key
, &evít.
x
, &evít.
y
);

81 i‡(
	g°©us
 != 5)

86 
	gmaxFømeIndex
 = 
°d
::
max
(
maxFømeIndex
, 
‰ameIdx
);

87 i‡((
cuºítLo›Idx
*
	gmaxFømeIndex
 + 
	g‰ameIdx
Ë!
‰ameCou¡î
)

88  
åue
;

91 i‡(
°rcmp
(
tmp
, "keyboard") == 0)

93 
evít
.
keybﬂrd
 = 
åue
;

94 
	gevíts
.
push_back
(
evít
);

96 i‡(
°rcmp
(
tmp
, "mouse") == 0)

98 
evít
.
keybﬂrd
 = 
Ál£
;

99 
	gevíts
.
push_back
(
evít
);

108 } 
	g°d
::
gëlöe
(
logFûe
, 
logLöe
));

110  
	gÁl£
;

113 
	gEvítPœyî
::
≠∂yFømeEvíts
()

115 
size_t
 
i
 = 0; 
	gi
 < 
	gevíts
.
size
(); i++)

117 i‡(
	gevíts
[
i
].
	gkeybﬂrd
)

119 i‡(
	gkeyBﬂrdCÆlback
)

121 i‡(
	gevíts
[
i
].
	gkey
 != 27)

122 
keyBﬂrdCÆlback
(
keybﬂrdCÆlbackC⁄ãxt
, 
evíts
[
i
].
key
,Évíts[i].
x
,Évíts[i].
y
);

127 i‡(
	gmou£CÆlback
)

128 
mou£CÆlback
(
mou£CÆlbackC⁄ãxt
, (
Mou£Buâ⁄Evít
)
evíts
[
i
].
key
,Évíts[i].
x
,Évíts[i].
y
);

133 
	gEvítPœyî
::
föÆ
()

135 
logFûe
.
˛o£
();

137 
	g‰ameCou¡î
 = -1;

140 
	gEvítPœyî
::~
EvítPœyî
()

142 
föÆ
();

145 
	gEvítPœyî
::
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, *
c⁄ãxt
)

147 
	gkeyBﬂrdCÆlback
 = 
ˇŒback
;

148 
	gkeybﬂrdCÆlbackC⁄ãxt
 = 
c⁄ãxt
;

151 
	gEvítPœyî
::
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, *
c⁄ãxt
)

153 
	gmou£CÆlback
 = 
ˇŒback
;

154 
	gmou£CÆlbackC⁄ãxt
 = 
c⁄ãxt
;

157 
	gEvítPœyî
::
putTextVõwp‹t
(c⁄° 
°d
::
°rög
 &
ãxt
, c⁄° 
TextBoxStyÀ
 &
°yÀ
)

159 i‡(
	gefficõ¡Rídî
)

160 
	gefficõ¡Rídî
->
putTextVõwp‹t
(
ãxt
, 
°yÀ
);

163 
	gEvítPœyî
::
putImage
(c⁄° 
image_t
 & 
image
)

165 i‡(
efficõ¡Rídî
)

166 
efficõ¡Rídî
->
putImage
(
image
);

169 
	gEvítPœyî
::
putObje˘Loˇti⁄
(c⁄° 
nvxcu_ª˘™gÀ_t
 &
loˇti⁄
, c⁄° 
Dëe˘edObje˘StyÀ
 &
°yÀ
)

171 i‡(
	gefficõ¡Rídî
)

172 
	gefficõ¡Rídî
->
putObje˘Loˇti⁄
(
loˇti⁄
, 
°yÀ
);

175 
	gEvítPœyî
::
putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄° 
FótuªStyÀ
 &
°yÀ
)

177 i‡(
	gefficõ¡Rídî
)

178 
	gefficõ¡Rídî
->
putFótuªs
(
loˇti⁄
, 
°yÀ
);

181 
	gEvítPœyî
::
putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄°áºay_à& 
°yÀs
)

183 i‡(
	gefficõ¡Rídî
)

184 
	gefficõ¡Rídî
->
putFótuªs
(
loˇti⁄
, 
°yÀs
);

187 
	gEvítPœyî
::
putLöes
(c⁄° 
¨øy_t
 & 
löes
, c⁄° 
Rídî
::
LöeStyÀ
 &
°yÀ
)

189 i‡(
efficõ¡Rídî
)

190 
efficõ¡Rídî
->
putLöes
(
löes
, 
°yÀ
);

193 
	gEvítPœyî
::
putC⁄vexPﬁyg⁄
(c⁄° 
¨øy_t
 & 
vîticõs
, c⁄° 
LöeStyÀ
& 
°yÀ
)

195 i‡(
	gefficõ¡Rídî
)

196 
	gefficõ¡Rídî
->
putC⁄vexPﬁyg⁄
(
vîticõs
, 
°yÀ
);

199 
	gEvítPœyî
::
putMŸi⁄Fõld
(c⁄° 
image_t
 & 
fõld
, c⁄° 
MŸi⁄FõldStyÀ
 &
°yÀ
)

201 i‡(
	gefficõ¡Rídî
)

202 
	gefficõ¡Rídî
->
putMŸi⁄Fõld
(
fõld
, 
°yÀ
);

205 
	gEvítPœyî
::
putCú˛es
(c⁄° 
¨øy_t
 & 
cú˛es
, c⁄° 
Cú˛eStyÀ
& 
°yÀ
)

207 i‡(
	gefficõ¡Rídî
)

208 
	gefficõ¡Rídî
->
putCú˛es
(
cú˛es
, 
°yÀ
);

211 
	gEvítPœyî
::
putAºows
(c⁄° 
¨øy_t
 & 
ﬁd_poöts
, c⁄°áºay_à& 
√w_poöts
, c⁄° 
LöeStyÀ
& 
löe_°yÀ
)

213 i‡(
	gefficõ¡Rídî
)

214 
	gefficõ¡Rídî
->
putAºows
(
ﬁd_poöts
, 
√w_poöts
, 
löe_°yÀ
);

217 
boﬁ
 
	gEvítPœyî
::
Êush
()

219 
boﬁ
 
io_îr‹
 = 
Ál£
;

221 i‡(!
ªadFømeEvíts
())

223 
	gcuºítLo›Idx
++;

224 i‡(
	gcuºítLo›Idx
 < 
	glo›Cou¡
)

226 
	glogFûe
.
˛ór
();

227 
	gio_îr‹
 = !
logFûe
.
£ekg
(0, 
°d
::
ios_ba£
::
beg
);

231 ++
	g‰ameCou¡î
;

233 
boﬁ
 
	g°©us
 = 
åue
;

234 i‡(
	gefficõ¡Rídî
)

235 
	g°©us
 = 
efficõ¡Rídî
->
Êush
();

237 i‡(
	g°©us
)

238 
≠∂yFømeEvíts
();

240 i‡(
	gio_îr‹
 || 
	gcuºítLo›Idx
 >
lo›Cou¡
)

243 i‡(
keyBﬂrdCÆlback
)

244 
keyBﬂrdCÆlback
(
keybﬂrdCÆlbackC⁄ãxt
, 27, 0, 0);

247  
	g°©us
;

250 
	gEvítPœyî
::
˛o£
()

252 
‰ameCou¡î
 = -1;

254 i‡(
	gefficõ¡Rídî
)

255 
	gefficõ¡Rídî
->
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/EventPlayer.hpp

29 #i‚de‡
EVENTPLAYER_HPP


30 
	#EVENTPLAYER_HPP


	)

32 
	~<°dio.h
>

33 
	~<f°ªam
>

34 
	~<mem‹y
>

35 
	~<°rög
>

36 
	~<ve˘‹
>

38 
	~"Rídî/RídîIm∂.hµ
"

40 
«me•a˚
 
	gnvidüio


43 ˛as†
	cEvítPœyî
:

44 
public
 
Rídî


46 
public
:

47 
EvítPœyî
():

48 
‰ameCou¡î
(-1),

49 
lo›Cou¡
(1),

50 
maxFømeIndex
(-1),

51 
cuºítLo›Idx
(0),

52 
keyBﬂrdCÆlback
(
nuŒ±r
),

53 
keybﬂrdCÆlbackC⁄ãxt
(
nuŒ±r
),

54 
mou£CÆlback
(
nuŒ±r
),

55 
mou£CÆlbackC⁄ãxt
(
nuŒ±r
)

59 
boﬁ
 
öô
(c⁄° 
°d
::
°rög
& 
∑th
, 
lo›s
 = 1);

60 
föÆ
();

62 
£tEfficõ¡Rídî
(
°d
::
unique_±r
<
Rídî
> 
ªndî
);

63 
	gvútuÆ
 ~
EvítPœyî
();

65 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

66 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

68 
vútuÆ
 
putImage
(c⁄° 
image_t
 & 
image
);

69 
vútuÆ
 
putTextVõwp‹t
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
Rídî
::
TextBoxStyÀ
& 
°yÀ
);

70 
vútuÆ
 
putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄° 
Rídî
::
FótuªStyÀ
& 
°yÀ
);

71 
vútuÆ
 
putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄°áºay_à& 
°yÀs
);

72 
vútuÆ
 
putLöes
(c⁄° 
¨øy_t
 & 
löes
, c⁄° 
Rídî
::
LöeStyÀ
& 
°yÀ
);

73 
vútuÆ
 
putC⁄vexPﬁyg⁄
(c⁄° 
¨øy_t
 & 
vîticõs
, c⁄° 
LöeStyÀ
& 
°yÀ
);

74 
vútuÆ
 
putMŸi⁄Fõld
(c⁄° 
image_t
 & 
fõld
, c⁄° 
Rídî
::
MŸi⁄FõldStyÀ
& 
°yÀ
);

75 
vútuÆ
 
putObje˘Loˇti⁄
(c⁄° 
nvxcu_ª˘™gÀ_t
 & 
loˇti⁄
, c⁄° 
Rídî
::
Dëe˘edObje˘StyÀ
& 
°yÀ
);

76 
vútuÆ
 
putCú˛es
(c⁄° 
¨øy_t
 & 
cú˛es
, c⁄° 
Cú˛eStyÀ
& 
°yÀ
);

77 
vútuÆ
 
putAºows
(c⁄° 
¨øy_t
 & 
ﬁd_poöts
, c⁄°áºay_à& 
√w_poöts
, c⁄° 
LöeStyÀ
& 
löe_°yÀ
);

78 
vútuÆ
 
boﬁ
 
Êush
();

79 
vútuÆ
 
˛o£
();

81 
vútuÆ
 
uöt32_t
 
gëVõwp‹tWidth
() const

83  
	gefficõ¡Rídî
 ?Éfficõ¡Rídî->
gëVõwp‹tWidth
() : 0u;

86 
vútuÆ
 
uöt32_t
 
gëVõwp‹tHeight
() const

88  
	gefficõ¡Rídî
 ?Éfficõ¡Rídî->
gëVõwp‹tHeight
() : 0u;

91 
	g¥Ÿe˘ed
:

92 
	sI≈utEvít


94 
boﬁ
 
keybﬂrd
;

95 
uöt32_t
 
	gkey
;

96 
uöt32_t
 
	gx
;

97 
uöt32_t
 
	gy
;

100 
boﬁ
 
ªadFømeEvíts
();

101 
≠∂yFømeEvíts
();

103 
	g°d
::
unique_±r
<
Rídî
> 
efficõ¡Rídî
;

104 
	g°d
::
if°ªam
 
logFûe
;

105 
	g°d
::
°rög
 
logLöe
;

106 
öt32_t
 
	g‰ameCou¡î
;

107 
öt32_t
 
	glo›Cou¡
;

108 
öt32_t
 
	gmaxFømeIndex
;

109 
öt32_t
 
	gcuºítLo›Idx
;

111 
	g°d
::
ve˘‹
<
I≈utEvít
> 
evíts
;

113 
OnKeybﬂrdEvítCÆlback
 
	gkeyBﬂrdCÆlback
;

114 * 
	gkeybﬂrdCÆlbackC⁄ãxt
;

115 
OnMou£EvítCÆlback
 
	gmou£CÆlback
;

116 * 
	gmou£CÆlbackC⁄ãxt
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GStreamer/GStreamerBaseRenderImpl.cpp

29 #i‡
deföed
 
USE_GUI
 && deföed 
USE_GSTREAMER


31 
	~"Rídî/GSåómî/GSåómîBa£RídîIm∂.hµ
"

32 
	~"Priv©e/GSåómîUtûs.hµ
"

34 
	~<NVX/ProfûîR™ge.hµ
>

36 
	gnvidüio
::
GSåómîBa£RídîIm∂
::
	$GSåómîBa£RídîIm∂
(
T¨gëTy≥
 
ty≥
, c⁄° 
°d
::
°rög
 & 
«me
) :

37 
	`GlfwUIIm∂
(
ty≥
, 
«me
),

38 
	`pùñöe
(
nuŒ±r
), 
	`bus
(nullptr),

39 
	`≠p§c
(
nuŒ±r
), 
	$num_‰ames
(0ul)

41 
	}
}

43 
boﬁ
 
	gnvidüio
::
GSåómîBa£RídîIm∂
::
	$›í
(c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
)

45 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::open (NVXIO)");

47 i‡(!
GlfwUIIm∂
::
	`›í
(
tôÀ
, 
width
, 
height
, 
f‹m©
, 
Ál£
, false))

48  
Ál£
;

50 i‡(!
	`InôülizeGSåómîPùñöe
())

51  
Ál£
;

53  
åue
;

54 
	}
}

56 
boﬁ
 
	gnvidüio
::
GSåómîBa£RídîIm∂
::
	$Êush
()

58 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::flush (NVXIO)");

60 i‡(!
pùñöe
)

61  
Ál£
;

64 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âîLa°
(
hﬁdî_
);

66 i‡(
	`glfwWödowShouldClo£
(
wödow_
))

67  
Ál£
;

69 
gl_
->
	`PixñSt‹ei
(
GL_PACK_ALIGNMENT
, 1);

70 
	`NVXIO_CHECK_GL_ERROR
();

71 
gl_
->
	`PixñSt‹ei
(
GL_PACK_ROW_LENGTH
, 
wndWidth_
);

72 
	`NVXIO_CHECK_GL_ERROR
();

75 
G°ClockTime
 
duøti⁄
 = 
GST_SECOND
 / ()
GSTREAMER_DEFAULT_FPS
;

76 
G°ClockTime
 
time°amp
 = 
num_‰ames
 * 
duøti⁄
;

78 #i‡
GST_VERSION_MAJOR
 == 0

79 
G°Buf„r
 * 
buf„r
 = 
	`g°_buf„r_åy_√w_™d_Æloc
(
wndHeight_
 * 
wndWidth_
 * 4);

80 i‡(!
buf„r
)

82 
	`NVXIO_PRINT
("Cannot create GStreamer buffer");

83 
	`FöÆizeGSåómîPùñöe
();

84  
Ál£
;

87 
gl_
->
	`RódPixñs
(0, 0, 
wndWidth_
, 
wndHeight_
, 
GL_RGBA
, 
GL_UNSIGNED_BYTE
, 
	`GST_BUFFER_DATA
 (
buf„r
));

88 
	`NVXIO_CHECK_GL_ERROR
();

90 
	`GST_BUFFER_TIMESTAMP
(
buf„r
Ë
time°amp
;

91 i‡(!
	`GST_BUFFER_TIMESTAMP_IS_VALID
(
buf„r
))

92 
	`NVXIO_PRINT
("FailedÅo setupÅimestamp");

94 
G°Buf„r
 * 
buf„r
 = 
	`g°_buf„r_√w_Æloˇã
(
nuŒ±r
, 
wndHeight_
 * 
wndWidth_
 * 4,Çullptr);

96 
G°M≠Info
 
öfo
;

97 
	`g°_buf„r_m≠
(
buf„r
, &
öfo
, 
GST_MAP_READ
);

98 
gl_
->
	`RódPixñs
(0, 0, 
wndWidth_
, 
wndHeight_
, 
GL_RGBA
, 
GL_UNSIGNED_BYTE
, 
öfo
.
d©a
);

99 
	`g°_buf„r_unm≠
(
buf„r
, &
öfo
);

101 
	`GST_BUFFER_PTS
(
buf„r
Ë
time°amp
;

102 i‡(!
	`GST_BUFFER_PTS_IS_VALID
(
buf„r
))

103 
	`NVXIO_PRINT
("FailedÅo setup PTS");

105 
	`GST_BUFFER_DTS
(
buf„r
Ë
time°amp
;

106 i‡(!
	`GST_BUFFER_DTS_IS_VALID
(
buf„r
))

107 
	`NVXIO_PRINT
("FailedÅo setup DTS");

109 
	`GST_BUFFER_DURATION
(
buf„r
Ë
duøti⁄
;

110 i‡(!
	`GST_BUFFER_DURATION_IS_VALID
(
buf„r
))

111 
	`NVXIO_PRINT
("FailedÅo setup duration");

113 
	`GST_BUFFER_OFFSET
(
buf„r
Ë
num_‰ames
++;

114 i‡(!
	`GST_BUFFER_OFFSET_IS_VALID
(
buf„r
))

115 
	`NVXIO_PRINT
("FailedÅo setup offset");

117 i‡(
	`g°_≠p_§c_push_buf„r
(
≠p§c
, 
buf„r
Ë!
GST_FLOW_OK
)

119 
	`NVXIO_PRINT
("ErrorÖushing bufferÅo GStreamerÖipeline");

120 
	`FöÆizeGSåómîPùñöe
();

121  
Ál£
;

126 
gl_
->
	`PixñSt‹ei
(
GL_PACK_ALIGNMENT
, 4);

127 
	`NVXIO_CHECK_GL_ERROR
();

128 
gl_
->
	`PixñSt‹ei
(
GL_PACK_ROW_LENGTH
, 0);

129 
	`NVXIO_CHECK_GL_ERROR
();

131 
	`glfwSw≠Buf„rs
(
wödow_
);

134 
	`˛órGlBuf„r
();

136  
åue
;

137 
	}
}

139 
	gnvidüio
::
GSåómîBa£RídîIm∂
::
	$FöÆizeGSåómîPùñöe
()

141 i‡(
pùñöe
)

143 i‡(
num_‰ames
 > 0)

145 
	`g°_≠p_§c_íd_of_°ªam
(
≠p§c
);

147 
	`NVXIO_PRINT
("FlushingÅhe internaláppsrc queue... Please, wait...");

149 
°d
::
unique_±r
<
G°Mesßge
, 
nvidüio
::
GSåómîObje˘Dñëî
> 
	`msg
(

150 
	`g°_bus_timed_p›_fûãªd
(
bus
, 
GST_CLOCK_TIME_NONE
,

151 (
G°MesßgeTy≥
)(
GST_MESSAGE_ERROR
 | 
GST_MESSAGE_EOS
)));

153 i‡(
	`GST_MESSAGE_TYPE
(
msg
.
	`gë
()Ë=
GST_MESSAGE_ERROR
)

154 
	`NVXIO_PRINT
("Error during GStreamer video writer finalization");

155 i‡(
	`GST_MESSAGE_TYPE
(
msg
.
	`gë
()Ë=
GST_MESSAGE_EOS
)

156 
	`NVXIO_PRINT
("Received EOS. Finished output file writing.");

159 
	`g°_obje˘_uƒef
(
	`GST_OBJECT
(
bus
));

160 
bus
 = 
nuŒ±r
;

162 
	`g°_ñemít_£t_°©e
(
	`GST_ELEMENT
(
pùñöe
), 
GST_STATE_NULL
);

163 
	`g°_obje˘_uƒef
(
	`GST_OBJECT
(
pùñöe
));

164 
pùñöe
 = 
nuŒ±r
;

166 
	}
}

168 
	gnvidüio
::
GSåómîBa£RídîIm∂
::
	$˛o£
()

170 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::close (NVXIO)");

172 
	`FöÆizeGSåómîPùñöe
();

174 
num_‰ames
 = 0;

176 
GlfwUIIm∂
::
	`˛o£
();

177 
	}
}

179 
	gnvidüio
::
GSåómîBa£RídîIm∂
::~
	$GSåómîBa£RídîIm∂
()

181 
	`˛o£
();

182 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GStreamer/GStreamerBaseRenderImpl.hpp

29 #i‚de‡
GSTREAMERBASERENDERIMPL_HPP


30 
	#GSTREAMERBASERENDERIMPL_HPP


	)

32 #i‡
deföed
 
USE_GUI
 && deföed 
USE_GSTREAMER


34 
	~"Rídî/GlfwUIRídîIm∂.hµ
"

36 
	~<g°/g°.h
>

37 
	~<g°/≠p/g°≠p§c.h
>

39 
	~"Priv©e/GSåómîUtûs.hµ
"

41 
	~<s°ªam
>

43 
	#GSTREAMER_DEFAULT_FPS
 30

	)

45 
«me•a˚
 
	gnvidüio


48 ˛as†
	cGSåómîBa£RídîIm∂
 :

49 
public
 
GlfwUIIm∂


51 
public
:

52 
GSåómîBa£RídîIm∂
(
T¨gëTy≥
 
ty≥
, c⁄° 
°d
::
°rög
 & 
«me
);

53 
vútuÆ
 
boﬁ
 
›í
(c⁄° 
°d
::
°rög
& 
∑th
, 
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
);

55 
vútuÆ
 
boﬁ
 
Êush
();

56 
vútuÆ
 
˛o£
();

58 
	gvútuÆ
 ~
GSåómîBa£RídîIm∂
();

60 
	g¥Ÿe˘ed
:

62 
vútuÆ
 
boﬁ
 
InôülizeGSåómîPùñöe
() = 0;

63 
FöÆizeGSåómîPùñöe
();

65 
G°Pùñöe
 * 
	gpùñöe
;

66 
G°Bus
 * 
	gbus
;

68 
G°AµSrc
 * 
	g≠p§c
;

69 
göt64
 
	gnum_‰ames
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GStreamer/GStreamerImagesRenderImpl.cpp

29 #i‡
deföed
 
USE_GUI
 && deföed 
USE_GSTREAMER


31 
	~"Rídî/GSåómî/GSåómîImagesRídîIm∂.hµ
"

32 
	~"Priv©e/GSåómîUtûs.hµ
"

34 
	gnvidüio
::
GSåómîImagesRídîIm∂
::
	$GSåómîImagesRídîIm∂
() :

35 
	`GSåómîBa£RídîIm∂
(
nvxio
::
Rídî
::
IMAGE_RENDER
, "GStreamerImagesOpenGlRender")

37 
	}
}

39 
boﬁ
 
	gnvidüio
::
GSåómîImagesRídîIm∂
::
	$InôülizeGSåómîPùñöe
()

45 i‡(
	`g_fûe_ã°
(
wödowTôÀ_
.
	`c_°r
(), 
G_FILE_TEST_IS_DIR
))

46  
Ál£
;

49 
°d
::
o°rög°ªam
 
°ªam
;

51 
pùñöe
 = 
	`GST_PIPELINE
(
	`g°_pùñöe_√w
(
nuŒ±r
));

52 i‡(!
pùñöe
)

54 
	`NVXIO_PRINT
("Cannot create GstreamerÖipeline");

55  
Ál£
;

58 
bus
 = 
	`g°_pùñöe_gë_bus
(
	`GST_PIPELINE
 (
pùñöe
));

61 
G°EÀmít
 * 
≠p§˚Àm
 = 
	`g°_ñemít_Á˘‹y_make
("≠p§c", 
nuŒ±r
);

62 i‡(!
≠p§˚Àm
)

64 
	`NVXIO_PRINT
("Cannot createáppsrc");

65 
	`FöÆizeGSåómîPùñöe
();

67  
Ál£
;

70 
	`g_obje˘_£t
(
	`G_OBJECT
(
≠p§˚Àm
),

71 "is-live", 
FALSE
,

73 "emô-sig«ls", 
FALSE
,

74 "block", 
TRUE
,

75 "size", 
°©ic_ˇ°
<
guöt64
>(
wndHeight_
 * 
wndWidth_
 * 4),

76 "f‹m©", 
GST_FORMAT_TIME
,

77 "°ªam-ty≥", 
GST_APP_STREAM_TYPE_STREAM
,

78 
nuŒ±r
);

80 
≠p§c
 = 
	`GST_APP_SRC_CAST
(
≠p§˚Àm
);

81 #i‡
GST_VERSION_MAJOR
 == 0

82 
°d
::
unique_±r
<
G°C≠s
, 
nvidüio
::
GSåómîObje˘Dñëî
> 
	`ˇps
(

83 
	`g°_ˇps_√w_sim∂e
("video/x-raw-rgb",

84 "bµ", 
G_TYPE_INT
, 32,

85 "ídü¬ess", 
G_TYPE_INT
, 4321,

86 "ªd_mask", 
G_TYPE_INT
, -16777216,

87 "gªí_mask", 
G_TYPE_INT
, 16711680,

88 "blue_mask", 
G_TYPE_INT
, 65280,

89 "Æpha_mask", 
G_TYPE_INT
, 255,

90 "width", 
G_TYPE_INT
, 
wndWidth_
,

91 "height", 
G_TYPE_INT
, 
wndHeight_
,

92 "‰amî©e", 
GST_TYPE_FRACTION
, 
GSTREAMER_DEFAULT_FPS
, 1,

93 
nuŒ±r
));

94 i‡(!
ˇps
)

96 
	`NVXIO_PRINT
("FailedÅo create caps");

97 
	`FöÆizeGSåómîPùñöe
();

99  
Ál£
;

104 
°ªam
 << "video/x-raw"

105 << ", width=" << 
wndWidth_


106 << ", height=" << 
wndHeight_


108 << ", fømî©e=" << 
GSTREAMER_DEFAULT_FPS
 << "/1;";

109 
°d
::
unique_±r
<
G°C≠s
, 
nvidüio
::
GSåómîObje˘Dñëî
> 
	`ˇps
(

110 
	`g°_ˇps_‰om_°rög
(
°ªam
.
	`°r
().
	`c_°r
()));

112 i‡(!
ˇps
)

114 
	`NVXIO_PRINT
("FailedÅo create caps");

115 
	`FöÆizeGSåómîPùñöe
();

117  
Ál£
;

120 
	`g°_ˇps_ªf
(
ˇps
.
	`gë
());

121 
ˇps
.
	`ª£t
(
	`g°_ˇps_fix©e
(ˇps.
	`gë
()));

124 
	`g°_≠p_§c_£t_ˇps
(
≠p§c
, 
ˇps
.
	`gë
());

126 
	`g°_bö_add
(
	`GST_BIN
(
pùñöe
), 
≠p§˚Àm
);

129 
G°EÀmít
 * 
cﬁ‹
 = 
	`g°_ñemít_Á˘‹y_make
(
COLOR_ELEM
, 
nuŒ±r
);

130 i‡(!
cﬁ‹
)

132 
	`NVXIO_PRINT
("C™nŸ cª©ê" 
COLOR_ELEM
 "Élement");

133 
	`FöÆizeGSåómîPùñöe
();

135  
Ál£
;

137 
	`g°_bö_add
(
	`GST_BIN
(
pùñöe
), 
cﬁ‹
);

140 
G°EÀmít
 * 
videoÊù
 = 
	`g°_ñemít_Á˘‹y_make
("videoÊù", 
nuŒ±r
);

141 i‡(!
videoÊù
)

143 
	`NVXIO_PRINT
("Cannot create videoflipÉlement");

144 
	`FöÆizeGSåómîPùñöe
();

146  
Ál£
;

149 
	`g_obje˘_£t
(
	`G_OBJECT
(
videoÊù
), "mëhod", 5, 
nuŒ±r
);

151 
	`g°_bö_add
(
	`GST_BIN
(
pùñöe
), 
videoÊù
);

154 
G°EÀmít
 * 
cﬁ‹2
 = 
	`g°_ñemít_Á˘‹y_make
(
COLOR_ELEM
, 
nuŒ±r
);

155 i‡(!
cﬁ‹2
)

157 
	`NVXIO_PRINT
("C™nŸ cª©ê" 
COLOR_ELEM
 "Élement");

158 
	`FöÆizeGSåómîPùñöe
();

160  
Ál£
;

162 
	`g°_bö_add
(
	`GST_BIN
(
pùñöe
), 
cﬁ‹2
);

165 
G°EÀmít
 * 
≤gíc
 = 
	`g°_ñemít_Á˘‹y_make
("≤gíc", 
nuŒ±r
);

166 i‡(!
≤gíc
)

168 
	`NVXIO_PRINT
("Cannot createÖngencÉlement");

169 
	`FöÆizeGSåómîPùñöe
();

171  
Ál£
;

174 
	`g_obje˘_£t
(
	`G_OBJECT
(
≤gíc
), "¢≠shŸ", 0, 
nuŒ±r
);

175 
	`g°_bö_add
(
	`GST_BIN
(
pùñöe
), 
≤gíc
);

178 
G°EÀmít
 * 
mu…ifûesök
 = 
	`g°_ñemít_Á˘‹y_make
("mu…ifûesök", 
nuŒ±r
);

179 i‡(!
mu…ifûesök
)

181 
	`NVXIO_PRINT
("Cannot create multifilesinkÉlement");

182 
	`FöÆizeGSåómîPùñöe
();

184  
Ál£
;

187 
	`g_obje˘_£t
(
	`G_OBJECT
(
mu…ifûesök
),

188 "loˇti⁄", 
wödowTôÀ_
.
	`c_°r
(),

189 "max-œã√ss", 
	`G_GINT64_CONSTANT
(-1),

190 "async", 
FALSE
,

191 "ªndî-dñay", 
	`G_GUINT64_CONSTANT
(0),

192 "thrŸée-time", 
	`G_GUINT64_CONSTANT
(0),

195 "po°-mesßges", 
TRUE
,

197 
nuŒ±r
);

199 
	`g°_bö_add
(
	`GST_BIN
(
pùñöe
), 
mu…ifûesök
);

201 #i‡
GST_VERSION_MAJOR
 == 0

202 
°d
::
unique_±r
<
G°C≠s
, 
nvidüio
::
GSåómîObje˘Dñëî
> 
	`ˇps_cﬁ‹
(

203 
	`g°_ˇps_√w_sim∂e
("video/x-raw-rgb",

204 "bµ", 
G_TYPE_INT
, 32,

205 "dïth", 
G_TYPE_INT
, 32,

206 "ídü¬ess", 
G_TYPE_INT
, 4321,

207 "ªd_mask", 
G_TYPE_INT
, -16777216,

208 "gªí_mask", 
G_TYPE_INT
, 16711680,

209 "blue_mask", 
G_TYPE_INT
, 65280,

210 "Æpha_mask", 
G_TYPE_INT
, 255,

211 "width", 
G_TYPE_INT
, 
wndWidth_
,

212 "height", 
G_TYPE_INT
, 
wndHeight_
,

213 "‰amî©e", 
GST_TYPE_FRACTION
, 
GSTREAMER_DEFAULT_FPS
, 1,

214 
nuŒ±r
));

215 i‡(!
ˇps_cﬁ‹
)

217 
	`NVXIO_PRINT
("FailedÅo create caps");

218 
	`FöÆizeGSåómîPùñöe
();

219  
Ál£
;

222 i‡(!
	`g°_ñemít_lök_fûãªd
(
≠p§˚Àm
, 
cﬁ‹
, 
ˇps_cﬁ‹
.
	`gë
()))

224 
	`NVXIO_PRINT
("GSåómî: c™nŸÜök " 
COLOR_ELEM


226 
	`FöÆizeGSåómîPùñöe
();

228  
Ál£
;

232 i‡(!
	`g°_ñemít_lök
(
≠p§˚Àm
, 
cﬁ‹
))

234 
	`NVXIO_PRINT
("GSåómî: c™nŸÜökáµ§¯-> " 
COLOR_ELEM
);

235 
	`FöÆizeGSåómîPùñöe
();

236  
Ál£
;

240 i‡(!
	`g°_ñemít_lök_m™y
(
cﬁ‹
, 
videoÊù
,

241 
≤gíc
, 
mu…ifûesök
, 
nuŒ±r
))

243 
	`NVXIO_PRINT
("GSåómî: c™nŸÜök " 
COLOR_ELEM


245 
	`FöÆizeGSåómîPùñöe
();

247  
Ál£
;

251 
	`g°_pùñöe_u£_˛ock
(
pùñöe
, 
nuŒ±r
);

253 
num_‰ames
 = 0;

255 
G°SèãCh™geRëu∫
 
°©us
 = 
	`g°_ñemít_£t_°©e
(
	`GST_ELEMENT
(
pùñöe
), 
GST_STATE_PLAYING
);

256 i‡(
°©us
 =
GST_STATE_CHANGE_FAILURE
)

258 
	`NVXIO_PRINT
("GStreamer: unableÅo startÖlayback");

259 
	`FöÆizeGSåómîPùñöe
();

261  
Ál£
;

264  
åue
;

265 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GStreamer/GStreamerImagesRenderImpl.hpp

29 #i‚de‡
GSTREAMERIMAGESRENDERIMPL_HPP


30 
	#GSTREAMERIMAGESRENDERIMPL_HPP


	)

32 #i‡
deföed
 
USE_GUI
 && deföed 
USE_GSTREAMER


34 
	~"Rídî/GSåómî/GSåómîBa£RídîIm∂.hµ
"

36 
«me•a˚
 
	gnvidüio


39 ˛as†
	cGSåómîImagesRídîIm∂
 :

40 
public
 
GSåómîBa£RídîIm∂


42 
public
:

43 
GSåómîImagesRídîIm∂
();

45 
	g¥Ÿe˘ed
:

46 
vútuÆ
 
boﬁ
 
InôülizeGSåómîPùñöe
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GStreamer/GStreamerVideoRenderImpl.cpp

29 #i‡
deföed
 
USE_GUI
 && deföed 
USE_GSTREAMER


31 
	~"Rídî/GSåómî/GSåómîVideoRídîIm∂.hµ
"

32 
	~"Priv©e/GSåómîUtûs.hµ
"

34 
	g«me•a˚
 {

36 
gëVideoBôøã
()

38 i‡(c⁄° * c⁄° 
	g‰omEnv
 = ::
gëív
("NVXIO_VIDEO_RENDER_BITRATE")Ë
åy


40  
°d
::
max
(°d::
°oi
(
‰omEnv
), 0);

42 
ˇtch
 (...)

52 
	gnvidüio
::
GSåómîVideoRídîIm∂
::
	$GSåómîVideoRídîIm∂
() :

53 
	`GSåómîBa£RídîIm∂
(
nvxio
::
Rídî
::
VIDEO_RENDER
, "GStreamerVideoOpenGlRender")

55 
	}
}

57 
boﬁ
 
	gnvidüio
::
GSåómîVideoRídîIm∂
::
	$InôülizeGSåómîPùñöe
()

59 
°d
::
o°rög°ªam
 
°ªam
;

61 
pùñöe
 = 
	`GST_PIPELINE
(
	`g°_pùñöe_√w
(
nuŒ±r
));

62 i‡(!
pùñöe
)

64 
	`NVXIO_PRINT
("Cannot create GstreamerÖipeline");

65  
Ál£
;

68 
bus
 = 
	`g°_pùñöe_gë_bus
(
	`GST_PIPELINE
 (
pùñöe
));

71 
G°EÀmít
 * 
≠p§˚Àm
 = 
	`g°_ñemít_Á˘‹y_make
("≠p§c", 
nuŒ±r
);

72 i‡(!
≠p§˚Àm
)

74 
	`NVXIO_PRINT
("Cannot createáppsrc");

75 
	`FöÆizeGSåómîPùñöe
();

77  
Ál£
;

80 
	`g_obje˘_£t
(
	`G_OBJECT
(
≠p§˚Àm
),

85 "size", 
°©ic_ˇ°
<
guöt64
>(
wndHeight_
 * 
wndWidth_
 * 4),

86 "f‹m©", 
GST_FORMAT_TIME
,

87 "°ªam-ty≥", 
GST_APP_STREAM_TYPE_STREAM
,

88 
nuŒ±r
);

90 
≠p§c
 = 
	`GST_APP_SRC_CAST
(
≠p§˚Àm
);

91 #i‡
GST_VERSION_MAJOR
 == 0

92 
°d
::
unique_±r
<
G°C≠s
, 
nvidüio
::
GSåómîObje˘Dñëî
> 
	`ˇps
(

93 
	`g°_ˇps_√w_sim∂e
("video/x-raw-rgb",

94 "bµ", 
G_TYPE_INT
, 32,

95 "ídü¬ess", 
G_TYPE_INT
, 4321,

96 "ªd_mask", 
G_TYPE_INT
, -16777216,

97 "gªí_mask", 
G_TYPE_INT
, 16711680,

98 "blue_mask", 
G_TYPE_INT
, 65280,

99 "Æpha_mask", 
G_TYPE_INT
, 255,

100 "width", 
G_TYPE_INT
, 
wndWidth_
,

101 "height", 
G_TYPE_INT
, 
wndHeight_
,

102 "‰amî©e", 
GST_TYPE_FRACTION
, 
GSTREAMER_DEFAULT_FPS
, 1,

103 
nuŒ±r
));

104 i‡(!
ˇps
)

106 
	`NVXIO_PRINT
("FailedÅo create caps");

107 
	`FöÆizeGSåómîPùñöe
();

109  
Ál£
;

114 
°ªam
 << "video/x-raw"

115 << ", width=" << 
wndWidth_


116 << ", height=" << 
wndHeight_


118 << ", fømî©e=" << 
GSTREAMER_DEFAULT_FPS
 << "/1;";

119 
°d
::
unique_±r
<
G°C≠s
, 
nvidüio
::
GSåómîObje˘Dñëî
> 
	`ˇps
(

120 
	`g°_ˇps_‰om_°rög
(
°ªam
.
	`°r
().
	`c_°r
()));

122 i‡(!
ˇps
)

124 
	`NVXIO_PRINT
("FailedÅo create caps");

125 
	`FöÆizeGSåómîPùñöe
();

127  
Ál£
;

130 
	`g°_ˇps_ªf
(
ˇps
.
	`gë
());

131 
ˇps
.
	`ª£t
(
	`g°_ˇps_fix©e
(ˇps.
	`gë
()));

134 
	`g°_≠p_§c_£t_ˇps
(
≠p§c
, 
ˇps
.
	`gë
());

136 
	`g°_bö_add
(
	`GST_BIN
(
pùñöe
), 
≠p§˚Àm
);

139 
G°EÀmít
 * 
cﬁ‹
 = 
	`g°_ñemít_Á˘‹y_make
(
COLOR_ELEM
, 
nuŒ±r
);

140 i‡(!
cﬁ‹
)

142 
	`NVXIO_PRINT
("C™nŸ cª©ê" 
COLOR_ELEM
 "Élement");

143 
	`FöÆizeGSåómîPùñöe
();

145  
Ál£
;

147 
	`g°_bö_add
(
	`GST_BIN
(
pùñöe
), 
cﬁ‹
);

150 
G°EÀmít
 * 
videoÊù
 = 
	`g°_ñemít_Á˘‹y_make
("videoÊù", 
nuŒ±r
);

151 i‡(!
videoÊù
)

153 
	`NVXIO_PRINT
("Cannot create videoflipÉlement");

154 
	`FöÆizeGSåómîPùñöe
();

156  
Ál£
;

159 
	`g_obje˘_£t
(
	`G_OBJECT
(
videoÊù
), "mëhod", 5, 
nuŒ±r
);

161 
	`g°_bö_add
(
	`GST_BIN
(
pùñöe
), 
videoÊù
);

164 
G°EÀmít
 * 
ícodñem
 = 
	`g°_ñemít_Á˘‹y_make
(
ENCODE_ELEM
, 
nuŒ±r
);

165 i‡(!
ícodñem
)

167 
	`NVXIO_PRINT
("C™nŸ cª©ê" 
ENCODE_ELEM
 "Élement");

168 
	`FöÆizeGSåómîPùñöe
();

170  
Ál£
;

173 c⁄° 
bôøã
 = 
	`gëVideoBôøã
();

174 i‡(
bôøã
 > 0)

176 
	`g_obje˘_£t
(
	`G_OBJECT
(
ícodñem
), "bôøã", 
bôøã
, 
nuŒ±r
);

178 i‡(
bôøã
 == 0)

180 
	`NVXIO_PRINT
("IncorrectÅarget video bitrate");

181 
	`FöÆizeGSåómîPùñöe
();

183  
Ál£
;

187 
	`g°_bö_add
(
	`GST_BIN
(
pùñöe
), 
ícodñem
);

190 
G°EÀmít
 * 
avimux
 = 
	`g°_ñemít_Á˘‹y_make
("avimux", 
nuŒ±r
);

191 i‡(!
avimux
)

193 
	`NVXIO_PRINT
("Cannot createávimuxÉlement");

194 
	`FöÆizeGSåómîPùñöe
();

196  
Ál£
;

199 
	`g°_bö_add
(
	`GST_BIN
(
pùñöe
), 
avimux
);

202 
G°EÀmít
 * 
fûesök
 = 
	`g°_ñemít_Á˘‹y_make
("fûesök", 
nuŒ±r
);

203 i‡(!
fûesök
)

205 
	`NVXIO_PRINT
("Cannot create filesinkÉlement");

206 
	`FöÆizeGSåómîPùñöe
();

208  
Ál£
;

211 
	`g_obje˘_£t
(
	`G_OBJECT
(
fûesök
), "loˇti⁄", 
wödowTôÀ_
.
	`c_°r
(),

212 "≠≥nd", 0, 
nuŒ±r
);

214 
	`g°_bö_add
(
	`GST_BIN
(
pùñöe
), 
fûesök
);

218 i‡(!
	`g°_ñemít_lök_m™y
(
≠p§˚Àm
, 
cﬁ‹
, 
videoÊù
,

219 
ícodñem
, 
avimux
, 
fûesök
, 
nuŒ±r
))

221 
	`NVXIO_PRINT
("GSåómî: c™nŸÜökáµ§¯-> " 
COLOR_ELEM


222 " -> videoÊù -> " 
ENCODE_ELEM
 " ->ávimux -> filesink");

223 
	`FöÆizeGSåómîPùñöe
();

225  
Ál£
;

229 
	`g°_pùñöe_u£_˛ock
(
pùñöe
, 
nuŒ±r
);

231 
num_‰ames
 = 0;

233 
G°SèãCh™geRëu∫
 
°©us
 = 
	`g°_ñemít_£t_°©e
(
	`GST_ELEMENT
(
pùñöe
), 
GST_STATE_PLAYING
);

234 i‡(
°©us
 =
GST_STATE_CHANGE_FAILURE
)

236 
	`NVXIO_PRINT
("GStreamer: unableÅo startÖlayback");

237 
	`FöÆizeGSåómîPùñöe
();

239  
Ál£
;

242  
åue
;

243 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GStreamer/GStreamerVideoRenderImpl.hpp

29 #i‚de‡
GSTREAMERVIDEORENDERIMPL_HPP


30 
	#GSTREAMERVIDEORENDERIMPL_HPP


	)

32 #i‡
deföed
 
USE_GUI
 && deföed 
USE_GSTREAMER


34 
	~"Rídî/GSåómî/GSåómîBa£RídîIm∂.hµ
"

36 
«me•a˚
 
	gnvidüio


39 ˛as†
	cGSåómîVideoRídîIm∂
 :

40 
public
 
GSåómîBa£RídîIm∂


42 
public
:

43 
GSåómîVideoRídîIm∂
();

45 
	g¥Ÿe˘ed
:

46 
vútuÆ
 
boﬁ
 
InôülizeGSåómîPùñöe
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GlfwUIRenderImpl.cpp

29 #ifde‡
USE_GUI


31 #ifde‡
_WIN32


32 
	#NOMINMAX


	)

33 
	~<Wödows.h
>

36 
	~<°rög
>

38 
	~"Rídî/GlfwUIRídîIm∂.hµ
"

39 
	~"Priv©e/LogUtûs.hµ
"

41 
	~<NVX/Aµliˇti⁄.hµ
>

42 
	~<NVX/ProfûîR™ge.hµ
>

44 
	gnvidüio
::
GlfwUIIm∂
::
	$GlfwUIIm∂
(
T¨gëTy≥
 
ty≥
, c⁄° 
°d
::
°rög
 & 
«me
) :

45 
	`O≥nGLRídîIm∂
(
ty≥
, 
«me
),

46 
	`wödow_
(
nuŒ±r
), 
	`¥evWödow_
(nullptr),

47 
	`keybﬂrdCÆlback_
(
nuŒ±r
),

48 
	`keybﬂrdCÆlbackC⁄ãxt_
(
nuŒ±r
),

49 
	`mou£CÆlback_
(
nuŒ±r
),

50 
	`mou£CÆlbackC⁄ãxt_
(
nuŒ±r
),

51 
	`sˇÀR©ioWödow
(1.0),

52 
	`xB‹dî_
(0), 
	$yB‹dî_
(0)

54 
	}
}

56 
	gnvidüio
::
GlfwUIIm∂
::~
	$GlfwUIIm∂
()

58 
	`˛o£
();

59 
	}
}

61 
	g«me•a˚
 {

63 
	g°d
::
°rög
 
gëDi•œyName
()

65 * 
di•œyName
 = 
gëív
("NVXIO_DISPLAY");

66  
	g°d
::
°rög
(
di•œyName
 ? di•œyNamê: 
glfwGëM⁄ô‹Name
(
glfwGëPrim¨yM⁄ô‹
()));

71 
boﬁ
 
	gnvidüio
::
GlfwUIIm∂
::
	$›í
(c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
,

72 
boﬁ
 
doSˇÀ
, boﬁ 
fuŒS¸ìn
)

74 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::open (NVXIO)");

76 
	`NVXIO_ASSERT
(
f‹m©
 =
NVXCU_DF_IMAGE_RGBX
);

78 
wödowTôÀ_
 = 
tôÀ
;

79 
doSˇÀ_
 = 
doSˇÀ
;

81 i‡(!
nvxio
::
Aµliˇti⁄
::
	`gë
().
	`öôGui
())

83 
	`NVXIO_PRINT
("Error: FailedÅo init GUI");

84  
Ál£
;

87 
uöt32_t
 
wndWidth
 = 0u, 
wndHeight
 = 0u;

88 c⁄° 
GLFWvidmode
 * 
mode
 = 
nuŒ±r
;

89 
boﬁ
 
ªndîToFûe
 = (
èrgëTy≥
 =
nvxio
::
Rídî
::
VIDEO_RENDER
) ||

90 (
èrgëTy≥
 =
nvxio
::
Rídî
::
IMAGE_RENDER
);

92 
GLFWm⁄ô‹
 * 
m⁄ô‹
 = 
nuŒ±r
;

94 i‡(
fuŒS¸ìn
)

96 
	`NVXIO_PRINT
("Full Screen mode is used. Both specified widthánd heightáre ignored");

99 i‡(!
ªndîToFûe
)

101 
cou¡
 = 0;

102 
GLFWm⁄ô‹
 ** 
m⁄ô‹s
 = 
	`glfwGëM⁄ô‹s
(&
cou¡
);

104 i‡(
cou¡
 == 0)

106 
	`NVXIO_PRINT
("Glfw:Ço monitors found");

107  
Ál£
;

110 
maxPixñs
 = 0;

111 
°d
::
°rög
 
•ecifõdDi•œyName
 = 
	`gëDi•œyName
();

113 
i
 = 0; i < 
cou¡
; ++i)

115 c⁄° 
GLFWvidmode
* 
cuºítMode
 = 
	`glfwGëVideoMode
(
m⁄ô‹s
[
i
]);

116 
cuºítPixñs
 = 
cuºítMode
->
width
 * cuºítMode->
height
;

118 i‡(
maxPixñs
 < 
cuºítPixñs
)

120 
mode
 = 
cuºítMode
;

121 
maxPixñs
 = 
cuºítPixñs
;

124 i‡(
fuŒS¸ìn
)

126 
°d
::
°rög
 
m⁄ô‹Name
 = 
	`glfwGëM⁄ô‹Name
(
m⁄ô‹s
[
i
]);

128 i‡(
m⁄ô‹Name
 =
•ecifõdDi•œyName
)

130 
m⁄ô‹
 = 
m⁄ô‹s
[
i
];

131 
mode
 = 
cuºítMode
;

137 #ifde‡
_WIN32


138 
˛õ¡Width
 = 
	`GëSy°emMërics
(
SM_CXFULLSCREEN
),

139 
˛õ¡Height
 = 
	`GëSy°emMërics
(
SM_CYFULLSCREEN
);

141 
˛õ¡Width
 = 
mode
->
width
, 
˛õ¡Height
 = mode->
height
;

145 i‡(
fuŒS¸ìn
)

147 
width
 = 
˛õ¡Width
;

148 
height
 = 
˛õ¡Height
;

151 i‡(
width
 <(
uöt32_t
)
˛õ¡Width
 && 
height
 <(uöt32_t)
˛õ¡Height
)

153 
wndWidth
 = 
width
;

154 
wndHeight
 = 
height
;

159 
widthR©io
 = 
°©ic_ˇ°
<>(
˛õ¡Width
Ë/ 
width
;

160 
heightR©io
 = 
°©ic_ˇ°
<>(
˛õ¡Height
Ë/ 
height
;

161 
sˇÀR©ioWödow
 = 
°d
::
	`mö
(
widthR©io
, 
heightR©io
);

164 
wndWidth
 = 
°©ic_ˇ°
<
uöt32_t
>(
width
 * 
sˇÀR©ioWödow
);

165 
wndHeight
 = 
°©ic_ˇ°
<
uöt32_t
>(
height
 * 
sˇÀR©ioWödow
);

170 
wndWidth
 = 
width
;

171 
wndHeight
 = 
height
;

174 
	`glfwDeÁu…WödowHöts
();

175 
	`glfwWödowHöt
(
GLFW_RESIZABLE
, 
GL_FALSE
);

177 #ifde‡
USE_GLES


178 
	`glfwWödowHöt
(
GLFW_CLIENT_API
, 
GLFW_OPENGL_ES_API
);

179 
	`glfwWödowHöt
(
GLFW_CONTEXT_VERSION_MAJOR
, 3);

180 
	`glfwWödowHöt
(
GLFW_CONTEXT_VERSION_MINOR
, 1);

182 
	`glfwWödowHöt
(
GLFW_CONTEXT_VERSION_MAJOR
, 3);

183 
	`glfwWödowHöt
(
GLFW_CONTEXT_VERSION_MINOR
, 3);

184 
	`glfwWödowHöt
(
GLFW_OPENGL_PROFILE
, 
GLFW_OPENGL_CORE_PROFILE
);

186 i‡(
ªndîToFûe
)

187 
	`glfwWödowHöt
(
GLFW_VISIBLE
, 
GL_FALSE
);

189 
wödow_
 = 
	`glfwCª©eWödow
(
wndWidth
, 
wndHeight
,

190 
wödowTôÀ_
.
	`c_°r
(),

191 
m⁄ô‹
, 
nuŒ±r
);

192 i‡(!
wödow_
)

194 
	`NVXIO_PRINT
("Error: FailedÅo create GLFW window");

195  
Ál£
;

198 i‡(!
ªndîToFûe
)

203 
	`glfwGëFømebuf„rSize
(
wödow_
, (*)&
wndWidth
, (*)&
wndHeight
);

205 #ifde‡
_WIN32


207 
widthR©io
 = 
°©ic_ˇ°
<>(
wndWidth
Ë/ 
width
;

208 
heightR©io
 = 
°©ic_ˇ°
<>(
wndHeight
Ë/ 
height
;

209 
sˇÀR©ioWödow
 = 
°d
::
	`mö
(
heightR©io
, 
widthR©io
);

211 
wndHeight
 = 
°©ic_ˇ°
<
uöt32_t
>(
sˇÀR©ioWödow
 * 
height
);

212 
a•e˘R©io
 = 
°©ic_ˇ°
<>(
width
Ë/ 
height
;

213 
wndWidth
 = 
°©ic_ˇ°
<
uöt32_t
>(
a•e˘R©io
 * 
sˇÀR©ioWödow
 * 
height
);

216 
	`glfwSëWödowSize
(
wödow_
, 
wndWidth
, 
wndHeight
);

221 i‡(!
fuŒS¸ìn
)

223 
	`NVXIO_ASSERT
(
mode
);

225 
xpos
 = (
mode
->
width
 - 
wndWidth
) >> 1;

226 
ypos
 = (
mode
->
height
 - 
wndHeight
) >> 1;

227 
	`glfwSëWödowPos
(
wödow_
, 
xpos
, 
ypos
);

231 
	`glfwSëWödowU£rPoöãr
(
wödow_
, 
this
);

232 
	`glfwSëI≈utMode
(
wödow_
, 
GLFW_STICKY_KEYS
, 
GL_TRUE
);

235 
	`¸óãO≥nGLC⁄ãxtHﬁdî
();

238  
	`öôGL
(
wndWidth
, 
wndHeight
);

239 
	}
}

241 
	gnvidüio
::
GlfwUIIm∂
::
	$putImage
(c⁄° 
image_t
 & 
image
)

243 
	`NVXIO_ASSERT
(
image
.
∂™es
[0].
±r
);

245 
uöt32_t
 
imgWidth
 = 
image
.
width
, 
imgHeight
 = image.
height
;

248 
GLÊﬂt
 
sˇÀUnif‹mX_
 = 
°©ic_ˇ°
<GLÊﬂt>(
wndWidth_
Ë/ 
imgWidth
;

249 
GLÊﬂt
 
sˇÀUnif‹mY_
 = 
°©ic_ˇ°
<GLÊﬂt>(
wndHeight_
Ë/ 
imgHeight
;

250 
GLÊﬂt
 
sˇÀ
 = 
°d
::
	`mö
(
sˇÀUnif‹mX_
, 
sˇÀUnif‹mY_
);

252 
GLöt
 
võwp‹tWidth
 = 
°©ic_ˇ°
<GLöt>(
imgWidth
 * 
sˇÀ
);

253 
GLöt
 
võwp‹tHeight
 = 
°©ic_ˇ°
<GLöt>(
imgHeight
 * 
sˇÀ
);

255 
xB‹dî_
 = (
wndWidth_
 - 
võwp‹tWidth
) >> 1;

256 
yB‹dî_
 = (
wndHeight_
 - 
võwp‹tHeight
) >> 1;

259 
nvidüio
::
O≥nGLRídîIm∂
::
	`putImage
(
image
);

260 
	}
}

262 
	gnvidüio
::
GlfwUIIm∂
::
	$gëCurs‹Pos
(& 
x
, & 
y
) const

264 
	`glfwGëCurs‹Pos
(
wödow_
, &
x
, &
y
);

266 
x
 = x / (
sˇÀR©ioWödow
Ë- 
xB‹dî_
;

267 
y
 = y / (
sˇÀR©ioWödow
Ë- 
yB‹dî_
;

268 
x
 /
sˇÀR©ioImage_
;

269 
y
 /
sˇÀR©ioImage_
;

270 
	}
}

272 
	gnvidüio
::
GlfwUIIm∂
::
	$curs‹_pos
(
GLFWwödow
* 
wödow
, 
x
, 
y
)

274 
GlfwUIIm∂
* 
im∂
 = 
°©ic_ˇ°
<GlfwUIIm∂*>(
	`glfwGëWödowU£rPoöãr
(
wödow
));

276 
x
 = x / (
im∂
->
sˇÀR©ioWödow
Ë- im∂->
xB‹dî_
;

277 
y
 = y / (
im∂
->
sˇÀR©ioWödow
Ë- im∂->
yB‹dî_
;

278 
x
 /
im∂
->
sˇÀR©ioImage_
;

279 
y
 /
im∂
->
sˇÀR©ioImage_
;

281 i‡(
im∂
->
mou£CÆlback_
)

283 (
im∂
->
mou£CÆlback_
)(im∂->
mou£CÆlbackC⁄ãxt_
, 
nvxio
::
Rídî
::
Mou£Move
,

284 
°©ic_ˇ°
<
uöt32_t
>(
x
),

285 
°©ic_ˇ°
<
uöt32_t
>(
y
));

287 
	}
}

290 
	gnvidüio
::
GlfwUIIm∂
::
	$key_fun
(
GLFWwödow
* 
wödow
, 
key
, , 
a˘i⁄
, )

292 
GlfwUIIm∂
* 
im∂
 = 
°©ic_ˇ°
<GlfwUIIm∂*>(
	`glfwGëWödowU£rPoöãr
(
wödow
));

294 i‡(
im∂
->
keybﬂrdCÆlback_
 && 
a˘i⁄
 =
GLFW_PRESS
)

296 
x
 = 0, 
y
 = 0;

297 
im∂
->
	`gëCurs‹Pos
(
x
, 
y
);

299 i‡(
key
 =
GLFW_KEY_ESCAPE
)

300 
key
 = 27;

302 (
im∂
->
keybﬂrdCÆlback_
)(im∂->
keybﬂrdCÆlbackC⁄ãxt_
, 
	`tﬁowî
(
key
),

303 
°©ic_ˇ°
<
uöt32_t
>(
x
),

304 
°©ic_ˇ°
<
uöt32_t
>(
y
));

306 
	}
}

308 
	gnvidüio
::
GlfwUIIm∂
::
	$£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
)

310 
keybﬂrdCÆlback_
 = 
ˇŒback
;

311 
keybﬂrdCÆlbackC⁄ãxt_
 = 
c⁄ãxt
;

313 
	`glfwSëKeyCÆlback
(
wödow_
, 
key_fun
);

314 
	}
}

316 
	gnvidüio
::
GlfwUIIm∂
::
	$£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
)

318 
mou£CÆlback_
 = 
ˇŒback
;

319 
mou£CÆlbackC⁄ãxt_
 = 
c⁄ãxt
;

321 
	`glfwSëMou£Buâ⁄CÆlback
(
wödow_
, 
mou£_buâ⁄
);

322 
	`glfwSëCurs‹PosCÆlback
(
wödow_
, 
curs‹_pos
);

323 
	}
}

326 
	gnvidüio
::
GlfwUIIm∂
::
	$mou£_buâ⁄
(
GLFWwödow
* 
wödow
, 
buâ⁄
, 
a˘i⁄
, )

328 
GlfwUIIm∂
* 
im∂
 = 
°©ic_ˇ°
<GlfwUIIm∂*>(
	`glfwGëWödowU£rPoöãr
(
wödow
));

330 i‡(
im∂
->
mou£CÆlback_
)

332 
Rídî
::
Mou£Buâ⁄Evít
 
evít
 = 
nvxio
::Rídî::
Mou£Move
;

334 i‡(
buâ⁄
 =
GLFW_MOUSE_BUTTON_LEFT
)

336 i‡(
a˘i⁄
 =
GLFW_RELEASE
)

337 
evít
 = 
nvxio
::
Rídî
::
Le·Buâ⁄Up
;

339 
evít
 = 
nvxio
::
Rídî
::
Le·Buâ⁄Down
;

341 i‡(
buâ⁄
 =
GLFW_MOUSE_BUTTON_RIGHT
)

343 i‡(
a˘i⁄
 =
GLFW_RELEASE
)

344 
evít
 = 
nvxio
::
Rídî
::
RightBuâ⁄Up
;

346 
evít
 = 
nvxio
::
Rídî
::
RightBuâ⁄Down
;

348 i‡(
buâ⁄
 =
GLFW_MOUSE_BUTTON_MIDDLE
)

350 i‡(
a˘i⁄
 =
GLFW_RELEASE
)

351 
evít
 = 
nvxio
::
Rídî
::
MiddÀBuâ⁄Up
;

353 
evít
 = 
nvxio
::
Rídî
::
MiddÀBuâ⁄Down
;

356 
x
 = 0, 
y
 = 0;

357 
im∂
->
	`gëCurs‹Pos
(
x
, 
y
);

359 (
im∂
->
mou£CÆlback_
)(im∂->
mou£CÆlbackC⁄ãxt_
, 
evít
,

360 
°©ic_ˇ°
<
uöt32_t
>(
x
),

361 
°©ic_ˇ°
<
uöt32_t
>(
y
));

363 
	}
}

365 
boﬁ
 
	gnvidüio
::
GlfwUIIm∂
::
	$Êush
()

367 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::flush (NVXIO)");

369 i‡(!
wödow_
)

370 
	`NVXIO_THROW_EXCEPTION
("TheÑender is closed, you must open it before");

372 i‡(
	`glfwWödowShouldClo£
(
wödow_
))

374 
	`˛o£
();

375  
Ál£
;

383 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

384 
	`glfwSw≠Buf„rs
(
wödow_
);

387 
	`glfwPﬁlEvíts
();

388 
	`˛órGlBuf„r
();

390  
åue
;

391 
	}
}

393 
	gnvidüio
::
GlfwUIIm∂
::
	$˛o£
()

395 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::close (NVXIO)");

397 i‡(
wödow_
)

400 
	`föÆGL
();

402 
	`glfwDe°royWödow
(
wödow_
);

403 
wödow_
 = 
nuŒ±r
;

405 
	}
}

407 
	g«me•a˚
 {

409 ˛as†
	cGLFWC⁄ãxtHﬁdîIm∂
 :

410 
public
 
nvidüio
::
O≥nGLC⁄ãxtHﬁdî


412 
public
:

413 
ex∂icô
 
GLFWC⁄ãxtHﬁdîIm∂
(
GLFWwödow
 * 
cuºítWödow_
) :

414 
¥evWödow
(
nuŒ±r
), 
cuºítWödow
(
cuºítWödow_
)

416 i‡(!
	gcuºítWödow
)

417 
NVXIO_THROW_EXCEPTION
("TheÑender is closed, you must open it before");

420 
vútuÆ
 
£t
()

423 
	g¥evWödow
 = 
glfwGëCuºítC⁄ãxt
();

425 
glfwMakeC⁄ãxtCuºít
(
cuºítWödow
);

428 
vútuÆ
 
un£t
()

431 
glfwMakeC⁄ãxtCuºít
(
¥evWödow
);

434 
	g¥iv©e
:

435 
GLFWwödow
 * 
¥evWödow
, * 
	gcuºítWödow
;

440 
	gnvidüio
::
GlfwUIIm∂
::
	$¸óãO≥nGLC⁄ãxtHﬁdî
()

442 
hﬁdî_
 = 
°d
::
make_sh¨ed
<
GLFWC⁄ãxtHﬁdîIm∂
>(
wödow_
);

443 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GlfwUIRenderImpl.hpp

29 #i‚de‡
GLFW_RENDER_IMPL_HPP


30 
	#GLFW_RENDER_IMPL_HPP


	)

32 #ifde‡
USE_GUI


34 
	~"Priv©e/LogUtûs.hµ
"

36 
	#GLFW_INCLUDE_NONE


	)

37 
	~<GLFW/glfw3.h
>

39 
	~"Rídî/CUDA-O≥nGL/O≥nGLRídîIm∂.hµ
"

41 
«me•a˚
 
	gnvidüio
 {

43 ˛as†
	cGlfwUIIm∂
 :

44 
public
 
O≥nGLRídîIm∂


46 
public
:

47 
GlfwUIIm∂
(
T¨gëTy≥
 
ty≥
, c⁄° 
°d
::
°rög
 & 
«me
);

48 
	gvútuÆ
 ~
GlfwUIIm∂
();

50 
vútuÆ
 
boﬁ
 
›í
(c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
,

51 
boﬁ
 
doSˇÀ
, boﬁ 
fuŒS¸ìn
);

53 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

54 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

57 
vútuÆ
 
putImage
(c⁄° 
image_t
 & 
image
);

59 
vútuÆ
 
boﬁ
 
Êush
();

60 
vútuÆ
 
˛o£
();

62 
	g¥Ÿe˘ed
:

64 
vútuÆ
 
¸óãO≥nGLC⁄ãxtHﬁdî
();

66 
	g°d
::
°rög
 
wödowTôÀ_
;

67 
GLFWwödow
* 
	gwödow_
;

69 
	g¥iv©e
:

71 
GLFWwödow
* 
¥evWödow_
;

73 
OnKeybﬂrdEvítCÆlback
 
	gkeybﬂrdCÆlback_
;

74 * 
	gkeybﬂrdCÆlbackC⁄ãxt_
;

76 
OnMou£EvítCÆlback
 
	gmou£CÆlback_
;

77 * 
	gmou£CÆlbackC⁄ãxt_
;

79 
	gsˇÀR©ioWödow
;

80 
GLuöt
 
	gxB‹dî_
, 
	gyB‹dî_
;

82 
key_fun
(
GLFWwödow
* 
wödow
, 
key
, 
sˇncode
, 
a˘i⁄
, 
mods
);

83 
mou£_buâ⁄
(
GLFWwödow
* 
wödow
, 
buâ⁄
, 
a˘i⁄
, 
mods
);

84 
curs‹_pos
(
GLFWwödow
* 
wödow
, 
x
, 
y
);

86 
gëCurs‹Pos
(& 
x
, & 
y
) const;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/OpenCV/OpenGLOpenCVRenderImpl.cpp

29 #i‡
deföed
 
USE_GUI
 && deföed 
USE_OPENCV


31 
	~"Rídî/O≥nCV/O≥nGLO≥nCVRídîIm∂.hµ
"

33 
	~<NVX/ProfûîR™ge.hµ
>

35 
	~<›ícv2/img¥oc/img¥oc.hµ
>

37 
	gnvidüio
::
O≥nGLO≥nCVRídîIm∂
::
	$O≥nGLO≥nCVRídîIm∂
(
T¨gëTy≥
 
ty≥
, c⁄° 
°d
::
°rög
 & 
«me
) :

38 
	`GlfwUIIm∂
(
ty≥
, 
«me
), 
	`cvtTy≥
(-1)

40 
	}
}

42 
boﬁ
 
	gnvidüio
::
O≥nGLO≥nCVRídîIm∂
::
	$›í
(c⁄° 
°d
::
°rög
& 
∑th
, 
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
)

44 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::open (NVXIO)");

46 i‡(!
GlfwUIIm∂
::
	`›í
(
∑th
, 
width
, 
height
, 
f‹m©
, 
Ál£
, false))

47  
Ál£
;

49 
cv
::
Size
 
	`size
(
width
, 
height
);

52 
di•œyFømeRGBA
.
	`¸óã
(
height
, 
width
, 
CV_8UC4
);

53 
di•œyFømeBGR
.
	`¸óã
(
height
, 
width
, 
CV_8UC3
);

55 i‡(
èrgëTy≥
 =
nvxio
::
Rídî
::
VIDEO_RENDER
)

57 
wrôî
.
	`›í
(
∑th
, 
	`CV_FOURCC
('m', 'p', '4', 'v'), 
OPENCV_DEFAULT_FPS
, 
size
);

58 
cvtTy≥
 = 
CV_RGBA2BGR
;

60 i‡(
èrgëTy≥
 =
nvxio
::
Rídî
::
IMAGE_RENDER
)

62 
wrôî
.
	`›í
(
∑th
, 0, 
OPENCV_DEFAULT_FPS
, 
size
);

63 
cvtTy≥
 = 
CV_RGBA2BGRA
;

66 
	`NVXIO_THROW_EXCEPTION
("ThisÑender can be used only forÑendering of imagesánd video files");

68  
wrôî
.
	`isO≥√d
();

69 
	}
}

71 
boﬁ
 
	gnvidüio
::
O≥nGLO≥nCVRídîIm∂
::
	$Êush
()

73 
nvxio
::
ProfûîR™ge
 
	`ønge
“vxio::
COLOR_ARGB_FUSCHIA
, "Render2D::flush (NVXIO)");

75 
	`NVXIO_ASSERT
(
wrôî
.
	`isO≥√d
());

76 
	`NVXIO_ASSERT
(
cvtTy≥
 >= 0);

78 
O≥nGLC⁄ãxtSa„Sëãr
 
	`£âî
(
hﬁdî_
);

80 
gl_
->
	`PixñSt‹ei
(
GL_PACK_ALIGNMENT
, 1);

81 
	`NVXIO_CHECK_GL_ERROR
();

82 
gl_
->
	`PixñSt‹ei
(
GL_PACK_ROW_LENGTH
, 
wndWidth_
);

83 
	`NVXIO_CHECK_GL_ERROR
();

86 
gl_
->
	`RódPixñs
(0, 0, 
wndWidth_
, 
wndHeight_
, 
GL_RGBA
, 
GL_UNSIGNED_BYTE
, 
di•œyFømeRGBA
.
d©a
);

87 
	`NVXIO_CHECK_GL_ERROR
();

90 
cv
::
	`cvtCﬁ‹
(
di•œyFømeRGBA
, 
di•œyFømeBGR
, 
cvtTy≥
);

91 
cv
::
	`Êù
(
di•œyFømeBGR
, displayFrameBGR, 0);

94 
wrôî
.
	`wrôe
(
di•œyFømeBGR
);

98 
gl_
->
	`PixñSt‹ei
(
GL_PACK_ALIGNMENT
, 4);

99 
	`NVXIO_CHECK_GL_ERROR
();

100 
gl_
->
	`PixñSt‹ei
(
GL_PACK_ROW_LENGTH
, 0);

101 
	`NVXIO_CHECK_GL_ERROR
();

103 
	`glfwSw≠Buf„rs
(
wödow_
);

105 
	`˛órGlBuf„r
();

107  
åue
;

108 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/OpenCV/OpenGLOpenCVRenderImpl.hpp

29 #i‚de‡
OPENGLOPENCVRENDERIMPL_HPP


30 
	#OPENGLOPENCVRENDERIMPL_HPP


	)

32 #i‡
deföed
 
USE_GUI
 && deföed 
USE_OPENCV


34 
	~"Rídî/GlfwUIRídîIm∂.hµ
"

36 
	~<›ícv2/c‹e/c‹e.hµ
>

37 
	~<›ícv2/highgui/highgui.hµ
>

39 
	#OPENCV_DEFAULT_FPS
 30

	)

41 
«me•a˚
 
	gnvidüio


44 ˛as†
	cO≥nGLO≥nCVRídîIm∂
 :

45 
public
 
GlfwUIIm∂


47 
public
:

48 
O≥nGLO≥nCVRídîIm∂
(
T¨gëTy≥
 
ty≥
, c⁄° 
°d
::
°rög
 & 
«me
);

50 
vútuÆ
 
boﬁ
 
›í
(c⁄° 
°d
::
°rög
& 
∑th
, 
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
);

51 
vútuÆ
 
boﬁ
 
Êush
();

53 
	g¥Ÿe˘ed
:

54 
cvtTy≥
;

55 
	gcv
::
VideoWrôî
 
wrôî
;

57 
	gcv
::
M©
 
di•œyFømeRGBA
;

58 
	gcv
::
M©
 
di•œyFømeBGR
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Render.cpp

29 
	~<mem‹y
>

31 
	~<OVX/RídîOVX.hµ
>

32 
	~<NVX/Aµliˇti⁄.hµ
>

34 
	~"Rídî/EvítLoggî.hµ
"

35 
	~"Rídî/EvítPœyî.hµ
"

37 #ifde‡
USE_GUI


38 
	~"Rídî/GlfwUIRídîIm∂.hµ
"

39 #ifde‡
USE_GSTREAMER


40 
	~"Rídî/GSåómî/GSåómîVideoRídîIm∂.hµ
"

41 
	~"Rídî/GSåómî/GSåómîImagesRídîIm∂.hµ
"

43 #ifde‡
USE_OPENCV


44 
	~"Rídî/O≥nCV/O≥nGLO≥nCVRídîIm∂.hµ
"

48 
	~"Rídî/StubRídîIm∂.hµ
"

49 
	~"Rídî/Wøµîs/RídîWøµî.hµ
"

51 
«me•a˚
 
	gnvidüio


54 
	g°d
::
°rög
 
∑tchWödowTôÀ
(c⁄° 
°d
::°rög & 
wödowTôÀ
)

56 
°d
::
°rög
 
ªtVÆ
 = 
wödowTôÀ
;

58 
	g°d
::
ª∂a˚
(
ªtVÆ
.
begö
(),ÑëVÆ.
íd
(), '/', '|');

59 
	g°d
::
ª∂a˚
(
ªtVÆ
.
begö
(),ÑëVÆ.
íd
(), '\\', '|');

61  
	gªtVÆ
;

64 
	g°d
::
unique_±r
<
Rídî
> 
¸óãSm¨tRídî
(
°d
::unique_±r<Rídî> 
•ecülizedRídî
)

66 
nvxio
::
Aµliˇti⁄
 &
≠p
 =Çvxio::Aµliˇti⁄::
gë
();

67 
	g°d
::
unique_±r
<
Rídî
> 
ªndî
 = 
°d
::
move
(
•ecülizedRídî
);

69 i‡(!
	g≠p
.
gëS˚«rioName
().
em±y
())

71 
	g°d
::
unique_±r
<
EvítPœyî
> 
∂ayî
(
√w
 EventPlayer);

72 i‡(
	g∂ayî
->
öô
(
≠p
.
gëS˚«rioName
(),áµ.
gëS˚«rioLo›Cou¡
()))

75 
	g∂ayî
->
Êush
();

76 
	g∂ayî
->
£tEfficõ¡Rídî
(
°d
::
move
(
ªndî
));

77 
	gªndî
 = 
°d
::
move
(
∂ayî
);

81 
NVXIO_THROW_EXCEPTION
("W¨nög: c™nŸ o≥¿s˚«riÿ\"" << 
≠p
.
gëS˚«rioName
() << "\"");

85 i‡(!
	g≠p
.
gëEvítLogName
().
em±y
())

87 
	g°d
::
unique_±r
<
EvítLoggî
> 
loggî
(
√w
 EvítLoggî(
≠p
.
gëEvítLogDumpFømesFœg
()));

88 i‡(
	gloggî
->
öô
(
≠p
.
gëEvítLogName
()))

90 
	gloggî
->
£tEfficõ¡Rídî
(
°d
::
move
(
ªndî
));

91 
	gªndî
 = 
°d
::
move
(
loggî
);

95 
Ârötf
(
°dîr
, "W¨nög: c™nŸ o≥¿log fûê\"%s\"\n", 
≠p
.
gëEvítLogName
().
c_°r
());

99  
	gªndî
;

102 
	g°d
::
unique_±r
<
Rídî
> 
¸óãVideoRídî
(c⁄° 
°d
::
°rög
& 
∑th
, 
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
)

104 #i‡
deföed
 
USE_GUI
 && deföed 
USE_GSTREAMER


105 
	g°d
::
unique_±r
<
GSåómîVideoRídîIm∂
> 
g°_ªndî
(
√w
 GStreamerVideoRenderImpl());

107 i‡(!
	gg°_ªndî
->
›í
(
∑th
, 
width
, 
height
, 
f‹m©
))

108  
	gnuŒ±r
;

110  
¸óãSm¨tRídî
(
°d
::
move
(
g°_ªndî
));

111 #ñi‡
deföed
 
USE_GUI
 && deföed 
USE_OPENCV


112 
	g°d
::
unique_±r
<
O≥nGLO≥nCVRídîIm∂
> 
ocv_ªndî
(
√w
 OpenGLOpenCVRenderImpl(

113 
nvxio
::
Rídî
::
VIDEO_RENDER
, "OpenGLOpenCVVideoRenderImpl"));

115 i‡(!
	gocv_ªndî
->
›í
(
∑th
, 
width
, 
height
, 
f‹m©
))

116  
	gnuŒ±r
;

118  
¸óãSm¨tRídî
(
°d
::
move
(
ocv_ªndî
));

120 ()
	g∑th
;

121 ()
	gwidth
;

122 ()
	gheight
;

123 ()
	gf‹m©
;

125  
	gnuŒ±r
;

128 
	g°d
::
unique_±r
<
Rídî
> 
¸óãImageRídî
(c⁄° 
°d
::
°rög
& 
∑th
, 
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
)

130 #i‡
deföed
 
USE_GUI
 && deföed 
USE_GSTREAMER


131 
	g°d
::
unique_±r
<
GSåómîImagesRídîIm∂
> 
g°_ªndî
(
√w
 GStreamerImagesRenderImpl());

133 i‡(!
	gg°_ªndî
->
›í
(
∑th
, 
width
, 
height
, 
f‹m©
))

134  
	gnuŒ±r
;

136  
¸óãSm¨tRídî
(
°d
::
move
(
g°_ªndî
));

137 #ñi‡
deföed
 
USE_GUI
 && deföed 
USE_OPENCV


138 
	g°d
::
unique_±r
<
O≥nGLO≥nCVRídîIm∂
> 
ocv_ªndî
(
√w
 OpenGLOpenCVRenderImpl(

139 
nvxio
::
Rídî
::
IMAGE_RENDER
, "OpenGLOpenCVImagesRenderImpl"));

141 i‡(!
	gocv_ªndî
->
›í
(
∑th
, 
width
, 
height
, 
f‹m©
))

142  
	gnuŒ±r
;

144  
¸óãSm¨tRídî
(
°d
::
move
(
ocv_ªndî
));

146 ()
	g∑th
;

147 ()
	gwidth
;

148 ()
	gheight
;

149 ()
	gf‹m©
;

151  
	gnuŒ±r
;

154 
	g°d
::
unique_±r
<
Rídî
> 
¸óãWödowRídî
(c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
,

155 
nvxcu_df_image_e
 
f‹m©
, 
boﬁ
 
doSˇÀ
, boﬁ 
fuŒs¸ìn
)

157 #ifde‡
USE_GUI


158 
	g°d
::
unique_±r
<
GlfwUIIm∂
> 
ªndî
(
√w
 GlfwUIIm∂(
nvxio
::
Rídî
::
WINDOW_RENDER
, "GlfwOpenGlRender"));

160 i‡(!
	gªndî
->
›í
(
tôÀ
, 
width
, 
height
, 
f‹m©
, 
doSˇÀ
, 
fuŒs¸ìn
))

161  
	gnuŒ±r
;

163  
¸óãSm¨tRídî
(
°d
::
move
(
ªndî
));

165 ()
	gtôÀ
;

166 ()
	gwidth
;

167 ()
	gheight
;

168 ()
	gf‹m©
;

169 ()
	gdoSˇÀ
;

170 ()
	gfuŒs¸ìn
;

172  
	gnuŒ±r
;

176 
	g°d
::
unique_±r
<
Rídî
> 
¸óãDeÁu…Rídî
(c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
,

177 
nvxcu_df_image_e
 
f‹m©
, 
boﬁ
 
doSˇÀ
, boﬁ 
fuŒs¸ìn
)

179 
	g°d
::
°rög
 
¥ef„ªdRídîName
 = 
nvxio
::
Aµliˇti⁄
::
gë
().
gëPª„ºedRídîName
();

181 i‡(
	g¥ef„ªdRídîName
 == "default")

183 
°d
::
unique_±r
<
Rídî
> 
ªndî
 = 
¸óãWödowRídî
(
tôÀ
, 
width
, 
height
, 
f‹m©
, 
doSˇÀ
, 
fuŒs¸ìn
);

185 i‡(!
	gªndî
)

186 
	gªndî
 = 
¸óãVideoRídî
(
tôÀ
 + ".avi", 
width
, 
height
, 
f‹m©
);

188  
	gªndî
;

190 i‡(
	g¥ef„ªdRídîName
 == "window")

192  
¸óãWödowRídî
(
tôÀ
, 
width
, 
height
, 
f‹m©
, 
doSˇÀ
, 
fuŒs¸ìn
);

194 i‡(
	g¥ef„ªdRídîName
 == "video")

196  
¸óãVideoRídî
(
∑tchWödowTôÀ
(
tôÀ
 + ".avi"), 
width
, 
height
, 
f‹m©
);

198 i‡(
	g¥ef„ªdRídîName
 == "image")

200  
¸óãImageRídî
(
∑tchWödowTôÀ
(
tôÀ
 + "_%05d.≤g"), 
width
, 
height
, 
f‹m©
);

202 i‡(
	g¥ef„ªdRídîName
 == "stub")

204 
°d
::
unique_±r
<
StubRídîIm∂
> 
ªndî
(
√w
 StubRenderImpl());

205 
NVXIO_ASSERT
(
ªndî
->
›í
(
tôÀ
, 
width
, 
height
, 
f‹m©
));

206  
¸óãSm¨tRídî
(
°d
::
move
(
ªndî
));

209  
	gnuŒ±r
;

215 
«me•a˚
 
	gnvxio


217 
	~"NVX/Utûôy.hµ
"

219 
	g°d
::
unique_±r
<
Rídî
> 
¸óãVideoRídî
(c⁄° 
°d
::
°rög
& 
∑th
,

220 
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
)

222 
	g°d
::
unique_±r
<
nvidüio
::
Rídî
> 
±r
 =

223 
nvidüio
::
¸óãVideoRídî
(
∑th
, 
width
, 
height
, 
f‹m©
);

225 i‡(!
	g±r
)

226  
	gnuŒ±r
;

228  
	gnvxio
::
makeUP
<
RídîWøµî
>(
°d
::
move
(
±r
));

231 
	g°d
::
unique_±r
<
Rídî
> 
¸óãImageRídî
(c⁄° 
°d
::
°rög
& 
∑th
,

232 
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
)

234 
	g°d
::
unique_±r
<
nvidüio
::
Rídî
> 
±r
 =

235 
nvidüio
::
¸óãImageRídî
(
∑th
, 
width
, 
height
, 
f‹m©
);

237 i‡(!
	g±r
)

238  
	gnuŒ±r
;

240  
	gnvxio
::
makeUP
<
RídîWøµî
>(
°d
::
move
(
±r
));

243 
	g°d
::
unique_±r
<
Rídî
> 
¸óãWödowRídî
(c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
,

244 
nvxcu_df_image_e
 
f‹m©
, 
boﬁ
 
doSˇÀ
, boﬁ 
fuŒs¸ìn
)

246 
	g°d
::
unique_±r
<
nvidüio
::
Rídî
> 
±r
 =

247 
nvidüio
::
¸óãWödowRídî
(
tôÀ
, 
width
, 
height
, 
f‹m©
,

248 
doSˇÀ
, 
fuŒs¸ìn
);

250 i‡(!
	g±r
)

251  
	gnuŒ±r
;

253  
	gnvxio
::
makeUP
<
RídîWøµî
>(
°d
::
move
(
±r
));

256 
	g°d
::
unique_±r
<
Rídî
> 
¸óãDeÁu…Rídî
(c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
,

257 
nvxcu_df_image_e
 
f‹m©
, 
boﬁ
 
doSˇÀ
, boﬁ 
fuŒs¸ìn
)

259 
	g°d
::
unique_±r
<
nvidüio
::
Rídî
> 
±r
 =

260 
nvidüio
::
¸óãDeÁu…Rídî
(
tôÀ
, 
width
, 
height
, 
f‹m©
,

261 
doSˇÀ
, 
fuŒs¸ìn
);

263 i‡(!
	g±r
)

264  
	gnuŒ±r
;

266  
	gnvxio
::
makeUP
<
RídîWøµî
>(
°d
::
move
(
±r
));

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Render3D.cpp

29 
	~<mem‹y
>

31 
	~<OVX/Rídî3DOVX.hµ
>

32 
	~<NVX/Aµliˇti⁄.hµ
>

34 #ifde‡
USE_GUI


35 
	~"Rídî/CUDA-O≥nGL/Ba£Rídî3DIm∂.hµ
"

38 
	~"Rídî/Wøµîs/Rídî3DWøµî.hµ
"

40 
«me•a˚
 
	gnvidüio


43 
	g°d
::
unique_±r
<
Rídî3D
> 
¸óãDeÁu…Rídî3D
(
öt32_t
 
xPos
, i¡32_à
yPos
,

44 c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
)

46 i‡(
	gnvxio
::
Aµliˇti⁄
::
gë
().
gëPª„ºedRídîName
() == "default")

48 #ifde‡
USE_GUI


49 
°d
::
unique_±r
<
Ba£Rídî3DIm∂
> 
ªndî
(
√w
 BaseRender3DImpl());

50 i‡(!
	gªndî
->
›í
(
xPos
, 
yPos
, 
width
, 
height
, 
tôÀ
))

52  
	gnuŒ±r
;

55  
	g°d
::
unique_±r
<
Rídî3D
>(
°d
::
move
(
ªndî
));

57 ()
	gxPos
;

58 ()
	gyPos
;

59 ()
	gtôÀ
;

60 ()
	gwidth
;

61 ()
	gheight
;

65  
	gnuŒ±r
;

71 
«me•a˚
 
	gnvxio


73 
	~"NVX/Utûôy.hµ
"

75 
	g°d
::
unique_±r
<
Rídî3D
> 
¸óãDeÁu…Rídî3D
(
öt32_t
 
xPos
, i¡32_à
yPos
, c⁄° 
°d
::
°rög
& 
tôÀ
,

76 
uöt32_t
 
width
, uöt32_à
height
)

78 
	g°d
::
unique_±r
<
nvidüio
::
Rídî3D
> 
±r
 =Çvidüio::
¸óãDeÁu…Rídî3D
(
xPos
, 
yPos
, 
tôÀ
, 
width
, 
height
);

80 i‡(!
	g±r
)

81  
	gnuŒ±r
;

83  
	gnvxio
::
makeUP
<
Rídî3DWøµî
>(
°d
::
move
(
±r
));

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Render3DImpl.hpp

29 #i‚de‡
NVIDIAIO_RENDER3D_HPP


30 
	#NVIDIAIO_RENDER3D_HPP


	)

32 
	~<mem‹y
>

33 
	~<°rög
>

35 
	~"Priv©e/Ty≥s.hµ
"

36 
	~"Rídî/RídîIm∂.hµ
"

38 
	~<NVX/Rídî3D.hµ
>

40 
«me•a˚
 
	gnvidüio


43 ˛as†
	cRídî3D


45 
	gpublic
:

46 
nvxio
::
	tRídî3D
::
	tT¨gëTy≥
 TargetType;

47 
	gnvxio
::
	tRídî3D
::
	tMou£Buâ⁄Evít
 MouseButtonEvent;

49 
	gnvxio
::
	tRídî3D
::
	tPœ√StyÀ
 PlaneStyle;

50 
	gnvxio
::
	tRídî3D
::
	tPoötCloudStyÀ
 PointCloudStyle;

52 
	gnvxio
::
	tRídî3D
::
	tOnKeybﬂrdEvítCÆlback
 OnKeyboardEventCallback;

53 
	gnvxio
::
	tRídî3D
::
	tOnMou£EvítCÆlback
 OnMouseEventCallback;

55 
	gnvidüio
::
	tRídî
::
	tTextBoxStyÀ
 TextBoxStyle;

57 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
) = 0;

58 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
) = 0;

60 
vútuÆ
 
putPœ√s
(c⁄° 
¨øy_t
 & 
∂™es
, c⁄° 
m©rix4x4f_t
 & 
modñ
, c⁄° 
Pœ√StyÀ
 & 
°yÀ
) = 0;

61 
vútuÆ
 
putPoötCloud
(c⁄° 
¨øy_t
 & 
poöts
, c⁄° 
m©rix4x4f_t
 & 
modñ
, c⁄° 
PoötCloudStyÀ
 & 
°yÀ
) = 0;

62 
vútuÆ
 
putImage
(c⁄° 
image_t
 & 
image
) = 0;

63 
vútuÆ
 
putText
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
TextBoxStyÀ
 & 
°yÀ
) = 0;

65 
vútuÆ
 
boﬁ
 
Êush
() = 0;

66 
vútuÆ
 
˛o£
() = 0;

68 
vútuÆ
 
£tVõwM©rix
(c⁄° 
m©rix4x4f_t
 & 
võw
) = 0;

69 
vútuÆ
 
gëVõwM©rix
(
m©rix4x4f_t
 & 
võw
) const = 0;

71 
vútuÆ
 
£tProje˘i⁄M©rix
(c⁄° 
m©rix4x4f_t
 & 
¥oje˘i⁄
) = 0;

72 
vútuÆ
 
gëProje˘i⁄M©rix
(
m©rix4x4f_t
 & 
¥oje˘i⁄
) const = 0;

74 
vútuÆ
 
£tDeÁu…FOV
(
fov
) = 0;

75 
vútuÆ
 
íabÀDeÁu…KeybﬂrdEvítCÆlback
() = 0;

77 
vútuÆ
 
dißbÀDeÁu…KeybﬂrdEvítCÆlback
() = 0;

78 
vútuÆ
 
boﬁ
 
u£DeÁu…KeybﬂrdEvítCÆlback
() = 0;

80 
vútuÆ
 
uöt32_t
 
gëWidth
() const = 0;

81 
vútuÆ
 
uöt32_t
 
gëHeight
() const = 0;

83 
T¨gëTy≥
 
gëT¨gëTy≥
() const

85  
	gèrgëTy≥
;

88 
	g°d
::
°rög
 
gëRídîName
() const

90  
ªndîName
;

93 
	gvútuÆ
 ~
Rídî3D
()

96 
	g¥Ÿe˘ed
:

97 
Rídî3D
(
T¨gëTy≥
 
ty≥
 = 
nvxio
::Rídî3D::
UNKNOWN_RENDER
, c⁄° 
°d
::
°rög
& 
«me
 = "Undefined"):

98 
èrgëTy≥
(
ty≥
),

99 
ªndîName
(
«me
)

102 c⁄° 
T¨gëTy≥
 
	gèrgëTy≥
;

103 c⁄° 
	g°d
::
°rög
 
ªndîName
;

106 
	g°d
::
unique_±r
<
Rídî3D
> 
¸óãDeÁu…Rídî3D
(
öt32_t
 
xPos
, i¡32_à
yPos
, c⁄° 
°d
::
°rög
& 
tôÀ
,

107 
uöt32_t
 
width
, uöt32_à
height
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/RenderImpl.hpp

29 #i‚de‡
NVIDIAIO_RENDER_HPP


30 
	#NVIDIAIO_RENDER_HPP


	)

32 
	~<mem‹y
>

33 
	~<°rög
>

35 
	~"Priv©e/Ty≥s.hµ
"

36 
	~<NVX/Rídî.hµ
>

38 #i‚de‡
__ANDROID__


39 
	~<NVX/Aµliˇti⁄.hµ
>

42 
«me•a˚
 
	gnvidüio


45 ˛as†
	cRídî


47 
	gpublic
:

49 #i‚de‡
__ANDROID__


50 
nvxio
::
	tRídî
::
	tOnKeybﬂrdEvítCÆlback
 OnKeyboardEventCallback;

51 
	gnvxio
::
	tRídî
::
	tOnMou£EvítCÆlback
 OnMouseEventCallback;

54 
	gnvxio
::
	tRídî
::
	tTextBoxStyÀ
 TextBoxStyle;

55 
	gnvxio
::
	tRídî
::
	tFótuªStyÀ
 FeatureStyle;

56 
	gnvxio
::
	tRídî
::
	tLöeStyÀ
 LineStyle;

57 
	gnvxio
::
	tRídî
::
	tMŸi⁄FõldStyÀ
 MotionFieldStyle;

58 
	gnvxio
::
	tRídî
::
	tDëe˘edObje˘StyÀ
 DetectedObjectStyle;

59 
	gnvxio
::
	tRídî
::
	tCú˛eStyÀ
 CircleStyle;

61 #i‚de‡
__ANDROID__


62 
	gnvxio
::
	tRídî
::
	tMou£Buâ⁄Evít
 MouseButtonEvent;

64 
	gnvxio
::
	tRídî
::
	tT¨gëTy≥
 TargetType;

66 #i‚de‡
__ANDROID__


67 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
) = 0;

68 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
) = 0;

71 
vútuÆ
 
putImage
(c⁄° 
image_t
 & 
image
) = 0;

72 
vútuÆ
 
putTextVõwp‹t
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
TextBoxStyÀ
& 
°yÀ
) = 0;

73 
vútuÆ
 
putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄° 
FótuªStyÀ
& 
°yÀ
) = 0;

74 
vútuÆ
 
putFótuªs
(c⁄° 
¨øy_t
 & 
loˇti⁄
, c⁄°áºay_à& 
°yÀs
) = 0;

75 
vútuÆ
 
putLöes
(c⁄° 
¨øy_t
 & 
löes
, c⁄° 
LöeStyÀ
& 
°yÀ
) = 0;

76 
vútuÆ
 
putC⁄vexPﬁyg⁄
(c⁄° 
¨øy_t
 & 
vîti˚s
, c⁄° 
LöeStyÀ
& 
°yÀ
) = 0;

77 
vútuÆ
 
putMŸi⁄Fõld
(c⁄° 
image_t
 & 
fõld
, c⁄° 
MŸi⁄FõldStyÀ
& 
°yÀ
) = 0;

78 
vútuÆ
 
putObje˘Loˇti⁄
(c⁄° 
nvxcu_ª˘™gÀ_t
 & 
loˇti⁄
, c⁄° 
Dëe˘edObje˘StyÀ
& 
°yÀ
) = 0;

79 
vútuÆ
 
putCú˛es
(c⁄° 
¨øy_t
 & 
cú˛es
, c⁄° 
Cú˛eStyÀ
& 
°yÀ
) = 0;

80 
vútuÆ
 
putAºows
(c⁄° 
¨øy_t
 & 
ﬁd_poöts
, c⁄°áºay_à& 
√w_poöts
,

81 c⁄° 
LöeStyÀ
& 
°yÀ
) = 0;

83 #i‚de‡
__ANDROID__


84 
vútuÆ
 
boﬁ
 
Êush
() = 0;

85 
vútuÆ
 
˛o£
() = 0;

88 
T¨gëTy≥
 
gëT¨gëTy≥
() const

90  
	gèrgëTy≥
;

93 
	g°d
::
°rög
 
gëRídîName
() const

95  
ªndîName
;

98 
vútuÆ
 
uöt32_t
 
gëVõwp‹tWidth
() const = 0;

99 
vútuÆ
 
uöt32_t
 
gëVõwp‹tHeight
() const = 0;

101 
	gvútuÆ
 ~
Rídî
()

104 
	g¥Ÿe˘ed
:

106 
Rídî
(
T¨gëTy≥
 
ty≥
 = 
nvxio
::Rídî::
UNKNOWN_RENDER
, 
°d
::
°rög
 
«me
 = "Undefined"):

107 
èrgëTy≥
(
ty≥
),

108 
ªndîName
(
«me
)

111 c⁄° 
T¨gëTy≥
 
	gèrgëTy≥
;

112 c⁄° 
	g°d
::
°rög
 
ªndîName
;

115 #ifde‡
__ANDROID__


117 
	g°d
::
unique_±r
<
Rídî
> 
¸óãRídî
(
uöt32_t
 
width
, uöt32_à
height
, 
boﬁ
 
doSˇÀ
 = 
åue
);

121 
	g°d
::
unique_±r
<
Rídî
> 
¸óãDeÁu…Rídî
(c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
,

122 
nvxcu_df_image_e
 
f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
, 
boﬁ
 
doSˇÀ
 = 
åue
,

123 
boﬁ
 
fuŒS¸ìn
 = 
nvxio
::
Aµliˇti⁄
::
gë
().
gëFuŒS¸ìnFœg
());

125 
	g°d
::
unique_±r
<
Rídî
> 
¸óãVideoRídî
(c⁄° 
°d
::
°rög
& 
∑th
, 
uöt32_t
 
width
,

126 
uöt32_t
 
height
, 
nvxcu_df_image_e
 
f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
);

128 
	g°d
::
unique_±r
<
Rídî
> 
¸óãWödowRídî
(c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
,

129 
nvxcu_df_image_e
 
f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
, 
boﬁ
 
doSˇÀ
 = 
åue
,

130 
boﬁ
 
fuŒs¸ìn
 = 
nvxio
::
Aµliˇti⁄
::
gë
().
gëFuŒS¸ìnFœg
());

132 
	g°d
::
unique_±r
<
Rídî
> 
¸óãImageRídî
(c⁄° 
°d
::
°rög
& 
∑th
, 
uöt32_t
 
width
, uöt32_à
height
,

133 
nvxcu_df_image_e
 
f‹m©
 = 
NVXCU_DF_IMAGE_RGBX
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/StubRenderImpl.hpp

29 #i‚de‡
STUBRENDERIMPL_HPP


30 
	#STUBRENDERIMPL_HPP


	)

32 
	~"Rídî/RídîIm∂.hµ
"

34 
«me•a˚
 
	gnvidüio


37 ˛as†
	cStubRídîIm∂
 :

38 
public
 
Rídî


40 
public
:

41 
StubRídîIm∂
():

42 
Rídî
(
nvxio
::Rídî::
UNKNOWN_RENDER
, "Stub"),

43 
wödowWidth
(), 
wödowHeight
()

47 
vútuÆ
 
boﬁ
 
›í
(c⁄° 
°d
::
°rög
& 
tôÀ
, 
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 )

49 
	gwödowHeight
 = 
height
;

50 
	gwödowWidth
 = 
width
;

51 
	gwödowTôÀ
 = 
tôÀ
;

53  
	gåue
;

56 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
, *) { }

57 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
, *) { }

58 
vútuÆ
 
putImage
(c⁄° 
image_t
 &) { }

59 
vútuÆ
 
putTextVõwp‹t
(c⁄° 
°d
::
°rög
&, c⁄° 
TextBoxStyÀ
 &) { }

60 
vútuÆ
 
putFótuªs
(c⁄° 
¨øy_t
 &, c⁄° 
FótuªStyÀ
 &) { }

61 
vútuÆ
 
putFótuªs
(c⁄° 
¨øy_t
 &, constárray_t &) { }

62 
vútuÆ
 
putLöes
(c⁄° 
¨øy_t
 &, c⁄° 
LöeStyÀ
 &) { }

63 
vútuÆ
 
putC⁄vexPﬁyg⁄
(c⁄° 
¨øy_t
 &, c⁄° 
LöeStyÀ
 &) { }

64 
vútuÆ
 
putMŸi⁄Fõld
(c⁄° 
image_t
 &, c⁄° 
MŸi⁄FõldStyÀ
&){}

65 
vútuÆ
 
putObje˘Loˇti⁄
(c⁄° 
nvxcu_ª˘™gÀ_t
 &, c⁄° 
Dëe˘edObje˘StyÀ
 &) { }

66 
vútuÆ
 
putCú˛es
(c⁄° 
¨øy_t
 &, c⁄° 
Cú˛eStyÀ
 &) { }

67 
vútuÆ
 
putAºows
(c⁄° 
¨øy_t
 &, c⁄°áºay_à&, c⁄° 
LöeStyÀ
 &) { }

69 
vútuÆ
 
boﬁ
 
Êush
(Ë{  
	gåue
; }

70 
vútuÆ
 
˛o£
() { }

72 
vútuÆ
 
uöt32_t
 
gëVõwp‹tWidth
() const

74  
	gwödowWidth
;

77 
vútuÆ
 
uöt32_t
 
gëVõwp‹tHeight
() const

79  
	gwödowHeight
;

82 
	gvútuÆ
 ~
StubRídîIm∂
()

86 
	g¥Ÿe˘ed
:

87 
uöt32_t
 
wödowWidth
;

88 
uöt32_t
 
	gwödowHeight
;

89 
	g°d
::
°rög
 
wödowTôÀ
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Wrappers/Render3DWrapper.cpp

29 
	~"Rídî3DWøµî.hµ
"

30 
	~"Priv©e/Ty≥s.hµ
"

33 
	~<c°rög
>

35 
«me•a˚
 
	gnvxio


38 
	gRídî3DWøµî
::
Rídî3DWøµî
(
°d
::
unique_±r
<
nvidüio
::
Rídî3D
> 
ªndî
) :

39 
Rídî3D
(
°©ic_ˇ°
<
T¨gëTy≥
>(
ªndî
->
gëT¨gëTy≥
()),

40 
ªndî
->
gëRídîName
()),

41 
ªndî_
(
°d
::
move
(
ªndî
)),

42 
	g∂™es_
 { },

43 
	gpoöts_
 { }

47 
	gRídî3DWøµî
::
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
)

49 
	gªndî_
->
£tOnKeybﬂrdEvítCÆlback
(
ªöãΩªt_ˇ°
<
nvidüio
::
Rídî3D
::
OnKeybﬂrdEvítCÆlback
>(
ˇŒback
),

50 
c⁄ãxt
);

53 
	gRídî3DWøµî
::
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
)

55 
	gªndî_
->
£tOnMou£EvítCÆlback
(
ªöãΩªt_ˇ°
<
nvidüio
::
Rídî3D
::
OnMou£EvítCÆlback
>(
ˇŒback
),

56 
c⁄ãxt
);

59 
	gRídî3DWøµî
::
putPœ√s
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
∂™es
, * 
modñ
, c⁄° 
Pœ√StyÀ
 & 
°yÀ
)

64 
cudaSåóm_t
 
	g°ªam
 = 
nuŒ±r
;

65 
uöt32_t
 
	gnumIãms
 = 0u;

66 
size_t
 
	gôemSize
 = 
nvidüio
::
gëIãmSize
(
∂™es
.
ba£
.
ôem_ty≥
);

68 
NVXIO_CUDA_SAFE_CALL
–
cudaMem˝yAsync
(&
numIãms
, 
∂™es
.
num_ôems_dev_±r
, (
uöt32_t
),

69 
cudaMem˝yDevi˚ToHo°
, 
°ªam
) );

71 i‡(
	g∂™es_
.
	gˇ∑côy
 < 
	gnumIãms
)

73 
uöt8_t
 * 
	g±r
 = 
°©ic_ˇ°
<uöt8_à*>(
∂™es_
.
±r
);

74 
	gdñëe
[]
	g±r
;

76 
	g∂™es_
.
	gˇ∑côy
 = 
∂™es
.
ba£
.
ˇ∑côy
;

77 
	g∂™es_
.
	g±r
 = 
√w
 
uöt8_t
[
ôemSize
 * 
∂™es
.
ba£
.
ˇ∑côy
];

78 
	g∂™es_
.
	gôem_ty≥
 = 
∂™es
.
ba£
.
ôem_ty≥
;

79 
	g∂™es_
.
	gnum_ôems
 = 
numIãms
;

82 
NVXIO_CUDA_SAFE_CALL
–
cudaMem˝yAsync
(
∂™es_
.
±r
, 
∂™es
.
dev_±r
,

83 
∂™es_
.
num_ôems
 * 
ôemSize
,

84 
cudaMem˝yDevi˚ToHo°
, 
°ªam
) );

86 
NVXIO_CUDA_SAFE_CALL
–
cudaSåómSynchr⁄ize
(
°ªam
) );

89 
	gªndî_
->
putPœ√s
(
∂™es_
, 
nvidüio
::
m©rix4x4f_t
(
modñ
),

90 *(
nvidüio
::
Rídî3D
::
Pœ√StyÀ
 *)&
°yÀ
);

93 
	gRídî3DWøµî
::
putPoötCloud
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
poöts
, * 
modñ
, c⁄° 
PoötCloudStyÀ
 & 
°yÀ
)

98 
cudaSåóm_t
 
	g°ªam
 = 
nuŒ±r
;

99 
uöt32_t
 
	gnumIãms
 = 0u;

100 
size_t
 
	gôemSize
 = 
nvidüio
::
gëIãmSize
(
poöts
.
ba£
.
ôem_ty≥
);

102 
NVXIO_CUDA_SAFE_CALL
–
cudaMem˝yAsync
(&
numIãms
, 
poöts
.
num_ôems_dev_±r
, (
uöt32_t
),

103 
cudaMem˝yDevi˚ToHo°
, 
°ªam
) );

105 i‡(
	gpoöts_
.
	gˇ∑côy
 < 
	gnumIãms
)

107 
uöt8_t
 * 
	g±r
 = 
°©ic_ˇ°
<uöt8_à*>(
poöts_
.
±r
);

108 
	gdñëe
[]
	g±r
;

110 
	gpoöts_
.
	gˇ∑côy
 = 
poöts
.
ba£
.
ˇ∑côy
;

111 
	gpoöts_
.
	g±r
 = 
√w
 
uöt8_t
[
ôemSize
 * 
poöts
.
ba£
.
ˇ∑côy
];

112 
	gpoöts_
.
	gôem_ty≥
 = 
poöts
.
ba£
.
ôem_ty≥
;

113 
	gpoöts_
.
	gnum_ôems
 = 
numIãms
;

116 
NVXIO_CUDA_SAFE_CALL
–
cudaMem˝yAsync
(
poöts_
.
±r
, 
poöts
.
dev_±r
,

117 
poöts_
.
num_ôems
 * 
ôemSize
,

118 
cudaMem˝yDevi˚ToHo°
, 
°ªam
) );

120 
NVXIO_CUDA_SAFE_CALL
–
cudaSåómSynchr⁄ize
(
°ªam
) );

123 
	gªndî_
->
putPoötCloud
(
poöts_
, 
nvidüio
::
m©rix4x4f_t
(
modñ
),

124 *(
nvidüio
::
Rídî3D
::
PoötCloudStyÀ
 *)&
°yÀ
);

127 
boﬁ
 
	gRídî3DWøµî
::
Êush
()

129  
ªndî_
->
Êush
();

132 
	gRídî3DWøµî
::
˛o£
()

134 i‡(
∂™es_
.
±r
)

136 
uöt8_t
 * 
±r
 = 
°©ic_ˇ°
<uöt8_à*>(
∂™es_
.ptr);

137 
	gdñëe
[]
	g±r
;

138 
	g∂™es_
.
	g±r
 = 
nuŒ±r
;

141 i‡(
	gpoöts_
.
	g±r
)

143 
uöt8_t
 * 
	g±r
 = 
°©ic_ˇ°
<uöt8_à*>(
poöts_
.
±r
);

144 
	gdñëe
[]
	g±r
;

145 
	gpoöts_
.
	g±r
 = 
nuŒ±r
;

148 
	gªndî_
->
˛o£
();

151 
	gRídî3DWøµî
::
£tVõwM©rix
(* 
võw
)

153 
ªndî_
->
£tVõwM©rix
(
nvidüio
::
m©rix4x4f_t
(
võw
));

156 
	gRídî3DWøµî
::
gëVõwM©rix
(* 
võw
) const

158 
nvidüio
::
m©rix4x4f_t
 
wøµî
(
võw
);

159 
	gªndî_
->
gëVõwM©rix
(
wøµî
);

162 
	gRídî3DWøµî
::
£tProje˘i⁄M©rix
(* 
¥oje˘i⁄
)

164 
ªndî_
->
£tProje˘i⁄M©rix
(
nvidüio
::
m©rix4x4f_t
(
¥oje˘i⁄
));

167 
	gRídî3DWøµî
::
gëProje˘i⁄M©rix
(* 
¥oje˘i⁄
) const

169 
nvidüio
::
m©rix4x4f_t
 
wøµî
(
¥oje˘i⁄
);

170 
	gªndî_
->
gëProje˘i⁄M©rix
(
wøµî
);

173 
	gRídî3DWøµî
::
£tDeÁu…FOV
(
fov
)

175 
ªndî_
->
£tDeÁu…FOV
(
fov
);

178 
	gRídî3DWøµî
::
íabÀDeÁu…KeybﬂrdEvítCÆlback
()

180 
ªndî_
->
íabÀDeÁu…KeybﬂrdEvítCÆlback
();

183 
	gRídî3DWøµî
::
dißbÀDeÁu…KeybﬂrdEvítCÆlback
()

185 
ªndî_
->
dißbÀDeÁu…KeybﬂrdEvítCÆlback
();

188 
boﬁ
 
	gRídî3DWøµî
::
u£DeÁu…KeybﬂrdEvítCÆlback
()

190  
ªndî_
->
u£DeÁu…KeybﬂrdEvítCÆlback
();

193 
uöt32_t
 
	gRídî3DWøµî
::
gëWidth
() const

195  
ªndî_
->
gëWidth
();

198 
uöt32_t
 
	gRídî3DWøµî
::
gëHeight
() const

200  
ªndî_
->
gëHeight
();

203 
	gRídî3DWøµî
::
putImage
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
image
)

205 
ªndî_
->
putImage
(
nvidüio
::
image_t
(
image
));

208 
	gRídî3DWøµî
::
putText
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
nvxio
::
Rídî
::
TextBoxStyÀ
& 
°yÀ
)

210 
ªndî_
->
putText
(
ãxt
, 
°yÀ
);

213 
	gRídî3DWøµî
::~
Rídî3DWøµî
()

215 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Wrappers/Render3DWrapper.hpp

29 #i‚de‡
RENDER3D_WRAPPER_NVXCU_HPP


30 
	#RENDER3D_WRAPPER_NVXCU_HPP


	)

32 
	~<mem‹y
>

34 
	~<NVX/Rídî3D.hµ
>

36 
	~"Rídî/Rídî3DIm∂.hµ
"

38 
«me•a˚
 
	gnvxio


41 ˛as†
	cRídî3DWøµî
 :

42 
public
 
Rídî3D


44 
public
:

45 
ex∂icô
 
Rídî3DWøµî
(
°d
::
unique_±r
<
nvidüio
::
Rídî3D
> 
ªndî
);

47 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

48 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

50 
vútuÆ
 
putPœ√s
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
∂™es
, * 
modñ
, c⁄° 
Pœ√StyÀ
 & 
°yÀ
);

51 
vútuÆ
 
putPoötCloud
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
poöts
, * 
modñ
, c⁄° 
PoötCloudStyÀ
 & 
°yÀ
);

53 
vútuÆ
 
boﬁ
 
Êush
();

54 
vútuÆ
 
˛o£
();

56 
vútuÆ
 
£tVõwM©rix
(* 
võw
);

57 
vútuÆ
 
gëVõwM©rix
(* 
võw
) const;

59 
vútuÆ
 
£tProje˘i⁄M©rix
(* 
¥oje˘i⁄
);

60 
vútuÆ
 
gëProje˘i⁄M©rix
(* 
¥oje˘i⁄
) const;

62 
vútuÆ
 
£tDeÁu…FOV
(
fov
);

64 
vútuÆ
 
íabÀDeÁu…KeybﬂrdEvítCÆlback
();

65 
vútuÆ
 
dißbÀDeÁu…KeybﬂrdEvítCÆlback
();

67 
vútuÆ
 
boﬁ
 
u£DeÁu…KeybﬂrdEvítCÆlback
();

69 
vútuÆ
 
uöt32_t
 
gëWidth
() const;

70 
vútuÆ
 
uöt32_t
 
gëHeight
() const;

72 
vútuÆ
 
putImage
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
image
);

74 
vútuÆ
 
putText
(c⁄° 
°d
::
°rög
 & 
ãxt
, c⁄° 
nvxio
::
Rídî
::
TextBoxStyÀ
 & 
°yÀ
);

76 
	gvútuÆ
 ~
Rídî3DWøµî
();

78 
	g¥iv©e
:

79 
°d
::
unique_±r
<
nvidüio
::
Rídî3D
> 
ªndî_
;

81 
	gnvidüio
::
¨øy_t
 
∂™es_
, 
	gpoöts_
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Wrappers/RenderWrapper.cpp

29 
	~"RídîWøµî.hµ
"

32 
	~<c°rög
>

34 
«me•a˚
 
	gnvxio


37 
	gRídîWøµî
::
RídîWøµî
(
°d
::
unique_±r
<
nvidüio
::
Rídî
> 
ªndî
) :

38 
Rídî
(
°©ic_ˇ°
<
T¨gëTy≥
>(
ªndî
->
gëT¨gëTy≥
()),

39 
ªndî
->
gëRídîName
()),

40 
ªndî_
(
°d
::
move
(
ªndî
))

42 
NVXIO_ASSERT
(
ªndî_
);

45 #i‚de‡
__ANDROID__


47 
	gRídîWøµî
::
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
)

49 
	gªndî_
->
£tOnKeybﬂrdEvítCÆlback
(

50 
ªöãΩªt_ˇ°
<
nvidüio
::
Rídî
::
OnKeybﬂrdEvítCÆlback
>(
ˇŒback
), 
c⁄ãxt
);

53 
	gRídîWøµî
::
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
)

55 
	gªndî_
->
£tOnMou£EvítCÆlback
(

56 
ªöãΩªt_ˇ°
<
nvidüio
::
Rídî
::
OnMou£EvítCÆlback
>(
ˇŒback
), 
c⁄ãxt
);

61 
	gRídîWøµî
::
putImage
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
image
)

63 
ªndî_
->
putImage
(
nvidüio
::
image_t
(
image
));

66 
	gRídîWøµî
::
putTextVõwp‹t
(c⁄° 
°d
::
°rög
 & 
ãxt
, c⁄° 
TextBoxStyÀ
 & 
°yÀ
)

68 
	gªndî_
->
putTextVõwp‹t
(
ãxt
, *(
nvidüio
::
Rídî
::
TextBoxStyÀ
 *)&
°yÀ
);

71 
	gRídîWøµî
::
putFótuªs
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
loˇti⁄
, c⁄° 
FótuªStyÀ
 & 
°yÀ
)

73 
	gªndî_
->
putFótuªs
(
nvidüio
::
¨øy_t
(
loˇti⁄
),

74 *(
nvidüio
::
Rídî
::
FótuªStyÀ
 *)&
°yÀ
);

77 
	gRídîWøµî
::
putFótuªs
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
loˇti⁄
, c⁄°Çvxcu_∂aö_¨øy_à& 
°yÀs
)

79 
	gªndî_
->
putFótuªs
(
nvidüio
::
¨øy_t
(
loˇti⁄
),Çvidüio::¨øy_t(
°yÀs
));

82 
	gRídîWøµî
::
putLöes
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
löes
, c⁄° 
LöeStyÀ
 & 
°yÀ
)

84 
	gªndî_
->
putLöes
(
nvidüio
::
¨øy_t
(
löes
),

85 *(
nvidüio
::
Rídî
::
LöeStyÀ
 *)&
°yÀ
);

88 
	gRídîWøµî
::
putC⁄vexPﬁyg⁄
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
vîti˚s
, c⁄° 
LöeStyÀ
 & 
°yÀ
)

90 
	gªndî_
->
putC⁄vexPﬁyg⁄
(
nvidüio
::
¨øy_t
(
vîti˚s
),

91 *(
nvidüio
::
Rídî
::
LöeStyÀ
 *)&
°yÀ
);

94 
	gRídîWøµî
::
putMŸi⁄Fõld
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
fõld
, c⁄° 
MŸi⁄FõldStyÀ
 & 
°yÀ
)

96 
	gªndî_
->
putMŸi⁄Fõld
(
nvidüio
::
image_t
(
fõld
),

97 *(
nvidüio
::
Rídî
::
MŸi⁄FõldStyÀ
 *)&
°yÀ
);

100 
	gRídîWøµî
::
putObje˘Loˇti⁄
(c⁄° 
nvxcu_ª˘™gÀ_t
 & 
loˇti⁄
, c⁄° 
Dëe˘edObje˘StyÀ
 & 
°yÀ
)

102 
	gªndî_
->
putObje˘Loˇti⁄
(*(c⁄° 
nvxcu_ª˘™gÀ_t
 *)&
loˇti⁄
,

103 *(
nvidüio
::
Rídî
::
Dëe˘edObje˘StyÀ
 *)&
°yÀ
);

106 
	gRídîWøµî
::
putCú˛es
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
cú˛es
, c⁄° 
Cú˛eStyÀ
 & 
°yÀ
)

108 
	gªndî_
->
putCú˛es
(
nvidüio
::
¨øy_t
(
cú˛es
),

109 *(
nvidüio
::
Rídî
::
Cú˛eStyÀ
 *)&
°yÀ
);

112 
	gRídîWøµî
::
putAºows
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
ﬁd_poöts
, c⁄°Çvxcu_∂aö_¨øy_à& 
√w_poöts
, c⁄° 
LöeStyÀ
 & 
°yÀ
)

114 
	gªndî_
->
putAºows
(
nvidüio
::
¨øy_t
(
ﬁd_poöts
),Çvidüio::¨øy_t(
√w_poöts
),

115 *(
nvidüio
::
Rídî
::
LöeStyÀ
 *)&
°yÀ
);

118 #i‚de‡
__ANDROID__


120 
boﬁ
 
	gRídîWøµî
::
Êush
()

122  
ªndî_
->
Êush
();

125 
	gRídîWøµî
::
˛o£
()

127 
ªndî_
->
˛o£
();

132 
uöt32_t
 
	gRídîWøµî
::
gëVõwp‹tWidth
() const

134  
ªndî_
->
gëVõwp‹tWidth
();

137 
uöt32_t
 
	gRídîWøµî
::
gëVõwp‹tHeight
() const

139  
ªndî_
->
gëVõwp‹tHeight
();

142 
	gRídîWøµî
::~
RídîWøµî
()

144 #i‚de‡
__ANDROID__


145 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Wrappers/RenderWrapper.hpp

29 #i‚de‡
RENDER_WRAPPER_NVXCU_HPP


30 
	#RENDER_WRAPPER_NVXCU_HPP


	)

32 
	~<mem‹y
>

34 
	~<NVX/Rídî.hµ
>

36 #ifde‡
__ANDROID__


37 
	~"RídîIm∂.hµ
"

39 
	~"Rídî/RídîIm∂.hµ
"

42 
«me•a˚
 
	gnvxio


45 ˛as†
	cRídîWøµî
 :

46 
public
 
Rídî


48 
public
:

49 
ex∂icô
 
RídîWøµî
(
°d
::
unique_±r
<
nvidüio
::
Rídî
> 
ªndî
);

51 #i‚de‡
__ANDROID__


52 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

53 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

56 
vútuÆ
 
putImage
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
image
);

57 
vútuÆ
 
putTextVõwp‹t
(c⁄° 
°d
::
°rög
 & 
ãxt
, c⁄° 
TextBoxStyÀ
 & 
°yÀ
);

58 
vútuÆ
 
putFótuªs
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
loˇti⁄
, c⁄° 
FótuªStyÀ
 & 
°yÀ
);

59 
vútuÆ
 
putFótuªs
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
loˇti⁄
, c⁄°Çvxcu_∂aö_¨øy_à& 
°yÀs
);

60 
vútuÆ
 
putLöes
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
löes
, c⁄° 
LöeStyÀ
 & 
°yÀ
);

61 
vútuÆ
 
putC⁄vexPﬁyg⁄
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
vîti˚s
, c⁄° 
LöeStyÀ
 & 
°yÀ
);

62 
vútuÆ
 
putMŸi⁄Fõld
(c⁄° 
nvxcu_pôch_löór_image_t
 & 
fõld
, c⁄° 
MŸi⁄FõldStyÀ
 & 
°yÀ
);

63 
vútuÆ
 
putObje˘Loˇti⁄
(c⁄° 
nvxcu_ª˘™gÀ_t
 & 
loˇti⁄
, c⁄° 
Dëe˘edObje˘StyÀ
 & 
°yÀ
);

64 
vútuÆ
 
putCú˛es
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
cú˛es
, c⁄° 
Cú˛eStyÀ
 & 
°yÀ
);

65 
vútuÆ
 
putAºows
(c⁄° 
nvxcu_∂aö_¨øy_t
 & 
ﬁd_poöts
, c⁄°Çvxcu_∂aö_¨øy_à& 
√w_poöts
, c⁄° 
LöeStyÀ
 & 
°yÀ
);

67 #i‚de‡
__ANDROID__


68 
vútuÆ
 
boﬁ
 
Êush
();

69 
vútuÆ
 
˛o£
();

72 
vútuÆ
 
uöt32_t
 
gëVõwp‹tWidth
() const;

73 
vútuÆ
 
uöt32_t
 
gëVõwp‹tHeight
() const;

75 
	gvútuÆ
 ~
RídîWøµî
();

77 
	g¥iv©e
:

78 
°d
::
unique_±r
<
nvidüio
::
Rídî
> 
ªndî_
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/SyncTimer.cpp

29 
	~<cm©h
>

30 
	~<c°döt
>

32 #i‡
deföed
 
__löux__


33 
	~<sys/timîfd.h
>

34 
	~<uni°d.h
>

35 #ñi‡
deföed
 
_WIN32


36 
	#NOMINMAX


	)

37 
	~<Wödows.h
>

40 
	~<NVX/SyncTimî.hµ
>

41 
	~<NVX/Utûôy.hµ
>

43 
	~"Priv©e/LogUtûs.hµ
"

45 
«me•a˚
 
	gnvxio
 {

47 
	g«me•a˚
 {

49 ˛as†
	cSyncTimîIm∂
 : 
public
 
SyncTimî


51 
public
:

52 
SyncTimîIm∂
(Ë: 
zîoPîiod
(
Ál£
)

54 #i‡
deföed
 
__löux__


55 
fdTimî
 = 
timîfd_¸óã
(
CLOCK_MONOTONIC
, 
TFD_CLOEXEC
);

56 i‡(
	gfdTimî
 < 0) {

57 
	gîr‹
 = 
î∫o
;

58 
NVXIO_THROW_EXCEPTION
("FailedÅo createá synchronizationÅimer ("

59 << 
öã∫Æ
::
î∫oToSåög
(
îr‹
) << ")");

61 #ñi‡
deföed
 
_WIN32


62 
	ghTimî
 = 
Cª©eWaôabÀTimîW
(
nuŒ±r
, 
FALSE
,Çullptr);

63 i‡(!
	ghTimî
) {

64 
DWORD
 
	gîr‹
 = 
GëLa°Eº‹
();

65 
NVXIO_THROW_EXCEPTION
("FailedÅo createá synchronizationÅimer ("

66 << 
öã∫Æ
::
wöEº‹ToSåög
(
îr‹
) << ")");

71 
SyncTimîIm∂
(c⁄° SyncTimîIm∂ &Ë
dñëe
;

72 
	gSyncTimîIm∂
 &
	g›î©‹
 = (c⁄° 
SyncTimîIm∂
 &Ë
dñëe
;

74 ~
SyncTimîIm∂
()

76 #i‡
deföed
 
__löux__


77 
˛o£
(
fdTimî
);

78 #ñi‡
deföed
 
_WIN32


79 
Clo£H™dÀ
(
hTimî
);

83 
vútuÆ
 
¨m
(
≥riodSec⁄ds
) {

84 #i‡
deföed
 
__löux__


85 
	gs
;

86 
	gns
 = 
°d
::
modf
(
≥riodSec⁄ds
, &
s
) * 1e9;

88 
ôimî•ec
 
	g•ec
 = {};

89 
	g•ec
.
	gô_öãrvÆ
.
	gtv_£c
 = 
time_t
(
s
);

90 
	g•ec
.
	gô_öãrvÆ
.
	gtv_n£c
 = (
ns
);

91 
	g•ec
.
	gô_vÆue
 = 
•ec
.
ô_öãrvÆ
;

92 i‡(
timîfd_£âime
(
fdTimî
, 0, &
•ec
, 
nuŒ±r
) < 0) {

93 
	gîr‹
 = 
î∫o
;

94 
NVXIO_THROW_EXCEPTION
("FailedÅoármá synchronizationÅimer ("

95 << 
öã∫Æ
::
î∫oToSåög
(
îr‹
) << ")");

98 
	gzîoPîiod
 = 
•ec
.
ô_öãrvÆ
.
tv_£c
 =0 && s≥c.ô_öãrvÆ.
tv_n£c
 == 0;

99 #ñi‡
deföed
 
_WIN32


100 
LARGE_INTEGER
 
	gzîo
 = {};

101 
LONG
 
	g≥riod
 = 
°©ic_ˇ°
<LONG>(
≥riodSec⁄ds
 * 1000.);

102 i‡(!
SëWaôabÀTimî
(
hTimî
, &
zîo
, 
≥riod
, 
nuŒ±r
,ÇuŒ±r, 
FALSE
))

104 
DWORD
 
	gîr‹
 = 
GëLa°Eº‹
();

105 
NVXIO_THROW_EXCEPTION
("FailedÅoármá synchronizationÅimer ("

106 << 
öã∫Æ
::
wöEº‹ToSåög
(
îr‹
) << ")");

109 
	gzîoPîiod
 = 
≥riod
 == 0;

113 
vútuÆ
 
synchr⁄ize
() {

116 i‡(
	gzîoPîiod
) ;

118 #i‡
deföed
 
__löux__


119 
	g°d
::
uöt64_t
 
ovîruns
;

120 
	gªsu…
;

122 dÿ
	gªsu…
 = 
ªad
(
fdTimî
, &
ovîruns
,  overruns);

123 
	gªsu…
 < 0 && 
	gî∫o
 =
EINTR
);

125 i‡(
	gªsu…
 < 0) {

126 
	gîr‹
 = 
î∫o
;

127 
NVXIO_THROW_EXCEPTION
("FailedÅo synchronize witháÅimer ("

128 << 
öã∫Æ
::
î∫oToSåög
(
îr‹
) << ")");

130 #ñi‡
deföed
 
_WIN32


131 i‡(
WaôF‹SögÀObje˘
(
hTimî
, 
INFINITE
Ë=
WAIT_FAILED
)

133 
DWORD
 
îr‹
 = 
GëLa°Eº‹
();

134 
NVXIO_THROW_EXCEPTION
("FailedÅo synchronize witháÅimer ("

135 << 
öã∫Æ
::
wöEº‹ToSåög
(
îr‹
) << ")");

138 #îr‹ 
No
 
im∂emíèti⁄
 
this
 
∂©f‹m
.

142 
	g¥iv©e
:

143 #i‡
deföed
 
__löux__


144 
fdTimî
;

145 #ñi‡
deföed
 
_WIN32


146 
HANDLE
 
	ghTimî
;

148 
boﬁ
 
	gzîoPîiod
;

153 
	g°d
::
unique_±r
<
SyncTimî
> 
	$¸óãSyncTimî
()

155  
nvxio
::
makeUP
<
SyncTimîIm∂
>();

156 
	}
}

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Utility.cpp

29 
	~<NVX/Utûôy.hµ
>

31 
«me•a˚
 
	gnvxio


34 #ifde‡
__ANDROID__


35 
VX_CALLBACK
 
™droidLogCÆlback
(
vx_c⁄ãxt
 , 
vx_ª„ªn˚
 , 
vx_°©us
 , c⁄° 
vx_ch¨
 
°rög
[])

37 
NVXIO_LOGE
("NVX", "[NVX LOG] %s", 
°rög
);

40 
VX_CALLBACK
 
°doutLogCÆlback
(
vx_c⁄ãxt
 , 
vx_ª„ªn˚
 , 
vx_°©us
 , c⁄° 
vx_ch¨
 
°rög
[])

42 
	g°d
::
cout
 << "[NVX LOG] " << 
°rög
 << 
°d
::
ídl
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/FrameSource/FrameSourceOVX.cpp

29 
	~"Wøµîs/FømeSour˚OVXWøµî.hµ
"

30 
	~"FømeSour˚/Wøµîs/FømeSour˚Wøµî.hµ
"

32 #ifde‡
USE_OPENCV


33 
	~"FømeSour˚/O≥nCV/O≥nCVFømeSour˚Im∂.hµ
"

34 
	~"FømeSour˚/O≥nCV/O≥nCVImageFømeSour˚.hµ
"

35 
	~"FømeSour˚/O≥nCV/O≥nCVVideoFømeSour˚.hµ
"

38 #ifde‡
USE_GSTREAMER


39 #ifde‡
USE_GSTREAMER_NVMEDIA


40 
	~"FømeSour˚/GSåómî/GSåómîNvMedüFømeSour˚Im∂.hµ
"

42 
	~"FømeSour˚/GSåómî/GSåómîVideoFømeSour˚Im∂.hµ
"

43 
	~"FømeSour˚/GSåómî/GSåómîCamîaFømeSour˚Im∂.hµ
"

44 
	~"FømeSour˚/GSåómî/GSåómîImagesFømeSour˚Im∂.hµ
"

45 #ifde‡
USE_NVGSTCAMERA


46 
	~"FømeSour˚/GSåómî/GSåómîNvCamîaFømeSour˚Im∂.hµ
"

48 #i‡
deföed
 
USE_GSTREAMER_OMX
 && deföed 
USE_GLES


49 
	~"FømeSour˚/GSåómî/GSåómîO≥nMAXFømeSour˚Im∂.hµ
"

53 #ifde‡
USE_NVMEDIA


54 
	~"FømeSour˚/NvMedü/NvMedüVideoFømeSour˚Im∂.hµ
"

55 #ifde‡
USE_CSI_OV10635


56 
	~"FømeSour˚/NvMedü/NvMedüCSI10635CamîaFømeSour˚Im∂.hµ
"

58 #ifde‡
USE_CSI_OV10640


59 
	~"FømeSour˚/NvMedü/NvMedüCSI10640CamîaFømeSour˚Im∂.hµ
"

64 
	~<NVX/ThªadSa„Queue.hµ
>

66 
	~<m≠
>

67 
	~<°rög
>

69 
	~<cuda_ru¡ime_≠i.h
>

71 
	~"Priv©e/LogUtûs.hµ
"

73 
usög
 
	govxio
::
makeUP
;

75 
«me•a˚
 
	govxio
 {

76 
	~<OVX/UtûôyOVX.hµ
>

77 
	g°d
::
unique_±r
<
FømeSour˚
> 
¸óãDeÁu…FømeSour˚
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
°d
::
°rög
& 
uri
)

79 
checkIfC⁄ãxtIsVÆid
(
c⁄ãxt
);

81 
	g°d
::
unique_±r
<
nvidüio
::
FømeSour˚
> 
±r
 =

82 
nvidüio
::
¸óãDeÁu…FømeSour˚
(
uri
);

84 i‡(!
	g±r
)

85  
	gnuŒ±r
;

87  
	gmakeUP
<
	gFømeSour˚Wøµî
>(
	gc⁄ãxt
, 
	g°d
::
move
(
±r
));

90 
vx_image
 
lﬂdImageFromFûe
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
°d
::
°rög
& 
fûeName
, 
vx_df_image
 
f‹m©
)

92 
checkIfC⁄ãxtIsVÆid
(
c⁄ãxt
);

94 autÿ
	g‰ameSour˚
 = 
¸óãDeÁu…FømeSour˚
(
c⁄ãxt
, 
fûeName
);

95 i‡(!
	g‰ameSour˚
)

97 
NVXIO_THROW_EXCEPTION
("C™nŸ cª©ê‰amêsour˚ f‹ fûe: " << 
fûeName
);

100 i‡(
	g‰ameSour˚
->
gëSour˚Ty≥
(Ë!
FømeSour˚
::
SINGLE_IMAGE_SOURCE
)

102 
NVXIO_THROW_EXCEPTION
("Ex≥˘ed " << 
fûeName
 << "Åo beán image");

105 autÿ
	g‰ameC⁄fig
 = 
‰ameSour˚
->
gëC⁄figuøti⁄
();

106 
	g‰ameC⁄fig
.
	gf‹m©
 = 
f‹m©
;

107 
	g‰ameSour˚
->
£tC⁄figuøti⁄
(
‰ameC⁄fig
);

109 i‡(!
	g‰ameSour˚
->
›í
())

111 
NVXIO_THROW_EXCEPTION
("C™nŸ o≥¿fûe: " << 
fûeName
);

114 
	g‰ameC⁄fig
 = 
‰ameSour˚
->
gëC⁄figuøti⁄
();

116 
vx_image
 
	gimage
 = 
vxCª©eImage
(
c⁄ãxt
, 
‰ameC⁄fig
.
‰ameWidth
, fømeC⁄fig.
‰ameHeight
, 
f‹m©
);

117 
NVXIO_CHECK_REFERENCE
(
image
);

119 i‡(
	g‰ameSour˚
->
„tch
(
image
, 
nvxio
::
TIMEOUT_INFINITE
Ë!
FømeSour˚
::
OK
)

121 
NVXIO_SAFE_CALL
–
vxRñó£Image
(&
image
) );

122 
NVXIO_THROW_EXCEPTION
("C™nŸ fëchá fømê‰om fûe: " << 
fûeName
);

125  
	gimage
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/FrameSource/Wrappers/FrameSourceOVXWrapper.cpp

29 
	~"FømeSour˚OVXWøµî.hµ
"

31 
	~<OVX/UtûôyOVX.hµ
>

33 
	~<c°rög
>

35 
«me•a˚
 
	govxio


38 
	gFømeSour˚Wøµî
::
FømeSour˚Wøµî
(
vx_c⁄ãxt
 
c⁄ãxt
, 
°d
::
unique_±r
<
nvidüio
::
FømeSour˚
> 
sour˚
) :

39 
FømeSour˚
(
°©ic_ˇ°
<FømeSour˚::
Sour˚Ty≥
>(
sour˚
->
gëSour˚Ty≥
()),

40 
sour˚
->
gëSour˚Name
()),

41 
vxC⁄ãxt
(
c⁄ãxt
), 
sour˚_
(
°d
::
move
(
sour˚
)), 
›íed
(
Ál£
)

43 
NVXIO_ASSERT
(
sour˚_
);

46 
boﬁ
 
	gFømeSour˚Wøµî
::
›í
()

48  
›íed
 = 
sour˚_
->
›í
();

51 
	gFømeSour˚
::
FømeSètus
 
FømeSour˚Wøµî
::
„tch
(
vx_image
 
image
, 
vx_uöt32
 
timeout
)

53 i‡(!
	g›íed
)

55 
	gsour˚_
->
˛o£
();

56  
	gFømeSour˚
::
CLOSED
;

59 
	govxio
::
image_t
 
m≠≥r
(
image
, 
VX_WRITE_ONLY
, 
NVX_MEMORY_TYPE_CUDA
);

60 
	gnvidüio
::
FømeSour˚
::
FømeSètus
 
°©us
 = 
sour˚_
->
„tch
(
m≠≥r
, 
timeout
);

62  
	g°©ic_ˇ°
<
	gFømeSour˚
::
FømeSètus
>(
°©us
);

65 
	gFømeSour˚
::
P¨amëîs
 
FømeSour˚Wøµî
::
gëC⁄figuøti⁄
()

67 
nvidüio
::
FømeSour˚
::
P¨amëîs
 
cuda_∑øms
 = 
sour˚_
->
gëC⁄figuøti⁄
();

68 
	gFømeSour˚
::
P¨amëîs
 
∑øms
 = { };

70 
NVXIO_ASSERT
((
cuda_∑øms
Ë=(
∑øms
));

71 
	g°d
::
mem˝y
(&
∑øms
, &
cuda_∑øms
, (cuda_params));

73 i‡(
	gcuda_∑øms
.
	gf‹m©
 =
NVXCU_DF_IMAGE_NONE
)

74 
∑øms
.
f‹m©
 = 
VX_DF_IMAGE_VIRT
;

76  
	g∑øms
;

79 
boﬁ
 
	gFømeSour˚Wøµî
::
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
)

81 
nvidüio
::
FømeSour˚
::
P¨amëîs
 
cuda_∑øms
 = { };

83 
NVXIO_ASSERT
((
cuda_∑øms
Ë=(
∑øms
));

84 
	g°d
::
mem˝y
(&
cuda_∑øms
, &
∑øms
, (params));

86 i‡(
	g∑øms
.
	gf‹m©
 =
VX_DF_IMAGE_VIRT
)

87 
cuda_∑øms
.
f‹m©
 = 
NVXCU_DF_IMAGE_NONE
;

89  
	gsour˚_
->
£tC⁄figuøti⁄
(
cuda_∑øms
);

92 
	gFømeSour˚Wøµî
::
˛o£
()

94 
sour˚_
->
˛o£
();

95 
	g›íed
 = 
Ál£
;

98 
	gFømeSour˚Wøµî
::~
FømeSour˚Wøµî
()

100 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/FrameSource/Wrappers/FrameSourceOVXWrapper.hpp

29 #i‚de‡
FRAMESOURCE_NVX_WRAPPER_HPP


30 
	#FRAMESOURCE_NVX_WRAPPER_HPP


	)

32 
	~<mem‹y
>

34 
	~<OVX/FømeSour˚OVX.hµ
>

36 
	~"FømeSour˚/FømeSour˚Im∂.hµ
"

37 
	~"../../Priv©e/Ty≥sOVX.hµ
"

39 
«me•a˚
 
	govxio


42 ˛as†
	cFømeSour˚Wøµî
 :

43 
public
 
FømeSour˚


45 
public
:

46 
FømeSour˚Wøµî
(
vx_c⁄ãxt
 
c⁄ãxt
, 
°d
::
unique_±r
<
nvidüio
::
FømeSour˚
> 
sour˚
);

47 
vútuÆ
 
boﬁ
 
›í
();

48 
vútuÆ
 
	gFømeSour˚
::
FømeSètus
 
„tch
(
vx_image
 
image
, 
vx_uöt32
 
timeout
 = 5 );

49 
vútuÆ
 
	gFømeSour˚
::
P¨amëîs
 
gëC⁄figuøti⁄
();

50 
vútuÆ
 
boﬁ
 
£tC⁄figuøti⁄
(c⁄° 
FømeSour˚
::
P¨amëîs
& 
∑øms
);

51 
vútuÆ
 
˛o£
();

52 
	gvútuÆ
 ~
FømeSour˚Wøµî
();

54 
	g¥Ÿe˘ed
:

55 
FømeSour˚Wøµî
();

58 
vx_c⁄ãxt
 
	gvxC⁄ãxt
;

60 
	g¥iv©e
:

61 
°d
::
unique_±r
<
nvidüio
::
FømeSour˚
> 
sour˚_
;

62 
boﬁ
 
	g›íed
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Private/TypesOVX.cpp

29 
	~<OVX/UtûôyOVX.hµ
>

31 
	~"Priv©e/Ty≥s.hµ
"

32 
	~"Ty≥sOVX.hµ
"

34 
	~<cuda_ru¡ime_≠i.h
>

35 
	~<c°rög
>

37 
«me•a˚
 
	govxio


40 
	gimage_t
::
image_t
(
vx_image
 
image
, 
vx_íum
 
ußge
, vx_íum 
mem_ty≥
) :

41 
nvidüio
::
image_t
(),

43 
image_
 (
image
),

44 
	gaddrs_
 { },

45 
	g±rs_
 { },

46 
	gm≠_ids_
 { }

49 
vx_df_image_e
 
	gvxF‹m©
 = 
VX_DF_IMAGE_VIRT
;

51 
NVXIO_SAFE_CALL
–
vxQuîyImage
(
image_
, 
VX_IMAGE_ATTRIBUTE_PLANES
, (*)&
∂™es_
, (planes_)) );

52 
NVXIO_SAFE_CALL
–
vxQuîyImage
(
image_
, 
VX_IMAGE_ATTRIBUTE_FORMAT
, (*)&
vxF‹m©
, (vxFormat)) );

53 
NVXIO_SAFE_CALL
–
vxQuîyImage
(
image_
, 
VX_IMAGE_ATTRIBUTE_WIDTH
, (*)&
width
, (width)) );

54 
NVXIO_SAFE_CALL
–
vxQuîyImage
(
image_
, 
VX_IMAGE_ATTRIBUTE_HEIGHT
, (*)&
height
, (height)) );

56 
	gf‹m©
 = 
°©ic_ˇ°
<
nvxcu_df_image_e
>(
vxF‹m©
);

58 
vx_uöt32
 
	gp
 = 0u;Ö < 
	g∂™es_
; ++p)

60 
NVXIO_SAFE_CALL
–
vxM≠ImageP©ch
(
image_
, 
nuŒ±r
, 
p
, 
m≠_ids_
 +Ö, 
addrs_
 +Ö, 
±rs_
 +Ö, 
ußge
, 
mem_ty≥
, 0) );

62 
	g∂™es
[
p
].
	g±r
 = 
±rs_
[p];

63 
	g∂™es
[
p
].
	gpôch_ö_byãs
 = 
addrs_
[p].
°ride_y
;

67 
	gimage_t
::~
image_t
()

69 i‡(
image_
)

71 
vx_uöt32
 
p
 = 0u; 
	gp
 < 
	g∂™es_
; ++p)

73 
vxUnm≠ImageP©ch
(
image_
, 
m≠_ids_
[
p
]);

78 
	g¨øy_t
::
¨øy_t
(
vx_¨øy
 
¨øy
, 
vx_íum
 
ußge
, vx_íum 
mem_ty≥
) :

79 
nvidüio
::
¨øy_t
(),

81 
¨øy_
(
¨øy
),

82 
m≠_id
(0ul),

83 
size_
(0ul)

85 
vx_size
 
	gvxC≠acôy
 = 0ul, 
	g°ride
 = 0ul;

86 
vx_íum
 
	gvxIãmTy≥
 = 0;

88 
NVXIO_SAFE_CALL
–
vxQuîyAºay
(
¨øy_
, 
VX_ARRAY_ATTRIBUTE_NUMITEMS
, &
size_
, (size_)) );

89 
NVXIO_SAFE_CALL
–
vxQuîyAºay
(
¨øy_
, 
VX_ARRAY_ATTRIBUTE_CAPACITY
, &
vxC≠acôy
, (vxCapacity)) );

90 
NVXIO_SAFE_CALL
–
vxQuîyAºay
(
¨øy_
, 
VX_ARRAY_ATTRIBUTE_ITEMTYPE
, &
vxIãmTy≥
, (vxItemType)) );

92 i‡(
	gsize_
 > 0)

93 
NVXIO_SAFE_CALL
–
vxM≠AºayR™ge
(
¨øy_
, 0, 
size_
, &
m≠_id
, &
°ride
, &
±r
, 
ußge
, 
mem_ty≥
, 0) );

95 
	gˇ∑côy
 = 
°©ic_ˇ°
<
uöt32_t
>(
ˇ∑côy
);

96 
	gnum_ôems
 = 
°©ic_ˇ°
<
uöt32_t
>(
size_
);

97 
	gôem_ty≥
 = 
°©ic_ˇ°
<
nvxcu_¨øy_ôem_ty≥_e
>(
vxIãmTy≥
);

100 
	g¨øy_t
::~
¨øy_t
()

102 i‡(
¨øy_
)

104 i‡(
size_
 > 0)

105 
vxUnm≠AºayR™ge
(
¨øy_
, 
m≠_id
);

109 
	gm©rix4x4f_t
::
as£π4x4f
(
vx_m©rix
 
m©rix
)

111 
vx_íum
 
ty≥
 = 0;

112 
vx_size
 
	grows
 = 0ul, 
	gcﬁs
 = 0ul;

114 
NVXIO_SAFE_CALL
–
vxQuîyM©rix
(
m©rix
, 
VX_MATRIX_ATTRIBUTE_TYPE
, &
ty≥
, (type)) );

115 
NVXIO_ASSERT
(
ty≥
 =
VX_TYPE_FLOAT32
);

117 
NVXIO_SAFE_CALL
–
vxQuîyM©rix
(
m©rix
, 
VX_MATRIX_ATTRIBUTE_ROWS
, &
rows
, (rows)) );

118 
NVXIO_SAFE_CALL
–
vxQuîyM©rix
(
m©rix
, 
VX_MATRIX_ATTRIBUTE_COLUMNS
, &
cﬁs
, (cols)) );

119 
NVXIO_ASSERT
(
rows
 =4 && 
cﬁs
 == 4);

122 
	gm©rix4x4f_t
::
m©rix4x4f_t
(
vx_m©rix
 
¨øy
) :

123 
nvidüio
::
m©rix4x4f_t
()

125 
as£π4x4f
(
¨øy
);

127 
NVXIO_SAFE_CALL
–
vxRódM©rix
(
¨øy
, (*)
±r
) );

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Private/TypesOVX.hpp

29 #i‚de‡
TYPESNVXIO_HPP


30 
	#TYPESNVXIO_HPP


	)

32 
	~<c°döt
>

33 
	~<ve˘‹
>

35 
	~<NVX/nvxcu.h
>

36 
	~<VX/vx.h
>

38 
«me•a˚
 
	govxio


40 ˛as†
	cimage_t
: 
public
 
nvidüio
::
image_t


42 
public
:

43 
image_t
(
vx_image
 
image
, 
vx_íum
 
ußge
, vx_íum 
mem_ty≥
);

44 ~
image_t
();

45 
	g¥iv©e
:

48 
vx_image
 
image_
;

50 
vx_imagï©ch_addªssög_t
 
	gaddrs_
[
NVIDIAIO_NB_MAX_PLANES
];

51 * 
	g±rs_
[
NVIDIAIO_NB_MAX_PLANES
];

52 
vx_m≠_id
 
	gm≠_ids_
[
NVIDIAIO_NB_MAX_PLANES
];

55 ˛as†
	c¨øy_t
: 
public
 
nvidüio
::
¨øy_t


57 
public
:

58 
¨øy_t
(
vx_¨øy
 
¨øy
, 
vx_íum
 
ußge
, vx_íum 
mem_ty≥
);

59 ~
¨øy_t
();

61 
	g¥iv©e
:

62 
¨øy_t
(c⁄°áºay_à&Ë
dñëe
;

63 
	g¨øy_t
 & 
	g›î©‹
 = (c⁄° 
¨øy_t
 &Ë
dñëe
;

65 
	g¥iv©e
:

68 
vx_¨øy
 
¨øy_
;

69 
vx_m≠_id
 
	gm≠_id
;

70 
vx_size
 
	gsize_
;

73 ˛as†
	cm©rix4x4f_t
: 
public
 
nvidüio
::
m©rix4x4f_t


75 
public
:

77 
ex∂icô
 
m©rix4x4f_t
(
vx_m©rix
 
¨øy
);

78 
as£π4x4f
(
vx_m©rix
 
m©rix
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Render/Render3DOVX.cpp

29 
	~<mem‹y
>

31 
	~<OVX/Rídî3DOVX.hµ
>

32 
	~<NVX/Aµliˇti⁄.hµ
>

34 #ifde‡
USE_GUI


35 
	~"Rídî/CUDA-O≥nGL/Ba£Rídî3DIm∂.hµ
"

38 
	~"Wøµîs/Rídî3DOVXWøµî.hµ
"

39 
	~"Rídî/Wøµîs/Rídî3DWøµî.hµ
"

41 
«me•a˚
 
	govxio


44 
	g°d
::
unique_±r
<
Rídî3D
> 
¸óãDeÁu…Rídî3D
(
vx_c⁄ãxt
 
c⁄ãxt
, 
xPos
, 
yPos
,

45 c⁄° 
°d
::
°rög
& 
tôÀ
, 
vx_uöt32
 
width
, vx_uöt32 
height
)

47 
	g°d
::
unique_±r
<
nvidüio
::
Rídî3D
> 
±r
 =Çvidüio::
¸óãDeÁu…Rídî3D
(
xPos
, 
yPos
, 
tôÀ
, 
width
, 
height
);

49 i‡(!
	g±r
)

50  
	gnuŒ±r
;

52  
	govxio
::
makeUP
<
Rídî3DWøµî
>(
c⁄ãxt
, 
	g°d
::
move
(
±r
));

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Render/RenderOVX.cpp

29 
	~<mem‹y
>

31 
	~<OVX/RídîOVX.hµ
>

32 
	~<NVX/Aµliˇti⁄.hµ
>

34 
	~"Rídî/EvítLoggî.hµ
"

35 
	~"Rídî/EvítPœyî.hµ
"

37 #ifde‡
USE_GUI


38 
	~"Rídî/GlfwUIRídîIm∂.hµ
"

39 #ifde‡
USE_GSTREAMER


40 
	~"Rídî/GSåómî/GSåómîVideoRídîIm∂.hµ
"

41 
	~"Rídî/GSåómî/GSåómîImagesRídîIm∂.hµ
"

43 #ifde‡
USE_OPENCV


44 
	~"Rídî/O≥nCV/O≥nGLO≥nCVRídîIm∂.hµ
"

48 
	~"Rídî/StubRídîIm∂.hµ
"

49 
	~"Wøµîs/RídîOVXWøµî.hµ
"

50 
	~"Rídî/Wøµîs/RídîWøµî.hµ
"

52 
«me•a˚
 
	govxio


55 
	g°d
::
unique_±r
<
Rídî
> 
¸óãVideoRídî
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
°d
::
°rög
& 
∑th
,

56 
vx_uöt32
 
width
, vx_uöt32 
height
, vx_uöt32 
f‹m©
)

58 
	g°d
::
unique_±r
<
nvidüio
::
Rídî
> 
±r
 =

59 
nvidüio
::
¸óãVideoRídî
(
∑th
, 
width
, 
height
, 
°©ic_ˇ°
<
nvxcu_df_image_e
>(
f‹m©
));

61 i‡(!
	g±r
)

62  
	gnuŒ±r
;

64  
	govxio
::
makeUP
<
RídîWøµî
>(
c⁄ãxt
, 
	g°d
::
move
(
±r
));

67 
	g°d
::
unique_±r
<
Rídî
> 
¸óãImageRídî
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
°d
::
°rög
& 
∑th
,

68 
vx_uöt32
 
width
, vx_uöt32 
height
, vx_uöt32 
f‹m©
)

70 
	g°d
::
unique_±r
<
nvidüio
::
Rídî
> 
±r
 =

71 
nvidüio
::
¸óãImageRídî
(
∑th
, 
width
, 
height
, 
°©ic_ˇ°
<
nvxcu_df_image_e
>(
f‹m©
));

73 i‡(!
	g±r
)

74  
	gnuŒ±r
;

76  
	govxio
::
makeUP
<
RídîWøµî
>(
c⁄ãxt
, 
	g°d
::
move
(
±r
));

79 
	g°d
::
unique_±r
<
Rídî
> 
¸óãWödowRídî
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
°d
::
°rög
& 
tôÀ
, 
vx_uöt32
 
width
, vx_uöt32 
height
,

80 
vx_uöt32
 
f‹m©
, 
boﬁ
 
doSˇÀ
, boﬁ 
fuŒs¸ìn
)

82 
	g°d
::
unique_±r
<
nvidüio
::
Rídî
> 
±r
 =

83 
nvidüio
::
¸óãWödowRídî
(
tôÀ
, 
width
, 
height
, 
°©ic_ˇ°
<
nvxcu_df_image_e
>(
f‹m©
),

84 
doSˇÀ
, 
fuŒs¸ìn
);

86 i‡(!
	g±r
)

87  
	gnuŒ±r
;

89  
	gmakeUP
<
	gRídîWøµî
>(
	gc⁄ãxt
, 
	g°d
::
move
(
±r
));

92 
	g°d
::
unique_±r
<
Rídî
> 
¸óãDeÁu…Rídî
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
°d
::
°rög
& 
tôÀ
, 
vx_uöt32
 
width
, vx_uöt32 
height
,

93 
vx_uöt32
 
f‹m©
, 
boﬁ
 
doSˇÀ
, boﬁ 
fuŒs¸ìn
)

95 
	g°d
::
unique_±r
<
nvidüio
::
Rídî
> 
±r
 =

96 
nvidüio
::
¸óãDeÁu…Rídî
(
tôÀ
, 
width
, 
height
, 
°©ic_ˇ°
<
nvxcu_df_image_e
>(
f‹m©
),

97 
doSˇÀ
, 
fuŒs¸ìn
);

99 i‡(!
	g±r
)

100  
	gnuŒ±r
;

102  
	gmakeUP
<
	gRídîWøµî
>(
	gc⁄ãxt
, 
	g°d
::
move
(
±r
));

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Render/Wrappers/Render3DOVXWrapper.cpp

29 
	~"Rídî3DOVXWøµî.hµ
"

30 
	~"Priv©e/Ty≥s.hµ
"

32 
	~<OVX/UtûôyOVX.hµ
>

34 
	~<c°rög
>

36 
«me•a˚
 
	govxio


39 
	gRídî3DWøµî
::
Rídî3DWøµî
(
vx_c⁄ãxt
 
c⁄ãxt
, 
°d
::
unique_±r
<
nvidüio
::
Rídî3D
> 
ªndî
) :

40 
Rídî3D
(
°©ic_ˇ°
<
T¨gëTy≥
>(
ªndî
->
gëT¨gëTy≥
()),

41 
ªndî
->
gëRídîName
()),

42 
c⁄ãxt_
(
c⁄ãxt
),

43 
ªndî_
(
°d
::
move
(
ªndî
))

47 
Rídî3DWøµî
::
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
)

49 
	gªndî_
->
£tOnKeybﬂrdEvítCÆlback
(
ªöãΩªt_ˇ°
<
nvidüio
::
Rídî3D
::
OnKeybﬂrdEvítCÆlback
>(
ˇŒback
),

50 
c⁄ãxt
);

53 
	gRídî3DWøµî
::
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
)

55 
	gªndî_
->
£tOnMou£EvítCÆlback
(
ªöãΩªt_ˇ°
<
nvidüio
::
Rídî3D
::
OnMou£EvítCÆlback
>(
ˇŒback
),

56 
c⁄ãxt
);

59 
	gRídî3DWøµî
::
putPœ√s
(
vx_¨øy
 
∂™es
, 
vx_m©rix
 
modñ
, c⁄° 
Pœ√StyÀ
& 
°yÀ
)

61 
	gªndî_
->
putPœ√s
(
ovxio
::
¨øy_t
(
∂™es
, 
VX_READ_ONLY
, 
VX_MEMORY_TYPE_HOST
), ovxio::
m©rix4x4f_t
(
modñ
),

62 *(
nvidüio
::
Rídî3D
::
Pœ√StyÀ
 *)&
°yÀ
);

65 
	gRídî3DWøµî
::
putPoötCloud
(
vx_¨øy
 
poöts
, 
vx_m©rix
 
modñ
, c⁄° 
PoötCloudStyÀ
& 
°yÀ
)

67 
	gªndî_
->
putPoötCloud
(
ovxio
::
¨øy_t
(
poöts
, 
VX_READ_ONLY
, 
VX_MEMORY_TYPE_HOST
), ovxio::
m©rix4x4f_t
(
modñ
),

68 *(
nvidüio
::
Rídî3D
::
PoötCloudStyÀ
 *)&
°yÀ
);

71 
boﬁ
 
	gRídî3DWøµî
::
Êush
()

73  
ªndî_
->
Êush
();

76 
	gRídî3DWøµî
::
˛o£
()

78 
ªndî_
->
˛o£
();

81 
	gRídî3DWøµî
::
£tVõwM©rix
(
vx_m©rix
 
võw
)

83 
ªndî_
->
£tVõwM©rix
(
ovxio
::
m©rix4x4f_t
(
võw
));

86 
	gRídî3DWøµî
::
gëVõwM©rix
(
vx_m©rix
 
võw
) const

88 
nvidüio
::
m©rix4x4f_t
 
m©
;

89 
	gªndî_
->
gëVõwM©rix
(
m©
);

91 
	govxio
::
m©rix4x4f_t
::
as£π4x4f
(
võw
);

92 
NVXIO_SAFE_CALL
–
vxWrôeM©rix
(
võw
, (*)
m©
.
±r
) );

95 
	gRídî3DWøµî
::
£tProje˘i⁄M©rix
(
vx_m©rix
 
¥oje˘i⁄
)

97 
ªndî_
->
£tProje˘i⁄M©rix
(
ovxio
::
m©rix4x4f_t
(
¥oje˘i⁄
));

100 
	gRídî3DWøµî
::
gëProje˘i⁄M©rix
(
vx_m©rix
 
¥oje˘i⁄
) const

102 
nvidüio
::
m©rix4x4f_t
 
m©
;

103 
	gªndî_
->
gëProje˘i⁄M©rix
(
m©
);

105 
	govxio
::
m©rix4x4f_t
::
as£π4x4f
(
¥oje˘i⁄
);

106 
NVXIO_SAFE_CALL
–
vxWrôeM©rix
(
¥oje˘i⁄
, (*)
m©
.
±r
) );

109 
	gRídî3DWøµî
::
£tDeÁu…FOV
(
fov
)

111 
ªndî_
->
£tDeÁu…FOV
(
fov
);

114 
	gRídî3DWøµî
::
íabÀDeÁu…KeybﬂrdEvítCÆlback
()

116 
ªndî_
->
íabÀDeÁu…KeybﬂrdEvítCÆlback
();

119 
	gRídî3DWøµî
::
dißbÀDeÁu…KeybﬂrdEvítCÆlback
()

121 
ªndî_
->
dißbÀDeÁu…KeybﬂrdEvítCÆlback
();

124 
boﬁ
 
	gRídî3DWøµî
::
u£DeÁu…KeybﬂrdEvítCÆlback
()

126  
ªndî_
->
u£DeÁu…KeybﬂrdEvítCÆlback
();

129 
vx_uöt32
 
	gRídî3DWøµî
::
gëWidth
() const

131  
ªndî_
->
gëWidth
();

134 
vx_uöt32
 
	gRídî3DWøµî
::
gëHeight
() const

137  
ªndî_
->
gëHeight
();

140 
	gRídî3DWøµî
::
putImage
(
vx_image
 
image
)

142 
ªndî_
->
putImage
(
ovxio
::
image_t
(
image
, 
VX_READ_ONLY
, 
NVX_MEMORY_TYPE_CUDA
));

145 
	gRídî3DWøµî
::
putText
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
ovxio
::
Rídî
::
TextBoxStyÀ
 & 
°yÀ
)

147 
ªndî_
->
putText
(
ãxt
,

148 *(
nvidüio
::
Rídî
::
TextBoxStyÀ
 *)&
°yÀ
);

151 
	gRídî3DWøµî
::~
Rídî3DWøµî
()

153 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Render/Wrappers/Render3DOVXWrapper.hpp

29 #i‚de‡
RENDER3D_WRAPPER_HPP


30 
	#RENDER3D_WRAPPER_HPP


	)

32 
	~<mem‹y
>

34 
	~<OVX/Rídî3DOVX.hµ
>

36 
	~"Rídî/Rídî3DIm∂.hµ
"

37 
	~"../../Priv©e/Ty≥sOVX.hµ
"

39 
«me•a˚
 
	govxio


42 ˛as†
	cRídî3DWøµî
 :

43 
public
 
Rídî3D


45 
public
:

46 
Rídî3DWøµî
(
vx_c⁄ãxt
 
c⁄ãxt
, 
°d
::
unique_±r
<
nvidüio
::
Rídî3D
> 
ªndî
);

48 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

49 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

51 
vútuÆ
 
putPœ√s
(
vx_¨øy
 
∂™es
, 
vx_m©rix
 
modñ
, c⁄° 
Pœ√StyÀ
& 
°yÀ
);

52 
vútuÆ
 
putPoötCloud
(
vx_¨øy
 
poöts
, 
vx_m©rix
 
modñ
, c⁄° 
PoötCloudStyÀ
& 
°yÀ
);

54 
vútuÆ
 
boﬁ
 
Êush
();

55 
vútuÆ
 
˛o£
();

57 
vútuÆ
 
£tVõwM©rix
(
vx_m©rix
 
võw
);

58 
vútuÆ
 
gëVõwM©rix
(
vx_m©rix
 
võw
) const;

60 
vútuÆ
 
£tProje˘i⁄M©rix
(
vx_m©rix
 
¥oje˘i⁄
);

61 
vútuÆ
 
gëProje˘i⁄M©rix
(
vx_m©rix
 
¥oje˘i⁄
) const;

63 
vútuÆ
 
£tDeÁu…FOV
(
fov
);

65 
vútuÆ
 
íabÀDeÁu…KeybﬂrdEvítCÆlback
();

66 
vútuÆ
 
dißbÀDeÁu…KeybﬂrdEvítCÆlback
();

68 
vútuÆ
 
boﬁ
 
u£DeÁu…KeybﬂrdEvítCÆlback
();

70 
vútuÆ
 
vx_uöt32
 
gëWidth
() const;

71 
vútuÆ
 
vx_uöt32
 
gëHeight
() const;

73 
vútuÆ
 
putImage
(
vx_image
 
image
);

75 
vútuÆ
 
putText
(c⁄° 
°d
::
°rög
& 
ãxt
, c⁄° 
ovxio
::
Rídî
::
TextBoxStyÀ
& 
°yÀ
);

77 
	gvútuÆ
 ~
Rídî3DWøµî
();

79 
	g¥iv©e
:

80 
vx_c⁄ãxt
 
c⁄ãxt_
;

81 
	g°d
::
unique_±r
<
nvidüio
::
Rídî3D
> 
ªndî_
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Render/Wrappers/RenderOVXWrapper.cpp

29 
	~"RídîOVXWøµî.hµ
"

31 
	~<OVX/UtûôyOVX.hµ
>

33 
	~<c°rög
>

35 
«me•a˚
 
	govxio


38 
	gRídîWøµî
::
RídîWøµî
(
vx_c⁄ãxt
 
c⁄ãxt
, 
°d
::
unique_±r
<
nvidüio
::
Rídî
> 
ªndî
) :

39 
Rídî
(
°©ic_ˇ°
<
T¨gëTy≥
>(
ªndî
->
gëT¨gëTy≥
()),

40 
ªndî
->
gëRídîName
()),

41 
ªndî_
(
°d
::
move
(
ªndî
)), 
vxC⁄ãxt
(
c⁄ãxt
)

43 
NVXIO_ASSERT
(
ªndî_
);

46 #i‚de‡
__ANDROID__


48 
	gRídîWøµî
::
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
)

50 
	gªndî_
->
£tOnKeybﬂrdEvítCÆlback
(

51 
ªöãΩªt_ˇ°
<
nvidüio
::
Rídî
::
OnKeybﬂrdEvítCÆlback
>(
ˇŒback
), 
c⁄ãxt
);

54 
	gRídîWøµî
::
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
)

56 
	gªndî_
->
£tOnMou£EvítCÆlback
(

57 
ªöãΩªt_ˇ°
<
nvidüio
::
Rídî
::
OnMou£EvítCÆlback
>(
ˇŒback
), 
c⁄ãxt
);

62 
	gRídîWøµî
::
putImage
(
vx_image
 
image
)

64 
ovxio
::
image_t
 
m≠≥r
(
image
, 
VX_READ_ONLY
, 
NVX_MEMORY_TYPE_CUDA
);

65 
	gªndî_
->
putImage
(
m≠≥r
);

68 
	gRídîWøµî
::
putTextVõwp‹t
(c⁄° 
°d
::
°rög
 & 
ãxt
, c⁄° 
TextBoxStyÀ
 & 
°yÀ
)

70 
	gªndî_
->
putTextVõwp‹t
(
ãxt
, *(
nvidüio
::
Rídî
::
TextBoxStyÀ
 *)&
°yÀ
);

73 
	gRídîWøµî
::
putFótuªs
(
vx_¨øy
 
loˇti⁄
, c⁄° 
FótuªStyÀ
 & 
°yÀ
)

75 
	govxio
::
¨øy_t
 
m≠≥r
(
loˇti⁄
, 
VX_READ_ONLY
, 
NVX_MEMORY_TYPE_CUDA
);

76 
	gªndî_
->
putFótuªs
(
m≠≥r
,

77 *(
nvidüio
::
Rídî
::
FótuªStyÀ
 *)&
°yÀ
);

80 
	gRídîWøµî
::
putFótuªs
(
vx_¨øy
 
loˇti⁄
, vx_¨øy 
°yÀs
)

82 
	govxio
::
¨øy_t
 
loˇti⁄M≠≥r
(
loˇti⁄
, 
VX_READ_ONLY
, 
NVX_MEMORY_TYPE_CUDA
),

83 
°yÀsM≠≥r
(
°yÀs
, 
VX_READ_ONLY
, 
NVX_MEMORY_TYPE_CUDA
);

84 
	gªndî_
->
putFótuªs
(
loˇti⁄M≠≥r
, 
°yÀsM≠≥r
);

87 
	gRídîWøµî
::
putLöes
(
vx_¨øy
 
löes
, c⁄° 
LöeStyÀ
 & 
°yÀ
)

89 
	govxio
::
¨øy_t
 
m≠≥r
(
löes
, 
VX_READ_ONLY
, 
NVX_MEMORY_TYPE_CUDA
);

90 
	gªndî_
->
putLöes
(
m≠≥r
,

91 *(
nvidüio
::
Rídî
::
LöeStyÀ
 *)&
°yÀ
);

94 
	gRídîWøµî
::
putC⁄vexPﬁyg⁄
(
vx_¨øy
 
vîti˚s
, c⁄° 
LöeStyÀ
 & 
°yÀ
)

96 
	govxio
::
¨øy_t
 
m≠≥r
(
vîti˚s
, 
VX_READ_ONLY
, 
NVX_MEMORY_TYPE_CUDA
);

97 
	gªndî_
->
putC⁄vexPﬁyg⁄
(
m≠≥r
,

98 *(
nvidüio
::
Rídî
::
LöeStyÀ
 *)&
°yÀ
);

101 
	gRídîWøµî
::
putMŸi⁄Fõld
(
vx_image
 
fõld
, c⁄° 
MŸi⁄FõldStyÀ
 & 
°yÀ
)

103 
	govxio
::
image_t
 
m≠≥r
(
fõld
, 
VX_READ_ONLY
, 
NVX_MEMORY_TYPE_CUDA
);

104 
	gªndî_
->
putMŸi⁄Fõld
(
m≠≥r
,

105 *(
nvidüio
::
Rídî
::
MŸi⁄FõldStyÀ
 *)&
°yÀ
);

108 
	gRídîWøµî
::
putObje˘Loˇti⁄
(c⁄° 
vx_ª˘™gÀ_t
 & 
loˇti⁄
, c⁄° 
Dëe˘edObje˘StyÀ
 & 
°yÀ
)

110 
	gªndî_
->
putObje˘Loˇti⁄
(*(c⁄° 
nvxcu_ª˘™gÀ_t
 *)&
loˇti⁄
,

111 *(
nvidüio
::
Rídî
::
Dëe˘edObje˘StyÀ
 *)&
°yÀ
);

114 
	gRídîWøµî
::
putCú˛es
(
vx_¨øy
 
cú˛es
, c⁄° 
Cú˛eStyÀ
 & 
°yÀ
)

116 
	govxio
::
¨øy_t
 
m≠≥r
(
cú˛es
, 
VX_READ_ONLY
, 
NVX_MEMORY_TYPE_CUDA
);

117 
	gªndî_
->
putCú˛es
(
m≠≥r
,

118 *(
nvidüio
::
Rídî
::
Cú˛eStyÀ
 *)&
°yÀ
);

121 
	gRídîWøµî
::
putAºows
(
vx_¨øy
 
ﬁd_poöts
, vx_¨øy 
√w_poöts
, c⁄° 
LöeStyÀ
 & 
°yÀ
)

123 
	govxio
::
¨øy_t
 
ﬁdPoötsM≠≥r
(
ﬁd_poöts
, 
VX_READ_ONLY
, 
NVX_MEMORY_TYPE_CUDA
),

124 
√wPoötsM≠≥r
(
√w_poöts
, 
VX_READ_ONLY
, 
NVX_MEMORY_TYPE_CUDA
);

125 
	gªndî_
->
putAºows
(
ﬁdPoötsM≠≥r
, 
√wPoötsM≠≥r
,

126 *(
nvidüio
::
Rídî
::
LöeStyÀ
 *)&
°yÀ
);

129 #i‚de‡
__ANDROID__


131 
boﬁ
 
	gRídîWøµî
::
Êush
()

133  
ªndî_
->
Êush
();

136 
	gRídîWøµî
::
˛o£
()

138 
ªndî_
->
˛o£
();

143 
vx_uöt32
 
	gRídîWøµî
::
gëVõwp‹tWidth
() const

145  
ªndî_
->
gëVõwp‹tWidth
();

148 
vx_uöt32
 
	gRídîWøµî
::
gëVõwp‹tHeight
() const

150  
ªndî_
->
gëVõwp‹tHeight
();

153 
	gRídîWøµî
::~
RídîWøµî
()

155 #i‚de‡
__ANDROID__


156 
˛o£
();

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Render/Wrappers/RenderOVXWrapper.hpp

29 #i‚de‡
RENDER_WRAPPER_HPP


30 
	#RENDER_WRAPPER_HPP


	)

32 
	~<mem‹y
>

34 
	~<OVX/RídîOVX.hµ
>

36 #ifde‡
__ANDROID__


37 
	~"RídîIm∂.hµ
"

39 
	~"Rídî/RídîIm∂.hµ
"

42 
	~"../../Priv©e/Ty≥sOVX.hµ
"

44 
«me•a˚
 
	govxio


47 ˛as†
	cRídîWøµî
 :

48 
public
 
Rídî


50 
public
:

51 
RídîWøµî
(
vx_c⁄ãxt
 
c⁄ãxt
, 
°d
::
unique_±r
<
nvidüio
::
Rídî
> 
ªndî
);

53 #i‚de‡
__ANDROID__


54 
vútuÆ
 
£tOnKeybﬂrdEvítCÆlback
(
OnKeybﬂrdEvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

55 
vútuÆ
 
£tOnMou£EvítCÆlback
(
OnMou£EvítCÆlback
 
ˇŒback
, * 
c⁄ãxt
);

58 
vútuÆ
 
putImage
(
vx_image
 
image
);

59 
vútuÆ
 
putTextVõwp‹t
(c⁄° 
°d
::
°rög
 & 
ãxt
, c⁄° 
TextBoxStyÀ
 & 
°yÀ
);

60 
vútuÆ
 
putFótuªs
(
vx_¨øy
 
loˇti⁄
, c⁄° 
FótuªStyÀ
 & 
°yÀ
);

61 
vútuÆ
 
putFótuªs
(
vx_¨øy
 
loˇti⁄
, vx_¨øy 
°yÀs
);

62 
vútuÆ
 
putLöes
(
vx_¨øy
 
löes
, c⁄° 
LöeStyÀ
 & 
°yÀ
);

63 
vútuÆ
 
putC⁄vexPﬁyg⁄
(
vx_¨øy
 
vîti˚s
, c⁄° 
LöeStyÀ
 & 
°yÀ
);

64 
vútuÆ
 
putMŸi⁄Fõld
(
vx_image
 
fõld
, c⁄° 
MŸi⁄FõldStyÀ
 & 
°yÀ
);

65 
vútuÆ
 
putObje˘Loˇti⁄
(c⁄° 
vx_ª˘™gÀ_t
 & 
loˇti⁄
, c⁄° 
Dëe˘edObje˘StyÀ
 & 
°yÀ
);

66 
vútuÆ
 
putCú˛es
(
vx_¨øy
 
cú˛es
, c⁄° 
Cú˛eStyÀ
 & 
°yÀ
);

67 
vútuÆ
 
putAºows
(
vx_¨øy
 
ﬁd_poöts
, vx_¨øy 
√w_poöts
, c⁄° 
LöeStyÀ
 & 
°yÀ
);

69 #i‚de‡
__ANDROID__


70 
vútuÆ
 
boﬁ
 
Êush
();

71 
vútuÆ
 
˛o£
();

74 
vútuÆ
 
vx_uöt32
 
gëVõwp‹tWidth
() const;

75 
vútuÆ
 
vx_uöt32
 
gëVõwp‹tHeight
() const;

77 
	gvútuÆ
 ~
RídîWøµî
();

79 
	g¥iv©e
:

80 
°d
::
unique_±r
<
nvidüio
::
Rídî
> 
ªndî_
;

81 
vx_c⁄ãxt
 
	gvxC⁄ãxt
;

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/UtilityOVX.cpp

29 
	~<OVX/UtûôyOVX.hµ
>

31 
«me•a˚
 
	govxio


34 #ifde‡
__ANDROID__


35 
VX_CALLBACK
 
™droidLogCÆlback
(
vx_c⁄ãxt
 , 
vx_ª„ªn˚
 , 
vx_°©us
 , c⁄° 
vx_ch¨
 
°rög
[])

37 
NVXIO_LOGE
("NVX", "[NVX LOG] %s", 
°rög
);

40 
VX_CALLBACK
 
°doutLogCÆlback
(
vx_c⁄ãxt
 , 
vx_ª„ªn˚
 , 
vx_°©us
 , c⁄° 
vx_ch¨
 
°rög
[])

42 
	g°d
::
cout
 << "[NVX LOG] " << 
°rög
 << 
°d
::
ídl
;

46 
¥ötPîf
(
vx_gøph
 
gøph
, c⁄° * 
œbñ
)

48 
vx_≥rf_t
 
	g≥rf
;

49 
NVXIO_SAFE_CALL
–
vxQuîyGøph
(
gøph
, 
VX_GRAPH_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

51 #ifde‡
__ANDROID__


52 
NVXIO_LOGI
("PERF", "%†Gøph Timê: %‡ms", 
œbñ
, 
≥rf
.
tmp
 / 1000000.0);

54 
	g°d
::
cout
 << 
œbñ
 << " Gøph Timê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << 
°d
::
ídl
;

58 
¥ötPîf
(
vx_node
 
node
, c⁄° * 
œbñ
)

60 
vx_≥rf_t
 
	g≥rf
;

61 
NVXIO_SAFE_CALL
–
vxQuîyNode
(
node
, 
VX_NODE_ATTRIBUTE_PERFORMANCE
, &
≥rf
, (perf)) );

63 #ifde‡
__ANDROID__


64 
NVXIO_LOGI
("PERF", "\à%†Timê: %‡ms", 
œbñ
, 
≥rf
.
tmp
 / 1000000.0);

66 
	g°d
::
cout
 << "\à" << 
œbñ
 << " Timê: " << 
≥rf
.
tmp
 / 1000000.0 << " ms" << 
°d
::
ídl
;

70 
¥ötVîsi⁄Info
()

72 
nvx_vîsi⁄_öfo_t
 
	göfo
;

73 
nvxGëVîsi⁄Info
(&
öfo
);

75 
	g°d
::
cout
 << "Visi⁄W‹k†libøry info:" << 
°d
::
ídl
;

76 
	g°d
::
cout
 << "\t VisionWorks version : "

77 << 
öfo
.
visi⁄w‹ks_vîsi⁄
.
maj‹
 << "."

78 << 
öfo
.
visi⁄w‹ks_vîsi⁄
.
mö‹
 << "."

79 << 
öfo
.
visi⁄w‹ks_vîsi⁄
.
∑tch


80 << 
öfo
.
visi⁄w‹ks_vîsi⁄
.
suffix
 << 
°d
::
ídl
;

81 
	g°d
::
cout
 << "\t OpenVX Standard version : "

82 << 
öfo
.
›ívx_maj‹_vîsi⁄
 << "."

83 << 
öfo
.
›ívx_mö‹_vîsi⁄
 << "."

84 << 
öfo
.
›ívx_∑tch_vîsi⁄
 << 
°d
::
ídl
;

85 
	g°d
::
cout
 << 
°d
::
ídl
;

88 
checkIfC⁄ãxtIsVÆid
(
vx_c⁄ãxt
 
c⁄ãxt
)

90 
vx_°©us
 
	g°©us
 = 
vxGëSètus
((
vx_ª„ªn˚
)
c⁄ãxt
);

92 i‡(
	g°©us
 =
NVX_ERROR_NO_CUDA_GPU
)

94 
NVXIO_THROW_EXCEPTION
("CUDA-capable GPU wasÇot found.");

96 i‡(
	g°©us
 =
NVX_ERROR_UNSUPPORTED_CUDA_GPU
)

98 
NVXIO_THROW_EXCEPTION
("Unsupported GPU. Only KeplerándÇewer generation is supported forÇow.");

101 
NVXIO_CHECK_REFERENCE
(
c⁄ãxt
);

	@/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OpenGLShaders.hpp

29 #i‚de‡
OPENGL_GLSL_SHADERS


30 
	#OPENGL_GLSL_SHADERS


	)

32 c⁄° * 
	gnv12image_ªndî_shadî_fs_code
 =

116 c⁄° * 
	gpoöt_˛oud_ªndî_shadî_fs_code
 =

130 c⁄° * 
	g„n˚_∂™e_ªndî_shadî_fs_code
 =

141 c⁄° * 
	g¨row_ªndî_shadî_fs_code
 =

152 c⁄° * 
	gimage_ªndî_shadî_fs_code
 =

191 c⁄° * 
	glöe_ªndî_shadî_fs_code
 =

202 c⁄° * 
	gãxt_ªndî_shadî_fs_code
 =

217 c⁄° * 
	g„©uª_ªndî_shadî_fs_code
 =

238 c⁄° * 
	gãxtbg_ªndî_shadî_fs_code
 =

249 c⁄° * 
	gª˘™gÀ_ªndî_shadî_fs_code
 =

260 c⁄° * 
	g„©uª_ªndî_shadî_vs_code
 =

330 c⁄° * 
	gãxt_ªndî_shadî_vs_code
 =

342 c⁄° * 
	gãxtbg_ªndî_shadî_vs_code
 =

352 c⁄° * 
	g¨row_ªndî_shadî_vs_code
 =

363 c⁄° * 
	gimage_ªndî_shadî_vs_code
 =

382 c⁄° * 
	gpoöt_˛oud_ªndî_shadî_vs_code
 =

407 c⁄° * 
	glöe_ªndî_shadî_vs_code
 =

428 c⁄° * 
	g„n˚_∂™e_ªndî_shadî_vs_code
 =

450 c⁄° * 
	gª˘™gÀ_ªndî_shadî_vs_code
 =

460 c⁄° * 
	g¨row_compuã_shadî_cs_code
 =

604 c⁄° * 
	gmŸi⁄_fõld_compuã_shadî_cs_code
 =

	@/usr/include/GL/glcorearb.h

1 #i‚de‡
__glc‹órb_h_


2 
	#__glc‹órb_h_
 1

	)

4 #ifde‡
__˝lu•lus


39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

40 #i‚de‡
WIN32_LEAN_AND_MEAN


41 
	#WIN32_LEAN_AND_MEAN
 1

	)

43 
	~<wödows.h
>

46 #i‚de‡
APIENTRY


47 
	#APIENTRY


	)

49 #i‚de‡
APIENTRYP


50 
	#APIENTRYP
 
APIENTRY
 *

	)

52 #i‚de‡
GLAPI


53 
	#GLAPI
 

	)

80 #i‚de‡
GL_VERSION_1_0


81 
	#GL_VERSION_1_0
 1

	)

82 
	tGLvoid
;

83 
	tGLíum
;

84 
	tGLÊﬂt
;

85 
	tGLöt
;

86 
	tGLsizei
;

87 
	tGLbôfõld
;

88 
	tGLdoubÀ
;

89 
	tGLuöt
;

90 
	tGLboﬁón
;

91 
	tGLubyã
;

92 (
	tAPIENTRYP
 
	tPFNGLCULLFACEPROC
Ë(
	tGLíum
 
	tmode
);

93 (
	tAPIENTRYP
 
	tPFNGLFRONTFACEPROC
Ë(
	tGLíum
 
	tmode
);

94 (
	tAPIENTRYP
 
	tPFNGLHINTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

95 (
	tAPIENTRYP
 
	tPFNGLLINEWIDTHPROC
Ë(
	tGLÊﬂt
 
	twidth
);

96 (
	tAPIENTRYP
 
	tPFNGLPOINTSIZEPROC
Ë(
	tGLÊﬂt
 
	tsize
);

97 (
	tAPIENTRYP
 
	tPFNGLPOLYGONMODEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

98 (
	tAPIENTRYP
 
	tPFNGLSCISSORPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

99 (
	tAPIENTRYP
 
	tPFNGLTEXPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

100 (
	tAPIENTRYP
 
	tPFNGLTEXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

101 (
	tAPIENTRYP
 
	tPFNGLTEXPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

102 (
	tAPIENTRYP
 
	tPFNGLTEXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

103 (
	tAPIENTRYP
 
	tPFNGLTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

104 (
	tAPIENTRYP
 
	tPFNGLTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

105 (
	tAPIENTRYP
 
	tPFNGLDRAWBUFFERPROC
Ë(
	tGLíum
 
	tbuf
);

106 (
	tAPIENTRYP
 
	tPFNGLCLEARPROC
Ë(
	tGLbôfõld
 
	tmask
);

107 (
	tAPIENTRYP
 
	tPFNGLCLEARCOLORPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

108 (
	tAPIENTRYP
 
	tPFNGLCLEARSTENCILPROC
Ë(
	tGLöt
 
	ts
);

109 (
	tAPIENTRYP
 
	tPFNGLCLEARDEPTHPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

110 (
	tAPIENTRYP
 
	tPFNGLSTENCILMASKPROC
Ë(
	tGLuöt
 
	tmask
);

111 (
	tAPIENTRYP
 
	tPFNGLCOLORMASKPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

112 (
	tAPIENTRYP
 
	tPFNGLDEPTHMASKPROC
Ë(
	tGLboﬁón
 
	tÊag
);

113 (
	tAPIENTRYP
 
	tPFNGLDISABLEPROC
Ë(
	tGLíum
 
	tˇp
);

114 (
	tAPIENTRYP
 
	tPFNGLENABLEPROC
Ë(
	tGLíum
 
	tˇp
);

115 (
	tAPIENTRYP
 
	tPFNGLFINISHPROC
) ();

116 (
	tAPIENTRYP
 
	tPFNGLFLUSHPROC
) ();

117 (
	tAPIENTRYP
 
	tPFNGLBLENDFUNCPROC
Ë(
	tGLíum
 
	tsÁ˘‹
, GLíum 
	tdÁ˘‹
);

118 (
	tAPIENTRYP
 
	tPFNGLLOGICOPPROC
Ë(
	tGLíum
 
	t›code
);

119 (
	tAPIENTRYP
 
	tPFNGLSTENCILFUNCPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

120 (
	tAPIENTRYP
 
	tPFNGLSTENCILOPPROC
Ë(
	tGLíum
 
	tÁû
, GLíum 
	tzÁû
, GLíum 
	tz∑ss
);

121 (
	tAPIENTRYP
 
	tPFNGLDEPTHFUNCPROC
Ë(
	tGLíum
 
	tfunc
);

122 (
	tAPIENTRYP
 
	tPFNGLPIXELSTOREFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

123 (
	tAPIENTRYP
 
	tPFNGLPIXELSTOREIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

124 (
	tAPIENTRYP
 
	tPFNGLREADBUFFERPROC
Ë(
	tGLíum
 
	t§c
);

125 (
	tAPIENTRYP
 
	tPFNGLREADPIXELSPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

126 (
	tAPIENTRYP
 
	tPFNGLGETBOOLEANVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLboﬁón
 *
	td©a
);

127 (
	tAPIENTRYP
 
	tPFNGLGETDOUBLEVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	td©a
);

128 
	$GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETERRORPROC
) ();

129 (
	tAPIENTRYP
 
	tPFNGLGETFLOATVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	td©a
);

130 (
	tAPIENTRYP
 
	tPFNGLGETINTEGERVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	td©a
);

131 c⁄° 
	tGLubyã
 *(
	tAPIENTRYP
 
	tPFNGLGETSTRINGPROC
Ë(
	tGLíum
 
	t«me
);

132 (
	tAPIENTRYP
 
	tPFNGLGETTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

133 (
	tAPIENTRYP
 
	tPFNGLGETTEXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

134 (
	tAPIENTRYP
 
	tPFNGLGETTEXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

135 (
	tAPIENTRYP
 
	tPFNGLGETTEXLEVELPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

136 (
	tAPIENTRYP
 
	tPFNGLGETTEXLEVELPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

137 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDPROC
Ë(
	tGLíum
 
	tˇp
);

138 (
	tAPIENTRYP
 
	tPFNGLDEPTHRANGEPROC
Ë(
	tGLdoubÀ
 
	t√¨
, GLdoubÀ 
	tÁr
);

139 (
	tAPIENTRYP
 
	tPFNGLVIEWPORTPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

140 #ifde‡
GL_GLEXT_PROTOTYPES


141 
GLAPI
 
APIENTRY
 
	`glCuŒFa˚
 (
GLíum
 
mode
);

142 
GLAPI
 
APIENTRY
 
	`glFr⁄tFa˚
 (
GLíum
 
mode
);

143 
GLAPI
 
APIENTRY
 
	`glHöt
 (
GLíum
 
èrgë
, GLíum 
mode
);

144 
GLAPI
 
APIENTRY
 
	`glLöeWidth
 (
GLÊﬂt
 
width
);

145 
GLAPI
 
APIENTRY
 
	`glPoötSize
 (
GLÊﬂt
 
size
);

146 
GLAPI
 
APIENTRY
 
	`glPﬁyg⁄Mode
 (
GLíum
 
Á˚
, GLíum 
mode
);

147 
GLAPI
 
APIENTRY
 
	`glSciss‹
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

148 
GLAPI
 
APIENTRY
 
	`glTexP¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

149 
GLAPI
 
APIENTRY
 
	`glTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

150 
GLAPI
 
APIENTRY
 
	`glTexP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

151 
GLAPI
 
APIENTRY
 
	`glTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

152 
GLAPI
 
APIENTRY
 
	`glTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

153 
GLAPI
 
APIENTRY
 
	`glTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

154 
GLAPI
 
APIENTRY
 
	`glDøwBuf„r
 (
GLíum
 
buf
);

155 
GLAPI
 
APIENTRY
 
	`glCÀ¨
 (
GLbôfõld
 
mask
);

156 
GLAPI
 
APIENTRY
 
	`glCÀ¨Cﬁ‹
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

157 
GLAPI
 
APIENTRY
 
	`glCÀ¨Sãncû
 (
GLöt
 
s
);

158 
GLAPI
 
APIENTRY
 
	`glCÀ¨Dïth
 (
GLdoubÀ
 
dïth
);

159 
GLAPI
 
APIENTRY
 
	`glSãncûMask
 (
GLuöt
 
mask
);

160 
GLAPI
 
APIENTRY
 
	`glCﬁ‹Mask
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

161 
GLAPI
 
APIENTRY
 
	`glDïthMask
 (
GLboﬁón
 
Êag
);

162 
GLAPI
 
APIENTRY
 
	`glDißbÀ
 (
GLíum
 
ˇp
);

163 
GLAPI
 
APIENTRY
 
	`glE«bÀ
 (
GLíum
 
ˇp
);

164 
GLAPI
 
APIENTRY
 
	`glFöish
 ();

165 
GLAPI
 
APIENTRY
 
	`glFlush
 ();

166 
GLAPI
 
APIENTRY
 
	`glBÀndFunc
 (
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
);

167 
GLAPI
 
APIENTRY
 
	`glLogicOp
 (
GLíum
 
›code
);

168 
GLAPI
 
APIENTRY
 
	`glSãncûFunc
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

169 
GLAPI
 
APIENTRY
 
	`glSãncûOp
 (
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

170 
GLAPI
 
APIENTRY
 
	`glDïthFunc
 (
GLíum
 
func
);

171 
GLAPI
 
APIENTRY
 
	`glPixñSt‹ef
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

172 
GLAPI
 
APIENTRY
 
	`glPixñSt‹ei
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

173 
GLAPI
 
APIENTRY
 
	`glRódBuf„r
 (
GLíum
 
§c
);

174 
GLAPI
 
APIENTRY
 
	`glRódPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

175 
GLAPI
 
APIENTRY
 
	`glGëBoﬁónv
 (
GLíum
 
≤ame
, 
GLboﬁón
 *
d©a
);

176 
GLAPI
 
APIENTRY
 
	`glGëDoubÀv
 (
GLíum
 
≤ame
, 
GLdoubÀ
 *
d©a
);

177 
GLAPI
 
GLíum
 
APIENTRY
 
	`glGëEº‹
 ();

178 
GLAPI
 
APIENTRY
 
	`glGëFlﬂtv
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
d©a
);

179 
GLAPI
 
APIENTRY
 
	`glGëI¡egîv
 (
GLíum
 
≤ame
, 
GLöt
 *
d©a
);

180 
GLAPI
 c⁄° 
GLubyã
 *
APIENTRY
 
	`glGëSåög
 (
GLíum
 
«me
);

181 
GLAPI
 
APIENTRY
 
	`glGëTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

182 
GLAPI
 
APIENTRY
 
	`glGëTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

183 
GLAPI
 
APIENTRY
 
	`glGëTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

184 
GLAPI
 
APIENTRY
 
	`glGëTexLevñP¨amëîfv
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

185 
GLAPI
 
APIENTRY
 
	`glGëTexLevñP¨amëîiv
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

186 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsE«bÀd
 (
GLíum
 
ˇp
);

187 
GLAPI
 
APIENTRY
 
	`glDïthR™ge
 (
GLdoubÀ
 
√¨
, GLdoubÀ 
Ár
);

188 
GLAPI
 
APIENTRY
 
	`glVõwp‹t
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

192 #i‚de‡
GL_VERSION_1_1


193 
	#GL_VERSION_1_1
 1

	)

194 
	tGL˛ampf
;

195 
	tGL˛ampd
;

196 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

197 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

198 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

199 
	#GL_FALSE
 0

	)

200 
	#GL_TRUE
 1

	)

201 
	#GL_POINTS
 0x0000

	)

202 
	#GL_LINES
 0x0001

	)

203 
	#GL_LINE_LOOP
 0x0002

	)

204 
	#GL_LINE_STRIP
 0x0003

	)

205 
	#GL_TRIANGLES
 0x0004

	)

206 
	#GL_TRIANGLE_STRIP
 0x0005

	)

207 
	#GL_TRIANGLE_FAN
 0x0006

	)

208 
	#GL_QUADS
 0x0007

	)

209 
	#GL_NEVER
 0x0200

	)

210 
	#GL_LESS
 0x0201

	)

211 
	#GL_EQUAL
 0x0202

	)

212 
	#GL_LEQUAL
 0x0203

	)

213 
	#GL_GREATER
 0x0204

	)

214 
	#GL_NOTEQUAL
 0x0205

	)

215 
	#GL_GEQUAL
 0x0206

	)

216 
	#GL_ALWAYS
 0x0207

	)

217 
	#GL_ZERO
 0

	)

218 
	#GL_ONE
 1

	)

219 
	#GL_SRC_COLOR
 0x0300

	)

220 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

221 
	#GL_SRC_ALPHA
 0x0302

	)

222 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

223 
	#GL_DST_ALPHA
 0x0304

	)

224 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

225 
	#GL_DST_COLOR
 0x0306

	)

226 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

227 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

228 
	#GL_NONE
 0

	)

229 
	#GL_FRONT_LEFT
 0x0400

	)

230 
	#GL_FRONT_RIGHT
 0x0401

	)

231 
	#GL_BACK_LEFT
 0x0402

	)

232 
	#GL_BACK_RIGHT
 0x0403

	)

233 
	#GL_FRONT
 0x0404

	)

234 
	#GL_BACK
 0x0405

	)

235 
	#GL_LEFT
 0x0406

	)

236 
	#GL_RIGHT
 0x0407

	)

237 
	#GL_FRONT_AND_BACK
 0x0408

	)

238 
	#GL_NO_ERROR
 0

	)

239 
	#GL_INVALID_ENUM
 0x0500

	)

240 
	#GL_INVALID_VALUE
 0x0501

	)

241 
	#GL_INVALID_OPERATION
 0x0502

	)

242 
	#GL_OUT_OF_MEMORY
 0x0505

	)

243 
	#GL_CW
 0x0900

	)

244 
	#GL_CCW
 0x0901

	)

245 
	#GL_POINT_SIZE
 0x0B11

	)

246 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

247 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

248 
	#GL_LINE_SMOOTH
 0x0B20

	)

249 
	#GL_LINE_WIDTH
 0x0B21

	)

250 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

251 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

252 
	#GL_POLYGON_MODE
 0x0B40

	)

253 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

254 
	#GL_CULL_FACE
 0x0B44

	)

255 
	#GL_CULL_FACE_MODE
 0x0B45

	)

256 
	#GL_FRONT_FACE
 0x0B46

	)

257 
	#GL_DEPTH_RANGE
 0x0B70

	)

258 
	#GL_DEPTH_TEST
 0x0B71

	)

259 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

260 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

261 
	#GL_DEPTH_FUNC
 0x0B74

	)

262 
	#GL_STENCIL_TEST
 0x0B90

	)

263 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

264 
	#GL_STENCIL_FUNC
 0x0B92

	)

265 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

266 
	#GL_STENCIL_FAIL
 0x0B94

	)

267 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

268 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

269 
	#GL_STENCIL_REF
 0x0B97

	)

270 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

271 
	#GL_VIEWPORT
 0x0BA2

	)

272 
	#GL_DITHER
 0x0BD0

	)

273 
	#GL_BLEND_DST
 0x0BE0

	)

274 
	#GL_BLEND_SRC
 0x0BE1

	)

275 
	#GL_BLEND
 0x0BE2

	)

276 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

277 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

278 
	#GL_DRAW_BUFFER
 0x0C01

	)

279 
	#GL_READ_BUFFER
 0x0C02

	)

280 
	#GL_SCISSOR_BOX
 0x0C10

	)

281 
	#GL_SCISSOR_TEST
 0x0C11

	)

282 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

283 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

284 
	#GL_DOUBLEBUFFER
 0x0C32

	)

285 
	#GL_STEREO
 0x0C33

	)

286 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

287 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

288 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

289 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

290 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

291 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

292 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

293 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

294 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

295 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

296 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

297 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

298 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

299 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

300 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

301 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

302 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

303 
	#GL_TEXTURE_1D
 0x0DE0

	)

304 
	#GL_TEXTURE_2D
 0x0DE1

	)

305 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

306 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

307 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

308 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

309 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

310 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

311 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

312 
	#GL_TEXTURE_WIDTH
 0x1000

	)

313 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

314 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

315 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

316 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

317 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

318 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

319 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

320 
	#GL_DONT_CARE
 0x1100

	)

321 
	#GL_FASTEST
 0x1101

	)

322 
	#GL_NICEST
 0x1102

	)

323 
	#GL_BYTE
 0x1400

	)

324 
	#GL_UNSIGNED_BYTE
 0x1401

	)

325 
	#GL_SHORT
 0x1402

	)

326 
	#GL_UNSIGNED_SHORT
 0x1403

	)

327 
	#GL_INT
 0x1404

	)

328 
	#GL_UNSIGNED_INT
 0x1405

	)

329 
	#GL_FLOAT
 0x1406

	)

330 
	#GL_DOUBLE
 0x140A

	)

331 
	#GL_STACK_OVERFLOW
 0x0503

	)

332 
	#GL_STACK_UNDERFLOW
 0x0504

	)

333 
	#GL_CLEAR
 0x1500

	)

334 
	#GL_AND
 0x1501

	)

335 
	#GL_AND_REVERSE
 0x1502

	)

336 
	#GL_COPY
 0x1503

	)

337 
	#GL_AND_INVERTED
 0x1504

	)

338 
	#GL_NOOP
 0x1505

	)

339 
	#GL_XOR
 0x1506

	)

340 
	#GL_OR
 0x1507

	)

341 
	#GL_NOR
 0x1508

	)

342 
	#GL_EQUIV
 0x1509

	)

343 
	#GL_INVERT
 0x150A

	)

344 
	#GL_OR_REVERSE
 0x150B

	)

345 
	#GL_COPY_INVERTED
 0x150C

	)

346 
	#GL_OR_INVERTED
 0x150D

	)

347 
	#GL_NAND
 0x150E

	)

348 
	#GL_SET
 0x150F

	)

349 
	#GL_TEXTURE
 0x1702

	)

350 
	#GL_COLOR
 0x1800

	)

351 
	#GL_DEPTH
 0x1801

	)

352 
	#GL_STENCIL
 0x1802

	)

353 
	#GL_STENCIL_INDEX
 0x1901

	)

354 
	#GL_DEPTH_COMPONENT
 0x1902

	)

355 
	#GL_RED
 0x1903

	)

356 
	#GL_GREEN
 0x1904

	)

357 
	#GL_BLUE
 0x1905

	)

358 
	#GL_ALPHA
 0x1906

	)

359 
	#GL_RGB
 0x1907

	)

360 
	#GL_RGBA
 0x1908

	)

361 
	#GL_POINT
 0x1B00

	)

362 
	#GL_LINE
 0x1B01

	)

363 
	#GL_FILL
 0x1B02

	)

364 
	#GL_KEEP
 0x1E00

	)

365 
	#GL_REPLACE
 0x1E01

	)

366 
	#GL_INCR
 0x1E02

	)

367 
	#GL_DECR
 0x1E03

	)

368 
	#GL_VENDOR
 0x1F00

	)

369 
	#GL_RENDERER
 0x1F01

	)

370 
	#GL_VERSION
 0x1F02

	)

371 
	#GL_EXTENSIONS
 0x1F03

	)

372 
	#GL_NEAREST
 0x2600

	)

373 
	#GL_LINEAR
 0x2601

	)

374 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

375 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

376 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

377 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

378 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

379 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

380 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

381 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

382 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

383 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

384 
	#GL_REPEAT
 0x2901

	)

385 
	#GL_R3_G3_B2
 0x2A10

	)

386 
	#GL_RGB4
 0x804F

	)

387 
	#GL_RGB5
 0x8050

	)

388 
	#GL_RGB8
 0x8051

	)

389 
	#GL_RGB10
 0x8052

	)

390 
	#GL_RGB12
 0x8053

	)

391 
	#GL_RGB16
 0x8054

	)

392 
	#GL_RGBA2
 0x8055

	)

393 
	#GL_RGBA4
 0x8056

	)

394 
	#GL_RGB5_A1
 0x8057

	)

395 
	#GL_RGBA8
 0x8058

	)

396 
	#GL_RGB10_A2
 0x8059

	)

397 
	#GL_RGBA12
 0x805A

	)

398 
	#GL_RGBA16
 0x805B

	)

399 
	#GL_VERTEX_ARRAY
 0x8074

	)

400 (
	tAPIENTRYP
 
	tPFNGLDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

401 (
	tAPIENTRYP
 
	tPFNGLDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

402 (
	tAPIENTRYP
 
	tPFNGLGETPOINTERVPROC
Ë(
	tGLíum
 
	t≤ame
, **
	t∑øms
);

403 (
	tAPIENTRYP
 
	tPFNGLPOLYGONOFFSETPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
);

404 (
	tAPIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

405 (
	tAPIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

406 (
	tAPIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

407 (
	tAPIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

408 (
	tAPIENTRYP
 
	tPFNGLTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

409 (
	tAPIENTRYP
 
	tPFNGLTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

410 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

411 (
	tAPIENTRYP
 
	tPFNGLDELETETEXTURESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

412 (
	tAPIENTRYP
 
	tPFNGLGENTEXTURESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

413 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREPROC
Ë(
	tGLuöt
 
	tãxtuª
);

414 #ifde‡
GL_GLEXT_PROTOTYPES


415 
GLAPI
 
APIENTRY
 
	`glDøwAºays
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

416 
GLAPI
 
APIENTRY
 
	`glDøwEÀmíts
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

417 
GLAPI
 
APIENTRY
 
	`glGëPoöãrv
 (
GLíum
 
≤ame
, **
∑øms
);

418 
GLAPI
 
APIENTRY
 
	`glPﬁyg⁄Off£t
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

419 
GLAPI
 
APIENTRY
 
	`glC›yTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

420 
GLAPI
 
APIENTRY
 
	`glC›yTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

421 
GLAPI
 
APIENTRY
 
	`glC›yTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

422 
GLAPI
 
APIENTRY
 
	`glC›yTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

423 
GLAPI
 
APIENTRY
 
	`glTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

424 
GLAPI
 
APIENTRY
 
	`glTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

425 
GLAPI
 
APIENTRY
 
	`glBödTextuª
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

426 
GLAPI
 
APIENTRY
 
	`glDñëeTextuªs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

427 
GLAPI
 
APIENTRY
 
	`glGíTextuªs
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

428 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsTextuª
 (
GLuöt
 
ãxtuª
);

432 #i‚de‡
GL_VERSION_1_2


433 
	#GL_VERSION_1_2
 1

	)

434 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

435 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

436 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

437 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

438 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

439 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

440 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

441 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

442 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

443 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

444 
	#GL_TEXTURE_3D
 0x806F

	)

445 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

446 
	#GL_TEXTURE_DEPTH
 0x8071

	)

447 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

448 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

449 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

450 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

451 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

452 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

453 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

454 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

455 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

456 
	#GL_BGR
 0x80E0

	)

457 
	#GL_BGRA
 0x80E1

	)

458 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

459 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

460 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

461 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

462 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

463 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

464 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

465 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

466 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

467 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

468 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

469 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

470 (
	tAPIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

471 (
	tAPIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

472 (
	tAPIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

473 (
	tAPIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

474 #ifde‡
GL_GLEXT_PROTOTYPES


475 
GLAPI
 
APIENTRY
 
	`glDøwR™geEÀmíts
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

476 
GLAPI
 
APIENTRY
 
	`glTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

477 
GLAPI
 
APIENTRY
 
	`glTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

478 
GLAPI
 
APIENTRY
 
	`glC›yTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

482 #i‚de‡
GL_VERSION_1_3


483 
	#GL_VERSION_1_3
 1

	)

484 
	#GL_TEXTURE0
 0x84C0

	)

485 
	#GL_TEXTURE1
 0x84C1

	)

486 
	#GL_TEXTURE2
 0x84C2

	)

487 
	#GL_TEXTURE3
 0x84C3

	)

488 
	#GL_TEXTURE4
 0x84C4

	)

489 
	#GL_TEXTURE5
 0x84C5

	)

490 
	#GL_TEXTURE6
 0x84C6

	)

491 
	#GL_TEXTURE7
 0x84C7

	)

492 
	#GL_TEXTURE8
 0x84C8

	)

493 
	#GL_TEXTURE9
 0x84C9

	)

494 
	#GL_TEXTURE10
 0x84CA

	)

495 
	#GL_TEXTURE11
 0x84CB

	)

496 
	#GL_TEXTURE12
 0x84CC

	)

497 
	#GL_TEXTURE13
 0x84CD

	)

498 
	#GL_TEXTURE14
 0x84CE

	)

499 
	#GL_TEXTURE15
 0x84CF

	)

500 
	#GL_TEXTURE16
 0x84D0

	)

501 
	#GL_TEXTURE17
 0x84D1

	)

502 
	#GL_TEXTURE18
 0x84D2

	)

503 
	#GL_TEXTURE19
 0x84D3

	)

504 
	#GL_TEXTURE20
 0x84D4

	)

505 
	#GL_TEXTURE21
 0x84D5

	)

506 
	#GL_TEXTURE22
 0x84D6

	)

507 
	#GL_TEXTURE23
 0x84D7

	)

508 
	#GL_TEXTURE24
 0x84D8

	)

509 
	#GL_TEXTURE25
 0x84D9

	)

510 
	#GL_TEXTURE26
 0x84DA

	)

511 
	#GL_TEXTURE27
 0x84DB

	)

512 
	#GL_TEXTURE28
 0x84DC

	)

513 
	#GL_TEXTURE29
 0x84DD

	)

514 
	#GL_TEXTURE30
 0x84DE

	)

515 
	#GL_TEXTURE31
 0x84DF

	)

516 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

517 
	#GL_MULTISAMPLE
 0x809D

	)

518 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

519 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

520 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

521 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

522 
	#GL_SAMPLES
 0x80A9

	)

523 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

524 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

525 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

526 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

527 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

528 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

529 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

530 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

531 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

532 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

533 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

534 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

535 
	#GL_COMPRESSED_RGB
 0x84ED

	)

536 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

537 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

538 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

539 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

540 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

541 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

542 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

543 (
	tAPIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

544 (
	tAPIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

545 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

546 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

547 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

548 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

549 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

550 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

551 (
	tAPIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

552 #ifde‡
GL_GLEXT_PROTOTYPES


553 
GLAPI
 
APIENTRY
 
	`glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

554 
GLAPI
 
APIENTRY
 
	`glSam∂eCovîage
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

555 
GLAPI
 
APIENTRY
 
	`glCom¥es£dTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

556 
GLAPI
 
APIENTRY
 
	`glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

557 
GLAPI
 
APIENTRY
 
	`glCom¥es£dTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

558 
GLAPI
 
APIENTRY
 
	`glCom¥es£dTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

559 
GLAPI
 
APIENTRY
 
	`glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

560 
GLAPI
 
APIENTRY
 
	`glCom¥es£dTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

561 
GLAPI
 
APIENTRY
 
	`glGëCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

565 #i‚de‡
GL_VERSION_1_4


566 
	#GL_VERSION_1_4
 1

	)

567 
	#GL_BLEND_DST_RGB
 0x80C8

	)

568 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

569 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

570 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

571 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

572 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

573 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

574 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

575 
	#GL_MIRRORED_REPEAT
 0x8370

	)

576 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

577 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

578 
	#GL_INCR_WRAP
 0x8507

	)

579 
	#GL_DECR_WRAP
 0x8508

	)

580 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

581 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

582 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

583 
	#GL_FUNC_ADD
 0x8006

	)

584 
	#GL_FUNC_SUBTRACT
 0x800A

	)

585 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

586 
	#GL_MIN
 0x8007

	)

587 
	#GL_MAX
 0x8008

	)

588 
	#GL_CONSTANT_COLOR
 0x8001

	)

589 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

590 
	#GL_CONSTANT_ALPHA
 0x8003

	)

591 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

592 (
	tAPIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

593 (
	tAPIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	tdøwcou¡
);

594 (
	tAPIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
);

595 (
	tAPIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

596 (
	tAPIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

597 (
	tAPIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

598 (
	tAPIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

599 (
	tAPIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

600 (
	tAPIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

601 #ifde‡
GL_GLEXT_PROTOTYPES


602 
GLAPI
 
APIENTRY
 
	`glBÀndFuncSï¨©e
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

603 
GLAPI
 
APIENTRY
 
	`glMu…iDøwAºays
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
døwcou¡
);

604 
GLAPI
 
APIENTRY
 
	`glMu…iDøwEÀmíts
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
);

605 
GLAPI
 
APIENTRY
 
	`glPoötP¨amëîf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

606 
GLAPI
 
APIENTRY
 
	`glPoötP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

607 
GLAPI
 
APIENTRY
 
	`glPoötP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

608 
GLAPI
 
APIENTRY
 
	`glPoötP¨amëîiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

609 
GLAPI
 
APIENTRY
 
	`glBÀndCﬁ‹
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

610 
GLAPI
 
APIENTRY
 
	`glBÀndEqu©i⁄
 (
GLíum
 
mode
);

614 #i‚de‡
GL_VERSION_1_5


615 
	#GL_VERSION_1_5
 1

	)

616 
	~<°ddef.h
>

617 
±rdiff_t
 
	tGLsizeùå
;

618 
±rdiff_t
 
	tGLöçå
;

619 
	#GL_BUFFER_SIZE
 0x8764

	)

620 
	#GL_BUFFER_USAGE
 0x8765

	)

621 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

622 
	#GL_CURRENT_QUERY
 0x8865

	)

623 
	#GL_QUERY_RESULT
 0x8866

	)

624 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

625 
	#GL_ARRAY_BUFFER
 0x8892

	)

626 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

627 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

628 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

629 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

630 
	#GL_READ_ONLY
 0x88B8

	)

631 
	#GL_WRITE_ONLY
 0x88B9

	)

632 
	#GL_READ_WRITE
 0x88BA

	)

633 
	#GL_BUFFER_ACCESS
 0x88BB

	)

634 
	#GL_BUFFER_MAPPED
 0x88BC

	)

635 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

636 
	#GL_STREAM_DRAW
 0x88E0

	)

637 
	#GL_STREAM_READ
 0x88E1

	)

638 
	#GL_STREAM_COPY
 0x88E2

	)

639 
	#GL_STATIC_DRAW
 0x88E4

	)

640 
	#GL_STATIC_READ
 0x88E5

	)

641 
	#GL_STATIC_COPY
 0x88E6

	)

642 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

643 
	#GL_DYNAMIC_READ
 0x88E9

	)

644 
	#GL_DYNAMIC_COPY
 0x88EA

	)

645 
	#GL_SAMPLES_PASSED
 0x8914

	)

646 
	#GL_SRC1_ALPHA
 0x8589

	)

647 (
	tAPIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

648 (
	tAPIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

649 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

650 (
	tAPIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

651 (
	tAPIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

652 (
	tAPIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

653 (
	tAPIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

654 (
	tAPIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

655 (
	tAPIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

656 (
	tAPIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

657 (
	tAPIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

658 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

659 (
	tAPIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

660 (
	tAPIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

661 (
	tAPIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

662 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

663 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

664 (
	tAPIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

665 (
	tAPIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

666 #ifde‡
GL_GLEXT_PROTOTYPES


667 
GLAPI
 
APIENTRY
 
	`glGíQuîõs
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

668 
GLAPI
 
APIENTRY
 
	`glDñëeQuîõs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

669 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsQuîy
 (
GLuöt
 
id
);

670 
GLAPI
 
APIENTRY
 
	`glBegöQuîy
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

671 
GLAPI
 
APIENTRY
 
	`glEndQuîy
 (
GLíum
 
èrgë
);

672 
GLAPI
 
APIENTRY
 
	`glGëQuîyiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

673 
GLAPI
 
APIENTRY
 
	`glGëQuîyObje˘iv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

674 
GLAPI
 
APIENTRY
 
	`glGëQuîyObje˘uiv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

675 
GLAPI
 
APIENTRY
 
	`glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

676 
GLAPI
 
APIENTRY
 
	`glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

677 
GLAPI
 
APIENTRY
 
	`glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

678 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsBuf„r
 (
GLuöt
 
buf„r
);

679 
GLAPI
 
APIENTRY
 
	`glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

680 
GLAPI
 
APIENTRY
 
	`glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

681 
GLAPI
 
APIENTRY
 
	`glGëBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

682 
GLAPI
 *
APIENTRY
 
	`glM≠Buf„r
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

683 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glUnm≠Buf„r
 (
GLíum
 
èrgë
);

684 
GLAPI
 
APIENTRY
 
	`glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

685 
GLAPI
 
APIENTRY
 
	`glGëBuf„rPoöãrv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

689 #i‚de‡
GL_VERSION_2_0


690 
	#GL_VERSION_2_0
 1

	)

691 
	tGLch¨
;

692 
	tGLsh‹t
;

693 sig√d 
	tGLbyã
;

694 
	tGLush‹t
;

695 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

696 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

697 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

698 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

699 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

700 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

701 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

702 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

703 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

704 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

705 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

706 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

707 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

708 
	#GL_DRAW_BUFFER0
 0x8825

	)

709 
	#GL_DRAW_BUFFER1
 0x8826

	)

710 
	#GL_DRAW_BUFFER2
 0x8827

	)

711 
	#GL_DRAW_BUFFER3
 0x8828

	)

712 
	#GL_DRAW_BUFFER4
 0x8829

	)

713 
	#GL_DRAW_BUFFER5
 0x882A

	)

714 
	#GL_DRAW_BUFFER6
 0x882B

	)

715 
	#GL_DRAW_BUFFER7
 0x882C

	)

716 
	#GL_DRAW_BUFFER8
 0x882D

	)

717 
	#GL_DRAW_BUFFER9
 0x882E

	)

718 
	#GL_DRAW_BUFFER10
 0x882F

	)

719 
	#GL_DRAW_BUFFER11
 0x8830

	)

720 
	#GL_DRAW_BUFFER12
 0x8831

	)

721 
	#GL_DRAW_BUFFER13
 0x8832

	)

722 
	#GL_DRAW_BUFFER14
 0x8833

	)

723 
	#GL_DRAW_BUFFER15
 0x8834

	)

724 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

725 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

726 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

727 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

728 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

729 
	#GL_VERTEX_SHADER
 0x8B31

	)

730 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

731 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

732 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

733 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

734 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

735 
	#GL_SHADER_TYPE
 0x8B4F

	)

736 
	#GL_FLOAT_VEC2
 0x8B50

	)

737 
	#GL_FLOAT_VEC3
 0x8B51

	)

738 
	#GL_FLOAT_VEC4
 0x8B52

	)

739 
	#GL_INT_VEC2
 0x8B53

	)

740 
	#GL_INT_VEC3
 0x8B54

	)

741 
	#GL_INT_VEC4
 0x8B55

	)

742 
	#GL_BOOL
 0x8B56

	)

743 
	#GL_BOOL_VEC2
 0x8B57

	)

744 
	#GL_BOOL_VEC3
 0x8B58

	)

745 
	#GL_BOOL_VEC4
 0x8B59

	)

746 
	#GL_FLOAT_MAT2
 0x8B5A

	)

747 
	#GL_FLOAT_MAT3
 0x8B5B

	)

748 
	#GL_FLOAT_MAT4
 0x8B5C

	)

749 
	#GL_SAMPLER_1D
 0x8B5D

	)

750 
	#GL_SAMPLER_2D
 0x8B5E

	)

751 
	#GL_SAMPLER_3D
 0x8B5F

	)

752 
	#GL_SAMPLER_CUBE
 0x8B60

	)

753 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

754 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

755 
	#GL_DELETE_STATUS
 0x8B80

	)

756 
	#GL_COMPILE_STATUS
 0x8B81

	)

757 
	#GL_LINK_STATUS
 0x8B82

	)

758 
	#GL_VALIDATE_STATUS
 0x8B83

	)

759 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

760 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

761 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

762 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

763 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

764 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

765 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

766 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

767 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

768 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

769 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

770 
	#GL_LOWER_LEFT
 0x8CA1

	)

771 
	#GL_UPPER_LEFT
 0x8CA2

	)

772 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

773 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

774 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

775 (
	tAPIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

776 (
	tAPIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

777 (
	tAPIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

778 (
	tAPIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

779 (
	tAPIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

780 (
	tAPIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

781 (
	tAPIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

782 (
	tAPIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

783 
	$GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

784 
	$GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

785 (
	tAPIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

786 (
	tAPIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

787 (
	tAPIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

788 (
	tAPIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

789 (
	tAPIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

790 (
	tAPIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

791 (
	tAPIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

792 (
	tAPIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tshadîs
);

793 
	$GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

794 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

795 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

796 (
	tAPIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

797 (
	tAPIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

798 (
	tAPIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

799 
	$GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

800 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

801 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

802 (
	tAPIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

803 (
	tAPIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

804 (
	tAPIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

805 (
	tAPIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

806 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

807 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

808 (
	tAPIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

809 (
	tAPIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

810 (
	tAPIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

811 (
	tAPIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

812 (
	tAPIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

813 (
	tAPIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

814 (
	tAPIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

815 (
	tAPIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

816 (
	tAPIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

817 (
	tAPIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

818 (
	tAPIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

819 (
	tAPIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

820 (
	tAPIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

821 (
	tAPIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

822 (
	tAPIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

823 (
	tAPIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

824 (
	tAPIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

825 (
	tAPIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

826 (
	tAPIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

827 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

828 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

829 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

830 (
	tAPIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

831 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

832 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

833 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

834 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

835 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

836 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

837 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

838 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

839 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

840 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

841 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

842 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

843 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

844 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

845 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

846 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

847 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

848 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

849 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

850 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

851 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

852 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

853 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

854 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

855 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

856 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

857 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

858 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

859 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

860 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

861 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

862 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

863 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

864 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

865 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

866 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

867 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

868 #ifde‡
GL_GLEXT_PROTOTYPES


869 
GLAPI
 
APIENTRY
 
	`glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

870 
GLAPI
 
APIENTRY
 
	`glDøwBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

871 
GLAPI
 
APIENTRY
 
	`glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

872 
GLAPI
 
APIENTRY
 
	`glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

873 
GLAPI
 
APIENTRY
 
	`glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

874 
GLAPI
 
APIENTRY
 
	`glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

875 
GLAPI
 
APIENTRY
 
	`glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

876 
GLAPI
 
APIENTRY
 
	`glCompûeShadî
 (
GLuöt
 
shadî
);

877 
GLAPI
 
GLuöt
 
APIENTRY
 
	`glCª©eProgøm
 ();

878 
GLAPI
 
GLuöt
 
APIENTRY
 
	`glCª©eShadî
 (
GLíum
 
ty≥
);

879 
GLAPI
 
APIENTRY
 
	`glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

880 
GLAPI
 
APIENTRY
 
	`glDñëeShadî
 (
GLuöt
 
shadî
);

881 
GLAPI
 
APIENTRY
 
	`glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

882 
GLAPI
 
APIENTRY
 
	`glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

883 
GLAPI
 
APIENTRY
 
	`glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

884 
GLAPI
 
APIENTRY
 
	`glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

885 
GLAPI
 
APIENTRY
 
	`glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

886 
GLAPI
 
APIENTRY
 
	`glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLuöà*
shadîs
);

887 
GLAPI
 
GLöt
 
APIENTRY
 
	`glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

888 
GLAPI
 
APIENTRY
 
	`glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

889 
GLAPI
 
APIENTRY
 
	`glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

890 
GLAPI
 
APIENTRY
 
	`glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

891 
GLAPI
 
APIENTRY
 
	`glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

892 
GLAPI
 
APIENTRY
 
	`glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
sour˚
);

893 
GLAPI
 
GLöt
 
APIENTRY
 
	`glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

894 
GLAPI
 
APIENTRY
 
	`glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

895 
GLAPI
 
APIENTRY
 
	`glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

896 
GLAPI
 
APIENTRY
 
	`glGëVîãxAâribdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

897 
GLAPI
 
APIENTRY
 
	`glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

898 
GLAPI
 
APIENTRY
 
	`glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

899 
GLAPI
 
APIENTRY
 
	`glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

900 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsProgøm
 (
GLuöt
 
¥ogøm
);

901 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsShadî
 (
GLuöt
 
shadî
);

902 
GLAPI
 
APIENTRY
 
	`glLökProgøm
 (
GLuöt
 
¥ogøm
);

903 
GLAPI
 
APIENTRY
 
	`glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rög
, c⁄° 
GLöt
 *
Àngth
);

904 
GLAPI
 
APIENTRY
 
	`glU£Progøm
 (
GLuöt
 
¥ogøm
);

905 
GLAPI
 
APIENTRY
 
	`glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

906 
GLAPI
 
APIENTRY
 
	`glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

907 
GLAPI
 
APIENTRY
 
	`glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

908 
GLAPI
 
APIENTRY
 
	`glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

909 
GLAPI
 
APIENTRY
 
	`glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

910 
GLAPI
 
APIENTRY
 
	`glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

911 
GLAPI
 
APIENTRY
 
	`glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

912 
GLAPI
 
APIENTRY
 
	`glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

913 
GLAPI
 
APIENTRY
 
	`glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

914 
GLAPI
 
APIENTRY
 
	`glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

915 
GLAPI
 
APIENTRY
 
	`glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

916 
GLAPI
 
APIENTRY
 
	`glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

917 
GLAPI
 
APIENTRY
 
	`glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

918 
GLAPI
 
APIENTRY
 
	`glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

919 
GLAPI
 
APIENTRY
 
	`glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

920 
GLAPI
 
APIENTRY
 
	`glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

921 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

922 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

923 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

924 
GLAPI
 
APIENTRY
 
	`glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

925 
GLAPI
 
APIENTRY
 
	`glVîãxAârib1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

926 
GLAPI
 
APIENTRY
 
	`glVîãxAârib1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

927 
GLAPI
 
APIENTRY
 
	`glVîãxAârib1f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

928 
GLAPI
 
APIENTRY
 
	`glVîãxAârib1fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

929 
GLAPI
 
APIENTRY
 
	`glVîãxAârib1s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

930 
GLAPI
 
APIENTRY
 
	`glVîãxAârib1sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

931 
GLAPI
 
APIENTRY
 
	`glVîãxAârib2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

932 
GLAPI
 
APIENTRY
 
	`glVîãxAârib2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

933 
GLAPI
 
APIENTRY
 
	`glVîãxAârib2f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

934 
GLAPI
 
APIENTRY
 
	`glVîãxAârib2fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

935 
GLAPI
 
APIENTRY
 
	`glVîãxAârib2s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

936 
GLAPI
 
APIENTRY
 
	`glVîãxAârib2sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

937 
GLAPI
 
APIENTRY
 
	`glVîãxAârib3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

938 
GLAPI
 
APIENTRY
 
	`glVîãxAârib3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

939 
GLAPI
 
APIENTRY
 
	`glVîãxAârib3f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

940 
GLAPI
 
APIENTRY
 
	`glVîãxAârib3fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

941 
GLAPI
 
APIENTRY
 
	`glVîãxAârib3s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

942 
GLAPI
 
APIENTRY
 
	`glVîãxAârib3sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

943 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4Nbv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

944 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4Niv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

945 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4Nsv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

946 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4Nub
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

947 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4Nubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

948 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4Nuiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

949 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4Nusv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

950 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

951 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

952 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

953 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

954 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

955 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

956 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

957 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

958 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

959 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

960 
GLAPI
 
APIENTRY
 
	`glVîãxAârib4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

961 
GLAPI
 
APIENTRY
 
	`glVîãxAâribPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

965 #i‚de‡
GL_VERSION_2_1


966 
	#GL_VERSION_2_1
 1

	)

967 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

968 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

969 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

970 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

971 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

972 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

973 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

974 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

975 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

976 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

977 
	#GL_SRGB
 0x8C40

	)

978 
	#GL_SRGB8
 0x8C41

	)

979 
	#GL_SRGB_ALPHA
 0x8C42

	)

980 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

981 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

982 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

983 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

984 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

985 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

986 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

987 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

988 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

989 #ifde‡
GL_GLEXT_PROTOTYPES


990 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix2x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

991 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix3x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

992 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix2x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

993 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix4x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

994 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix3x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

995 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix4x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

999 #i‚de‡
GL_VERSION_3_0


1000 
	#GL_VERSION_3_0
 1

	)

1001 
	tGLhÆf
;

1002 
	#GL_COMPARE_REF_TO_TEXTURE
 0x884E

	)

1003 
	#GL_CLIP_DISTANCE0
 0x3000

	)

1004 
	#GL_CLIP_DISTANCE1
 0x3001

	)

1005 
	#GL_CLIP_DISTANCE2
 0x3002

	)

1006 
	#GL_CLIP_DISTANCE3
 0x3003

	)

1007 
	#GL_CLIP_DISTANCE4
 0x3004

	)

1008 
	#GL_CLIP_DISTANCE5
 0x3005

	)

1009 
	#GL_CLIP_DISTANCE6
 0x3006

	)

1010 
	#GL_CLIP_DISTANCE7
 0x3007

	)

1011 
	#GL_MAX_CLIP_DISTANCES
 0x0D32

	)

1012 
	#GL_MAJOR_VERSION
 0x821B

	)

1013 
	#GL_MINOR_VERSION
 0x821C

	)

1014 
	#GL_NUM_EXTENSIONS
 0x821D

	)

1015 
	#GL_CONTEXT_FLAGS
 0x821E

	)

1016 
	#GL_COMPRESSED_RED
 0x8225

	)

1017 
	#GL_COMPRESSED_RG
 0x8226

	)

1018 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x00000001

	)

1019 
	#GL_RGBA32F
 0x8814

	)

1020 
	#GL_RGB32F
 0x8815

	)

1021 
	#GL_RGBA16F
 0x881A

	)

1022 
	#GL_RGB16F
 0x881B

	)

1023 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

1024 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

1025 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

1026 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

1027 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

1028 
	#GL_FIXED_ONLY
 0x891D

	)

1029 
	#GL_MAX_VARYING_COMPONENTS
 0x8B4B

	)

1030 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

1031 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

1032 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

1033 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

1034 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

1035 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

1036 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

1037 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

1038 
	#GL_RGB9_E5
 0x8C3D

	)

1039 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

1040 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

1041 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

1042 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

1043 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

1044 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

1045 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

1046 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

1047 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

1048 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

1049 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

1050 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

1051 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

1052 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

1053 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

1054 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

1055 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

1056 
	#GL_RGBA32UI
 0x8D70

	)

1057 
	#GL_RGB32UI
 0x8D71

	)

1058 
	#GL_RGBA16UI
 0x8D76

	)

1059 
	#GL_RGB16UI
 0x8D77

	)

1060 
	#GL_RGBA8UI
 0x8D7C

	)

1061 
	#GL_RGB8UI
 0x8D7D

	)

1062 
	#GL_RGBA32I
 0x8D82

	)

1063 
	#GL_RGB32I
 0x8D83

	)

1064 
	#GL_RGBA16I
 0x8D88

	)

1065 
	#GL_RGB16I
 0x8D89

	)

1066 
	#GL_RGBA8I
 0x8D8E

	)

1067 
	#GL_RGB8I
 0x8D8F

	)

1068 
	#GL_RED_INTEGER
 0x8D94

	)

1069 
	#GL_GREEN_INTEGER
 0x8D95

	)

1070 
	#GL_BLUE_INTEGER
 0x8D96

	)

1071 
	#GL_RGB_INTEGER
 0x8D98

	)

1072 
	#GL_RGBA_INTEGER
 0x8D99

	)

1073 
	#GL_BGR_INTEGER
 0x8D9A

	)

1074 
	#GL_BGRA_INTEGER
 0x8D9B

	)

1075 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

1076 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

1077 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

1078 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

1079 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

1080 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

1081 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

1082 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

1083 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

1084 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

1085 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

1086 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

1087 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

1088 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

1089 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

1090 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

1091 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

1092 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

1093 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

1094 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

1095 
	#GL_QUERY_WAIT
 0x8E13

	)

1096 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

1097 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

1098 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

1099 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

1100 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

1101 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

1102 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

1103 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

1104 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

1105 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

1106 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

1107 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

1108 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

1109 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

1110 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

1111 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

1112 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

1113 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

1114 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

1115 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

1116 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

1117 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

1118 
	#GL_DEPTH_STENCIL
 0x84F9

	)

1119 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

1120 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

1121 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

1122 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

1123 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

1124 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

1125 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

1126 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

1127 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

1128 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

1129 
	#GL_DRAW_FRAMEBUFFER_BINDING
 0x8CA6

	)

1130 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

1131 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

1132 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

1133 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

1134 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

1135 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

1136 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

1137 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

1138 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

1139 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

1140 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

1141 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

1142 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

1143 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

1144 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

1145 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

1146 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

1147 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

1148 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

1149 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

1150 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

1151 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

1152 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

1153 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

1154 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

1155 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

1156 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

1157 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

1158 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

1159 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

1160 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

1161 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

1162 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

1163 
	#GL_COLOR_ATTACHMENT16
 0x8CF0

	)

1164 
	#GL_COLOR_ATTACHMENT17
 0x8CF1

	)

1165 
	#GL_COLOR_ATTACHMENT18
 0x8CF2

	)

1166 
	#GL_COLOR_ATTACHMENT19
 0x8CF3

	)

1167 
	#GL_COLOR_ATTACHMENT20
 0x8CF4

	)

1168 
	#GL_COLOR_ATTACHMENT21
 0x8CF5

	)

1169 
	#GL_COLOR_ATTACHMENT22
 0x8CF6

	)

1170 
	#GL_COLOR_ATTACHMENT23
 0x8CF7

	)

1171 
	#GL_COLOR_ATTACHMENT24
 0x8CF8

	)

1172 
	#GL_COLOR_ATTACHMENT25
 0x8CF9

	)

1173 
	#GL_COLOR_ATTACHMENT26
 0x8CFA

	)

1174 
	#GL_COLOR_ATTACHMENT27
 0x8CFB

	)

1175 
	#GL_COLOR_ATTACHMENT28
 0x8CFC

	)

1176 
	#GL_COLOR_ATTACHMENT29
 0x8CFD

	)

1177 
	#GL_COLOR_ATTACHMENT30
 0x8CFE

	)

1178 
	#GL_COLOR_ATTACHMENT31
 0x8CFF

	)

1179 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

1180 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

1181 
	#GL_FRAMEBUFFER
 0x8D40

	)

1182 
	#GL_RENDERBUFFER
 0x8D41

	)

1183 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

1184 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

1185 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

1186 
	#GL_STENCIL_INDEX1
 0x8D46

	)

1187 
	#GL_STENCIL_INDEX4
 0x8D47

	)

1188 
	#GL_STENCIL_INDEX8
 0x8D48

	)

1189 
	#GL_STENCIL_INDEX16
 0x8D49

	)

1190 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

1191 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

1192 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

1193 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

1194 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

1195 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

1196 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

1197 
	#GL_MAX_SAMPLES
 0x8D57

	)

1198 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

1199 
	#GL_HALF_FLOAT
 0x140B

	)

1200 
	#GL_MAP_READ_BIT
 0x0001

	)

1201 
	#GL_MAP_WRITE_BIT
 0x0002

	)

1202 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

1203 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

1204 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

1205 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

1206 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

1207 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

1208 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

1209 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

1210 
	#GL_RG
 0x8227

	)

1211 
	#GL_RG_INTEGER
 0x8228

	)

1212 
	#GL_R8
 0x8229

	)

1213 
	#GL_R16
 0x822A

	)

1214 
	#GL_RG8
 0x822B

	)

1215 
	#GL_RG16
 0x822C

	)

1216 
	#GL_R16F
 0x822D

	)

1217 
	#GL_R32F
 0x822E

	)

1218 
	#GL_RG16F
 0x822F

	)

1219 
	#GL_RG32F
 0x8230

	)

1220 
	#GL_R8I
 0x8231

	)

1221 
	#GL_R8UI
 0x8232

	)

1222 
	#GL_R16I
 0x8233

	)

1223 
	#GL_R16UI
 0x8234

	)

1224 
	#GL_R32I
 0x8235

	)

1225 
	#GL_R32UI
 0x8236

	)

1226 
	#GL_RG8I
 0x8237

	)

1227 
	#GL_RG8UI
 0x8238

	)

1228 
	#GL_RG16I
 0x8239

	)

1229 
	#GL_RG16UI
 0x823A

	)

1230 
	#GL_RG32I
 0x823B

	)

1231 
	#GL_RG32UI
 0x823C

	)

1232 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

1233 (
	tAPIENTRYP
 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

1234 (
	tAPIENTRYP
 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

1235 (
	tAPIENTRYP
 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

1236 (
	tAPIENTRYP
 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1237 (
	tAPIENTRYP
 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1238 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1239 (
	tAPIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

1240 (
	tAPIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

1241 (
	tAPIENTRYP
 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

1242 (
	tAPIENTRYP
 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

1243 (
	tAPIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

1244 (
	tAPIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

1245 (
	tAPIENTRYP
 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

1246 (
	tAPIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

1247 (
	tAPIENTRYP
 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

1248 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1249 (
	tAPIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1250 (
	tAPIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1251 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

1252 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

1253 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

1254 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

1255 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

1256 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

1257 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

1258 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

1259 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1260 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1261 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1262 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1263 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1264 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1265 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1266 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1267 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

1268 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

1269 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

1270 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

1271 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

1272 (
	tAPIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

1273 
	$GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1274 (
	tAPIENTRYP
 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

1275 (
	tAPIENTRYP
 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

1276 (
	tAPIENTRYP
 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1277 (
	tAPIENTRYP
 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1278 (
	tAPIENTRYP
 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1279 (
	tAPIENTRYP
 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1280 (
	tAPIENTRYP
 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1281 (
	tAPIENTRYP
 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1282 (
	tAPIENTRYP
 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

1283 (
	tAPIENTRYP
 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

1284 (
	tAPIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1285 (
	tAPIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

1286 (
	tAPIENTRYP
 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

1287 (
	tAPIENTRYP
 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1288 (
	tAPIENTRYP
 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1289 (
	tAPIENTRYP
 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

1290 c⁄° 
	tGLubyã
 *(
	tAPIENTRYP
 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
 
	t«me
, 
	tGLuöt
 
	tödex
);

1291 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

1292 (
	tAPIENTRYP
 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

1293 (
	tAPIENTRYP
 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

1294 (
	tAPIENTRYP
 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

1295 (
	tAPIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1296 (
	tAPIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1297 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

1298 (
	tAPIENTRYP
 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

1299 (
	tAPIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

1300 (
	tAPIENTRYP
 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

1301 
	$GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

1302 (
	tAPIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1303 (
	tAPIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1304 (
	tAPIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

1305 (
	tAPIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

1306 (
	tAPIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1307 (
	tAPIENTRYP
 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

1308 (
	tAPIENTRYP
 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

1309 (
	tAPIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1310 (
	tAPIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

1311 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

1312 (
	tAPIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

1313 (
	tAPIENTRYP
 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1314 (
	tAPIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

1315 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

1316 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1317 #ifde‡
GL_GLEXT_PROTOTYPES


1318 
GLAPI
 
APIENTRY
 
	`glCﬁ‹Maski
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

1319 
GLAPI
 
APIENTRY
 
	`glGëBoﬁóni_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

1320 
GLAPI
 
APIENTRY
 
	`glGëI¡egîi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

1321 
GLAPI
 
APIENTRY
 
	`glE«bÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1322 
GLAPI
 
APIENTRY
 
	`glDißbÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1323 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsE«bÀdi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1324 
GLAPI
 
APIENTRY
 
	`glBegöTønsf‹mFìdback
 (
GLíum
 
¥imôiveMode
);

1325 
GLAPI
 
APIENTRY
 
	`glEndTønsf‹mFìdback
 ();

1326 
GLAPI
 
APIENTRY
 
	`glBödBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

1327 
GLAPI
 
APIENTRY
 
	`glBödBuf„rBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

1328 
GLAPI
 
APIENTRY
 
	`glTønsf‹mFìdbackV¨yögs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

1329 
GLAPI
 
APIENTRY
 
	`glGëTønsf‹mFìdbackV¨yög
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

1330 
GLAPI
 
APIENTRY
 
	`glCœmpCﬁ‹
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

1331 
GLAPI
 
APIENTRY
 
	`glBegöC⁄dôi⁄ÆRídî
 (
GLuöt
 
id
, 
GLíum
 
mode
);

1332 
GLAPI
 
APIENTRY
 
	`glEndC⁄dôi⁄ÆRídî
 ();

1333 
GLAPI
 
APIENTRY
 
	`glVîãxAâribIPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

1334 
GLAPI
 
APIENTRY
 
	`glGëVîãxAâribIiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1335 
GLAPI
 
APIENTRY
 
	`glGëVîãxAâribIuiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1336 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI1i
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

1337 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI2i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

1338 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI3i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

1339 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI4i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

1340 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI1ui
 (
GLuöt
 
ödex
, GLuöà
x
);

1341 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI2ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

1342 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI3ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

1343 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI4ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

1344 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI1iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1345 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI2iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1346 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI3iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1347 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1348 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI1uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1349 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI2uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1350 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI3uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1351 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1352 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

1353 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

1354 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

1355 
GLAPI
 
APIENTRY
 
	`glVîãxAâribI4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

1356 
GLAPI
 
APIENTRY
 
	`glGëUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

1357 
GLAPI
 
APIENTRY
 
	`glBödFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

1358 
GLAPI
 
GLöt
 
APIENTRY
 
	`glGëFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1359 
GLAPI
 
APIENTRY
 
	`glUnif‹m1ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

1360 
GLAPI
 
APIENTRY
 
	`glUnif‹m2ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

1361 
GLAPI
 
APIENTRY
 
	`glUnif‹m3ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

1362 
GLAPI
 
APIENTRY
 
	`glUnif‹m4ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

1363 
GLAPI
 
APIENTRY
 
	`glUnif‹m1uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1364 
GLAPI
 
APIENTRY
 
	`glUnif‹m2uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1365 
GLAPI
 
APIENTRY
 
	`glUnif‹m3uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1366 
GLAPI
 
APIENTRY
 
	`glUnif‹m4uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1367 
GLAPI
 
APIENTRY
 
	`glTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1368 
GLAPI
 
APIENTRY
 
	`glTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

1369 
GLAPI
 
APIENTRY
 
	`glGëTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1370 
GLAPI
 
APIENTRY
 
	`glGëTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

1371 
GLAPI
 
APIENTRY
 
	`glCÀ¨Buf„riv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

1372 
GLAPI
 
APIENTRY
 
	`glCÀ¨Buf„ruiv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLuöt
 *
vÆue
);

1373 
GLAPI
 
APIENTRY
 
	`glCÀ¨Buf„rfv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

1374 
GLAPI
 
APIENTRY
 
	`glCÀ¨Buf„rfi
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

1375 
GLAPI
 c⁄° 
GLubyã
 *
APIENTRY
 
	`glGëSåögi
 (
GLíum
 
«me
, 
GLuöt
 
ödex
);

1376 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

1377 
GLAPI
 
APIENTRY
 
	`glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

1378 
GLAPI
 
APIENTRY
 
	`glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

1379 
GLAPI
 
APIENTRY
 
	`glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

1380 
GLAPI
 
APIENTRY
 
	`glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

1381 
GLAPI
 
APIENTRY
 
	`glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1382 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

1383 
GLAPI
 
APIENTRY
 
	`glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

1384 
GLAPI
 
APIENTRY
 
	`glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

1385 
GLAPI
 
APIENTRY
 
	`glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

1386 
GLAPI
 
GLíum
 
APIENTRY
 
	`glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

1387 
GLAPI
 
APIENTRY
 
	`glFømebuf„rTextuª1D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1388 
GLAPI
 
APIENTRY
 
	`glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1389 
GLAPI
 
APIENTRY
 
	`glFømebuf„rTextuª3D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

1390 
GLAPI
 
APIENTRY
 
	`glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

1391 
GLAPI
 
APIENTRY
 
	`glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1392 
GLAPI
 
APIENTRY
 
	`glGíî©eMùm≠
 (
GLíum
 
èrgë
);

1393 
GLAPI
 
APIENTRY
 
	`glBlôFømebuf„r
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

1394 
GLAPI
 
APIENTRY
 
	`glRídîbuf„rSt‹ageMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1395 
GLAPI
 
APIENTRY
 
	`glFømebuf„rTextuªLayî
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

1396 
GLAPI
 *
APIENTRY
 
	`glM≠Buf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

1397 
GLAPI
 
APIENTRY
 
	`glFlushM≠≥dBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

1398 
GLAPI
 
APIENTRY
 
	`glBödVîãxAºay
 (
GLuöt
 
¨øy
);

1399 
GLAPI
 
APIENTRY
 
	`glDñëeVîãxAºays
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

1400 
GLAPI
 
APIENTRY
 
	`glGíVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

1401 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsVîãxAºay
 (
GLuöt
 
¨øy
);

1405 #i‚de‡
GL_VERSION_3_1


1406 
	#GL_VERSION_3_1
 1

	)

1407 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

1408 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

1409 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

1410 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

1411 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

1412 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

1413 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

1414 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

1415 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

1416 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

1417 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

1418 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

1419 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

1420 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

1421 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

1422 
	#GL_R8_SNORM
 0x8F94

	)

1423 
	#GL_RG8_SNORM
 0x8F95

	)

1424 
	#GL_RGB8_SNORM
 0x8F96

	)

1425 
	#GL_RGBA8_SNORM
 0x8F97

	)

1426 
	#GL_R16_SNORM
 0x8F98

	)

1427 
	#GL_RG16_SNORM
 0x8F99

	)

1428 
	#GL_RGB16_SNORM
 0x8F9A

	)

1429 
	#GL_RGBA16_SNORM
 0x8F9B

	)

1430 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

1431 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

1432 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

1433 
	#GL_COPY_READ_BUFFER
 0x8F36

	)

1434 
	#GL_COPY_WRITE_BUFFER
 0x8F37

	)

1435 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

1436 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

1437 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

1438 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

1439 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

1440 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

1441 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

1442 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

1443 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

1444 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

1445 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

1446 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

1447 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

1448 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

1449 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

1450 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

1451 
	#GL_UNIFORM_TYPE
 0x8A37

	)

1452 
	#GL_UNIFORM_SIZE
 0x8A38

	)

1453 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

1454 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

1455 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

1456 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

1457 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

1458 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

1459 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

1460 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

1461 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

1462 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

1463 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

1464 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

1465 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

1466 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

1467 
	#GL_INVALID_INDEX
 0xFFFFFFFFu

	)

1468 (
	tAPIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
);

1469 (
	tAPIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
);

1470 (
	tAPIENTRYP
 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

1471 (
	tAPIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
 
	tödex
);

1472 (
	tAPIENTRYP
 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadT¨gë
, GLíum 
	twrôeT¨gë
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

1473 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tunif‹mNames
, GLuöà*
	tunif‹mIndi˚s
);

1474 (
	tAPIENTRYP
 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöà*
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1475 (
	tAPIENTRYP
 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mName
);

1476 
	$GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	tunif‹mBlockName
);

1477 (
	tAPIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1478 (
	tAPIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mBlockName
);

1479 (
	tAPIENTRYP
 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

1480 #ifde‡
GL_GLEXT_PROTOTYPES


1481 
GLAPI
 
APIENTRY
 
	`glDøwAºaysIn°™˚d
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
);

1482 
GLAPI
 
APIENTRY
 
	`glDøwEÀmítsIn°™˚d
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
);

1483 
GLAPI
 
APIENTRY
 
	`glTexBuf„r
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

1484 
GLAPI
 
APIENTRY
 
	`glPrimôiveRe°¨tIndex
 (
GLuöt
 
ödex
);

1485 
GLAPI
 
APIENTRY
 
	`glC›yBuf„rSubD©a
 (
GLíum
 
ªadT¨gë
, GLíum 
wrôeT¨gë
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

1486 
GLAPI
 
APIENTRY
 
	`glGëUnif‹mIndi˚s
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° 
GLch¨
 *c⁄°*
unif‹mNames
, GLuöà*
unif‹mIndi˚s
);

1487 
GLAPI
 
APIENTRY
 
	`glGëA˘iveUnif‹msiv
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° GLuöà*
unif‹mIndi˚s
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1488 
GLAPI
 
APIENTRY
 
	`glGëA˘iveUnif‹mName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mName
);

1489 
GLAPI
 
GLuöt
 
APIENTRY
 
	`glGëUnif‹mBlockIndex
 (GLuöà
¥ogøm
, c⁄° 
GLch¨
 *
unif‹mBlockName
);

1490 
GLAPI
 
APIENTRY
 
	`glGëA˘iveUnif‹mBlockiv
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1491 
GLAPI
 
APIENTRY
 
	`glGëA˘iveUnif‹mBlockName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mBlockName
);

1492 
GLAPI
 
APIENTRY
 
	`glUnif‹mBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, GLuöà
unif‹mBlockBödög
);

1496 #i‚de‡
GL_VERSION_3_2


1497 
	#GL_VERSION_3_2
 1

	)

1498 
__GLsync
 *
	tGLsync
;

1499 #i‚de‡
GLEXT_64_TYPES_DEFINED


1501 
	#GLEXT_64_TYPES_DEFINED


	)

1504 #i‡
	`deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

1505 
	~<öây≥s.h
>

1506 #ñi‡
	`deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

1507 
	~<öây≥s.h
>

1508 #i‡
	`deföed
(
__STDC__
)

1509 #i‡
	`deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

1510 
	töt64_t
;

1511 
	tuöt64_t
;

1513 
	töt64_t
;

1514 
	tuöt64_t
;

1517 #ñi‡
	`deföed
–
__VMS
 ) || deföed(
__sgi
)

1518 
	~<öây≥s.h
>

1519 #ñi‡
	`deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

1520 
	~<°döt.h
>

1521 #ñi‡
	`deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

1522 
	töt32_t
;

1523 
	töt64_t
;

1524 
	tuöt64_t
;

1525 #ñi‡
	`deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

1526 
	~<°döt.h
>

1527 #ñi‡
	`deföed
(
_WIN32
)

1528 
__öt32
 
	töt32_t
;

1529 
__öt64
 
	töt64_t
;

1530 
	t__öt64
 
	tuöt64_t
;

1533 
	~<öây≥s.h
>

1536 
uöt64_t
 
	tGLuöt64
;

1537 
öt64_t
 
	tGLöt64
;

1538 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

1539 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

1540 
	#GL_LINES_ADJACENCY
 0x000A

	)

1541 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

1542 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

1543 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

1544 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

1545 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

1546 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

1547 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

1548 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

1549 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

1550 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

1551 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

1552 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

1553 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

1554 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

1555 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

1556 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

1557 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

1558 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

1559 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

1560 
	#GL_DEPTH_CLAMP
 0x864F

	)

1561 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

1562 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

1563 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

1564 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

1565 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

1566 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

1567 
	#GL_OBJECT_TYPE
 0x9112

	)

1568 
	#GL_SYNC_CONDITION
 0x9113

	)

1569 
	#GL_SYNC_STATUS
 0x9114

	)

1570 
	#GL_SYNC_FLAGS
 0x9115

	)

1571 
	#GL_SYNC_FENCE
 0x9116

	)

1572 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

1573 
	#GL_UNSIGNALED
 0x9118

	)

1574 
	#GL_SIGNALED
 0x9119

	)

1575 
	#GL_ALREADY_SIGNALED
 0x911A

	)

1576 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

1577 
	#GL_CONDITION_SATISFIED
 0x911C

	)

1578 
	#GL_WAIT_FAILED
 0x911D

	)

1579 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFFuŒ

	)

1580 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

1581 
	#GL_SAMPLE_POSITION
 0x8E50

	)

1582 
	#GL_SAMPLE_MASK
 0x8E51

	)

1583 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

1584 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

1585 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

1586 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

1587 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

1588 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

1589 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

1590 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

1591 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

1592 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

1593 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

1594 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

1595 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

1596 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

1597 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

1598 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

1599 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

1600 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

1601 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

1602 (
	tAPIENTRYP
 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1603 (
	tAPIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1604 (
	tAPIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
);

1605 (
	tAPIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
, c⁄° 
	tGLöt
 *
	tba£vîãx
);

1606 (
	tAPIENTRYP
 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

1607 
	$GLsync
 (
	tAPIENTRYP
 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

1608 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 
	tsync
);

1609 (
	tAPIENTRYP
 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 
	tsync
);

1610 
	$GLíum
 (
	tAPIENTRYP
 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1611 (
	tAPIENTRYP
 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1612 (
	tAPIENTRYP
 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	td©a
);

1613 (
	tAPIENTRYP
 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

1614 (
	tAPIENTRYP
 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt64
 *
	td©a
);

1615 (
	tAPIENTRYP
 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1616 (
	tAPIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1617 (
	tAPIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1618 (
	tAPIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1619 (
	tAPIENTRYP
 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

1620 (
	tAPIENTRYP
 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tmaskNumbî
, 
	tGLbôfõld
 
	tmask
);

1621 #ifde‡
GL_GLEXT_PROTOTYPES


1622 
GLAPI
 
APIENTRY
 
	`glDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1623 
GLAPI
 
APIENTRY
 
	`glDøwR™geEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1624 
GLAPI
 
APIENTRY
 
	`glDøwEÀmítsIn°™˚dBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
);

1625 
GLAPI
 
APIENTRY
 
	`glMu…iDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
, c⁄° 
GLöt
 *
ba£vîãx
);

1626 
GLAPI
 
APIENTRY
 
	`glProvokögVîãx
 (
GLíum
 
mode
);

1627 
GLAPI
 
GLsync
 
APIENTRY
 
	`glFí˚Sync
 (
GLíum
 
c⁄dôi⁄
, 
GLbôfõld
 
Êags
);

1628 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsSync
 (
GLsync
 
sync
);

1629 
GLAPI
 
APIENTRY
 
	`glDñëeSync
 (
GLsync
 
sync
);

1630 
GLAPI
 
GLíum
 
APIENTRY
 
	`glClõ¡WaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1631 
GLAPI
 
APIENTRY
 
	`glWaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1632 
GLAPI
 
APIENTRY
 
	`glGëI¡egî64v
 (
GLíum
 
≤ame
, 
GLöt64
 *
d©a
);

1633 
GLAPI
 
APIENTRY
 
	`glGëSynciv
 (
GLsync
 
sync
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

1634 
GLAPI
 
APIENTRY
 
	`glGëI¡egî64i_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt64
 *
d©a
);

1635 
GLAPI
 
APIENTRY
 
	`glGëBuf„rP¨amëîi64v
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt64
 *
∑øms
);

1636 
GLAPI
 
APIENTRY
 
	`glFømebuf„rTextuª
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1637 
GLAPI
 
APIENTRY
 
	`glTexImage2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1638 
GLAPI
 
APIENTRY
 
	`glTexImage3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1639 
GLAPI
 
APIENTRY
 
	`glGëMu…ißm∂efv
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

1640 
GLAPI
 
APIENTRY
 
	`glSam∂eMaski
 (
GLuöt
 
maskNumbî
, 
GLbôfõld
 
mask
);

1644 #i‚de‡
GL_VERSION_3_3


1645 
	#GL_VERSION_3_3
 1

	)

1646 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR
 0x88FE

	)

1647 
	#GL_SRC1_COLOR
 0x88F9

	)

1648 
	#GL_ONE_MINUS_SRC1_COLOR
 0x88FA

	)

1649 
	#GL_ONE_MINUS_SRC1_ALPHA
 0x88FB

	)

1650 
	#GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
 0x88FC

	)

1651 
	#GL_ANY_SAMPLES_PASSED
 0x8C2F

	)

1652 
	#GL_SAMPLER_BINDING
 0x8919

	)

1653 
	#GL_RGB10_A2UI
 0x906F

	)

1654 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

1655 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

1656 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

1657 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

1658 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

1659 
	#GL_TIME_ELAPSED
 0x88BF

	)

1660 
	#GL_TIMESTAMP
 0x8E28

	)

1661 
	#GL_INT_2_10_10_10_REV
 0x8D9F

	)

1662 (
	tAPIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONINDEXEDPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹Numbî
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

1663 
	$GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATAINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1664 (
	tAPIENTRYP
 
	tPFNGLGENSAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, 
	tGLuöt
 *
	tßm∂îs
);

1665 (
	tAPIENTRYP
 
	tPFNGLDELETESAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tßm∂îs
);

1666 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSAMPLERPROC
Ë(
	tGLuöt
 
	tßm∂î
);

1667 (
	tAPIENTRYP
 
	tPFNGLBINDSAMPLERPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tßm∂î
);

1668 (
	tAPIENTRYP
 
	tPFNGLSAMPLERPARAMETERIPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

1669 (
	tAPIENTRYP
 
	tPFNGLSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1670 (
	tAPIENTRYP
 
	tPFNGLSAMPLERPARAMETERFPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

1671 (
	tAPIENTRYP
 
	tPFNGLSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

1672 (
	tAPIENTRYP
 
	tPFNGLSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1673 (
	tAPIENTRYP
 
	tPFNGLSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øm
);

1674 (
	tAPIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1675 (
	tAPIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1676 (
	tAPIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

1677 (
	tAPIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1678 (
	tAPIENTRYP
 
	tPFNGLQUERYCOUNTERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

1679 (
	tAPIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1680 (
	tAPIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

1681 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

1682 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1683 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1684 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1685 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1686 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1687 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1688 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1689 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1690 #ifde‡
GL_GLEXT_PROTOTYPES


1691 
GLAPI
 
APIENTRY
 
	`glBödFøgD©aLoˇti⁄Indexed
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹Numbî
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

1692 
GLAPI
 
GLöt
 
APIENTRY
 
	`glGëFøgD©aIndex
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1693 
GLAPI
 
APIENTRY
 
	`glGíSam∂îs
 (
GLsizei
 
cou¡
, 
GLuöt
 *
ßm∂îs
);

1694 
GLAPI
 
APIENTRY
 
	`glDñëeSam∂îs
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ßm∂îs
);

1695 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsSam∂î
 (
GLuöt
 
ßm∂î
);

1696 
GLAPI
 
APIENTRY
 
	`glBödSam∂î
 (
GLuöt
 
unô
, GLuöà
ßm∂î
);

1697 
GLAPI
 
APIENTRY
 
	`glSam∂îP¨amëîi
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

1698 
GLAPI
 
APIENTRY
 
	`glSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1699 
GLAPI
 
APIENTRY
 
	`glSam∂îP¨amëîf
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

1700 
GLAPI
 
APIENTRY
 
	`glSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

1701 
GLAPI
 
APIENTRY
 
	`glSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1702 
GLAPI
 
APIENTRY
 
	`glSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øm
);

1703 
GLAPI
 
APIENTRY
 
	`glGëSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1704 
GLAPI
 
APIENTRY
 
	`glGëSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1705 
GLAPI
 
APIENTRY
 
	`glGëSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1706 
GLAPI
 
APIENTRY
 
	`glGëSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1707 
GLAPI
 
APIENTRY
 
	`glQuîyCou¡î
 (
GLuöt
 
id
, 
GLíum
 
èrgë
);

1708 
GLAPI
 
APIENTRY
 
	`glGëQuîyObje˘i64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

1709 
GLAPI
 
APIENTRY
 
	`glGëQuîyObje˘ui64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

1710 
GLAPI
 
APIENTRY
 
	`glVîãxAâribDivis‹
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

1711 
GLAPI
 
APIENTRY
 
	`glVîãxAâribP1ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1712 
GLAPI
 
APIENTRY
 
	`glVîãxAâribP1uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1713 
GLAPI
 
APIENTRY
 
	`glVîãxAâribP2ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1714 
GLAPI
 
APIENTRY
 
	`glVîãxAâribP2uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1715 
GLAPI
 
APIENTRY
 
	`glVîãxAâribP3ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1716 
GLAPI
 
APIENTRY
 
	`glVîãxAâribP3uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1717 
GLAPI
 
APIENTRY
 
	`glVîãxAâribP4ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1718 
GLAPI
 
APIENTRY
 
	`glVîãxAâribP4uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1722 #i‚de‡
GL_VERSION_4_0


1723 
	#GL_VERSION_4_0
 1

	)

1724 
	#GL_SAMPLE_SHADING
 0x8C36

	)

1725 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

1726 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

1727 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

1728 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

1729 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

1730 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

1731 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

1732 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

1733 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

1734 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

1735 
	#GL_DRAW_INDIRECT_BUFFER
 0x8F3F

	)

1736 
	#GL_DRAW_INDIRECT_BUFFER_BINDING
 0x8F43

	)

1737 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

1738 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

1739 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

1740 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

1741 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

1742 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

1743 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

1744 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

1745 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

1746 
	#GL_DOUBLE_MAT2
 0x8F46

	)

1747 
	#GL_DOUBLE_MAT3
 0x8F47

	)

1748 
	#GL_DOUBLE_MAT4
 0x8F48

	)

1749 
	#GL_DOUBLE_MAT2x3
 0x8F49

	)

1750 
	#GL_DOUBLE_MAT2x4
 0x8F4A

	)

1751 
	#GL_DOUBLE_MAT3x2
 0x8F4B

	)

1752 
	#GL_DOUBLE_MAT3x4
 0x8F4C

	)

1753 
	#GL_DOUBLE_MAT4x2
 0x8F4D

	)

1754 
	#GL_DOUBLE_MAT4x3
 0x8F4E

	)

1755 
	#GL_ACTIVE_SUBROUTINES
 0x8DE5

	)

1756 
	#GL_ACTIVE_SUBROUTINE_UNIFORMS
 0x8DE6

	)

1757 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
 0x8E47

	)

1758 
	#GL_ACTIVE_SUBROUTINE_MAX_LENGTH
 0x8E48

	)

1759 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
 0x8E49

	)

1760 
	#GL_MAX_SUBROUTINES
 0x8DE7

	)

1761 
	#GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
 0x8DE8

	)

1762 
	#GL_NUM_COMPATIBLE_SUBROUTINES
 0x8E4A

	)

1763 
	#GL_COMPATIBLE_SUBROUTINES
 0x8E4B

	)

1764 
	#GL_PATCHES
 0x000E

	)

1765 
	#GL_PATCH_VERTICES
 0x8E72

	)

1766 
	#GL_PATCH_DEFAULT_INNER_LEVEL
 0x8E73

	)

1767 
	#GL_PATCH_DEFAULT_OUTER_LEVEL
 0x8E74

	)

1768 
	#GL_TESS_CONTROL_OUTPUT_VERTICES
 0x8E75

	)

1769 
	#GL_TESS_GEN_MODE
 0x8E76

	)

1770 
	#GL_TESS_GEN_SPACING
 0x8E77

	)

1771 
	#GL_TESS_GEN_VERTEX_ORDER
 0x8E78

	)

1772 
	#GL_TESS_GEN_POINT_MODE
 0x8E79

	)

1773 
	#GL_ISOLINES
 0x8E7A

	)

1774 
	#GL_FRACTIONAL_ODD
 0x8E7B

	)

1775 
	#GL_FRACTIONAL_EVEN
 0x8E7C

	)

1776 
	#GL_MAX_PATCH_VERTICES
 0x8E7D

	)

1777 
	#GL_MAX_TESS_GEN_LEVEL
 0x8E7E

	)

1778 
	#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E7F

	)

1779 
	#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E80

	)

1780 
	#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
 0x8E81

	)

1781 
	#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
 0x8E82

	)

1782 
	#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
 0x8E83

	)

1783 
	#GL_MAX_TESS_PATCH_COMPONENTS
 0x8E84

	)

1784 
	#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
 0x8E85

	)

1785 
	#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
 0x8E86

	)

1786 
	#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
 0x8E89

	)

1787 
	#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
 0x8E8A

	)

1788 
	#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
 0x886C

	)

1789 
	#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
 0x886D

	)

1790 
	#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E1E

	)

1791 
	#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E1F

	)

1792 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
 0x84F0

	)

1793 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x84F1

	)

1794 
	#GL_TESS_EVALUATION_SHADER
 0x8E87

	)

1795 
	#GL_TESS_CONTROL_SHADER
 0x8E88

	)

1796 
	#GL_TRANSFORM_FEEDBACK
 0x8E22

	)

1797 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
 0x8E23

	)

1798 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
 0x8E24

	)

1799 
	#GL_TRANSFORM_FEEDBACK_BINDING
 0x8E25

	)

1800 
	#GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
 0x8E70

	)

1801 (
	tAPIENTRYP
 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

1802 (
	tAPIENTRYP
 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

1803 (
	tAPIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

1804 (
	tAPIENTRYP
 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

1805 (
	tAPIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

1806 (
	tAPIENTRYP
 
	tPFNGLDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
);

1807 (
	tAPIENTRYP
 
	tPFNGLDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
);

1808 (
	tAPIENTRYP
 
	tPFNGLUNIFORM1DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

1809 (
	tAPIENTRYP
 
	tPFNGLUNIFORM2DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1810 (
	tAPIENTRYP
 
	tPFNGLUNIFORM3DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1811 (
	tAPIENTRYP
 
	tPFNGLUNIFORM4DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1812 (
	tAPIENTRYP
 
	tPFNGLUNIFORM1DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1813 (
	tAPIENTRYP
 
	tPFNGLUNIFORM2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1814 (
	tAPIENTRYP
 
	tPFNGLUNIFORM3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1815 (
	tAPIENTRYP
 
	tPFNGLUNIFORM4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1816 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1817 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1818 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1819 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1820 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1821 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1822 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1823 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1824 (
	tAPIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1825 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 *
	t∑øms
);

1826 
	$GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1827 
	$GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1828 (
	tAPIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1829 (
	tAPIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1830 (
	tAPIENTRYP
 
	tPFNGLGETACTIVESUBROUTINENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1831 (
	tAPIENTRYP
 
	tPFNGLUNIFORMSUBROUTINESUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

1832 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMSUBROUTINEUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 *
	t∑øms
);

1833 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMSTAGEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1834 (
	tAPIENTRYP
 
	tPFNGLPATCHPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1835 (
	tAPIENTRYP
 
	tPFNGLPATCHPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆues
);

1836 (
	tAPIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

1837 (
	tAPIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

1838 (
	tAPIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

1839 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKPROC
Ë(
	tGLuöt
 
	tid
);

1840 (
	tAPIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKPROC
) ();

1841 (
	tAPIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKPROC
) ();

1842 (
	tAPIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

1843 (
	tAPIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
);

1844 (
	tAPIENTRYP
 
	tPFNGLBEGINQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tid
);

1845 (
	tAPIENTRYP
 
	tPFNGLENDQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1846 (
	tAPIENTRYP
 
	tPFNGLGETQUERYINDEXEDIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1847 #ifde‡
GL_GLEXT_PROTOTYPES


1848 
GLAPI
 
APIENTRY
 
	`glMöSam∂eShadög
 (
GLÊﬂt
 
vÆue
);

1849 
GLAPI
 
APIENTRY
 
	`glBÀndEqu©i⁄i
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

1850 
GLAPI
 
APIENTRY
 
	`glBÀndEqu©i⁄Sï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

1851 
GLAPI
 
APIENTRY
 
	`glBÀndFunci
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

1852 
GLAPI
 
APIENTRY
 
	`glBÀndFuncSï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

1853 
GLAPI
 
APIENTRY
 
	`glDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
);

1854 
GLAPI
 
APIENTRY
 
	`glDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
);

1855 
GLAPI
 
APIENTRY
 
	`glUnif‹m1d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

1856 
GLAPI
 
APIENTRY
 
	`glUnif‹m2d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

1857 
GLAPI
 
APIENTRY
 
	`glUnif‹m3d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1858 
GLAPI
 
APIENTRY
 
	`glUnif‹m4d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

1859 
GLAPI
 
APIENTRY
 
	`glUnif‹m1dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1860 
GLAPI
 
APIENTRY
 
	`glUnif‹m2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1861 
GLAPI
 
APIENTRY
 
	`glUnif‹m3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1862 
GLAPI
 
APIENTRY
 
	`glUnif‹m4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1863 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1864 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1865 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1866 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix2x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1867 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix2x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1868 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix3x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1869 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix3x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1870 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix4x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1871 
GLAPI
 
APIENTRY
 
	`glUnif‹mM©rix4x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1872 
GLAPI
 
APIENTRY
 
	`glGëUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 *
∑øms
);

1873 
GLAPI
 
GLöt
 
APIENTRY
 
	`glGëSubroutöeUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1874 
GLAPI
 
GLuöt
 
APIENTRY
 
	`glGëSubroutöeIndex
 (GLuöà
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1875 
GLAPI
 
APIENTRY
 
	`glGëA˘iveSubroutöeUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1876 
GLAPI
 
APIENTRY
 
	`glGëA˘iveSubroutöeUnif‹mName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1877 
GLAPI
 
APIENTRY
 
	`glGëA˘iveSubroutöeName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1878 
GLAPI
 
APIENTRY
 
	`glUnif‹mSubroutöesuiv
 (
GLíum
 
shadîty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ödi˚s
);

1879 
GLAPI
 
APIENTRY
 
	`glGëUnif‹mSubroutöeuiv
 (
GLíum
 
shadîty≥
, 
GLöt
 
loˇti⁄
, 
GLuöt
 *
∑øms
);

1880 
GLAPI
 
APIENTRY
 
	`glGëProgømSègeiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1881 
GLAPI
 
APIENTRY
 
	`glP©chP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1882 
GLAPI
 
APIENTRY
 
	`glP©chP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆues
);

1883 
GLAPI
 
APIENTRY
 
	`glBödTønsf‹mFìdback
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

1884 
GLAPI
 
APIENTRY
 
	`glDñëeTønsf‹mFìdbacks
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

1885 
GLAPI
 
APIENTRY
 
	`glGíTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

1886 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsTønsf‹mFìdback
 (
GLuöt
 
id
);

1887 
GLAPI
 
APIENTRY
 
	`glPau£Tønsf‹mFìdback
 ();

1888 
GLAPI
 
APIENTRY
 
	`glResumeTønsf‹mFìdback
 ();

1889 
GLAPI
 
APIENTRY
 
	`glDøwTønsf‹mFìdback
 (
GLíum
 
mode
, 
GLuöt
 
id
);

1890 
GLAPI
 
APIENTRY
 
	`glDøwTønsf‹mFìdbackSåóm
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
);

1891 
GLAPI
 
APIENTRY
 
	`glBegöQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
id
);

1892 
GLAPI
 
APIENTRY
 
	`glEndQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1893 
GLAPI
 
APIENTRY
 
	`glGëQuîyIndexediv
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1897 #i‚de‡
GL_VERSION_4_1


1898 
	#GL_VERSION_4_1
 1

	)

1899 
	#GL_FIXED
 0x140C

	)

1900 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

1901 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

1902 
	#GL_LOW_FLOAT
 0x8DF0

	)

1903 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

1904 
	#GL_HIGH_FLOAT
 0x8DF2

	)

1905 
	#GL_LOW_INT
 0x8DF3

	)

1906 
	#GL_MEDIUM_INT
 0x8DF4

	)

1907 
	#GL_HIGH_INT
 0x8DF5

	)

1908 
	#GL_SHADER_COMPILER
 0x8DFA

	)

1909 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

1910 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

1911 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

1912 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

1913 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

1914 
	#GL_RGB565
 0x8D62

	)

1915 
	#GL_PROGRAM_BINARY_RETRIEVABLE_HINT
 0x8257

	)

1916 
	#GL_PROGRAM_BINARY_LENGTH
 0x8741

	)

1917 
	#GL_NUM_PROGRAM_BINARY_FORMATS
 0x87FE

	)

1918 
	#GL_PROGRAM_BINARY_FORMATS
 0x87FF

	)

1919 
	#GL_VERTEX_SHADER_BIT
 0x00000001

	)

1920 
	#GL_FRAGMENT_SHADER_BIT
 0x00000002

	)

1921 
	#GL_GEOMETRY_SHADER_BIT
 0x00000004

	)

1922 
	#GL_TESS_CONTROL_SHADER_BIT
 0x00000008

	)

1923 
	#GL_TESS_EVALUATION_SHADER_BIT
 0x00000010

	)

1924 
	#GL_ALL_SHADER_BITS
 0xFFFFFFFF

	)

1925 
	#GL_PROGRAM_SEPARABLE
 0x8258

	)

1926 
	#GL_ACTIVE_PROGRAM
 0x8259

	)

1927 
	#GL_PROGRAM_PIPELINE_BINDING
 0x825A

	)

1928 
	#GL_MAX_VIEWPORTS
 0x825B

	)

1929 
	#GL_VIEWPORT_SUBPIXEL_BITS
 0x825C

	)

1930 
	#GL_VIEWPORT_BOUNDS_RANGE
 0x825D

	)

1931 
	#GL_LAYER_PROVOKING_VERTEX
 0x825E

	)

1932 
	#GL_VIEWPORT_INDEX_PROVOKING_VERTEX
 0x825F

	)

1933 
	#GL_UNDEFINED_VERTEX
 0x8260

	)

1934 (
	tAPIENTRYP
 
	tPFNGLRELEASESHADERCOMPILERPROC
) ();

1935 (
	tAPIENTRYP
 
	tPFNGLSHADERBINARYPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tshadîs
, 
	tGLíum
 
	tbö¨yf‹m©
, c⁄° *
	tbö¨y
, GLsizeò
	tÀngth
);

1936 (
	tAPIENTRYP
 
	tPFNGLGETSHADERPRECISIONFORMATPROC
Ë(
	tGLíum
 
	tshadîty≥
, GLíum 
	t¥ecisi⁄ty≥
, 
	tGLöt
 *
	tønge
, GLöà*
	t¥ecisi⁄
);

1937 (
	tAPIENTRYP
 
	tPFNGLDEPTHRANGEFPROC
Ë(
	tGLÊﬂt
 
	tn
, GLÊﬂà
	tf
);

1938 (
	tAPIENTRYP
 
	tPFNGLCLEARDEPTHFPROC
Ë(
	tGLÊﬂt
 
	td
);

1939 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, *
	tbö¨y
);

1940 (
	tAPIENTRYP
 
	tPFNGLPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° *
	tbö¨y
, 
	tGLsizei
 
	tÀngth
);

1941 (
	tAPIENTRYP
 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1942 (
	tAPIENTRYP
 
	tPFNGLUSEPROGRAMSTAGESPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

1943 (
	tAPIENTRYP
 
	tPFNGLACTIVESHADERPROGRAMPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

1944 
	$GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rögs
);

1945 (
	tAPIENTRYP
 
	tPFNGLBINDPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1946 (
	tAPIENTRYP
 
	tPFNGLDELETEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tpùñöes
);

1947 (
	tAPIENTRYP
 
	tPFNGLGENPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

1948 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1949 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEIVPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1950 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

1951 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1952 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

1953 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1954 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
);

1955 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1956 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

1957 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1958 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

1959 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1960 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

1961 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1962 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
);

1963 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1964 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

1965 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1966 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

1967 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1968 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

1969 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1970 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
);

1971 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1972 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1973 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1974 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

1975 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1976 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

1977 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1978 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLdoubÀ 
	tv3
);

1979 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1980 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1981 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1982 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1983 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1984 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1985 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1986 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1987 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1988 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1989 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1990 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1991 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1992 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1993 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1994 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1995 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1996 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1997 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1998 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1999 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

2000 (
	tAPIENTRYP
 
	tPFNGLVALIDATEPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

2001 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEINFOLOGPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

2002 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBL1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

2003 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBL2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

2004 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBL3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

2005 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBL4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

2006 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2007 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2008 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2009 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2010 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

2011 (
	tAPIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

2012 (
	tAPIENTRYP
 
	tPFNGLVIEWPORTARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2013 (
	tAPIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tw
, GLÊﬂà
	th
);

2014 (
	tAPIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2015 (
	tAPIENTRYP
 
	tPFNGLSCISSORARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tv
);

2016 (
	tAPIENTRYP
 
	tPFNGLSCISSORINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tÀ·
, GLöà
	tbŸtom
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2017 (
	tAPIENTRYP
 
	tPFNGLSCISSORINDEXEDVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

2018 (
	tAPIENTRYP
 
	tPFNGLDEPTHRANGEARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2019 (
	tAPIENTRYP
 
	tPFNGLDEPTHRANGEINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tn
, GLdoubÀ 
	tf
);

2020 (
	tAPIENTRYP
 
	tPFNGLGETFLOATI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

2021 (
	tAPIENTRYP
 
	tPFNGLGETDOUBLEI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

2022 #ifde‡
GL_GLEXT_PROTOTYPES


2023 
GLAPI
 
APIENTRY
 
	`glRñó£ShadîCompûî
 ();

2024 
GLAPI
 
APIENTRY
 
	`glShadîBö¨y
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° *
bö¨y
, GLsizeò
Àngth
);

2025 
GLAPI
 
APIENTRY
 
	`glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
 *
ønge
, GLöà*
¥ecisi⁄
);

2026 
GLAPI
 
APIENTRY
 
	`glDïthR™gef
 (
GLÊﬂt
 
n
, GLÊﬂà
f
);

2027 
GLAPI
 
APIENTRY
 
	`glCÀ¨Dïthf
 (
GLÊﬂt
 
d
);

2028 
GLAPI
 
APIENTRY
 
	`glGëProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, *
bö¨y
);

2029 
GLAPI
 
APIENTRY
 
	`glProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° *
bö¨y
, 
GLsizei
 
Àngth
);

2030 
GLAPI
 
APIENTRY
 
	`glProgømP¨amëîi
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

2031 
GLAPI
 
APIENTRY
 
	`glU£ProgømSèges
 (
GLuöt
 
pùñöe
, 
GLbôfõld
 
°ages
, GLuöà
¥ogøm
);

2032 
GLAPI
 
APIENTRY
 
	`glA˘iveShadîProgøm
 (
GLuöt
 
pùñöe
, GLuöà
¥ogøm
);

2033 
GLAPI
 
GLuöt
 
APIENTRY
 
	`glCª©eShadîProgømv
 (
GLíum
 
ty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rögs
);

2034 
GLAPI
 
APIENTRY
 
	`glBödProgømPùñöe
 (
GLuöt
 
pùñöe
);

2035 
GLAPI
 
APIENTRY
 
	`glDñëeProgømPùñöes
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
pùñöes
);

2036 
GLAPI
 
APIENTRY
 
	`glGíProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

2037 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsProgømPùñöe
 (
GLuöt
 
pùñöe
);

2038 
GLAPI
 
APIENTRY
 
	`glGëProgømPùñöeiv
 (
GLuöt
 
pùñöe
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2039 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m1i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

2040 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m1iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2041 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m1f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

2042 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m1fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2043 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m1d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
);

2044 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m1dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2045 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m1ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

2046 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m1uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2047 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m2i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

2048 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m2iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2049 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m2f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

2050 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2051 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m2d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
);

2052 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2053 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m2ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

2054 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m2uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2055 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m3i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

2056 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m3iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2057 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m3f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

2058 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2059 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m3d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
);

2060 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2061 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m3ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

2062 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m3uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2063 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m4i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

2064 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m4iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

2065 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m4f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

2066 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

2067 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m4d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLdoubÀ 
v3
);

2068 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

2069 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m4ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

2070 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹m4uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

2071 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2072 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2073 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2074 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2075 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2076 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2077 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix2x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2078 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix3x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2079 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix2x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2080 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix4x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2081 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix3x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2082 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix4x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2083 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix2x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2084 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix3x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2085 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix2x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2086 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix4x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2087 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix3x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2088 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mM©rix4x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2089 
GLAPI
 
APIENTRY
 
	`glVÆid©eProgømPùñöe
 (
GLuöt
 
pùñöe
);

2090 
GLAPI
 
APIENTRY
 
	`glGëProgømPùñöeInfoLog
 (
GLuöt
 
pùñöe
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

2091 
GLAPI
 
APIENTRY
 
	`glVîãxAâribL1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

2092 
GLAPI
 
APIENTRY
 
	`glVîãxAâribL2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

2093 
GLAPI
 
APIENTRY
 
	`glVîãxAâribL3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

2094 
GLAPI
 
APIENTRY
 
	`glVîãxAâribL4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

2095 
GLAPI
 
APIENTRY
 
	`glVîãxAâribL1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2096 
GLAPI
 
APIENTRY
 
	`glVîãxAâribL2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2097 
GLAPI
 
APIENTRY
 
	`glVîãxAâribL3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2098 
GLAPI
 
APIENTRY
 
	`glVîãxAâribL4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2099 
GLAPI
 
APIENTRY
 
	`glVîãxAâribLPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

2100 
GLAPI
 
APIENTRY
 
	`glGëVîãxAâribLdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

2101 
GLAPI
 
APIENTRY
 
	`glVõwp‹tAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

2102 
GLAPI
 
APIENTRY
 
	`glVõwp‹tIndexedf
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
w
, GLÊﬂà
h
);

2103 
GLAPI
 
APIENTRY
 
	`glVõwp‹tIndexedfv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

2104 
GLAPI
 
APIENTRY
 
	`glSciss‹Aºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
v
);

2105 
GLAPI
 
APIENTRY
 
	`glSciss‹Indexed
 (
GLuöt
 
ödex
, 
GLöt
 
À·
, GLöà
bŸtom
, 
GLsizei
 
width
, GLsizeò
height
);

2106 
GLAPI
 
APIENTRY
 
	`glSciss‹Indexedv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

2107 
GLAPI
 
APIENTRY
 
	`glDïthR™geAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

2108 
GLAPI
 
APIENTRY
 
	`glDïthR™geIndexed
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
n
, GLdoubÀ 
f
);

2109 
GLAPI
 
APIENTRY
 
	`glGëFlﬂti_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

2110 
GLAPI
 
APIENTRY
 
	`glGëDoubÀi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

2114 #i‚de‡
GL_VERSION_4_2


2115 
	#GL_VERSION_4_2
 1

	)

2116 
	#GL_COPY_READ_BUFFER_BINDING
 0x8F36

	)

2117 
	#GL_COPY_WRITE_BUFFER_BINDING
 0x8F37

	)

2118 
	#GL_TRANSFORM_FEEDBACK_ACTIVE
 0x8E24

	)

2119 
	#GL_TRANSFORM_FEEDBACK_PAUSED
 0x8E23

	)

2120 
	#GL_UNPACK_COMPRESSED_BLOCK_WIDTH
 0x9127

	)

2121 
	#GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
 0x9128

	)

2122 
	#GL_UNPACK_COMPRESSED_BLOCK_DEPTH
 0x9129

	)

2123 
	#GL_UNPACK_COMPRESSED_BLOCK_SIZE
 0x912A

	)

2124 
	#GL_PACK_COMPRESSED_BLOCK_WIDTH
 0x912B

	)

2125 
	#GL_PACK_COMPRESSED_BLOCK_HEIGHT
 0x912C

	)

2126 
	#GL_PACK_COMPRESSED_BLOCK_DEPTH
 0x912D

	)

2127 
	#GL_PACK_COMPRESSED_BLOCK_SIZE
 0x912E

	)

2128 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

2129 
	#GL_MIN_MAP_BUFFER_ALIGNMENT
 0x90BC

	)

2130 
	#GL_ATOMIC_COUNTER_BUFFER
 0x92C0

	)

2131 
	#GL_ATOMIC_COUNTER_BUFFER_BINDING
 0x92C1

	)

2132 
	#GL_ATOMIC_COUNTER_BUFFER_START
 0x92C2

	)

2133 
	#GL_ATOMIC_COUNTER_BUFFER_SIZE
 0x92C3

	)

2134 
	#GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
 0x92C4

	)

2135 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
 0x92C5

	)

2136 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
 0x92C6

	)

2137 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
 0x92C7

	)

2138 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
 0x92C8

	)

2139 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x92C9

	)

2140 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
 0x92CA

	)

2141 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
 0x92CB

	)

2142 
	#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
 0x92CC

	)

2143 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
 0x92CD

	)

2144 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
 0x92CE

	)

2145 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
 0x92CF

	)

2146 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
 0x92D0

	)

2147 
	#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
 0x92D1

	)

2148 
	#GL_MAX_VERTEX_ATOMIC_COUNTERS
 0x92D2

	)

2149 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
 0x92D3

	)

2150 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
 0x92D4

	)

2151 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTERS
 0x92D5

	)

2152 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTERS
 0x92D6

	)

2153 
	#GL_MAX_COMBINED_ATOMIC_COUNTERS
 0x92D7

	)

2154 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
 0x92D8

	)

2155 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
 0x92DC

	)

2156 
	#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
 0x92D9

	)

2157 
	#GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
 0x92DA

	)

2158 
	#GL_UNSIGNED_INT_ATOMIC_COUNTER
 0x92DB

	)

2159 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
 0x00000001

	)

2160 
	#GL_ELEMENT_ARRAY_BARRIER_BIT
 0x00000002

	)

2161 
	#GL_UNIFORM_BARRIER_BIT
 0x00000004

	)

2162 
	#GL_TEXTURE_FETCH_BARRIER_BIT
 0x00000008

	)

2163 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
 0x00000020

	)

2164 
	#GL_COMMAND_BARRIER_BIT
 0x00000040

	)

2165 
	#GL_PIXEL_BUFFER_BARRIER_BIT
 0x00000080

	)

2166 
	#GL_TEXTURE_UPDATE_BARRIER_BIT
 0x00000100

	)

2167 
	#GL_BUFFER_UPDATE_BARRIER_BIT
 0x00000200

	)

2168 
	#GL_FRAMEBUFFER_BARRIER_BIT
 0x00000400

	)

2169 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT
 0x00000800

	)

2170 
	#GL_ATOMIC_COUNTER_BARRIER_BIT
 0x00001000

	)

2171 
	#GL_ALL_BARRIER_BITS
 0xFFFFFFFF

	)

2172 
	#GL_MAX_IMAGE_UNITS
 0x8F38

	)

2173 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
 0x8F39

	)

2174 
	#GL_IMAGE_BINDING_NAME
 0x8F3A

	)

2175 
	#GL_IMAGE_BINDING_LEVEL
 0x8F3B

	)

2176 
	#GL_IMAGE_BINDING_LAYERED
 0x8F3C

	)

2177 
	#GL_IMAGE_BINDING_LAYER
 0x8F3D

	)

2178 
	#GL_IMAGE_BINDING_ACCESS
 0x8F3E

	)

2179 
	#GL_IMAGE_1D
 0x904C

	)

2180 
	#GL_IMAGE_2D
 0x904D

	)

2181 
	#GL_IMAGE_3D
 0x904E

	)

2182 
	#GL_IMAGE_2D_RECT
 0x904F

	)

2183 
	#GL_IMAGE_CUBE
 0x9050

	)

2184 
	#GL_IMAGE_BUFFER
 0x9051

	)

2185 
	#GL_IMAGE_1D_ARRAY
 0x9052

	)

2186 
	#GL_IMAGE_2D_ARRAY
 0x9053

	)

2187 
	#GL_IMAGE_CUBE_MAP_ARRAY
 0x9054

	)

2188 
	#GL_IMAGE_2D_MULTISAMPLE
 0x9055

	)

2189 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9056

	)

2190 
	#GL_INT_IMAGE_1D
 0x9057

	)

2191 
	#GL_INT_IMAGE_2D
 0x9058

	)

2192 
	#GL_INT_IMAGE_3D
 0x9059

	)

2193 
	#GL_INT_IMAGE_2D_RECT
 0x905A

	)

2194 
	#GL_INT_IMAGE_CUBE
 0x905B

	)

2195 
	#GL_INT_IMAGE_BUFFER
 0x905C

	)

2196 
	#GL_INT_IMAGE_1D_ARRAY
 0x905D

	)

2197 
	#GL_INT_IMAGE_2D_ARRAY
 0x905E

	)

2198 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY
 0x905F

	)

2199 
	#GL_INT_IMAGE_2D_MULTISAMPLE
 0x9060

	)

2200 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9061

	)

2201 
	#GL_UNSIGNED_INT_IMAGE_1D
 0x9062

	)

2202 
	#GL_UNSIGNED_INT_IMAGE_2D
 0x9063

	)

2203 
	#GL_UNSIGNED_INT_IMAGE_3D
 0x9064

	)

2204 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT
 0x9065

	)

2205 
	#GL_UNSIGNED_INT_IMAGE_CUBE
 0x9066

	)

2206 
	#GL_UNSIGNED_INT_IMAGE_BUFFER
 0x9067

	)

2207 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY
 0x9068

	)

2208 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY
 0x9069

	)

2209 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
 0x906A

	)

2210 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
 0x906B

	)

2211 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x906C

	)

2212 
	#GL_MAX_IMAGE_SAMPLES
 0x906D

	)

2213 
	#GL_IMAGE_BINDING_FORMAT
 0x906E

	)

2214 
	#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
 0x90C7

	)

2215 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
 0x90C8

	)

2216 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
 0x90C9

	)

2217 
	#GL_MAX_VERTEX_IMAGE_UNIFORMS
 0x90CA

	)

2218 
	#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
 0x90CB

	)

2219 
	#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
 0x90CC

	)

2220 
	#GL_MAX_GEOMETRY_IMAGE_UNIFORMS
 0x90CD

	)

2221 
	#GL_MAX_FRAGMENT_IMAGE_UNIFORMS
 0x90CE

	)

2222 
	#GL_MAX_COMBINED_IMAGE_UNIFORMS
 0x90CF

	)

2223 
	#GL_COMPRESSED_RGBA_BPTC_UNORM
 0x8E8C

	)

2224 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
 0x8E8D

	)

2225 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
 0x8E8E

	)

2226 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
 0x8E8F

	)

2227 
	#GL_TEXTURE_IMMUTABLE_FORMAT
 0x912F

	)

2228 (
	tAPIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2229 (
	tAPIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2230 (
	tAPIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
, 
	tGLuöt
 
	tba£ö°™˚
);

2231 (
	tAPIENTRYP
 
	tPFNGLGETINTERNALFORMATIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

2232 (
	tAPIENTRYP
 
	tPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tbuf„rIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2233 (
	tAPIENTRYP
 
	tPFNGLBINDIMAGETEXTUREPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLíum 
	tf‹m©
);

2234 (
	tAPIENTRYP
 
	tPFNGLMEMORYBARRIERPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

2235 (
	tAPIENTRYP
 
	tPFNGLTEXSTORAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

2236 (
	tAPIENTRYP
 
	tPFNGLTEXSTORAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2237 (
	tAPIENTRYP
 
	tPFNGLTEXSTORAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2238 (
	tAPIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tö°™˚cou¡
);

2239 (
	tAPIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
, 
	tGLsizei
 
	tö°™˚cou¡
);

2240 #ifde‡
GL_GLEXT_PROTOTYPES


2241 
GLAPI
 
APIENTRY
 
	`glDøwAºaysIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2242 
GLAPI
 
APIENTRY
 
	`glDøwEÀmítsIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2243 
GLAPI
 
APIENTRY
 
	`glDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
, 
GLuöt
 
ba£ö°™˚
);

2244 
GLAPI
 
APIENTRY
 
	`glGëI¡î«lf‹m©iv
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt
 *
∑øms
);

2245 
GLAPI
 
APIENTRY
 
	`glGëA˘iveAtomicCou¡îBuf„riv
 (
GLuöt
 
¥ogøm
, GLuöà
buf„rIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2246 
GLAPI
 
APIENTRY
 
	`glBödImageTextuª
 (
GLuöt
 
unô
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLíum 
f‹m©
);

2247 
GLAPI
 
APIENTRY
 
	`glMem‹yB¨rõr
 (
GLbôfõld
 
b¨rõrs
);

2248 
GLAPI
 
APIENTRY
 
	`glTexSt‹age1D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

2249 
GLAPI
 
APIENTRY
 
	`glTexSt‹age2D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2250 
GLAPI
 
APIENTRY
 
	`glTexSt‹age3D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

2251 
GLAPI
 
APIENTRY
 
	`glDøwTønsf‹mFìdbackIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, 
GLsizei
 
ö°™˚cou¡
);

2252 
GLAPI
 
APIENTRY
 
	`glDøwTønsf‹mFìdbackSåómIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
, 
GLsizei
 
ö°™˚cou¡
);

2256 #i‚de‡
GL_VERSION_4_3


2257 
	#GL_VERSION_4_3
 1

	)

2258 (
	tAPIENTRY
 *
	tGLDEBUGPROC
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

2259 
	#GL_NUM_SHADING_LANGUAGE_VERSIONS
 0x82E9

	)

2260 
	#GL_VERTEX_ATTRIB_ARRAY_LONG
 0x874E

	)

2261 
	#GL_COMPRESSED_RGB8_ETC2
 0x9274

	)

2262 
	#GL_COMPRESSED_SRGB8_ETC2
 0x9275

	)

2263 
	#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9276

	)

2264 
	#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9277

	)

2265 
	#GL_COMPRESSED_RGBA8_ETC2_EAC
 0x9278

	)

2266 
	#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
 0x9279

	)

2267 
	#GL_COMPRESSED_R11_EAC
 0x9270

	)

2268 
	#GL_COMPRESSED_SIGNED_R11_EAC
 0x9271

	)

2269 
	#GL_COMPRESSED_RG11_EAC
 0x9272

	)

2270 
	#GL_COMPRESSED_SIGNED_RG11_EAC
 0x9273

	)

2271 
	#GL_PRIMITIVE_RESTART_FIXED_INDEX
 0x8D69

	)

2272 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE
 0x8D6A

	)

2273 
	#GL_MAX_ELEMENT_INDEX
 0x8D6B

	)

2274 
	#GL_COMPUTE_SHADER
 0x91B9

	)

2275 
	#GL_MAX_COMPUTE_UNIFORM_BLOCKS
 0x91BB

	)

2276 
	#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
 0x91BC

	)

2277 
	#GL_MAX_COMPUTE_IMAGE_UNIFORMS
 0x91BD

	)

2278 
	#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
 0x8262

	)

2279 
	#GL_MAX_COMPUTE_UNIFORM_COMPONENTS
 0x8263

	)

2280 
	#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
 0x8264

	)

2281 
	#GL_MAX_COMPUTE_ATOMIC_COUNTERS
 0x8265

	)

2282 
	#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
 0x8266

	)

2283 
	#GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
 0x90EB

	)

2284 
	#GL_MAX_COMPUTE_WORK_GROUP_COUNT
 0x91BE

	)

2285 
	#GL_MAX_COMPUTE_WORK_GROUP_SIZE
 0x91BF

	)

2286 
	#GL_COMPUTE_WORK_GROUP_SIZE
 0x8267

	)

2287 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
 0x90EC

	)

2288 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
 0x90ED

	)

2289 
	#GL_DISPATCH_INDIRECT_BUFFER
 0x90EE

	)

2290 
	#GL_DISPATCH_INDIRECT_BUFFER_BINDING
 0x90EF

	)

2291 
	#GL_COMPUTE_SHADER_BIT
 0x00000020

	)

2292 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS
 0x8242

	)

2293 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
 0x8243

	)

2294 
	#GL_DEBUG_CALLBACK_FUNCTION
 0x8244

	)

2295 
	#GL_DEBUG_CALLBACK_USER_PARAM
 0x8245

	)

2296 
	#GL_DEBUG_SOURCE_API
 0x8246

	)

2297 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM
 0x8247

	)

2298 
	#GL_DEBUG_SOURCE_SHADER_COMPILER
 0x8248

	)

2299 
	#GL_DEBUG_SOURCE_THIRD_PARTY
 0x8249

	)

2300 
	#GL_DEBUG_SOURCE_APPLICATION
 0x824A

	)

2301 
	#GL_DEBUG_SOURCE_OTHER
 0x824B

	)

2302 
	#GL_DEBUG_TYPE_ERROR
 0x824C

	)

2303 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
 0x824D

	)

2304 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
 0x824E

	)

2305 
	#GL_DEBUG_TYPE_PORTABILITY
 0x824F

	)

2306 
	#GL_DEBUG_TYPE_PERFORMANCE
 0x8250

	)

2307 
	#GL_DEBUG_TYPE_OTHER
 0x8251

	)

2308 
	#GL_MAX_DEBUG_MESSAGE_LENGTH
 0x9143

	)

2309 
	#GL_MAX_DEBUG_LOGGED_MESSAGES
 0x9144

	)

2310 
	#GL_DEBUG_LOGGED_MESSAGES
 0x9145

	)

2311 
	#GL_DEBUG_SEVERITY_HIGH
 0x9146

	)

2312 
	#GL_DEBUG_SEVERITY_MEDIUM
 0x9147

	)

2313 
	#GL_DEBUG_SEVERITY_LOW
 0x9148

	)

2314 
	#GL_DEBUG_TYPE_MARKER
 0x8268

	)

2315 
	#GL_DEBUG_TYPE_PUSH_GROUP
 0x8269

	)

2316 
	#GL_DEBUG_TYPE_POP_GROUP
 0x826A

	)

2317 
	#GL_DEBUG_SEVERITY_NOTIFICATION
 0x826B

	)

2318 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH
 0x826C

	)

2319 
	#GL_DEBUG_GROUP_STACK_DEPTH
 0x826D

	)

2320 
	#GL_BUFFER
 0x82E0

	)

2321 
	#GL_SHADER
 0x82E1

	)

2322 
	#GL_PROGRAM
 0x82E2

	)

2323 
	#GL_QUERY
 0x82E3

	)

2324 
	#GL_PROGRAM_PIPELINE
 0x82E4

	)

2325 
	#GL_SAMPLER
 0x82E6

	)

2326 
	#GL_MAX_LABEL_LENGTH
 0x82E8

	)

2327 
	#GL_DEBUG_OUTPUT
 0x92E0

	)

2328 
	#GL_CONTEXT_FLAG_DEBUG_BIT
 0x00000002

	)

2329 
	#GL_MAX_UNIFORM_LOCATIONS
 0x826E

	)

2330 
	#GL_FRAMEBUFFER_DEFAULT_WIDTH
 0x9310

	)

2331 
	#GL_FRAMEBUFFER_DEFAULT_HEIGHT
 0x9311

	)

2332 
	#GL_FRAMEBUFFER_DEFAULT_LAYERS
 0x9312

	)

2333 
	#GL_FRAMEBUFFER_DEFAULT_SAMPLES
 0x9313

	)

2334 
	#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
 0x9314

	)

2335 
	#GL_MAX_FRAMEBUFFER_WIDTH
 0x9315

	)

2336 
	#GL_MAX_FRAMEBUFFER_HEIGHT
 0x9316

	)

2337 
	#GL_MAX_FRAMEBUFFER_LAYERS
 0x9317

	)

2338 
	#GL_MAX_FRAMEBUFFER_SAMPLES
 0x9318

	)

2339 
	#GL_INTERNALFORMAT_SUPPORTED
 0x826F

	)

2340 
	#GL_INTERNALFORMAT_PREFERRED
 0x8270

	)

2341 
	#GL_INTERNALFORMAT_RED_SIZE
 0x8271

	)

2342 
	#GL_INTERNALFORMAT_GREEN_SIZE
 0x8272

	)

2343 
	#GL_INTERNALFORMAT_BLUE_SIZE
 0x8273

	)

2344 
	#GL_INTERNALFORMAT_ALPHA_SIZE
 0x8274

	)

2345 
	#GL_INTERNALFORMAT_DEPTH_SIZE
 0x8275

	)

2346 
	#GL_INTERNALFORMAT_STENCIL_SIZE
 0x8276

	)

2347 
	#GL_INTERNALFORMAT_SHARED_SIZE
 0x8277

	)

2348 
	#GL_INTERNALFORMAT_RED_TYPE
 0x8278

	)

2349 
	#GL_INTERNALFORMAT_GREEN_TYPE
 0x8279

	)

2350 
	#GL_INTERNALFORMAT_BLUE_TYPE
 0x827A

	)

2351 
	#GL_INTERNALFORMAT_ALPHA_TYPE
 0x827B

	)

2352 
	#GL_INTERNALFORMAT_DEPTH_TYPE
 0x827C

	)

2353 
	#GL_INTERNALFORMAT_STENCIL_TYPE
 0x827D

	)

2354 
	#GL_MAX_WIDTH
 0x827E

	)

2355 
	#GL_MAX_HEIGHT
 0x827F

	)

2356 
	#GL_MAX_DEPTH
 0x8280

	)

2357 
	#GL_MAX_LAYERS
 0x8281

	)

2358 
	#GL_MAX_COMBINED_DIMENSIONS
 0x8282

	)

2359 
	#GL_COLOR_COMPONENTS
 0x8283

	)

2360 
	#GL_DEPTH_COMPONENTS
 0x8284

	)

2361 
	#GL_STENCIL_COMPONENTS
 0x8285

	)

2362 
	#GL_COLOR_RENDERABLE
 0x8286

	)

2363 
	#GL_DEPTH_RENDERABLE
 0x8287

	)

2364 
	#GL_STENCIL_RENDERABLE
 0x8288

	)

2365 
	#GL_FRAMEBUFFER_RENDERABLE
 0x8289

	)

2366 
	#GL_FRAMEBUFFER_RENDERABLE_LAYERED
 0x828A

	)

2367 
	#GL_FRAMEBUFFER_BLEND
 0x828B

	)

2368 
	#GL_READ_PIXELS
 0x828C

	)

2369 
	#GL_READ_PIXELS_FORMAT
 0x828D

	)

2370 
	#GL_READ_PIXELS_TYPE
 0x828E

	)

2371 
	#GL_TEXTURE_IMAGE_FORMAT
 0x828F

	)

2372 
	#GL_TEXTURE_IMAGE_TYPE
 0x8290

	)

2373 
	#GL_GET_TEXTURE_IMAGE_FORMAT
 0x8291

	)

2374 
	#GL_GET_TEXTURE_IMAGE_TYPE
 0x8292

	)

2375 
	#GL_MIPMAP
 0x8293

	)

2376 
	#GL_MANUAL_GENERATE_MIPMAP
 0x8294

	)

2377 
	#GL_AUTO_GENERATE_MIPMAP
 0x8295

	)

2378 
	#GL_COLOR_ENCODING
 0x8296

	)

2379 
	#GL_SRGB_READ
 0x8297

	)

2380 
	#GL_SRGB_WRITE
 0x8298

	)

2381 
	#GL_FILTER
 0x829A

	)

2382 
	#GL_VERTEX_TEXTURE
 0x829B

	)

2383 
	#GL_TESS_CONTROL_TEXTURE
 0x829C

	)

2384 
	#GL_TESS_EVALUATION_TEXTURE
 0x829D

	)

2385 
	#GL_GEOMETRY_TEXTURE
 0x829E

	)

2386 
	#GL_FRAGMENT_TEXTURE
 0x829F

	)

2387 
	#GL_COMPUTE_TEXTURE
 0x82A0

	)

2388 
	#GL_TEXTURE_SHADOW
 0x82A1

	)

2389 
	#GL_TEXTURE_GATHER
 0x82A2

	)

2390 
	#GL_TEXTURE_GATHER_SHADOW
 0x82A3

	)

2391 
	#GL_SHADER_IMAGE_LOAD
 0x82A4

	)

2392 
	#GL_SHADER_IMAGE_STORE
 0x82A5

	)

2393 
	#GL_SHADER_IMAGE_ATOMIC
 0x82A6

	)

2394 
	#GL_IMAGE_TEXEL_SIZE
 0x82A7

	)

2395 
	#GL_IMAGE_COMPATIBILITY_CLASS
 0x82A8

	)

2396 
	#GL_IMAGE_PIXEL_FORMAT
 0x82A9

	)

2397 
	#GL_IMAGE_PIXEL_TYPE
 0x82AA

	)

2398 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
 0x82AC

	)

2399 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
 0x82AD

	)

2400 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
 0x82AE

	)

2401 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
 0x82AF

	)

2402 
	#GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
 0x82B1

	)

2403 
	#GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
 0x82B2

	)

2404 
	#GL_TEXTURE_COMPRESSED_BLOCK_SIZE
 0x82B3

	)

2405 
	#GL_CLEAR_BUFFER
 0x82B4

	)

2406 
	#GL_TEXTURE_VIEW
 0x82B5

	)

2407 
	#GL_VIEW_COMPATIBILITY_CLASS
 0x82B6

	)

2408 
	#GL_FULL_SUPPORT
 0x82B7

	)

2409 
	#GL_CAVEAT_SUPPORT
 0x82B8

	)

2410 
	#GL_IMAGE_CLASS_4_X_32
 0x82B9

	)

2411 
	#GL_IMAGE_CLASS_2_X_32
 0x82BA

	)

2412 
	#GL_IMAGE_CLASS_1_X_32
 0x82BB

	)

2413 
	#GL_IMAGE_CLASS_4_X_16
 0x82BC

	)

2414 
	#GL_IMAGE_CLASS_2_X_16
 0x82BD

	)

2415 
	#GL_IMAGE_CLASS_1_X_16
 0x82BE

	)

2416 
	#GL_IMAGE_CLASS_4_X_8
 0x82BF

	)

2417 
	#GL_IMAGE_CLASS_2_X_8
 0x82C0

	)

2418 
	#GL_IMAGE_CLASS_1_X_8
 0x82C1

	)

2419 
	#GL_IMAGE_CLASS_11_11_10
 0x82C2

	)

2420 
	#GL_IMAGE_CLASS_10_10_10_2
 0x82C3

	)

2421 
	#GL_VIEW_CLASS_128_BITS
 0x82C4

	)

2422 
	#GL_VIEW_CLASS_96_BITS
 0x82C5

	)

2423 
	#GL_VIEW_CLASS_64_BITS
 0x82C6

	)

2424 
	#GL_VIEW_CLASS_48_BITS
 0x82C7

	)

2425 
	#GL_VIEW_CLASS_32_BITS
 0x82C8

	)

2426 
	#GL_VIEW_CLASS_24_BITS
 0x82C9

	)

2427 
	#GL_VIEW_CLASS_16_BITS
 0x82CA

	)

2428 
	#GL_VIEW_CLASS_8_BITS
 0x82CB

	)

2429 
	#GL_VIEW_CLASS_S3TC_DXT1_RGB
 0x82CC

	)

2430 
	#GL_VIEW_CLASS_S3TC_DXT1_RGBA
 0x82CD

	)

2431 
	#GL_VIEW_CLASS_S3TC_DXT3_RGBA
 0x82CE

	)

2432 
	#GL_VIEW_CLASS_S3TC_DXT5_RGBA
 0x82CF

	)

2433 
	#GL_VIEW_CLASS_RGTC1_RED
 0x82D0

	)

2434 
	#GL_VIEW_CLASS_RGTC2_RG
 0x82D1

	)

2435 
	#GL_VIEW_CLASS_BPTC_UNORM
 0x82D2

	)

2436 
	#GL_VIEW_CLASS_BPTC_FLOAT
 0x82D3

	)

2437 
	#GL_UNIFORM
 0x92E1

	)

2438 
	#GL_UNIFORM_BLOCK
 0x92E2

	)

2439 
	#GL_PROGRAM_INPUT
 0x92E3

	)

2440 
	#GL_PROGRAM_OUTPUT
 0x92E4

	)

2441 
	#GL_BUFFER_VARIABLE
 0x92E5

	)

2442 
	#GL_SHADER_STORAGE_BLOCK
 0x92E6

	)

2443 
	#GL_VERTEX_SUBROUTINE
 0x92E8

	)

2444 
	#GL_TESS_CONTROL_SUBROUTINE
 0x92E9

	)

2445 
	#GL_TESS_EVALUATION_SUBROUTINE
 0x92EA

	)

2446 
	#GL_GEOMETRY_SUBROUTINE
 0x92EB

	)

2447 
	#GL_FRAGMENT_SUBROUTINE
 0x92EC

	)

2448 
	#GL_COMPUTE_SUBROUTINE
 0x92ED

	)

2449 
	#GL_VERTEX_SUBROUTINE_UNIFORM
 0x92EE

	)

2450 
	#GL_TESS_CONTROL_SUBROUTINE_UNIFORM
 0x92EF

	)

2451 
	#GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
 0x92F0

	)

2452 
	#GL_GEOMETRY_SUBROUTINE_UNIFORM
 0x92F1

	)

2453 
	#GL_FRAGMENT_SUBROUTINE_UNIFORM
 0x92F2

	)

2454 
	#GL_COMPUTE_SUBROUTINE_UNIFORM
 0x92F3

	)

2455 
	#GL_TRANSFORM_FEEDBACK_VARYING
 0x92F4

	)

2456 
	#GL_ACTIVE_RESOURCES
 0x92F5

	)

2457 
	#GL_MAX_NAME_LENGTH
 0x92F6

	)

2458 
	#GL_MAX_NUM_ACTIVE_VARIABLES
 0x92F7

	)

2459 
	#GL_MAX_NUM_COMPATIBLE_SUBROUTINES
 0x92F8

	)

2460 
	#GL_NAME_LENGTH
 0x92F9

	)

2461 
	#GL_TYPE
 0x92FA

	)

2462 
	#GL_ARRAY_SIZE
 0x92FB

	)

2463 
	#GL_OFFSET
 0x92FC

	)

2464 
	#GL_BLOCK_INDEX
 0x92FD

	)

2465 
	#GL_ARRAY_STRIDE
 0x92FE

	)

2466 
	#GL_MATRIX_STRIDE
 0x92FF

	)

2467 
	#GL_IS_ROW_MAJOR
 0x9300

	)

2468 
	#GL_ATOMIC_COUNTER_BUFFER_INDEX
 0x9301

	)

2469 
	#GL_BUFFER_BINDING
 0x9302

	)

2470 
	#GL_BUFFER_DATA_SIZE
 0x9303

	)

2471 
	#GL_NUM_ACTIVE_VARIABLES
 0x9304

	)

2472 
	#GL_ACTIVE_VARIABLES
 0x9305

	)

2473 
	#GL_REFERENCED_BY_VERTEX_SHADER
 0x9306

	)

2474 
	#GL_REFERENCED_BY_TESS_CONTROL_SHADER
 0x9307

	)

2475 
	#GL_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x9308

	)

2476 
	#GL_REFERENCED_BY_GEOMETRY_SHADER
 0x9309

	)

2477 
	#GL_REFERENCED_BY_FRAGMENT_SHADER
 0x930A

	)

2478 
	#GL_REFERENCED_BY_COMPUTE_SHADER
 0x930B

	)

2479 
	#GL_TOP_LEVEL_ARRAY_SIZE
 0x930C

	)

2480 
	#GL_TOP_LEVEL_ARRAY_STRIDE
 0x930D

	)

2481 
	#GL_LOCATION
 0x930E

	)

2482 
	#GL_LOCATION_INDEX
 0x930F

	)

2483 
	#GL_IS_PER_PATCH
 0x92E7

	)

2484 
	#GL_SHADER_STORAGE_BUFFER
 0x90D2

	)

2485 
	#GL_SHADER_STORAGE_BUFFER_BINDING
 0x90D3

	)

2486 
	#GL_SHADER_STORAGE_BUFFER_START
 0x90D4

	)

2487 
	#GL_SHADER_STORAGE_BUFFER_SIZE
 0x90D5

	)

2488 
	#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
 0x90D6

	)

2489 
	#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
 0x90D7

	)

2490 
	#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
 0x90D8

	)

2491 
	#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
 0x90D9

	)

2492 
	#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
 0x90DA

	)

2493 
	#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
 0x90DB

	)

2494 
	#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
 0x90DC

	)

2495 
	#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
 0x90DD

	)

2496 
	#GL_MAX_SHADER_STORAGE_BLOCK_SIZE
 0x90DE

	)

2497 
	#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
 0x90DF

	)

2498 
	#GL_SHADER_STORAGE_BARRIER_BIT
 0x00002000

	)

2499 
	#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
 0x8F39

	)

2500 
	#GL_DEPTH_STENCIL_TEXTURE_MODE
 0x90EA

	)

2501 
	#GL_TEXTURE_BUFFER_OFFSET
 0x919D

	)

2502 
	#GL_TEXTURE_BUFFER_SIZE
 0x919E

	)

2503 
	#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
 0x919F

	)

2504 
	#GL_TEXTURE_VIEW_MIN_LEVEL
 0x82DB

	)

2505 
	#GL_TEXTURE_VIEW_NUM_LEVELS
 0x82DC

	)

2506 
	#GL_TEXTURE_VIEW_MIN_LAYER
 0x82DD

	)

2507 
	#GL_TEXTURE_VIEW_NUM_LAYERS
 0x82DE

	)

2508 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

2509 
	#GL_VERTEX_ATTRIB_BINDING
 0x82D4

	)

2510 
	#GL_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D5

	)

2511 
	#GL_VERTEX_BINDING_DIVISOR
 0x82D6

	)

2512 
	#GL_VERTEX_BINDING_OFFSET
 0x82D7

	)

2513 
	#GL_VERTEX_BINDING_STRIDE
 0x82D8

	)

2514 
	#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D9

	)

2515 
	#GL_MAX_VERTEX_ATTRIB_BINDINGS
 0x82DA

	)

2516 
	#GL_VERTEX_BINDING_BUFFER
 0x8F4F

	)

2517 (
	tAPIENTRYP
 
	tPFNGLCLEARBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2518 (
	tAPIENTRYP
 
	tPFNGLCLEARBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2519 (
	tAPIENTRYP
 
	tPFNGLDISPATCHCOMPUTEPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
);

2520 (
	tAPIENTRYP
 
	tPFNGLDISPATCHCOMPUTEINDIRECTPROC
Ë(
	tGLöçå
 
	tödúe˘
);

2521 (
	tAPIENTRYP
 
	tPFNGLCOPYIMAGESUBDATAPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	t§cWidth
, GLsizeò
	t§cHeight
, GLsizeò
	t§cDïth
);

2522 (
	tAPIENTRYP
 
	tPFNGLFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2523 (
	tAPIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2524 (
	tAPIENTRYP
 
	tPFNGLGETINTERNALFORMATI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

2525 (
	tAPIENTRYP
 
	tPFNGLINVALIDATETEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2526 (
	tAPIENTRYP
 
	tPFNGLINVALIDATETEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

2527 (
	tAPIENTRYP
 
	tPFNGLINVALIDATEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

2528 (
	tAPIENTRYP
 
	tPFNGLINVALIDATEBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
);

2529 (
	tAPIENTRYP
 
	tPFNGLINVALIDATEFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

2530 (
	tAPIENTRYP
 
	tPFNGLINVALIDATESUBFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

2531 (
	tAPIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2532 (
	tAPIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2533 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMINTERFACEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2534 
	$GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2535 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

2536 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	t∑øms
);

2537 
	$GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2538 
	$GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2539 (
	tAPIENTRYP
 
	tPFNGLSHADERSTORAGEBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	t°‹ageBlockIndex
, GLuöà
	t°‹ageBlockBödög
);

2540 (
	tAPIENTRYP
 
	tPFNGLTEXBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2541 (
	tAPIENTRYP
 
	tPFNGLTEXSTORAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2542 (
	tAPIENTRYP
 
	tPFNGLTEXSTORAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2543 (
	tAPIENTRYP
 
	tPFNGLTEXTUREVIEWPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	t‹igãxtuª
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tmöÀvñ
, GLuöà
	tnumÀvñs
, GLuöà
	tmöœyî
, GLuöà
	tnumœyîs
);

2544 (
	tAPIENTRYP
 
	tPFNGLBINDVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

2545 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

2546 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2547 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2548 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	t©åibödex
, GLuöà
	tbödögödex
);

2549 (
	tAPIENTRYP
 
	tPFNGLVERTEXBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tdivis‹
);

2550 (
	tAPIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

2551 (
	tAPIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

2552 (
	tAPIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKPROC
Ë(
	tGLDEBUGPROC
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

2553 
	$GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

2554 (
	tAPIENTRYP
 
	tPFNGLPUSHDEBUGGROUPPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tmesßge
);

2555 (
	tAPIENTRYP
 
	tPFNGLPOPDEBUGGROUPPROC
) ();

2556 (
	tAPIENTRYP
 
	tPFNGLOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2557 (
	tAPIENTRYP
 
	tPFNGLGETOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2558 (
	tAPIENTRYP
 
	tPFNGLOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2559 (
	tAPIENTRYP
 
	tPFNGLGETOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2560 #ifde‡
GL_GLEXT_PROTOTYPES


2561 
GLAPI
 
APIENTRY
 
	`glCÀ¨Buf„rD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2562 
GLAPI
 
APIENTRY
 
	`glCÀ¨Buf„rSubD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2563 
GLAPI
 
APIENTRY
 
	`glDi•©chCompuã
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
);

2564 
GLAPI
 
APIENTRY
 
	`glDi•©chCompuãIndúe˘
 (
GLöçå
 
ödúe˘
);

2565 
GLAPI
 
APIENTRY
 
	`glC›yImageSubD©a
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
§cWidth
, GLsizeò
§cHeight
, GLsizeò
§cDïth
);

2566 
GLAPI
 
APIENTRY
 
	`glFømebuf„rP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

2567 
GLAPI
 
APIENTRY
 
	`glGëFømebuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2568 
GLAPI
 
APIENTRY
 
	`glGëI¡î«lf‹m©i64v
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

2569 
GLAPI
 
APIENTRY
 
	`glInvÆid©eTexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

2570 
GLAPI
 
APIENTRY
 
	`glInvÆid©eTexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

2571 
GLAPI
 
APIENTRY
 
	`glInvÆid©eBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

2572 
GLAPI
 
APIENTRY
 
	`glInvÆid©eBuf„rD©a
 (
GLuöt
 
buf„r
);

2573 
GLAPI
 
APIENTRY
 
	`glInvÆid©eFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

2574 
GLAPI
 
APIENTRY
 
	`glInvÆid©eSubFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

2575 
GLAPI
 
APIENTRY
 
	`glMu…iDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2576 
GLAPI
 
APIENTRY
 
	`glMu…iDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2577 
GLAPI
 
APIENTRY
 
	`glGëProgømI¡îÁ˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2578 
GLAPI
 
GLuöt
 
APIENTRY
 
	`glGëProgømResour˚Index
 (GLuöà
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2579 
GLAPI
 
APIENTRY
 
	`glGëProgømResour˚Name
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

2580 
GLAPI
 
APIENTRY
 
	`glGëProgømResour˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
∑øms
);

2581 
GLAPI
 
GLöt
 
APIENTRY
 
	`glGëProgømResour˚Loˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2582 
GLAPI
 
GLöt
 
APIENTRY
 
	`glGëProgømResour˚Loˇti⁄Index
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2583 
GLAPI
 
APIENTRY
 
	`glShadîSt‹ageBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
°‹ageBlockIndex
, GLuöà
°‹ageBlockBödög
);

2584 
GLAPI
 
APIENTRY
 
	`glTexBuf„rR™ge
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2585 
GLAPI
 
APIENTRY
 
	`glTexSt‹age2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2586 
GLAPI
 
APIENTRY
 
	`glTexSt‹age3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2587 
GLAPI
 
APIENTRY
 
	`glTextuªVõw
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
‹igãxtuª
, GLíum 
öã∫Æf‹m©
, GLuöà
möÀvñ
, GLuöà
numÀvñs
, GLuöà
möœyî
, GLuöà
numœyîs
);

2588 
GLAPI
 
APIENTRY
 
	`glBödVîãxBuf„r
 (
GLuöt
 
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

2589 
GLAPI
 
APIENTRY
 
	`glVîãxAâribF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

2590 
GLAPI
 
APIENTRY
 
	`glVîãxAâribIF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2591 
GLAPI
 
APIENTRY
 
	`glVîãxAâribLF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2592 
GLAPI
 
APIENTRY
 
	`glVîãxAâribBödög
 (
GLuöt
 
©åibödex
, GLuöà
bödögödex
);

2593 
GLAPI
 
APIENTRY
 
	`glVîãxBödögDivis‹
 (
GLuöt
 
bödögödex
, GLuöà
divis‹
);

2594 
GLAPI
 
APIENTRY
 
	`glDebugMesßgeC⁄åﬁ
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

2595 
GLAPI
 
APIENTRY
 
	`glDebugMesßgeIn£π
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

2596 
GLAPI
 
APIENTRY
 
	`glDebugMesßgeCÆlback
 (
GLDEBUGPROC
 
ˇŒback
, c⁄° *
u£rP¨am
);

2597 
GLAPI
 
GLuöt
 
APIENTRY
 
	`glGëDebugMesßgeLog
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

2598 
GLAPI
 
APIENTRY
 
	`glPushDebugGroup
 (
GLíum
 
sour˚
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
mesßge
);

2599 
GLAPI
 
APIENTRY
 
	`glP›DebugGroup
 ();

2600 
GLAPI
 
APIENTRY
 
	`glObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2601 
GLAPI
 
APIENTRY
 
	`glGëObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2602 
GLAPI
 
APIENTRY
 
	`glObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2603 
GLAPI
 
APIENTRY
 
	`glGëObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2607 #i‚de‡
GL_VERSION_4_4


2608 
	#GL_VERSION_4_4
 1

	)

2609 
	#GL_MAX_VERTEX_ATTRIB_STRIDE
 0x82E5

	)

2610 
	#GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
 0x8221

	)

2611 
	#GL_TEXTURE_BUFFER_BINDING
 0x8C2A

	)

2612 
	#GL_MAP_PERSISTENT_BIT
 0x0040

	)

2613 
	#GL_MAP_COHERENT_BIT
 0x0080

	)

2614 
	#GL_DYNAMIC_STORAGE_BIT
 0x0100

	)

2615 
	#GL_CLIENT_STORAGE_BIT
 0x0200

	)

2616 
	#GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
 0x00004000

	)

2617 
	#GL_BUFFER_IMMUTABLE_STORAGE
 0x821F

	)

2618 
	#GL_BUFFER_STORAGE_FLAGS
 0x8220

	)

2619 
	#GL_CLEAR_TEXTURE
 0x9365

	)

2620 
	#GL_LOCATION_COMPONENT
 0x934A

	)

2621 
	#GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
 0x934B

	)

2622 
	#GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
 0x934C

	)

2623 
	#GL_QUERY_BUFFER
 0x9192

	)

2624 
	#GL_QUERY_BUFFER_BARRIER_BIT
 0x00008000

	)

2625 
	#GL_QUERY_BUFFER_BINDING
 0x9193

	)

2626 
	#GL_QUERY_RESULT_NO_WAIT
 0x9194

	)

2627 
	#GL_MIRROR_CLAMP_TO_EDGE
 0x8743

	)

2628 (
	tAPIENTRYP
 
	tPFNGLBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

2629 (
	tAPIENTRYP
 
	tPFNGLCLEARTEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2630 (
	tAPIENTRYP
 
	tPFNGLCLEARTEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2631 (
	tAPIENTRYP
 
	tPFNGLBINDBUFFERSBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
);

2632 (
	tAPIENTRYP
 
	tPFNGLBINDBUFFERSRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° 
	tGLsizeùå
 *
	tsizes
);

2633 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2634 (
	tAPIENTRYP
 
	tPFNGLBINDSAMPLERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tßm∂îs
);

2635 (
	tAPIENTRYP
 
	tPFNGLBINDIMAGETEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2636 (
	tAPIENTRYP
 
	tPFNGLBINDVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

2637 #ifde‡
GL_GLEXT_PROTOTYPES


2638 
GLAPI
 
APIENTRY
 
	`glBuf„rSt‹age
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

2639 
GLAPI
 
APIENTRY
 
	`glCÀ¨TexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2640 
GLAPI
 
APIENTRY
 
	`glCÀ¨TexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2641 
GLAPI
 
APIENTRY
 
	`glBödBuf„rsBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
);

2642 
GLAPI
 
APIENTRY
 
	`glBödBuf„rsR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° 
GLsizeùå
 *
sizes
);

2643 
GLAPI
 
APIENTRY
 
	`glBödTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2644 
GLAPI
 
APIENTRY
 
	`glBödSam∂îs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ßm∂îs
);

2645 
GLAPI
 
APIENTRY
 
	`glBödImageTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2646 
GLAPI
 
APIENTRY
 
	`glBödVîãxBuf„rs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° GLsizeò*
°rides
);

2650 #i‚de‡
GL_VERSION_4_5


2651 
	#GL_VERSION_4_5
 1

	)

2652 
	#GL_CONTEXT_LOST
 0x0507

	)

2653 
	#GL_NEGATIVE_ONE_TO_ONE
 0x935E

	)

2654 
	#GL_ZERO_TO_ONE
 0x935F

	)

2655 
	#GL_CLIP_ORIGIN
 0x935C

	)

2656 
	#GL_CLIP_DEPTH_MODE
 0x935D

	)

2657 
	#GL_QUERY_WAIT_INVERTED
 0x8E17

	)

2658 
	#GL_QUERY_NO_WAIT_INVERTED
 0x8E18

	)

2659 
	#GL_QUERY_BY_REGION_WAIT_INVERTED
 0x8E19

	)

2660 
	#GL_QUERY_BY_REGION_NO_WAIT_INVERTED
 0x8E1A

	)

2661 
	#GL_MAX_CULL_DISTANCES
 0x82F9

	)

2662 
	#GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES
 0x82FA

	)

2663 
	#GL_TEXTURE_TARGET
 0x1006

	)

2664 
	#GL_QUERY_TARGET
 0x82EA

	)

2665 
	#GL_GUILTY_CONTEXT_RESET
 0x8253

	)

2666 
	#GL_INNOCENT_CONTEXT_RESET
 0x8254

	)

2667 
	#GL_UNKNOWN_CONTEXT_RESET
 0x8255

	)

2668 
	#GL_RESET_NOTIFICATION_STRATEGY
 0x8256

	)

2669 
	#GL_LOSE_CONTEXT_ON_RESET
 0x8252

	)

2670 
	#GL_NO_RESET_NOTIFICATION
 0x8261

	)

2671 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT
 0x00000004

	)

2672 
	#GL_CONTEXT_RELEASE_BEHAVIOR
 0x82FB

	)

2673 
	#GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH
 0x82FC

	)

2674 (
	tAPIENTRYP
 
	tPFNGLCLIPCONTROLPROC
Ë(
	tGLíum
 
	t‹igö
, GLíum 
	tdïth
);

2675 (
	tAPIENTRYP
 
	tPFNGLCREATETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

2676 (
	tAPIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKBUFFERBASEPROC
Ë(
	tGLuöt
 
	txfb
, GLuöà
	tödex
, GLuöà
	tbuf„r
);

2677 (
	tAPIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC
Ë(
	tGLuöt
 
	txfb
, GLuöà
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2678 (
	tAPIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKIVPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2679 (
	tAPIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKI_VPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øm
);

2680 (
	tAPIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKI64_VPROC
Ë(
	tGLuöt
 
	txfb
, 
	tGLíum
 
	t≤ame
, GLuöà
	tödex
, 
	tGLöt64
 *
	t∑øm
);

2681 (
	tAPIENTRYP
 
	tPFNGLCREATEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

2682 (
	tAPIENTRYP
 
	tPFNGLNAMEDBUFFERSTORAGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

2683 (
	tAPIENTRYP
 
	tPFNGLNAMEDBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLíum
 
	tußge
);

2684 (
	tAPIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

2685 (
	tAPIENTRYP
 
	tPFNGLCOPYNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

2686 (
	tAPIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2687 (
	tAPIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2688 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

2689 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

2690 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

2691 (
	tAPIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

2692 (
	tAPIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2693 (
	tAPIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERI64VPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

2694 (
	tAPIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, **
	t∑øms
);

2695 (
	tAPIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

2696 (
	tAPIENTRYP
 
	tPFNGLCREATEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

2697 (
	tAPIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

2698 (
	tAPIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2699 (
	tAPIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

2700 (
	tAPIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

2701 (
	tAPIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf
);

2702 (
	tAPIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

2703 (
	tAPIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERREADBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t§c
);

2704 (
	tAPIENTRYP
 
	tPFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° 
	tGLíum
 *
	t©èchmíts
);

2705 (
	tAPIENTRYP
 
	tPFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° 
	tGLíum
 *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

2706 (
	tAPIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

2707 (
	tAPIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERUIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLuöà*
	tvÆue
);

2708 (
	tAPIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERFVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2709 (
	tAPIENTRYP
 
	tPFNGLCLEARNAMEDFRAMEBUFFERFIPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

2710 (
	tAPIENTRYP
 
	tPFNGLBLITNAMEDFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	tªadFømebuf„r
, GLuöà
	tdøwFømebuf„r
, 
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

2711 
	$GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

2712 (
	tAPIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2713 (
	tAPIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2714 (
	tAPIENTRYP
 
	tPFNGLCREATERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

2715 (
	tAPIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2716 (
	tAPIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2717 (
	tAPIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2718 (
	tAPIENTRYP
 
	tPFNGLCREATETEXTURESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

2719 (
	tAPIENTRYP
 
	tPFNGLTEXTUREBUFFERPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

2720 (
	tAPIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2721 (
	tAPIENTRYP
 
	tPFNGLTEXTURESTORAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

2722 (
	tAPIENTRYP
 
	tPFNGLTEXTURESTORAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2723 (
	tAPIENTRYP
 
	tPFNGLTEXTURESTORAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tÀvñs
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2724 (
	tAPIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2725 (
	tAPIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2726 (
	tAPIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2727 (
	tAPIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2728 (
	tAPIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

2729 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2730 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2731 (
	tAPIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

2732 (
	tAPIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

2733 (
	tAPIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2734 (
	tAPIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

2735 (
	tAPIENTRYP
 
	tPFNGLTEXTUREPARAMETERFPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

2736 (
	tAPIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

2737 (
	tAPIENTRYP
 
	tPFNGLTEXTUREPARAMETERIPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2738 (
	tAPIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

2739 (
	tAPIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

2740 (
	tAPIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

2741 (
	tAPIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPPROC
Ë(
	tGLuöt
 
	tãxtuª
);

2742 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
);

2743 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2744 (
	tAPIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2745 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

2746 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

2747 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

2748 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2749 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

2750 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2751 (
	tAPIENTRYP
 
	tPFNGLCREATEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

2752 (
	tAPIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYATTRIBPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

2753 (
	tAPIENTRYP
 
	tPFNGLENABLEVERTEXARRAYATTRIBPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

2754 (
	tAPIENTRYP
 
	tPFNGLVERTEXARRAYELEMENTBUFFERPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
);

2755 (
	tAPIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

2756 (
	tAPIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

2757 (
	tAPIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

2758 (
	tAPIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

2759 (
	tAPIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2760 (
	tAPIENTRYP
 
	tPFNGLVERTEXARRAYATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2761 (
	tAPIENTRYP
 
	tPFNGLVERTEXARRAYBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

2762 (
	tAPIENTRYP
 
	tPFNGLGETVERTEXARRAYIVPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2763 (
	tAPIENTRYP
 
	tPFNGLGETVERTEXARRAYINDEXEDIVPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

2764 (
	tAPIENTRYP
 
	tPFNGLGETVERTEXARRAYINDEXED64IVPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øm
);

2765 (
	tAPIENTRYP
 
	tPFNGLCREATESAMPLERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tßm∂îs
);

2766 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

2767 (
	tAPIENTRYP
 
	tPFNGLCREATEQUERIESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

2768 (
	tAPIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2769 (
	tAPIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2770 (
	tAPIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2771 (
	tAPIENTRYP
 
	tPFNGLGETQUERYBUFFEROBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, GLuöà
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöçå
 
	toff£t
);

2772 (
	tAPIENTRYP
 
	tPFNGLMEMORYBARRIERBYREGIONPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

2773 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	tpixñs
);

2774 (
	tAPIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tbufSize
, *
	tpixñs
);

2775 
	$GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSPROC
) ();

2776 (
	tAPIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2777 (
	tAPIENTRYP
 
	tPFNGLGETNTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tpixñs
);

2778 (
	tAPIENTRYP
 
	tPFNGLGETNUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

2779 (
	tAPIENTRYP
 
	tPFNGLGETNUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

2780 (
	tAPIENTRYP
 
	tPFNGLGETNUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

2781 (
	tAPIENTRYP
 
	tPFNGLGETNUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

2782 (
	tAPIENTRYP
 
	tPFNGLREADNPIXELSPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

2783 (
	tAPIENTRYP
 
	tPFNGLTEXTUREBARRIERPROC
) ();

2784 #ifde‡
GL_GLEXT_PROTOTYPES


2785 
GLAPI
 
APIENTRY
 
	`glClùC⁄åﬁ
 (
GLíum
 
‹igö
, GLíum 
dïth
);

2786 
GLAPI
 
APIENTRY
 
	`glCª©eTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

2787 
GLAPI
 
APIENTRY
 
	`glTønsf‹mFìdbackBuf„rBa£
 (
GLuöt
 
xfb
, GLuöà
ödex
, GLuöà
buf„r
);

2788 
GLAPI
 
APIENTRY
 
	`glTønsf‹mFìdbackBuf„rR™ge
 (
GLuöt
 
xfb
, GLuöà
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2789 
GLAPI
 
APIENTRY
 
	`glGëTønsf‹mFìdbackiv
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2790 
GLAPI
 
APIENTRY
 
	`glGëTønsf‹mFìdbacki_v
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, GLuöà
ödex
, 
GLöt
 *
∑øm
);

2791 
GLAPI
 
APIENTRY
 
	`glGëTønsf‹mFìdbacki64_v
 (
GLuöt
 
xfb
, 
GLíum
 
≤ame
, GLuöà
ödex
, 
GLöt64
 *
∑øm
);

2792 
GLAPI
 
APIENTRY
 
	`glCª©eBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

2793 
GLAPI
 
APIENTRY
 
	`glNamedBuf„rSt‹age
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

2794 
GLAPI
 
APIENTRY
 
	`glNamedBuf„rD©a
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLíum
 
ußge
);

2795 
GLAPI
 
APIENTRY
 
	`glNamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

2796 
GLAPI
 
APIENTRY
 
	`glC›yNamedBuf„rSubD©a
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

2797 
GLAPI
 
APIENTRY
 
	`glCÀ¨NamedBuf„rD©a
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2798 
GLAPI
 
APIENTRY
 
	`glCÀ¨NamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2799 
GLAPI
 *
APIENTRY
 
	`glM≠NamedBuf„r
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

2800 
GLAPI
 *
APIENTRY
 
	`glM≠NamedBuf„rR™ge
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

2801 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glUnm≠NamedBuf„r
 (
GLuöt
 
buf„r
);

2802 
GLAPI
 
APIENTRY
 
	`glFlushM≠≥dNamedBuf„rR™ge
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

2803 
GLAPI
 
APIENTRY
 
	`glGëNamedBuf„rP¨amëîiv
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2804 
GLAPI
 
APIENTRY
 
	`glGëNamedBuf„rP¨amëîi64v
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

2805 
GLAPI
 
APIENTRY
 
	`glGëNamedBuf„rPoöãrv
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, **
∑øms
);

2806 
GLAPI
 
APIENTRY
 
	`glGëNamedBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

2807 
GLAPI
 
APIENTRY
 
	`glCª©eFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

2808 
GLAPI
 
APIENTRY
 
	`glNamedFømebuf„rRídîbuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

2809 
GLAPI
 
APIENTRY
 
	`glNamedFømebuf„rP¨amëîi
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

2810 
GLAPI
 
APIENTRY
 
	`glNamedFømebuf„rTextuª
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

2811 
GLAPI
 
APIENTRY
 
	`glNamedFømebuf„rTextuªLayî
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

2812 
GLAPI
 
APIENTRY
 
	`glNamedFømebuf„rDøwBuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf
);

2813 
GLAPI
 
APIENTRY
 
	`glNamedFømebuf„rDøwBuf„rs
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

2814 
GLAPI
 
APIENTRY
 
	`glNamedFømebuf„rRódBuf„r
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
§c
);

2815 
GLAPI
 
APIENTRY
 
	`glInvÆid©eNamedFømebuf„rD©a
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
numAâachmíts
, c⁄° 
GLíum
 *
©èchmíts
);

2816 
GLAPI
 
APIENTRY
 
	`glInvÆid©eNamedFømebuf„rSubD©a
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
numAâachmíts
, c⁄° 
GLíum
 *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

2817 
GLAPI
 
APIENTRY
 
	`glCÀ¨NamedFømebuf„riv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

2818 
GLAPI
 
APIENTRY
 
	`glCÀ¨NamedFømebuf„ruiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLuöà*
vÆue
);

2819 
GLAPI
 
APIENTRY
 
	`glCÀ¨NamedFømebuf„rfv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

2820 
GLAPI
 
APIENTRY
 
	`glCÀ¨NamedFømebuf„rfi
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

2821 
GLAPI
 
APIENTRY
 
	`glBlôNamedFømebuf„r
 (
GLuöt
 
ªadFømebuf„r
, GLuöà
døwFømebuf„r
, 
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

2822 
GLAPI
 
GLíum
 
APIENTRY
 
	`glCheckNamedFømebuf„rSètus
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

2823 
GLAPI
 
APIENTRY
 
	`glGëNamedFømebuf„rP¨amëîiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2824 
GLAPI
 
APIENTRY
 
	`glGëNamedFømebuf„rAâachmítP¨amëîiv
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2825 
GLAPI
 
APIENTRY
 
	`glCª©eRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

2826 
GLAPI
 
APIENTRY
 
	`glNamedRídîbuf„rSt‹age
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

2827 
GLAPI
 
APIENTRY
 
	`glNamedRídîbuf„rSt‹ageMu…ißm∂e
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2828 
GLAPI
 
APIENTRY
 
	`glGëNamedRídîbuf„rP¨amëîiv
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2829 
GLAPI
 
APIENTRY
 
	`glCª©eTextuªs
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

2830 
GLAPI
 
APIENTRY
 
	`glTextuªBuf„r
 (
GLuöt
 
ãxtuª
, 
GLíum
 
öã∫Æf‹m©
, GLuöà
buf„r
);

2831 
GLAPI
 
APIENTRY
 
	`glTextuªBuf„rR™ge
 (
GLuöt
 
ãxtuª
, 
GLíum
 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2832 
GLAPI
 
APIENTRY
 
	`glTextuªSt‹age1D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
);

2833 
GLAPI
 
APIENTRY
 
	`glTextuªSt‹age2D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2834 
GLAPI
 
APIENTRY
 
	`glTextuªSt‹age3D
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
Àvñs
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

2835 
GLAPI
 
APIENTRY
 
	`glTextuªSt‹age2DMu…ißm∂e
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2836 
GLAPI
 
APIENTRY
 
	`glTextuªSt‹age3DMu…ißm∂e
 (
GLuöt
 
ãxtuª
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2837 
GLAPI
 
APIENTRY
 
	`glTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2838 
GLAPI
 
APIENTRY
 
	`glTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2839 
GLAPI
 
APIENTRY
 
	`glTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

2840 
GLAPI
 
APIENTRY
 
	`glCom¥es£dTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2841 
GLAPI
 
APIENTRY
 
	`glCom¥es£dTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2842 
GLAPI
 
APIENTRY
 
	`glCom¥es£dTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

2843 
GLAPI
 
APIENTRY
 
	`glC›yTextuªSubImage1D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

2844 
GLAPI
 
APIENTRY
 
	`glC›yTextuªSubImage2D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

2845 
GLAPI
 
APIENTRY
 
	`glC›yTextuªSubImage3D
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

2846 
GLAPI
 
APIENTRY
 
	`glTextuªP¨amëîf
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

2847 
GLAPI
 
APIENTRY
 
	`glTextuªP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

2848 
GLAPI
 
APIENTRY
 
	`glTextuªP¨amëîi
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

2849 
GLAPI
 
APIENTRY
 
	`glTextuªP¨amëîIiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

2850 
GLAPI
 
APIENTRY
 
	`glTextuªP¨amëîIuiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øms
);

2851 
GLAPI
 
APIENTRY
 
	`glTextuªP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

2852 
GLAPI
 
APIENTRY
 
	`glGíî©eTextuªMùm≠
 (
GLuöt
 
ãxtuª
);

2853 
GLAPI
 
APIENTRY
 
	`glBödTextuªUnô
 (
GLuöt
 
unô
, GLuöà
ãxtuª
);

2854 
GLAPI
 
APIENTRY
 
	`glGëTextuªImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
pixñs
);

2855 
GLAPI
 
APIENTRY
 
	`glGëCom¥es£dTextuªImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLsizei
 
bufSize
, *
pixñs
);

2856 
GLAPI
 
APIENTRY
 
	`glGëTextuªLevñP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

2857 
GLAPI
 
APIENTRY
 
	`glGëTextuªLevñP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

2858 
GLAPI
 
APIENTRY
 
	`glGëTextuªP¨amëîfv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

2859 
GLAPI
 
APIENTRY
 
	`glGëTextuªP¨amëîIiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2860 
GLAPI
 
APIENTRY
 
	`glGëTextuªP¨amëîIuiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

2861 
GLAPI
 
APIENTRY
 
	`glGëTextuªP¨amëîiv
 (
GLuöt
 
ãxtuª
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2862 
GLAPI
 
APIENTRY
 
	`glCª©eVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

2863 
GLAPI
 
APIENTRY
 
	`glDißbÀVîãxAºayAârib
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

2864 
GLAPI
 
APIENTRY
 
	`glE«bÀVîãxAºayAârib
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

2865 
GLAPI
 
APIENTRY
 
	`glVîãxAºayEÀmítBuf„r
 (
GLuöt
 
vaobj
, GLuöà
buf„r
);

2866 
GLAPI
 
APIENTRY
 
	`glVîãxAºayVîãxBuf„r
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

2867 
GLAPI
 
APIENTRY
 
	`glVîãxAºayVîãxBuf„rs
 (
GLuöt
 
vaobj
, GLuöà
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° GLsizeò*
°rides
);

2868 
GLAPI
 
APIENTRY
 
	`glVîãxAºayAâribBödög
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

2869 
GLAPI
 
APIENTRY
 
	`glVîãxAºayAâribF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

2870 
GLAPI
 
APIENTRY
 
	`glVîãxAºayAâribIF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2871 
GLAPI
 
APIENTRY
 
	`glVîãxAºayAâribLF‹m©
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2872 
GLAPI
 
APIENTRY
 
	`glVîãxAºayBödögDivis‹
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

2873 
GLAPI
 
APIENTRY
 
	`glGëVîãxAºayiv
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2874 
GLAPI
 
APIENTRY
 
	`glGëVîãxAºayIndexediv
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

2875 
GLAPI
 
APIENTRY
 
	`glGëVîãxAºayIndexed64iv
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øm
);

2876 
GLAPI
 
APIENTRY
 
	`glCª©eSam∂îs
 (
GLsizei
 
n
, 
GLuöt
 *
ßm∂îs
);

2877 
GLAPI
 
APIENTRY
 
	`glCª©eProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

2878 
GLAPI
 
APIENTRY
 
	`glCª©eQuîõs
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, 
GLuöt
 *
ids
);

2879 
GLAPI
 
APIENTRY
 
	`glGëQuîyBuf„rObje˘i64v
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2880 
GLAPI
 
APIENTRY
 
	`glGëQuîyBuf„rObje˘iv
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2881 
GLAPI
 
APIENTRY
 
	`glGëQuîyBuf„rObje˘ui64v
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2882 
GLAPI
 
APIENTRY
 
	`glGëQuîyBuf„rObje˘uiv
 (
GLuöt
 
id
, GLuöà
buf„r
, 
GLíum
 
≤ame
, 
GLöçå
 
off£t
);

2883 
GLAPI
 
APIENTRY
 
	`glMem‹yB¨rõrByRegi⁄
 (
GLbôfõld
 
b¨rõrs
);

2884 
GLAPI
 
APIENTRY
 
	`glGëTextuªSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
pixñs
);

2885 
GLAPI
 
APIENTRY
 
	`glGëCom¥es£dTextuªSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
bufSize
, *
pixñs
);

2886 
GLAPI
 
GLíum
 
APIENTRY
 
	`glGëGøphicsRe£tSètus
 ();

2887 
GLAPI
 
APIENTRY
 
	`glGënCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, *
pixñs
);

2888 
GLAPI
 
APIENTRY
 
	`glGënTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
pixñs
);

2889 
GLAPI
 
APIENTRY
 
	`glGënUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

2890 
GLAPI
 
APIENTRY
 
	`glGënUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

2891 
GLAPI
 
APIENTRY
 
	`glGënUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

2892 
GLAPI
 
APIENTRY
 
	`glGënUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

2893 
GLAPI
 
APIENTRY
 
	`glRódnPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

2894 
GLAPI
 
APIENTRY
 
	`glTextuªB¨rõr
 ();

2898 #i‚de‡
GL_ARB_ES2_com∑tibûôy


2899 
	#GL_ARB_ES2_com∑tibûôy
 1

	)

2902 #i‚de‡
GL_ARB_ES3_1_com∑tibûôy


2903 
	#GL_ARB_ES3_1_com∑tibûôy
 1

	)

2906 #i‚de‡
GL_ARB_ES3_com∑tibûôy


2907 
	#GL_ARB_ES3_com∑tibûôy
 1

	)

2910 #i‚de‡
GL_ARB_¨øys_of_¨øys


2911 
	#GL_ARB_¨øys_of_¨øys
 1

	)

2914 #i‚de‡
GL_ARB_ba£_ö°™˚


2915 
	#GL_ARB_ba£_ö°™˚
 1

	)

2918 #i‚de‡
GL_ARB_bödÀss_ãxtuª


2919 
	#GL_ARB_bödÀss_ãxtuª
 1

	)

2920 
uöt64_t
 
	tGLuöt64EXT
;

2921 
	#GL_UNSIGNED_INT64_ARB
 0x140F

	)

2922 
	$GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
);

2923 
	$GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

2924 (
	tAPIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2925 (
	tAPIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2926 
	$GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

2927 (
	tAPIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

2928 (
	tAPIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2929 (
	tAPIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2930 (
	tAPIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

2931 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2932 (
	tAPIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

2933 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2934 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2935 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64ARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

2936 (
	tAPIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

2937 (
	tAPIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

2938 #ifde‡
GL_GLEXT_PROTOTYPES


2939 
GLAPI
 
GLuöt64
 
APIENTRY
 
	`glGëTextuªH™dÀARB
 (
GLuöt
 
ãxtuª
);

2940 
GLAPI
 
GLuöt64
 
APIENTRY
 
	`glGëTextuªSam∂îH™dÀARB
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

2941 
GLAPI
 
APIENTRY
 
	`glMakeTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2942 
GLAPI
 
APIENTRY
 
	`glMakeTextuªH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2943 
GLAPI
 
GLuöt64
 
APIENTRY
 
	`glGëImageH™dÀARB
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

2944 
GLAPI
 
APIENTRY
 
	`glMakeImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

2945 
GLAPI
 
APIENTRY
 
	`glMakeImageH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2946 
GLAPI
 
APIENTRY
 
	`glUnif‹mH™dÀui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2947 
GLAPI
 
APIENTRY
 
	`glUnif‹mH™dÀui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

2948 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mH™dÀui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2949 
GLAPI
 
APIENTRY
 
	`glProgømUnif‹mH™dÀui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

2950 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2951 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2952 
GLAPI
 
APIENTRY
 
	`glVîãxAâribL1ui64ARB
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

2953 
GLAPI
 
APIENTRY
 
	`glVîãxAâribL1ui64vARB
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

2954 
GLAPI
 
APIENTRY
 
	`glGëVîãxAâribLui64vARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

2958 #i‚de‡
GL_ARB_bÀnd_func_exãnded


2959 
	#GL_ARB_bÀnd_func_exãnded
 1

	)

2962 #i‚de‡
GL_ARB_buf„r_°‹age


2963 
	#GL_ARB_buf„r_°‹age
 1

	)

2966 #i‚de‡
GL_ARB_˛_evít


2967 
	#GL_ARB_˛_evít
 1

	)

2968 
_˛_c⁄ãxt
;

2969 
_˛_evít
;

2970 
	#GL_SYNC_CL_EVENT_ARB
 0x8240

	)

2971 
	#GL_SYNC_CL_EVENT_COMPLETE_ARB
 0x8241

	)

2972 
	$GLsync
 (
	tAPIENTRYP
 
	tPFNGLCREATESYNCFROMCLEVENTARBPROC
Ë(
	t_˛_c⁄ãxt
 *
	tc⁄ãxt
, 
	t_˛_evít
 *
	tevít
, 
	tGLbôfõld
 
	tÊags
);

2973 #ifde‡
GL_GLEXT_PROTOTYPES


2974 
GLAPI
 
GLsync
 
APIENTRY
 
	`glCª©eSyncFromCLevítARB
 (
_˛_c⁄ãxt
 *
c⁄ãxt
, 
_˛_evít
 *
evít
, 
GLbôfõld
 
Êags
);

2978 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


2979 
	#GL_ARB_˛ór_buf„r_obje˘
 1

	)

2982 #i‚de‡
GL_ARB_˛ór_ãxtuª


2983 
	#GL_ARB_˛ór_ãxtuª
 1

	)

2986 #i‚de‡
GL_ARB_˛ù_c⁄åﬁ


2987 
	#GL_ARB_˛ù_c⁄åﬁ
 1

	)

2990 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


2991 
	#GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 1

	)

2994 #i‚de‡
GL_ARB_compuã_shadî


2995 
	#GL_ARB_compuã_shadî
 1

	)

2998 #i‚de‡
GL_ARB_compuã_v¨übÀ_group_size


2999 
	#GL_ARB_compuã_v¨übÀ_group_size
 1

	)

3000 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
 0x9344

	)

3001 
	#GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
 0x90EB

	)

3002 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
 0x9345

	)

3003 
	#GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
 0x91BF

	)

3004 (
	tAPIENTRYP
 
	tPFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
, GLuöà
	tgroup_size_x
, GLuöà
	tgroup_size_y
, GLuöà
	tgroup_size_z
);

3005 #ifde‡
GL_GLEXT_PROTOTYPES


3006 
GLAPI
 
APIENTRY
 
	`glDi•©chCompuãGroupSizeARB
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
, GLuöà
group_size_x
, GLuöà
group_size_y
, GLuöà
group_size_z
);

3010 #i‚de‡
GL_ARB_c⁄dôi⁄Æ_ªndî_övîãd


3011 
	#GL_ARB_c⁄dôi⁄Æ_ªndî_övîãd
 1

	)

3014 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


3015 
	#GL_ARB_c⁄£rv©ive_dïth
 1

	)

3018 #i‚de‡
GL_ARB_c›y_buf„r


3019 
	#GL_ARB_c›y_buf„r
 1

	)

3022 #i‚de‡
GL_ARB_c›y_image


3023 
	#GL_ARB_c›y_image
 1

	)

3026 #i‚de‡
GL_ARB_cuŒ_di°™˚


3027 
	#GL_ARB_cuŒ_di°™˚
 1

	)

3030 #i‚de‡
GL_ARB_debug_ouçut


3031 
	#GL_ARB_debug_ouçut
 1

	)

3032 (
	tAPIENTRY
 *
	tGLDEBUGPROCARB
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

3033 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
 0x8242

	)

3034 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
 0x8243

	)

3035 
	#GL_DEBUG_CALLBACK_FUNCTION_ARB
 0x8244

	)

3036 
	#GL_DEBUG_CALLBACK_USER_PARAM_ARB
 0x8245

	)

3037 
	#GL_DEBUG_SOURCE_API_ARB
 0x8246

	)

3038 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
 0x8247

	)

3039 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
 0x8248

	)

3040 
	#GL_DEBUG_SOURCE_THIRD_PARTY_ARB
 0x8249

	)

3041 
	#GL_DEBUG_SOURCE_APPLICATION_ARB
 0x824A

	)

3042 
	#GL_DEBUG_SOURCE_OTHER_ARB
 0x824B

	)

3043 
	#GL_DEBUG_TYPE_ERROR_ARB
 0x824C

	)

3044 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
 0x824D

	)

3045 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
 0x824E

	)

3046 
	#GL_DEBUG_TYPE_PORTABILITY_ARB
 0x824F

	)

3047 
	#GL_DEBUG_TYPE_PERFORMANCE_ARB
 0x8250

	)

3048 
	#GL_DEBUG_TYPE_OTHER_ARB
 0x8251

	)

3049 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
 0x9143

	)

3050 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
 0x9144

	)

3051 
	#GL_DEBUG_LOGGED_MESSAGES_ARB
 0x9145

	)

3052 
	#GL_DEBUG_SEVERITY_HIGH_ARB
 0x9146

	)

3053 
	#GL_DEBUG_SEVERITY_MEDIUM_ARB
 0x9147

	)

3054 
	#GL_DEBUG_SEVERITY_LOW_ARB
 0x9148

	)

3055 (
	tAPIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

3056 (
	tAPIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

3057 (
	tAPIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKARBPROC
Ë(
	tGLDEBUGPROCARB
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

3058 
	$GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGARBPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

3059 #ifde‡
GL_GLEXT_PROTOTYPES


3060 
GLAPI
 
APIENTRY
 
	`glDebugMesßgeC⁄åﬁARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

3061 
GLAPI
 
APIENTRY
 
	`glDebugMesßgeIn£πARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

3062 
GLAPI
 
APIENTRY
 
	`glDebugMesßgeCÆlbackARB
 (
GLDEBUGPROCARB
 
ˇŒback
, c⁄° *
u£rP¨am
);

3063 
GLAPI
 
GLuöt
 
APIENTRY
 
	`glGëDebugMesßgeLogARB
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

3067 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


3068 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

3071 #i‚de‡
GL_ARB_dïth_˛amp


3072 
	#GL_ARB_dïth_˛amp
 1

	)

3075 #i‚de‡
GL_ARB_dîiv©ive_c⁄åﬁ


3076 
	#GL_ARB_dîiv©ive_c⁄åﬁ
 1

	)

3079 #i‚de‡
GL_ARB_dúe˘_°©e_ac˚ss


3080 
	#GL_ARB_dúe˘_°©e_ac˚ss
 1

	)

3083 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


3084 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

3085 (
	tAPIENTRYP
 
	tPFNGLBLENDEQUATIONIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

3086 (
	tAPIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

3087 (
	tAPIENTRYP
 
	tPFNGLBLENDFUNCIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

3088 (
	tAPIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

3089 #ifde‡
GL_GLEXT_PROTOTYPES


3090 
GLAPI
 
APIENTRY
 
	`glBÀndEqu©i⁄iARB
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

3091 
GLAPI
 
APIENTRY
 
	`glBÀndEqu©i⁄Sï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

3092 
GLAPI
 
APIENTRY
 
	`glBÀndFunciARB
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

3093 
GLAPI
 
APIENTRY
 
	`glBÀndFuncSï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

3097 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


3098 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

3101 #i‚de‡
GL_ARB_døw_ödúe˘


3102 
	#GL_ARB_døw_ödúe˘
 1

	)

3105 #i‚de‡
GL_ARB_íh™˚d_œyouts


3106 
	#GL_ARB_íh™˚d_œyouts
 1

	)

3109 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


3110 
	#GL_ARB_ex∂icô_©åib_loˇti⁄
 1

	)

3113 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


3114 
	#GL_ARB_ex∂icô_unif‹m_loˇti⁄
 1

	)

3117 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


3118 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

3121 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


3122 
	#GL_ARB_‰agmít_œyî_võwp‹t
 1

	)

3125 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


3126 
	#GL_ARB_‰amebuf„r_no_©èchmíts
 1

	)

3129 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


3130 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

3133 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


3134 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

3137 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


3138 
	#GL_ARB_gë_¥ogøm_bö¨y
 1

	)

3141 #i‚de‡
GL_ARB_gë_ãxtuª_sub_image


3142 
	#GL_ARB_gë_ãxtuª_sub_image
 1

	)

3145 #i‚de‡
GL_ARB_gpu_shadî5


3146 
	#GL_ARB_gpu_shadî5
 1

	)

3149 #i‚de‡
GL_ARB_gpu_shadî_Â64


3150 
	#GL_ARB_gpu_shadî_Â64
 1

	)

3153 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


3154 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

3157 #i‚de‡
GL_ARB_imagög


3158 
	#GL_ARB_imagög
 1

	)

3159 
	#GL_BLEND_COLOR
 0x8005

	)

3160 
	#GL_BLEND_EQUATION
 0x8009

	)

3163 #i‚de‡
GL_ARB_ödúe˘_∑ømëîs


3164 
	#GL_ARB_ödúe˘_∑ømëîs
 1

	)

3165 
	#GL_PARAMETER_BUFFER_ARB
 0x80EE

	)

3166 
	#GL_PARAMETER_BUFFER_BINDING_ARB
 0x80EF

	)

3167 (
	tAPIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3168 (
	tAPIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3169 #ifde‡
GL_GLEXT_PROTOTYPES


3170 
GLAPI
 
APIENTRY
 
	`glMu…iDøwAºaysIndúe˘Cou¡ARB
 (
GLíum
 
mode
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3171 
GLAPI
 
APIENTRY
 
	`glMu…iDøwEÀmítsIndúe˘Cou¡ARB
 (
GLíum
 
mode
, GLíum 
ty≥
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3175 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


3176 
	#GL_ARB_öã∫Æf‹m©_quîy
 1

	)

3179 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


3180 
	#GL_ARB_öã∫Æf‹m©_quîy2
 1

	)

3181 
	#GL_SRGB_DECODE_ARB
 0x8299

	)

3184 #i‚de‡
GL_ARB_övÆid©e_subd©a


3185 
	#GL_ARB_övÆid©e_subd©a
 1

	)

3188 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


3189 
	#GL_ARB_m≠_buf„r_Æignmít
 1

	)

3192 #i‚de‡
GL_ARB_m≠_buf„r_ønge


3193 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

3196 #i‚de‡
GL_ARB_mu…i_böd


3197 
	#GL_ARB_mu…i_böd
 1

	)

3200 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


3201 
	#GL_ARB_mu…i_døw_ödúe˘
 1

	)

3204 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


3205 
	#GL_ARB_oc˛usi⁄_quîy2
 1

	)

3208 #i‚de‡
GL_ARB_pùñöe_°©i°ics_quîy


3209 
	#GL_ARB_pùñöe_°©i°ics_quîy
 1

	)

3210 
	#GL_VERTICES_SUBMITTED_ARB
 0x82EE

	)

3211 
	#GL_PRIMITIVES_SUBMITTED_ARB
 0x82EF

	)

3212 
	#GL_VERTEX_SHADER_INVOCATIONS_ARB
 0x82F0

	)

3213 
	#GL_TESS_CONTROL_SHADER_PATCHES_ARB
 0x82F1

	)

3214 
	#GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB
 0x82F2

	)

3215 
	#GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB
 0x82F3

	)

3216 
	#GL_FRAGMENT_SHADER_INVOCATIONS_ARB
 0x82F4

	)

3217 
	#GL_COMPUTE_SHADER_INVOCATIONS_ARB
 0x82F5

	)

3218 
	#GL_CLIPPING_INPUT_PRIMITIVES_ARB
 0x82F6

	)

3219 
	#GL_CLIPPING_OUTPUT_PRIMITIVES_ARB
 0x82F7

	)

3222 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


3223 
	#GL_ARB_¥ogøm_öãrÁ˚_quîy
 1

	)

3226 #i‚de‡
GL_ARB_¥ovokög_vîãx


3227 
	#GL_ARB_¥ovokög_vîãx
 1

	)

3230 #i‚de‡
GL_ARB_quîy_buf„r_obje˘


3231 
	#GL_ARB_quîy_buf„r_obje˘
 1

	)

3234 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


3235 
	#GL_ARB_robu°_buf„r_ac˚ss_behavi‹
 1

	)

3238 #i‚de‡
GL_ARB_robu°√ss


3239 
	#GL_ARB_robu°√ss
 1

	)

3240 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

3241 
	#GL_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

3242 
	#GL_GUILTY_CONTEXT_RESET_ARB
 0x8253

	)

3243 
	#GL_INNOCENT_CONTEXT_RESET_ARB
 0x8254

	)

3244 
	#GL_UNKNOWN_CONTEXT_RESET_ARB
 0x8255

	)

3245 
	#GL_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

3246 
	#GL_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

3247 
	$GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSARBPROC
) ();

3248 (
	tAPIENTRYP
 
	tPFNGLGETNTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3249 (
	tAPIENTRYP
 
	tPFNGLREADNPIXELSARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

3250 (
	tAPIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3251 (
	tAPIENTRYP
 
	tPFNGLGETNUNIFORMFVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

3252 (
	tAPIENTRYP
 
	tPFNGLGETNUNIFORMIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

3253 (
	tAPIENTRYP
 
	tPFNGLGETNUNIFORMUIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

3254 (
	tAPIENTRYP
 
	tPFNGLGETNUNIFORMDVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

3255 #ifde‡
GL_GLEXT_PROTOTYPES


3256 
GLAPI
 
GLíum
 
APIENTRY
 
	`glGëGøphicsRe£tSètusARB
 ();

3257 
GLAPI
 
APIENTRY
 
	`glGënTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
img
);

3258 
GLAPI
 
APIENTRY
 
	`glRódnPixñsARB
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

3259 
GLAPI
 
APIENTRY
 
	`glGënCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, *
img
);

3260 
GLAPI
 
APIENTRY
 
	`glGënUnif‹mfvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

3261 
GLAPI
 
APIENTRY
 
	`glGënUnif‹mivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

3262 
GLAPI
 
APIENTRY
 
	`glGënUnif‹muivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

3263 
GLAPI
 
APIENTRY
 
	`glGënUnif‹mdvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

3267 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


3268 
	#GL_ARB_robu°√ss_isﬁ©i⁄
 1

	)

3271 #i‚de‡
GL_ARB_ßm∂e_shadög


3272 
	#GL_ARB_ßm∂e_shadög
 1

	)

3273 
	#GL_SAMPLE_SHADING_ARB
 0x8C36

	)

3274 
	#GL_MIN_SAMPLE_SHADING_VALUE_ARB
 0x8C37

	)

3275 (
	tAPIENTRYP
 
	tPFNGLMINSAMPLESHADINGARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

3276 #ifde‡
GL_GLEXT_PROTOTYPES


3277 
GLAPI
 
APIENTRY
 
	`glMöSam∂eShadögARB
 (
GLÊﬂt
 
vÆue
);

3281 #i‚de‡
GL_ARB_ßm∂î_obje˘s


3282 
	#GL_ARB_ßm∂î_obje˘s
 1

	)

3285 #i‚de‡
GL_ARB_£amÀss_cube_m≠


3286 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

3289 #i‚de‡
GL_ARB_£amÀss_cubem≠_≥r_ãxtuª


3290 
	#GL_ARB_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

3293 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


3294 
	#GL_ARB_£∑øã_shadî_obje˘s
 1

	)

3297 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


3298 
	#GL_ARB_shadî_©omic_cou¡îs
 1

	)

3301 #i‚de‡
GL_ARB_shadî_bô_ícodög


3302 
	#GL_ARB_shadî_bô_ícodög
 1

	)

3305 #i‚de‡
GL_ARB_shadî_døw_∑ømëîs


3306 
	#GL_ARB_shadî_døw_∑ømëîs
 1

	)

3309 #i‚de‡
GL_ARB_shadî_group_vŸe


3310 
	#GL_ARB_shadî_group_vŸe
 1

	)

3313 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


3314 
	#GL_ARB_shadî_image_lﬂd_°‹e
 1

	)

3317 #i‚de‡
GL_ARB_shadî_image_size


3318 
	#GL_ARB_shadî_image_size
 1

	)

3321 #i‚de‡
GL_ARB_shadî_¥ecisi⁄


3322 
	#GL_ARB_shadî_¥ecisi⁄
 1

	)

3325 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


3326 
	#GL_ARB_shadî_°ícû_exp‹t
 1

	)

3329 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


3330 
	#GL_ARB_shadî_°‹age_buf„r_obje˘
 1

	)

3333 #i‚de‡
GL_ARB_shadî_subroutöe


3334 
	#GL_ARB_shadî_subroutöe
 1

	)

3337 #i‚de‡
GL_ARB_shadî_ãxtuª_image_ßm∂es


3338 
	#GL_ARB_shadî_ãxtuª_image_ßm∂es
 1

	)

3341 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


3342 
	#GL_ARB_shadög_œnguage_420∑ck
 1

	)

3345 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


3346 
	#GL_ARB_shadög_œnguage_ö˛ude
 1

	)

3347 
	#GL_SHADER_INCLUDE_ARB
 0x8DAE

	)

3348 
	#GL_NAMED_STRING_LENGTH_ARB
 0x8DE9

	)

3349 
	#GL_NAMED_STRING_TYPE_ARB
 0x8DEA

	)

3350 (
	tAPIENTRYP
 
	tPFNGLNAMEDSTRINGARBPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, GLöà
	t°rögÀn
, c⁄° GLch¨ *
	t°rög
);

3351 (
	tAPIENTRYP
 
	tPFNGLDELETENAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

3352 (
	tAPIENTRYP
 
	tPFNGLCOMPILESHADERINCLUDEARBPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t∑th
, c⁄° 
	tGLöt
 *
	tÀngth
);

3353 
	$GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

3354 (
	tAPIENTRYP
 
	tPFNGLGETNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t°rögÀn
, GLch¨ *
	t°rög
);

3355 (
	tAPIENTRYP
 
	tPFNGLGETNAMEDSTRINGIVARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

3356 #ifde‡
GL_GLEXT_PROTOTYPES


3357 
GLAPI
 
APIENTRY
 
	`glNamedSåögARB
 (
GLíum
 
ty≥
, 
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, GLöà
°rögÀn
, c⁄° GLch¨ *
°rög
);

3358 
GLAPI
 
APIENTRY
 
	`glDñëeNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

3359 
GLAPI
 
APIENTRY
 
	`glCompûeShadîIn˛udeARB
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
∑th
, c⁄° 
GLöt
 *
Àngth
);

3360 
GLAPI
 
GLboﬁón
 
APIENTRY
 
	`glIsNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

3361 
GLAPI
 
APIENTRY
 
	`glGëNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLsizei
 
bufSize
, GLöà*
°rögÀn
, GLch¨ *
°rög
);

3362 
GLAPI
 
APIENTRY
 
	`glGëNamedSåögivARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

3366 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


3367 
	#GL_ARB_shadög_œnguage_∑ckög
 1

	)

3370 #i‚de‡
GL_ARB_•¨£_buf„r


3371 
	#GL_ARB_•¨£_buf„r
 1

	)

3372 
	#GL_SPARSE_STORAGE_BIT_ARB
 0x0400

	)

3373 
	#GL_SPARSE_BUFFER_PAGE_SIZE_ARB
 0x82F8

	)

3374 (
	tAPIENTRYP
 
	tPFNGLBUFFERPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

3375 (
	tAPIENTRYP
 
	tPFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

3376 (
	tAPIENTRYP
 
	tPFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLboﬁón
 
	tcommô
);

3377 #ifde‡
GL_GLEXT_PROTOTYPES


3378 
GLAPI
 
APIENTRY
 
	`glBuf„rPageCommômítARB
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

3379 
GLAPI
 
APIENTRY
 
	`glNamedBuf„rPageCommômítEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

3380 
GLAPI
 
APIENTRY
 
	`glNamedBuf„rPageCommômítARB
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, 
GLboﬁón
 
commô
);

3384 #i‚de‡
GL_ARB_•¨£_ãxtuª


3385 
	#GL_ARB_•¨£_ãxtuª
 1

	)

3386 
	#GL_TEXTURE_SPARSE_ARB
 0x91A6

	)

3387 
	#GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
 0x91A7

	)

3388 
	#GL_NUM_SPARSE_LEVELS_ARB
 0x91AA

	)

3389 
	#GL_NUM_VIRTUAL_PAGE_SIZES_ARB
 0x91A8

	)

3390 
	#GL_VIRTUAL_PAGE_SIZE_X_ARB
 0x9195

	)

3391 
	#GL_VIRTUAL_PAGE_SIZE_Y_ARB
 0x9196

	)

3392 
	#GL_VIRTUAL_PAGE_SIZE_Z_ARB
 0x9197

	)

3393 
	#GL_MAX_SPARSE_TEXTURE_SIZE_ARB
 0x9198

	)

3394 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
 0x9199

	)

3395 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
 0x919A

	)

3396 
	#GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
 0x91A9

	)

3397 (
	tAPIENTRYP
 
	tPFNGLTEXPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tcommô
);

3398 #ifde‡
GL_GLEXT_PROTOTYPES


3399 
GLAPI
 
APIENTRY
 
	`glTexPageCommômítARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
commô
);

3403 #i‚de‡
GL_ARB_°ícû_ãxturög


3404 
	#GL_ARB_°ícû_ãxturög
 1

	)

3407 #i‚de‡
GL_ARB_sync


3408 
	#GL_ARB_sync
 1

	)

3411 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


3412 
	#GL_ARB_ãs£Œ©i⁄_shadî
 1

	)

3415 #i‚de‡
GL_ARB_ãxtuª_b¨rõr


3416 
	#GL_ARB_ãxtuª_b¨rõr
 1

	)

3419 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


3420 
	#GL_ARB_ãxtuª_buf„r_obje˘_rgb32
 1

	)

3423 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


3424 
	#GL_ARB_ãxtuª_buf„r_ønge
 1

	)

3427 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


3428 
	#GL_ARB_ãxtuª_com¥essi⁄_b±c
 1

	)

3429 
	#GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
 0x8E8C

	)

3430 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
 0x8E8D

	)

3431 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
 0x8E8E

	)

3432 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
 0x8E8F

	)

3435 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


3436 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

3439 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


3440 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

3441 
	#GL_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x9009

	)

3442 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
 0x900A

	)

3443 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x900B

	)

3444 
	#GL_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900C

	)

3445 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
 0x900D

	)

3446 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900E

	)

3447 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900F

	)

3450 #i‚de‡
GL_ARB_ãxtuª_g©hî


3451 
	#GL_ARB_ãxtuª_g©hî
 1

	)

3452 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5E

	)

3453 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5F

	)

3454 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
 0x8F9F

	)

3457 #i‚de‡
GL_ARB_ãxtuª_múr‹_˛amp_to_edge


3458 
	#GL_ARB_ãxtuª_múr‹_˛amp_to_edge
 1

	)

3461 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


3462 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

3465 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


3466 
	#GL_ARB_ãxtuª_quîy_Àvñs
 1

	)

3469 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


3470 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

3473 #i‚de‡
GL_ARB_ãxtuª_rg


3474 
	#GL_ARB_ãxtuª_rg
 1

	)

3477 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


3478 
	#GL_ARB_ãxtuª_rgb10_a2ui
 1

	)

3481 #i‚de‡
GL_ARB_ãxtuª_°ícû8


3482 
	#GL_ARB_ãxtuª_°ícû8
 1

	)

3485 #i‚de‡
GL_ARB_ãxtuª_°‹age


3486 
	#GL_ARB_ãxtuª_°‹age
 1

	)

3489 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


3490 
	#GL_ARB_ãxtuª_°‹age_mu…ißm∂e
 1

	)

3493 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


3494 
	#GL_ARB_ãxtuª_swizzÀ
 1

	)

3497 #i‚de‡
GL_ARB_ãxtuª_võw


3498 
	#GL_ARB_ãxtuª_võw
 1

	)

3501 #i‚de‡
GL_ARB_timî_quîy


3502 
	#GL_ARB_timî_quîy
 1

	)

3505 #i‚de‡
GL_ARB_å™sf‹m_„edback2


3506 
	#GL_ARB_å™sf‹m_„edback2
 1

	)

3509 #i‚de‡
GL_ARB_å™sf‹m_„edback3


3510 
	#GL_ARB_å™sf‹m_„edback3
 1

	)

3513 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


3514 
	#GL_ARB_å™sf‹m_„edback_ö°™˚d
 1

	)

3517 #i‚de‡
GL_ARB_å™sf‹m_„edback_ovîÊow_quîy


3518 
	#GL_ARB_å™sf‹m_„edback_ovîÊow_quîy
 1

	)

3519 
	#GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB
 0x82EC

	)

3520 
	#GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB
 0x82ED

	)

3523 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


3524 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

3527 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


3528 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

3531 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


3532 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

3535 #i‚de‡
GL_ARB_vîãx_©åib_64bô


3536 
	#GL_ARB_vîãx_©åib_64bô
 1

	)

3539 #i‚de‡
GL_ARB_vîãx_©åib_bödög


3540 
	#GL_ARB_vîãx_©åib_bödög
 1

	)

3543 #i‚de‡
GL_ARB_vîãx_ty≥_10f_11f_11f_ªv


3544 
	#GL_ARB_vîãx_ty≥_10f_11f_11f_ªv
 1

	)

3547 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


3548 
	#GL_ARB_vîãx_ty≥_2_10_10_10_ªv
 1

	)

3551 #i‚de‡
GL_ARB_võwp‹t_¨øy


3552 
	#GL_ARB_võwp‹t_¨øy
 1

	)

3555 #i‚de‡
GL_KHR_c⁄ãxt_Êush_c⁄åﬁ


3556 
	#GL_KHR_c⁄ãxt_Êush_c⁄åﬁ
 1

	)

3559 #i‚de‡
GL_KHR_debug


3560 
	#GL_KHR_debug
 1

	)

3563 #i‚de‡
GL_KHR_no_îr‹


3564 
	#GL_KHR_no_îr‹
 1

	)

3565 
	#GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR
 0x00000008

	)

3568 #i‚de‡
GL_KHR_robu°_buf„r_ac˚ss_behavi‹


3569 
	#GL_KHR_robu°_buf„r_ac˚ss_behavi‹
 1

	)

3572 #i‚de‡
GL_KHR_robu°√ss


3573 
	#GL_KHR_robu°√ss
 1

	)

3574 
	#GL_CONTEXT_ROBUST_ACCESS
 0x90F3

	)

3577 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr


3578 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr
 1

	)

3579 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

3580 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

3581 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

3582 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

3583 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

3584 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

3585 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

3586 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

3587 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

3588 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

3589 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

3590 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

3591 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

3592 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

3593 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

3594 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

3595 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

3596 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

3597 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

3598 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

3599 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

3600 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

3601 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

3602 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

3603 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

3604 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

3605 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

3606 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

3609 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


3610 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

3613 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_¶i˚d_3d


3614 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_¶i˚d_3d
 1

	)

3617 #ifde‡
__˝lu•lus


3618 
	}
}

	@/usr/include/NVX/nvx.h

16 #i‚de‡
NVX_H


17 
	#NVX_H


	)

23 
	~<VX/vx.h
>

24 
	~<VX/vxu.h
>

25 
	~<NVX/nvx_≠i_ma¸os.h
>

26 
	~<NVX/nvx_com∑tibûôy.h
>

36 
	s_nvx_moduÀ_vîsi⁄_t
 {

37 
vx_uöt32
 
	mmaj‹
;

38 
vx_uöt32
 
	mmö‹
;

39 
vx_uöt32
 
	m∑tch
;

40 
	msuffix
[12];

41 } 
	tnvx_moduÀ_vîsi⁄_t
;

47 
	s_nvx_vîsi⁄_öfo_t
 {

48 
nvx_moduÀ_vîsi⁄_t
 
	mvisi⁄w‹ks_vîsi⁄
;

50 
vx_uöt32
 
	m›ívx_maj‹_vîsi⁄
;

51 
vx_uöt32
 
	m›ívx_mö‹_vîsi⁄
;

52 
vx_uöt32
 
	m›ívx_∑tch_vîsi⁄
;

53 } 
	tnvx_vîsi⁄_öfo_t
;

61 
NVX_C_API
 
nvxGëVîsi⁄Info
(
nvx_vîsi⁄_öfo_t
 *
öfo
);

71 
	envx_log_z⁄e_e
 {

73 
	mNVX_LOG_ZONE_ERROR
,

75 
	mNVX_LOG_ZONE_WARNING
,

77 
	mNVX_LOG_ZONE_API
,

79 
	mNVX_LOG_ZONE_GRAPH
,

81 
	mNVX_LOG_ZONE_DATA
,

83 
	mNVX_LOG_ZONE_MEMORY
,

85 
	mNVX_LOG_ZONE_PERF
,

87 
	mNVX_LOG_ZONE_MISC
,

103 
NVX_C_API
 
vx_°©us
 
nvxSëLogZ⁄e
(
vx_íum
 
z⁄e
, 
vx_boﬁ
 
íabÀd
);

113 
	envx_íum_e
 {

114 
	mNVX_ENUM_MUTABILITY
 = 0x00,

121 
	envx_muèbûôy_e
 {

123 
	mNVX_MUTABLE_INIT
 = 
VX_ENUM_BASE
(
VX_ID_NVIDIA
, 
NVX_ENUM_MUTABILITY
) + 0x0,

125 
	mNVX_METADATA_IMMUTABLE_INIT
 = 
VX_ENUM_BASE
(
VX_ID_NVIDIA
, 
NVX_ENUM_MUTABILITY
) + 0x1,

127 
	mNVX_IMMUTABLE_INIT
 = 
VX_ENUM_BASE
(
VX_ID_NVIDIA
, 
NVX_ENUM_MUTABILITY
) + 0x2,

142 
NVX_C_API
 
vx_°©us
 
nvxSëKî√lP¨amëîMuèbûôy
(
vx_kî√l
 
kî√l
, 
vx_uöt32
 
ödex
, 
vx_íum
 
muèbûôy
);

152 
	envx_ty≥_e
 {

153 
	mNVX_TYPE_POINT2F
 = 
VX_TYPE_VENDOR_STRUCT_START
,

154 
	mNVX_TYPE_POINT3F
,

155 
	mNVX_TYPE_POINT4F
,

156 
	mNVX_TYPE_KEYPOINTF
,

159 
	mNVX_TYPE_STRUCT_MAX
,

162 
	mNVX_TYPE_OBJECT_MAX
 = 
VX_TYPE_VENDOR_OBJECT_START
,

169 
	envx_°©us_e
 {

170 
	mNVX_ERROR_NO_CUDA_GPU
 = -1000,

171 
	mNVX_ERROR_UNSUPPORTED_CUDA_GPU
 = -1001,

172 
	mNVX_ERROR_CUDA_FAILURE
 = -1002,

179 
	#NVX_LIBRARY_NVIDIA
 (0x0)

	)

185 
	envx_kî√l_e
 {

187 
	mNVX_KERNEL_HARRIS_TRACK
 = 
VX_KERNEL_BASE
(
VX_ID_NVIDIA
, 
NVX_LIBRARY_NVIDIA
),

189 
	mNVX_KERNEL_FAST_TRACK
,

191 
	mNVX_KERNEL_FLIP_IMAGE
,

193 
	mNVX_KERNEL_COPY_IMAGE
,

195 
	mNVX_KERNEL_SEMI_GLOBAL_MATCHING
,

197 
	mNVX_KERNEL_HOUGH_LINES
,

199 
	mNVX_KERNEL_HOUGH_SEGMENTS
,

201 
	mNVX_KERNEL_HOUGH_CIRCLES
,

203 
	mNVX_KERNEL_SCHARR_3x3
,

205 
	mNVX_KERNEL_LAPLACIAN_3x3
,

207 
	mNVX_KERNEL_MEDIAN_FLOW
,

209 
	mNVX_KERNEL_STEREO_BLOCK_MATCHING
,

211 
	mNVX_KERNEL_FIND_HOMOGRAPHY
,

213 
	mNVX_KERNEL_CREATE_MOTION_FIELD
,

215 
	mNVX_KERNEL_REFINE_MOTION_FIELD
,

217 
	mNVX_KERNEL_PARTITION_MOTION_FIELD
,

219 
	mNVX_KERNEL_MULTIPLY_BY_SCALAR
,

221 
	mNVX_KERNEL_SGBM_COMPUTE_COST_BT
,

223 
	mNVX_KERNEL_SGBM_AGGREGATE_COST_SCANLINES
,

225 
	mNVX_KERNEL_SGBM_CONVOLVE_COST
,

227 
	mNVX_KERNEL_SGBM_COMPUTE_DISPARITY
,

229 
	mNVX_KERNEL_SGBM_COMPUTE_MODIFIED_COST_BT
,

231 
	mNVX_KERNEL_SGBM_FILTER_COST
,

233 
	mNVX_KERNEL_SGBM_PYRAMIDAL_COST_PRIOR
,

235 
	mNVX_KERNEL_SGBM_PYRAMIDAL_DISPARITY_MERGE
,

237 
	mNVX_KERNEL_SGBM_CENSUS_TRANSFORM
,

239 
	mNVX_KERNEL_SGBM_COMPUTE_COST_HAMMING
,

250 
	s_nvx_poöt2f_t
 {

251 
vx_Êﬂt32
 
	mx
;

252 
vx_Êﬂt32
 
	my
;

253 } 
	tnvx_poöt2f_t
;

259 
	s_nvx_poöt3f_t
 {

260 
vx_Êﬂt32
 
	mx
;

261 
vx_Êﬂt32
 
	my
;

262 
vx_Êﬂt32
 
	mz
;

263 } 
	tnvx_poöt3f_t
;

269 
	s_nvx_poöt4f_t
 {

270 
vx_Êﬂt32
 
	mx
;

271 
vx_Êﬂt32
 
	my
;

272 
vx_Êﬂt32
 
	mz
;

273 
vx_Êﬂt32
 
	mw
;

274 } 
	tnvx_poöt4f_t
;

284 
	s_nvx_keypoötf_t
 {

285 
vx_Êﬂt32
 
	mx
;

286 
vx_Êﬂt32
 
	my
;

287 
vx_Êﬂt32
 
	m°ªngth
;

288 
vx_Êﬂt32
 
	msˇÀ
;

289 
vx_Êﬂt32
 
	m‹õ¡©i⁄
;

290 
vx_öt32
 
	måackög_°©us
;

291 
vx_Êﬂt32
 
	mîr‹
;

292 } 
	tnvx_keypoötf_t
;

302 
	envx_df_image_e
 {

304 
	mNVX_DF_IMAGE_F32
 = 
VX_DF_IMAGE
('F','0','3','2'),

307 
	mNVX_DF_IMAGE_2F32
 = 
VX_DF_IMAGE
('2','F','3','2'),

310 
	mNVX_DF_IMAGE_2S16
 = 
VX_DF_IMAGE
('2','S','1','6'),

316 
	mNVX_DF_IMAGE_RGB16
 = 
VX_DF_IMAGE
('S','3','1','6'),

327 
	envx_ac˚ss‹_e
 {

329 
	mNVX_READ_ONLY_CUDA
 = 
VX_ENUM_BASE
(
VX_ID_NVIDIA
, 
VX_ENUM_ACCESSOR
) + 0x0,

331 
	mNVX_WRITE_ONLY_CUDA
 = 
VX_ENUM_BASE
(
VX_ID_NVIDIA
, 
VX_ENUM_ACCESSOR
) + 0x1,

333 
	mNVX_READ_AND_WRITE_CUDA
 = 
VX_ENUM_BASE
(
VX_ID_NVIDIA
, 
VX_ENUM_ACCESSOR
) + 0x2,

340 
	envx_mem‹y_ty≥_e
 {

342 
	mNVX_MEMORY_TYPE_CUDA
 = 
VX_ENUM_BASE
(
VX_ID_NVIDIA
, 
VX_ENUM_MEMORY_TYPE
) + 0x0,

344 
	mNVX_MEMORY_TYPE_CUDA_ARRAY
,

355 
	envx_c⁄ãxt_©åibuã_e
 {

360 
	mNVX_CONTEXT_INITIAL_CUDA_DEVICE
 = 
VX_ENUM_BASE
(
VX_ID_NVIDIA
, 
VX_TYPE_CONTEXT
) + 0x1

371 
	envx_èrgë_e


374 
	mNVX_TARGET_CPU
 = 
VX_ATTRIBUTE_BASE
(
VX_ID_NVIDIA
, 
VX_ENUM_TARGET
) + 0x0,

376 
	mNVX_TARGET_GPU
 = 
VX_ATTRIBUTE_BASE
(
VX_ID_NVIDIA
, 
VX_ENUM_TARGET
) + 0x1

405 
NVX_C_API
 
vx_°©us
 
nvxRñó£Re„ªn˚Li°
(
vx_ª„ªn˚
 
ªf_li°
[], 
vx_size
 
num_ªfs
);

415 
	envx_gøph_©åibuã_e
 {

435 
	mNVX_GRAPH_VERIFY_OPTIONS
 = 
VX_ENUM_BASE
(
VX_ID_NVIDIA
, 
VX_TYPE_GRAPH
) + 0x0,

458 
	mNVX_GRAPH_VERIFY_NEEDED
 = 
VX_ENUM_BASE
(
VX_ID_NVIDIA
, 
VX_TYPE_GRAPH
) + 0x1,

477 
	envx_dúe˘ive_e
 {

482 
	mNVX_DIRECTIVE_DISABLE_KEYPOINT_ERROR
 = 
VX_ENUM_BASE
(
VX_ID_NVIDIA
, 
VX_ENUM_DIRECTIVE
) + 0x0,

486 
	mNVX_DIRECTIVE_ENABLE_KEYPOINT_ERROR
,

490 
	mNVX_DIRECTIVE_DEFAULT_KEYPOINT_ERROR
,

500 
	mNVX_DIRECTIVE_DISABLE_PERFORMANCE
,

507 
	mNVX_DIRECTIVE_ENABLE_PERFORMANCE
,

511 
	mNVX_DIRECTIVE_DEFAULT_PERFORMANCE
,

543 
NVX_C_API
 
vx_gøph
 
nvxCª©eSåómGøph
(
vx_c⁄ãxt
 
c⁄ãxt
);

563 
NVX_C_API
 
vx_°©us
 
nvxM≠Rem≠P©ch
(
vx_ªm≠
 
ªm≠
,

564 
vx_ª˘™gÀ_t
 *
ª˘
,

565 
vx_imagï©ch_addªssög_t
 *
addr
,

566 **
±r
,

567 
vx_íum
 
ußge
);

578 
NVX_C_API
 
vx_°©us
 
nvxUnm≠Rem≠P©ch
(
vx_ªm≠
 
ªm≠
,

579 *
±r
);

589 
	envx_node_©åibuã_e
 {

600 
	mNVX_NODE_CUDA_STREAM
 = 
VX_ATTRIBUTE_BASE
(
VX_ID_NVIDIA
, 
VX_TYPE_NODE
) + 0x0,

624 
NVX_C_API
 
vx_°©us
 
nvxM≠Sˇœr
(
vx_sˇœr
 
sˇœr
,

625 
vx_m≠_id
 *
m≠_id
,

626 **
±r
,

627 
vx_íum
 
ußge
,

628 
vx_íum
 
mem‹y_ty≥
,

629 
vx_bôfõld
 
Êags
);

640 
NVX_C_API
 
vx_°©us
 
nvxUnm≠Sˇœr
(
vx_sˇœr
 
sˇœr
,

641 
vx_m≠_id
 
m≠_id
);

664 
NVX_C_API
 
vx_°©us
 
nvxM≠M©rix
(
vx_m©rix
 
m©rix
,

665 
vx_m≠_id
 *
m≠_id
,

666 **
±r
,

667 
vx_íum
 
ußge
,

668 
vx_íum
 
mem‹y_ty≥
,

669 
vx_bôfõld
 
Êags
);

680 
NVX_C_API
 
vx_°©us
 
nvxUnm≠M©rix
(
vx_m©rix
 
m©rix
,

681 
vx_m≠_id
 
m≠_id
);

707 
NVX_C_API
 
vx_°©us
 
nvxM≠C⁄vﬁuti⁄Revî£d
(
vx_c⁄vﬁuti⁄
 
c⁄v
,

708 
vx_m≠_id
 *
m≠_id
,

709 **
±r
,

710 
vx_íum
 
ußge
,

711 
vx_íum
 
mem‹y_ty≥
,

712 
vx_bôfõld
 
Êags
);

723 
NVX_C_API
 
vx_°©us
 
nvxUnm≠C⁄vﬁuti⁄
(
vx_c⁄vﬁuti⁄
 
c⁄v
,

724 
vx_m≠_id
 
m≠_id
);

760 
NVX_C_API
 
vx_node
 
nvxH¨risTøckNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_¨øy
 
ouçut
,

761 
vx_image
 
mask
, 
vx_¨øy
 
åacked_poöts
,

762 
vx_Êﬂt32
 
k
, vx_Êﬂt32 
thªshﬁd
, 
vx_uöt32
 
˚Œ_size
,

763 
vx_sˇœr
 
num_c‹√rs
);

803 
NVX_C_API
 
vx_°©us
 
nvxuH¨risTøck
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_¨øy
 
ouçut
,

804 
vx_image
 
mask
, 
vx_¨øy
 
åacked_poöts
,

805 
vx_Êﬂt32
 
k
, vx_Êﬂt32 
thªshﬁd
, 
vx_uöt32
 
˚Œ_size
,

806 
vx_sˇœr
 
num_c‹√rs
);

843 
NVX_C_API
 
vx_node
 
nvxFa°TøckNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_¨øy
 
ouçut
,

844 
vx_image
 
mask
, 
vx_¨øy
 
åacked_poöts
,

845 
vx_uöt32
 
ty≥
, vx_uöt32 
thªshﬁd
, vx_uöt32 
˚Œ_size
,

846 
vx_sˇœr
 
num_c‹√rs
);

887 
NVX_C_API
 
vx_°©us
 
nvxuFa°Tøck
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_¨øy
 
ouçut
,

888 
vx_image
 
mask
, 
vx_¨øy
 
åacked_poöts
,

889 
vx_uöt32
 
ty≥
, vx_uöt32 
thªshﬁd
, vx_uöt32 
˚Œ_size
,

890 
vx_sˇœr
 
num_c‹√rs
);

900 
	envx_sˇ∆öe_e
 {

901 
	mNVX_SCANLINE_LEFT_RIGHT
 = 1 << 0,

902 
	mNVX_SCANLINE_TOP_LEFT_BOTTOM_RIGHT
 = 1 << 1,

903 
	mNVX_SCANLINE_TOP_BOTTOM
 = 1 << 2,

904 
	mNVX_SCANLINE_TOP_RIGHT_BOTTOM_LEFT
 = 1 << 3,

906 
	mNVX_SCANLINE_RIGHT_LEFT
 = 1 << 4,

907 
	mNVX_SCANLINE_BOTTOM_RIGHT_TOP_LEFT
 = 1 << 5,

908 
	mNVX_SCANLINE_BOTTOM_TOP
 = 1 << 6,

909 
	mNVX_SCANLINE_BOTTOM_LEFT_TOP_RIGHT
 = 1 << 7,

912 
	mNVX_SCANLINE_CROSS
 = 
NVX_SCANLINE_LEFT_RIGHT
 |

913 
NVX_SCANLINE_RIGHT_LEFT
 |

914 
NVX_SCANLINE_TOP_BOTTOM
 |

915 
NVX_SCANLINE_BOTTOM_TOP
,

917 
	mNVX_SCANLINE_ALL
 = 0xFF

924 
	envx_sgm_Êags_e
 {

925 
	mNVX_SGM_FILTER_TOP_AREA
 = 1 << 0,

926 
	mNVX_SGM_PYRAMIDAL_STEREO
 = 1 << 1

959 
NVX_C_API
 
vx_node
 
nvxSemiGlobÆM©chögNode
(
vx_gøph
 
gøph
,

960 
vx_image
 
À·
,

961 
vx_image
 
right
,

962 
vx_image
 
di•¨ôy
,

963 
vx_öt32
 
möD
,

964 
vx_öt32
 
maxD
,

965 
vx_öt32
 
P1
,

966 
vx_öt32
 
P2
,

967 
vx_öt32
 
ßd
,

968 
vx_öt32
 
˘_wö_size
,

969 
vx_öt32
 
hc_wö_size
,

970 
vx_öt32
 
˛ù
,

971 
vx_öt32
 
max_diff
,

972 
vx_öt32
 
uniquíess
,

973 
vx_íum
 
sˇ∆öes_mask
,

974 
vx_íum
 
Êags
);

1004 
NVX_C_API
 
vx_°©us
 
nvxuSemiGlobÆM©chög
(
vx_c⁄ãxt
 
c⁄ãxt
,

1005 
vx_image
 
À·
,

1006 
vx_image
 
right
,

1007 
vx_image
 
di•¨ôy
,

1008 
vx_öt32
 
möD
,

1009 
vx_öt32
 
maxD
,

1010 
vx_öt32
 
P1
,

1011 
vx_öt32
 
P2
,

1012 
vx_öt32
 
ßd
,

1013 
vx_öt32
 
˘_wö_size
,

1014 
vx_öt32
 
hc_wö_size
,

1015 
vx_öt32
 
˛ù
,

1016 
vx_öt32
 
max_diff
,

1017 
vx_öt32
 
uniquíess
,

1018 
vx_íum
 
sˇ∆öes_mask
,

1019 
vx_íum
 
Êags
);

1040 
NVX_C_API
 
vx_node
 
nvxCompuãCo°BTNode
(
vx_gøph
 
gøph
, 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
co°
,

1041 
vx_öt32
 
möD
, vx_öt32 
maxD
, vx_öt32 
˛ù
);

1062 
NVX_C_API
 
vx_°©us
 
nvxuCompuãCo°BT
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
co°
,

1063 
vx_öt32
 
möD
, vx_öt32 
maxD
, vx_öt32 
˛ù
);

1078 
NVX_C_API
 
vx_node
 
nvxC⁄vﬁveCo°Node
(
vx_gøph
 
gøph
, 
vx_image
 
pixñ_co°
, vx_imagê
block_co°
,

1079 
vx_öt32
 
D
, vx_öt32 
wö_size
);

1094 
NVX_C_API
 
vx_°©us
 
nvxuC⁄vﬁveCo°
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
pixñ_co°
, vx_imagê
block_co°
,

1095 
vx_öt32
 
D
, vx_öt32 
wö_size
);

1113 
NVX_C_API
 
vx_node
 
nvxFûãrCo°Node
(
vx_gøph
 
gøph
, 
vx_image
 
img
, vx_imagê
co°
,

1114 
vx_öt32
 
D
, vx_öt32 
P2
, 
vx_íum
 
Êags
);

1133 
NVX_C_API
 
vx_°©us
 
nvxuFûãrCo°
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
img
, vx_imagê
co°
,

1134 
vx_öt32
 
D
, vx_öt32 
P2
, 
vx_íum
 
Êags
);

1152 
NVX_C_API
 
vx_node
 
nvxAggªg©eCo°Sˇ∆öesNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
,

1153 
vx_öt32
 
D
, vx_öt32 
P1
, vx_öt32 
P2
, 
vx_íum
 
dúe˘i⁄s
);

1171 
NVX_C_API
 
vx_°©us
 
nvxuAggªg©eCo°Sˇ∆öes
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
,

1172 
vx_öt32
 
D
, vx_öt32 
P1
, vx_öt32 
P2
, 
vx_íum
 
dúe˘i⁄s
);

1193 
NVX_C_API
 
vx_node
 
nvxCompuãDi•¨ôyNode
(
vx_gøph
 
gøph
, 
vx_image
 
co°
, vx_imagê
di•¨ôy
,

1194 
vx_öt32
 
möD
, vx_öt32 
maxD
, vx_öt32 
uniquíess
, vx_öt32 
maxDiff
);

1215 
NVX_C_API
 
vx_°©us
 
nvxuCompuãDi•¨ôy
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
co°
, vx_imagê
di•¨ôy
,

1216 
vx_öt32
 
möD
, vx_öt32 
maxD
, vx_öt32 
uniquíess
, vx_öt32 
maxDiff
);

1238 
NVX_C_API
 
vx_node
 
nvxCompuãModifõdCo°BTNode
(
vx_gøph
 
gøph
, 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
co°
,

1239 
vx_öt32
 
möD
, vx_öt32 
maxD
, vx_öt32 
˛ù
);

1260 
NVX_C_API
 
vx_°©us
 
nvxuCompuãModifõdCo°BT
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
co°
,

1261 
vx_öt32
 
möD
, vx_öt32 
maxD
, vx_öt32 
˛ù
);

1282 
NVX_C_API
 
vx_node
 
nvxPSGMCo°Pri‹Node
(
vx_gøph
 
gøph
, 
vx_image
 
¥ev
, vx_imagê
co°
,

1283 
vx_öt32
 
D
);

1304 
NVX_C_API
 
vx_°©us
 
nvxuPSGMCo°Pri‹
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
¥ev
, vx_imagê
co°
,

1305 
vx_öt32
 
D
);

1324 
NVX_C_API
 
vx_node
 
nvxPSGMDi•¨ôyMîgeNode
(
vx_gøph
 
gøph
, 
vx_image
 
¥ev
, vx_imagê
cuº
,

1325 
vx_öt32
 
D
);

1344 
NVX_C_API
 
vx_°©us
 
nvxuPSGMDi•¨ôyMîge
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
¥ev
, vx_imagê
cuº
,

1345 
vx_öt32
 
D
);

1362 
NVX_C_API
 
vx_node
 
nvxCísusTønsf‹mNode
(
vx_gøph
 
gøph
,

1363 
vx_image
 
§c
,

1364 
vx_image
 
d°
,

1365 
vx_öt32
 
wö_size
);

1382 
NVX_C_API
 
vx_°©us
 
nvxuCísusTønsf‹m
(
vx_c⁄ãxt
 
c⁄ãxt
,

1383 
vx_image
 
§c
,

1384 
vx_image
 
d°
,

1385 
vx_öt32
 
wö_size
);

1406 
NVX_C_API
 
vx_node
 
nvxCompuãCo°HammögNode
(
vx_gøph
 
gøph
,

1407 
vx_image
 
À·
,

1408 
vx_image
 
right
,

1409 
vx_image
 
co°
,

1410 
vx_öt32
 
möD
,

1411 
vx_öt32
 
maxD
,

1412 
vx_öt32
 
wö_size
);

1433 
NVX_C_API
 
vx_°©us
 
nvxuCompuãCo°Hammög
(
vx_c⁄ãxt
 
c⁄ãxt
,

1434 
vx_image
 
À·
,

1435 
vx_image
 
right
,

1436 
vx_image
 
co°
,

1437 
vx_öt32
 
möD
,

1438 
vx_öt32
 
maxD
,

1439 
vx_öt32
 
wö_size
);

1459 
NVX_C_API
 
vx_node
 
nvxC›yImageNode
(
vx_gøph
 
gøph
,

1460 
vx_image
 
§c
,

1461 
vx_image
 
d°
);

1483 
NVX_C_API
 
vx_°©us
 
nvxuC›yImage
(
vx_c⁄ãxt
 
c⁄ãxt
,

1484 
vx_image
 
§c
,

1485 
vx_image
 
d°
);

1495 
	envx_Êù_mode_e


1497 
	mNVX_FLIP_HORIZONTAL
,

1498 
	mNVX_FLIP_VERTICAL
,

1499 
	mNVX_FLIP_BOTH


1517 
NVX_C_API
 
vx_node
 
nvxFlùImageNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
, 
vx_íum
 
Êù_mode
);

1540 
NVX_C_API
 
vx_°©us
 
nvxuFlùImage
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
, 
vx_íum
 
Êù_mode
);

1589 
NVX_C_API
 
vx_node
 
nvxHoughCú˛esNode
(
vx_gøph
 
gøph
,

1590 
vx_image
 
edges
, vx_imagê
dx
, vx_imagê
dy
,

1591 
vx_¨øy
 
cú˛es
, 
vx_sˇœr
 
s_num_dëe˘i⁄s
,

1592 
vx_Êﬂt32
 
dp
, vx_Êﬂt32 
möDi°
,

1593 
vx_uöt32
 
möRadius
, vx_uöt32 
maxRadius
,

1594 
vx_uöt32
 
acc_thªshﬁd
);

1647 
NVX_C_API
 
vx_°©us
 
nvxuHoughCú˛es
(
vx_c⁄ãxt
 
c⁄ãxt
,

1648 
vx_image
 
edges
, vx_imagê
dx
, vx_imagê
dy
,

1649 
vx_¨øy
 
cú˛es
, 
vx_sˇœr
 
s_num_dëe˘i⁄s
,

1650 
vx_Êﬂt32
 
dp
, vx_Êﬂt32 
möDi°
,

1651 
vx_uöt32
 
möRadius
, vx_uöt32 
maxRadius
,

1652 
vx_uöt32
 
acc_thªshﬁd
);

1682 
NVX_C_API
 
vx_node
 
nvxHoughLöesNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_¨øy
 
ouçut
,

1683 
vx_Êﬂt32
 
rho
, vx_Êﬂt32 
thëa
, 
vx_uöt32
 
thªshﬁd
,

1684 
vx_sˇœr
 
num_löes
);

1718 
NVX_C_API
 
vx_°©us
 
nvxuHoughLöes
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_¨øy
 
ouçut
,

1719 
vx_Êﬂt32
 
rho
, vx_Êﬂt32 
thëa
, 
vx_uöt32
 
thªshﬁd
,

1720 
vx_sˇœr
 
num_löes
);

1749 
NVX_C_API
 
vx_node
 
nvxHoughSegmítsNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_¨øy
 
ouçut
,

1750 
vx_Êﬂt32
 
rho
, vx_Êﬂt32 
thëa
, 
vx_uöt32
 
thªshﬁd
, vx_uöt32 
möLöeLígth
, vx_uöt32 
maxLöeG≠
,

1751 
vx_sˇœr
 
num_£gmíts
);

1788 
NVX_C_API
 
vx_°©us
 
nvxuHoughSegmíts
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_¨øy
 
ouçut
,

1789 
vx_Êﬂt32
 
rho
, vx_Êﬂt32 
thëa
, 
vx_uöt32
 
thªshﬁd
, vx_uöt32 
möLöeLígth
, vx_uöt32 
maxLöeG≠
,

1790 
vx_sˇœr
 
num_£gmíts
);

1813 
NVX_C_API
 
vx_node
 
nvxSch¨r3x3Node
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
gød_x
, vx_imagê
gød_y
);

1840 
NVX_C_API
 
vx_°©us
 
nvxuSch¨r3x3
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
gød_x
, vx_imagê
gød_y
);

1858 
NVX_C_API
 
vx_node
 
nvxL≠œcün3x3Node
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
);

1880 
NVX_C_API
 
vx_°©us
 
nvxuL≠œcün3x3
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
);

1910 
NVX_C_API
 
vx_node
 
nvxMedünFlowNode
(
vx_gøph
 
gøph
, 
vx_¨øy
 
¥ev_±s
, vx_¨øy 
√xt_±s
, vx_¨øy 
±s_fb
, vx_¨øy 
out
,

1911 
vx_boﬁ
 
e°im©e_sˇÀ
, vx_boﬁ 
fûãr_Êow_by_îr
, 
vx_Êﬂt32
 
îr‹_fb_thªsh
);

1945 
NVX_C_API
 
vx_°©us
 
nvxuMedünFlow
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_¨øy
 
¥ev_±s
, vx_¨øy 
√xt_±s
, vx_¨øy 
±s_fb
, vx_¨øy 
out
,

1946 
vx_boﬁ
 
e°im©e_sˇÀ
, vx_boﬁ 
fûãr_Êow_by_îr
, 
vx_Êﬂt32
 
îr‹_fb_thªsh
);

1970 
NVX_C_API
 
vx_node
 
nvxSãªoBlockM©chögNode
(
vx_gøph
 
gøph
, 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
di•
,

1971 
vx_uöt32
 
wöSize
, vx_uöt32 
maxDi•¨ôy
);

2000 
NVX_C_API
 
vx_°©us
 
nvxuSãªoBlockM©chög
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
À·
, vx_imagê
right
, vx_imagê
di•
,

2001 
vx_uöt32
 
wöSize
, vx_uöt32 
maxDi•¨ôy
);

2011 
	envx_föd_homogøphy_mëhod_e
 {

2013 
	mNVX_FIND_HOMOGRAPHY_METHOD_USE_ALL_POINTS
 = 0x0,

2015 
	mNVX_FIND_HOMOGRAPHY_METHOD_RANSAC
 = 0x1,

2017 
	mNVX_FIND_HOMOGRAPHY_METHOD_LMEDS
 = 0x2,

2059 
NVX_C_API
 
vx_node
 
nvxFödHomogøphyNode
(
vx_gøph
 
gøph
, 
vx_¨øy
 
§cPoöts
, vx_¨øy 
d°Poöts
, 
vx_m©rix
 
homogøphy
,

2060 
vx_íum
 
mëhod
, 
vx_Êﬂt32
 
thªshﬁd
,

2061 
vx_öt32
 
maxE°im©eIãrs
, vx_öt32 
maxReföeIãrs
,

2062 
vx_Êﬂt32
 
c⁄fidí˚
, vx_Êﬂt32 
ouéõrR©io
,

2063 
vx_¨øy
 
ölõrs
);

2105 
NVX_C_API
 
vx_°©us
 
nvxuFödHomogøphy
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_¨øy
 
§cPoöts
, vx_¨øy 
d°Poöts
, 
vx_m©rix
 
homogøphy
,

2106 
vx_íum
 
mëhod
, 
vx_Êﬂt32
 
thªshﬁd
,

2107 
vx_öt32
 
maxE°im©eIãrs
, vx_öt32 
maxReföeIãrs
,

2108 
vx_Êﬂt32
 
c⁄fidí˚
, vx_Êﬂt32 
ouéõrR©io
,

2109 
vx_¨øy
 
ölõrs
);

2166 
NVX_C_API
 
vx_node
 
nvxCª©eMŸi⁄FõldNode
(
vx_gøph
 
gøph
,

2167 
vx_image
 
ªf_image
, vx_imagê
cur_image
,

2168 
vx_image
 
™ch‹
, vx_imagê
büs
,

2169 
vx_image
 
be°_mv0
, vx_imagê
be°_mv1
,

2170 
vx_image
 
ßd_èbÀ
,

2171 
vx_öt32
 
blockSize
,

2172 
vx_öt32
 
£¨chWödowWidth
, vx_öt32 
£¨chWödowHeight
,

2173 
vx_Êﬂt32
 
büsWeight
,

2174 
vx_öt32
 
mvDivFa˘‹
);

2235 
NVX_C_API
 
vx_°©us
 
nvxuCª©eMŸi⁄Fõld
(
vx_c⁄ãxt
 
c⁄ãxt
,

2236 
vx_image
 
ªf_image
, vx_imagê
cur_image
,

2237 
vx_image
 
™ch‹
, vx_imagê
büs
,

2238 
vx_image
 
be°_mv0
, vx_imagê
be°_mv1
,

2239 
vx_image
 
ßd_èbÀ
,

2240 
vx_öt32
 
blockSize
,

2241 
vx_öt32
 
£¨chWödowWidth
, vx_öt32 
£¨chWödowHeight
,

2242 
vx_Êﬂt32
 
büsWeight
,

2243 
vx_öt32
 
mvDivFa˘‹
);

2275 
NVX_C_API
 
vx_node
 
nvxReföeMŸi⁄FõldNode
(
vx_gøph
 
gøph
,

2276 
vx_image
 
ö_mv0
, vx_imagê
ö_mv1
,

2277 
vx_image
 
ßd_èbÀ
,

2278 
vx_image
 
out_mv0
, vx_imagê
out_mv1
,

2279 
vx_öt32
 
£¨chWödowWidth
, vx_öt32 
£¨chWödowHeight
,

2280 
vx_öt32
 
numIãøti⁄s
,

2281 
vx_Êﬂt32
 
smoŸh√ssFa˘‹
,

2282 
vx_öt32
 
mvDivFa˘‹
);

2318 
NVX_C_API
 
vx_°©us
 
nvxuReföeMŸi⁄Fõld
(
vx_c⁄ãxt
 
c⁄ãxt
,

2319 
vx_image
 
ö_mv0
, vx_imagê
ö_mv1
,

2320 
vx_image
 
ßd_èbÀ
,

2321 
vx_image
 
out_mv0
, vx_imagê
out_mv1
,

2322 
vx_öt32
 
£¨chWödowWidth
, vx_öt32 
£¨chWödowHeight
,

2323 
vx_öt32
 
numIãøti⁄s
,

2324 
vx_Êﬂt32
 
smoŸh√ssFa˘‹
,

2325 
vx_öt32
 
mvDivFa˘‹
);

2353 
NVX_C_API
 
vx_node
 
nvxP¨tôi⁄MŸi⁄FõldNode
(
vx_gøph
 
gøph
,

2354 
vx_image
 
ªf_image
, vx_imagê
cur_image
,

2355 
vx_image
 
ö_mv_0
, vx_imagê
ö_mv_1
,

2356 
vx_image
 
out_mv_0
, vx_imagê
out_mv_1
,

2357 
vx_Êﬂt32
 
smoŸh√ssFa˘‹
,

2358 
vx_öt32
 
mvDivFa˘‹
);

2390 
NVX_C_API
 
vx_°©us
 
nvxuP¨tôi⁄MŸi⁄Fõld
(
vx_c⁄ãxt
 
c⁄ãxt
,

2391 
vx_image
 
ªf_image
, vx_imagê
cur_image
,

2392 
vx_image
 
ö_mv_0
, vx_imagê
ö_mv_1
,

2393 
vx_image
 
out_mv_0
, vx_imagê
out_mv_1
,

2394 
vx_Êﬂt32
 
smoŸh√ssFa˘‹
,

2395 
vx_öt32
 
mvDivFa˘‹
);

2417 
NVX_C_API
 
vx_node
 
nvxMu…ùlyBySˇœrNode
(
vx_gøph
 
gøph
,

2418 
vx_image
 
§c
, vx_imagê
d°
,

2419 
vx_Êﬂt32
 
Æpha
);

2443 
NVX_C_API
 
vx_°©us
 
nvxuMu…ùlyBySˇœr
(
vx_c⁄ãxt
 
c⁄ãxt
,

2444 
vx_image
 
§c
, vx_imagê
d°
,

2445 
vx_Êﬂt32
 
Æpha
);

	@/usr/include/NVX/nvx_timer.hpp

16 #i‚de‡
NVX_TIMER_HPP


17 
	#NVX_TIMER_HPP


	)

19 
	~"nvx.h
"

24 
«me•a˚
 
	gnvx
 {

34 ˛as†
	cNVX_CXX_API
 
	gTimî


36 
	gpublic
:

46 
Timî
(
boﬁ
 
_dumpSèti°ics
=
Ál£
, c⁄° * 
_«me
 = "");

51 ~
Timî
();

56 
tic
();

63 
toc
();

65 
	g¥iv©e
:

66 
«me
[255];

67 
vx_≥rf_t
 
	g≥rf
;

68 
boﬁ
 
	gdumpSèti°ics
;

83 
	#NVX_TIMER
(
suffix
, 
°r
Ë
nvx
::
Timî
 
timî_
##
	`suffix
(
åue
, så);Åimî_##suffix.
	`tic
()

	)

91 
	#NVX_TIMEROFF
(
suffix
Ë()
timî_
##suffix.
	`toc
()

	)

	@/usr/include/NVX/nvxcu.h

16 #i‚de‡
NVXCU_H


17 
	#NVXCU_H


	)

19 
	~<°döt.h
>

20 
	~<cuda_ru¡ime_≠i.h
>

21 
	~<NVX/nvx_≠i_ma¸os.h
>

31 
	e_nvxcu_îr‹_°©us_e
 {

32 
	mNVXCU_ERROR_CUDA_FAILURE
 = -1002,

33 
	mNVXCU_ERROR_INVALID_PARAMETERS
 = -10,

34 
	mNVXCU_ERROR_NOT_SUPPORTED
 = -3,

35 
	mNVXCU_ERROR_NOT_IMPLEMENTED
 = -2,

36 
	mNVXCU_FAILURE
 = -1,

37 
	mNVXCU_SUCCESS
 = 0,

38 } 
	tnvxcu_îr‹_°©us_e
;

44 
	e_nvxcu_¨øy_ôem_ty≥_e
 {

45 
	mNVXCU_TYPE_CHAR
 = 0x001,

46 
	mNVXCU_TYPE_INT8
 = 0x002,

47 
	mNVXCU_TYPE_UINT8
 = 0x003,

48 
	mNVXCU_TYPE_INT16
 = 0x004,

49 
	mNVXCU_TYPE_UINT16
 = 0x005,

50 
	mNVXCU_TYPE_INT32
 = 0x006,

51 
	mNVXCU_TYPE_UINT32
 = 0x007,

52 
	mNVXCU_TYPE_INT64
 = 0x008,

53 
	mNVXCU_TYPE_UINT64
 = 0x009,

54 
	mNVXCU_TYPE_FLOAT32
 = 0x00A,

55 
	mNVXCU_TYPE_FLOAT64
 = 0x00B,

57 
	mNVXCU_TYPE_RECTANGLE
 = 0x020,

58 
	mNVXCU_TYPE_KEYPOINT
 = 0x021,

59 
	mNVXCU_TYPE_COORDINATES2D
 = 0x022,

60 
	mNVXCU_TYPE_COORDINATES3D
 = 0x023,

62 
	mNVXCU_TYPE_POINT2F
 = 0x400,

63 
	mNVXCU_TYPE_POINT3F
 = 0x401,

64 
	mNVXCU_TYPE_POINT4F
 = 0x402,

65 
	mNVXCU_TYPE_KEYPOINTF
 = 0x403,

66 } 
	tnvxcu_¨øy_ôem_ty≥_e
;

73 
	#NVXCU_DF_IMAGE
(
a
, 
b
, 
c
, 
d
Ë(◊Ë| (b << 8Ë| (¯<< 16Ë| (d << 24))

	)

80 
	#NVXCU_ENUM_BASE
(
v
, 
id
Ë(((vË<< 20Ë| (id << 12))

	)

87 
	e_nvxcu_íum_e
 {

88 
	mNVXCU_ENUM_INTERPOLATION
 = 0x04,

89 
	mNVXCU_ENUM_COLOR_SPACE
 = 0x06,

90 
	mNVXCU_ENUM_COLOR_RANGE
 = 0x07,

91 
	mNVXCU_ENUM_CHANNEL
 = 0x09,

92 
	mNVXCU_ENUM_CONVERT_POLICY
 = 0x0A,

93 
	mNVXCU_ENUM_BORDER_MODE
 = 0x0C,

94 
	mNVXCU_ENUM_TERM_CRITERIA
 = 0x0F,

95 
	mNVXCU_ENUM_NORM_TYPE
 = 0x10,

96 
	mNVXCU_ENUM_ROUND_POLICY
 = 0x12,

97 
	mNVXCU_ENUM_NONLINEAR
 = 0x16,

98 
	mNVXCU_ENUM_PATTERN
 = 0x17,

99 } 
	tnvxcu_íum_e
;

106 
	e_nvxcu_c⁄vît_pﬁicy_e
 {

108 
	mNVXCU_CONVERT_POLICY_WRAP
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CONVERT_POLICY
) + 0x0,

110 
	mNVXCU_CONVERT_POLICY_SATURATE
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CONVERT_POLICY
) + 0x1,

111 } 
	tnvxcu_c⁄vît_pﬁicy_e
;

118 
	e_nvxcu_df_image_e
 {

122 
	mNVXCU_DF_IMAGE_RGB
 = 
NVXCU_DF_IMAGE
('R','G','B','2'),

127 
	mNVXCU_DF_IMAGE_RGBX
 = 
NVXCU_DF_IMAGE
('R','G','B','A'),

132 
	mNVXCU_DF_IMAGE_NV12
 = 
NVXCU_DF_IMAGE
('N','V','1','2'),

137 
	mNVXCU_DF_IMAGE_NV21
 = 
NVXCU_DF_IMAGE
('N','V','2','1'),

142 
	mNVXCU_DF_IMAGE_UYVY
 = 
NVXCU_DF_IMAGE
('U','Y','V','Y'),

147 
	mNVXCU_DF_IMAGE_YUYV
 = 
NVXCU_DF_IMAGE
('Y','U','Y','V'),

152 
	mNVXCU_DF_IMAGE_IYUV
 = 
NVXCU_DF_IMAGE
('I','Y','U','V'),

157 
	mNVXCU_DF_IMAGE_YUV4
 = 
NVXCU_DF_IMAGE
('Y','U','V','4'),

162 
	mNVXCU_DF_IMAGE_U8
 = 
NVXCU_DF_IMAGE
('U','0','0','8'),

167 
	mNVXCU_DF_IMAGE_U16
 = 
NVXCU_DF_IMAGE
('U','0','1','6'),

172 
	mNVXCU_DF_IMAGE_S16
 = 
NVXCU_DF_IMAGE
('S','0','1','6'),

177 
	mNVXCU_DF_IMAGE_U32
 = 
NVXCU_DF_IMAGE
('U','0','3','2'),

182 
	mNVXCU_DF_IMAGE_S32
 = 
NVXCU_DF_IMAGE
('S','0','3','2'),

187 
	mNVXCU_DF_IMAGE_F32
 = 
NVXCU_DF_IMAGE
('F','0','3','2'),

192 
	mNVXCU_DF_IMAGE_2F32
 = 
NVXCU_DF_IMAGE
('2','F','3','2'),

197 
	mNVXCU_DF_IMAGE_2S16
 = 
NVXCU_DF_IMAGE
('2','S','1','6'),

202 
	mNVXCU_DF_IMAGE_RGB16
 = 
NVXCU_DF_IMAGE
('S','3','1','6'),

203 } 
	tnvxcu_df_image_e
;

210 
	e_nvxcu_ch™√l_e
 {

212 
	mNVXCU_CHANNEL_0
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CHANNEL
) + 0x0,

214 
	mNVXCU_CHANNEL_1
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CHANNEL
) + 0x1,

216 
	mNVXCU_CHANNEL_2
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CHANNEL
) + 0x2,

218 
	mNVXCU_CHANNEL_3
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CHANNEL
) + 0x3,

221 
	mNVXCU_CHANNEL_R
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CHANNEL
) + 0x10,

223 
	mNVXCU_CHANNEL_G
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CHANNEL
) + 0x11,

225 
	mNVXCU_CHANNEL_B
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CHANNEL
) + 0x12,

227 
	mNVXCU_CHANNEL_A
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CHANNEL
) + 0x13,

229 
	mNVXCU_CHANNEL_Y
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CHANNEL
) + 0x14,

231 
	mNVXCU_CHANNEL_U
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CHANNEL
) + 0x15,

233 
	mNVXCU_CHANNEL_V
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_CHANNEL
) + 0x16,

234 } 
	tnvxcu_ch™√l_e
;

241 
	e_nvxcu_öãΩﬁ©i⁄_ty≥_e
 {

243 
	mNVXCU_INTERPOLATION_TYPE_NEAREST_NEIGHBOR
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_INTERPOLATION
) + 0x0,

245 
	mNVXCU_INTERPOLATION_TYPE_BILINEAR
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_INTERPOLATION
) + 0x1,

247 
	mNVXCU_INTERPOLATION_TYPE_AREA
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_INTERPOLATION
) + 0x2,

248 } 
	tnvxcu_öãΩﬁ©i⁄_ty≥_e
;

255 
	e_nvxcu_cﬁ‹_•a˚_e
 {

257 
	mNVXCU_COLOR_SPACE_NONE
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_COLOR_SPACE
) + 0x0,

259 
	mNVXCU_COLOR_SPACE_BT601_525
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_COLOR_SPACE
) + 0x1,

261 
	mNVXCU_COLOR_SPACE_BT601_625
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_COLOR_SPACE
) + 0x2,

263 
	mNVXCU_COLOR_SPACE_BT709
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_COLOR_SPACE
) + 0x3,

265 
	mNVXCU_COLOR_SPACE_DEFAULT
 = 
NVXCU_COLOR_SPACE_BT709
,

266 } 
	tnvxcu_cﬁ‹_•a˚_e
;

273 
	e_nvxcu_ch™√l_ønge_e
 {

275 
	mNVXCU_CHANNEL_RANGE_FULL
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_COLOR_RANGE
) + 0x0,

277 
	mNVXCU_CHANNEL_RANGE_RESTRICTED
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_COLOR_RANGE
) + 0x1,

278 } 
	tnvxcu_ch™√l_ønge_e
;

285 
	e_nvxcu_b‹dî_mode_e
 {

287 
	mNVXCU_BORDER_MODE_UNDEFINED
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_BORDER_MODE
) + 0x0,

289 
	mNVXCU_BORDER_MODE_CONSTANT
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_BORDER_MODE
) + 0x1,

291 
	mNVXCU_BORDER_MODE_REPLICATE
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_BORDER_MODE
) + 0x2,

292 } 
	tnvxcu_b‹dî_mode_e
;

299 
	e_nvxcu_ãrmö©i⁄_¸ôîü_e
 {

301 
	mNVXCU_TERM_CRITERIA_ITERATIONS
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_TERM_CRITERIA
) + 0x0,

303 
	mNVXCU_TERM_CRITERIA_EPSILON
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_TERM_CRITERIA
) + 0x1,

305 
	mNVXCU_TERM_CRITERIA_BOTH
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_TERM_CRITERIA
) + 0x2,

306 } 
	tnvxcu_ãrmö©i⁄_¸ôîü_e
;

313 
	e_nvxcu_n‹m_ty≥_e
 {

315 
	mNVXCU_NORM_L1
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_NORM_TYPE
) + 0x0,

317 
	mNVXCU_NORM_L2
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_NORM_TYPE
) + 0x1,

318 } 
	tnvxcu_n‹m_ty≥_e
;

325 
	e_nvxcu_round_pﬁicy_e
 {

327 
	mNVXCU_ROUND_POLICY_TO_ZERO
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_ROUND_POLICY
) + 0x1,

329 
	mNVXCU_ROUND_POLICY_TO_NEAREST_EVEN
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_ROUND_POLICY
) + 0x2,

330 } 
	tnvxcu_round_pﬁicy_e
;

337 
	e_nvxcu_Êù_mode_e
 {

338 
	mNVXCU_FLIP_HORIZONTAL
,

339 
	mNVXCU_FLIP_VERTICAL
,

340 
	mNVXCU_FLIP_BOTH


341 } 
	tnvxcu_Êù_mode_e
;

348 
	e_nvxcu_sˇ∆öe_e
 {

349 
	mNVXCU_SCANLINE_LEFT_RIGHT
 = 1 << 0,

350 
	mNVXCU_SCANLINE_TOP_LEFT_BOTTOM_RIGHT
 = 1 << 1,

351 
	mNVXCU_SCANLINE_TOP_BOTTOM
 = 1 << 2,

352 
	mNVXCU_SCANLINE_TOP_RIGHT_BOTTOM_LEFT
 = 1 << 3,

354 
	mNVXCU_SCANLINE_RIGHT_LEFT
 = 1 << 4,

355 
	mNVXCU_SCANLINE_BOTTOM_RIGHT_TOP_LEFT
 = 1 << 5,

356 
	mNVXCU_SCANLINE_BOTTOM_TOP
 = 1 << 6,

357 
	mNVXCU_SCANLINE_BOTTOM_LEFT_TOP_RIGHT
 = 1 << 7,

360 
	mNVXCU_SCANLINE_CROSS
 = 
NVXCU_SCANLINE_LEFT_RIGHT
 |

361 
NVXCU_SCANLINE_RIGHT_LEFT
 |

362 
NVXCU_SCANLINE_TOP_BOTTOM
 |

363 
NVXCU_SCANLINE_BOTTOM_TOP
,

365 
	mNVXCU_SCANLINE_ALL
 = 0xFF

366 } 
	tnvxcu_sˇ∆öe_e
;

373 
	e_nvxcu_sgm_Êags_e
 {

374 
	mNVXCU_SGM_FILTER_TOP_AREA
 = 1 << 0,

375 
	mNVXCU_SGM_PYRAMIDAL_STEREO
 = 1 << 1

377 } 
	tnvxcu_sgm_Êags_e
;

384 
	e_nvxcu_n⁄_löór_fûãr_e
 {

386 
	mNVXCU_NONLINEAR_FILTER_MEDIAN
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_NONLINEAR
) + 0x0,

388 
	mNVXCU_NONLINEAR_FILTER_MIN
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_NONLINEAR
) + 0x1,

390 
	mNVXCU_NONLINEAR_FILTER_MAX
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_NONLINEAR
) + 0x2,

391 } 
	tnvxcu_n⁄_löór_fûãr_e
;

398 
	e_nvxcu_∑âîn_e
 {

400 
	mNVXCU_PATTERN_BOX
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_PATTERN
) + 0x0,

402 
	mNVXCU_PATTERN_CROSS
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_PATTERN
) + 0x1,

404 
	mNVXCU_PATTERN_OTHER
 = 
NVXCU_ENUM_BASE
(0x000, 
NVXCU_ENUM_PATTERN
) + 0x3,

405 } 
	tnvxcu_∑âîn_e
;

411 
	#NVXCU_SCALE_PYRAMID_HALF
 (0.5f)

	)

417 
	#NVXCU_SCALE_PYRAMID_ORB
 (0.8408964f)

	)

424 
	u_nvxcu_pixñ_vÆue_t
 {

425 
uöt8_t
 
	mRGB
[3];

426 
uöt16_t
 
	mRGB16
[3];

427 
uöt8_t
 
	mRGBX
[4];

428 
uöt8_t
 
	mYUV
[3];

429 
uöt8_t
 
	mU8
;

430 
uöt16_t
 
	mU16
;

431 
öt16_t
 
	mS16
;

432 
öt16_t
 
	mS16n
[4];

433 
uöt32_t
 
	mU32
;

434 
öt32_t
 
	mS32
;

435 
	mF32
;

436 
	mF32n
[4];

437 
uöt8_t
 
	mª£rved
[16];

438 } 
	tnvxcu_pixñ_vÆue_t
;

445 
	s_nvxcu_b‹dî_t
 {

446 
nvxcu_b‹dî_mode_e
 
	mmode
;

447 
nvxcu_pixñ_vÆue_t
 
	mc⁄°™t_vÆue
;

448 } 
	tnvxcu_b‹dî_t
;

454 
	s_nvxcu_keypoöt_t
 {

455 
öt32_t
 
	mx
;

456 
öt32_t
 
	my
;

457 
	m°ªngth
;

458 
	msˇÀ
;

459 
	m‹õ¡©i⁄
;

460 
öt32_t
 
	måackög_°©us
;

461 
	mîr‹
;

462 } 
	tnvxcu_keypoöt_t
;

468 
	s_nvxcu_keypoötf_t
 {

469 
	mx
;

470 
	my
;

471 
	m°ªngth
;

472 
	msˇÀ
;

473 
	m‹õ¡©i⁄
;

474 
öt32_t
 
	måackög_°©us
;

475 
	mîr‹
;

476 } 
	tnvxcu_keypoötf_t
;

482 
	s_nvxcu_ª˘™gÀ_t
 {

483 
uöt32_t
 
	m°¨t_x
;

484 
uöt32_t
 
	m°¨t_y
;

485 
uöt32_t
 
	míd_x
;

486 
uöt32_t
 
	míd_y
;

487 } 
	tnvxcu_ª˘™gÀ_t
;

493 
	s_nvxcu_co‹dö©es2d_t
 {

494 
uöt32_t
 
	mx
;

495 
uöt32_t
 
	my
;

496 } 
	tnvxcu_co‹dö©es2d_t
;

502 
	s_nvxcu_co‹dö©es3d_t
 {

503 
uöt32_t
 
	mx
;

504 
uöt32_t
 
	my
;

505 
uöt32_t
 
	mz
;

506 } 
	tnvxcu_co‹dö©es3d_t
;

512 
	s_nvxcu_poöt2f_t
 {

513 
	mx
;

514 
	my
;

515 } 
	tnvxcu_poöt2f_t
;

521 
	s_nvxcu_poöt3f_t
 {

522 
	mx
;

523 
	my
;

524 
	mz
;

525 } 
	tnvxcu_poöt3f_t
;

531 
	s_nvxcu_poöt4f_t
 {

532 
	mx
;

533 
	my
;

534 
	mz
;

535 
	mw
;

536 } 
	tnvxcu_poöt4f_t
;

554 
	s_nvxcu_tmp_buf_size_t
 {

555 
size_t
 
	mdev_buf_size
;

556 
size_t
 
	mho°_buf_size
;

557 } 
	tnvxcu_tmp_buf_size_t
;

569 
	s_nvxcu_tmp_buf_t
 {

570 *
	mdev_±r
;

571 *
	mho°_±r
;

572 } 
	tnvxcu_tmp_buf_t
;

582 
	#NVXCU_NB_MAX_PLANES
 (4u)

	)

588 
	e_nvxcu_image_ty≥_e
 {

589 
	mNVXCU_PITCH_LINEAR_IMAGE
,

590 
	mNVXCU_UNIFORM_IMAGE


591 } 
	tnvxcu_image_ty≥_e
;

599 
	s_nvxcu_image_t
 {

600 
nvxcu_image_ty≥_e
 
	mimage_ty≥
;

601 
nvxcu_df_image_e
 
	mf‹m©
;

602 
uöt32_t
 
	mwidth
;

603 
uöt32_t
 
	mheight
;

604 } 
	tnvxcu_image_t
;

612 
	s_nvxcu_pôch_löór_image_t
 {

613 
nvxcu_image_t
 
	mba£
;

615 *
	mdev_±r
;

616 
öt32_t
 
	mpôch_ö_byãs
;

617 } 
	m∂™es
[
NVXCU_NB_MAX_PLANES
];

618 } 
	tnvxcu_pôch_löór_image_t
;

625 
	s_nvxcu_unif‹m_image_t
 {

626 
nvxcu_image_t
 
	mba£
;

627 
nvxcu_pixñ_vÆue_t
 
	munif‹m_vÆue
;

628 } 
	tnvxcu_unif‹m_image_t
;

638 
	e_nvxcu_¨øy_ty≥_e
 {

639 
	mNVXCU_PLAIN_ARRAY
,

640 } 
	tnvxcu_¨øy_ty≥_e
;

647 
	s_nvxcu_¨øy_t
 {

648 
nvxcu_¨øy_ty≥_e
 
	m¨øy_ty≥
;

649 
nvxcu_¨øy_ôem_ty≥_e
 
	môem_ty≥
;

650 
uöt32_t
 
	mˇ∑côy
;

651 } 
	tnvxcu_¨øy_t
;

658 
	s_nvxcu_∂aö_¨øy_t
 {

659 
nvxcu_¨øy_t
 
	mba£
;

660 *
	mdev_±r
;

661 
uöt32_t
 *
	mnum_ôems_dev_±r
;

662 } 
	tnvxcu_∂aö_¨øy_t
;

672 
	e_nvxcu_pyømid_ty≥_e
 {

673 
	mNVXCU_PITCH_LINEAR_PYRAMID
,

674 } 
	tnvxcu_pyømid_ty≥_e
;

681 
	s_nvxcu_pyømid_t
 {

682 
nvxcu_pyømid_ty≥_e
 
	mpyømid_ty≥
;

683 
uöt32_t
 
	mnum_Àvñs
;

684 
	msˇÀ
;

685 } 
	tnvxcu_pyømid_t
;

692 
	s_nvxcu_pôch_löór_pyømid_t
 {

693 
nvxcu_pyømid_t
 
	mba£
;

694 
nvxcu_pôch_löór_image_t
 *
	mÀvñs
;

695 } 
	tnvxcu_pôch_löór_pyømid_t
;

705 
	e_nvxcu_exec_èrgë_ty≥_e
 {

706 
	mNVXCU_STREAM_EXEC_TARGET
,

707 } 
	tnvxcu_exec_èrgë_ty≥_e
;

714 
	s_nvxcu_exec_èrgë_t
 {

715 
nvxcu_exec_èrgë_ty≥_e
 
	mexec_èrgë_ty≥
;

716 } 
	tnvxcu_exec_èrgë_t
;

723 
	s_nvxcu_°ªam_exec_èrgë_t
 {

724 
nvxcu_exec_èrgë_t
 
	mba£
;

725 
cudaSåóm_t
 
	m°ªam
;

726 
cudaDevi˚Pr›
 
	mdev_¥›
;

727 } 
	tnvxcu_°ªam_exec_èrgë_t
;

750 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuCh™√lExåa˘
(c⁄° 
nvxcu_image_t
* 
öput
,

751 
nvxcu_ch™√l_e
 
ch™√l
,

752 c⁄° 
nvxcu_image_t
* 
ouçut
,

753 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

784 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuCh™√lComböe
(c⁄° 
nvxcu_image_t
* 
∂™e0
,

785 c⁄° 
nvxcu_image_t
* 
∂™e1
,

786 c⁄° 
nvxcu_image_t
* 
∂™e2
,

787 c⁄° 
nvxcu_image_t
* 
∂™e3
,

788 c⁄° 
nvxcu_image_t
* 
ouçut
,

789 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

822 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuAbsDiff
(c⁄° 
nvxcu_image_t
* 
ö1
,

823 c⁄° 
nvxcu_image_t
* 
ö2
,

824 c⁄° 
nvxcu_image_t
* 
out
,

825 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

858 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuPha£
(c⁄° 
nvxcu_image_t
* 
gød_x
,

859 c⁄° 
nvxcu_image_t
* 
gød_y
,

860 c⁄° 
nvxcu_image_t
* 
‹õ¡©i⁄
,

861 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

896 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuMagnôude
(c⁄° 
nvxcu_image_t
* 
gød_x
,

897 c⁄° 
nvxcu_image_t
* 
gød_y
,

898 c⁄° 
nvxcu_image_t
* 
mag
,

899 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

931 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuThªshﬁdBö¨y
(c⁄° 
nvxcu_image_t
* 
öput
,

932 
nvxcu_pixñ_vÆue_t
 
thªsh_vÆue
,

933 
nvxcu_pixñ_vÆue_t
 
åue_vÆue
,

934 
nvxcu_pixñ_vÆue_t
 
Ál£_vÆue
,

935 c⁄° 
nvxcu_image_t
* 
ouçut
,

936 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

966 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuThªshﬁdR™ge
(c⁄° 
nvxcu_image_t
* 
öput
,

967 
nvxcu_pixñ_vÆue_t
 
thªsh_lowî_vÆue
,

968 
nvxcu_pixñ_vÆue_t
 
thªsh_uµî_vÆue
,

969 
nvxcu_pixñ_vÆue_t
 
åue_vÆue
,

970 
nvxcu_pixñ_vÆue_t
 
Ál£_vÆue
,

971 c⁄° 
nvxcu_image_t
* 
ouçut
,

972 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

999 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuAccumuœãImage
(c⁄° 
nvxcu_image_t
* 
öput
,

1000 c⁄° 
nvxcu_image_t
* 
accum
,

1001 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1032 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuAccumuœãWeighãd
(c⁄° 
nvxcu_image_t
* 
öput
,

1033 
Æpha
,

1034 c⁄° 
nvxcu_image_t
* 
accum
,

1035 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1063 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuAccumuœãSqu¨e
(c⁄° 
nvxcu_image_t
* 
öput
,

1064 
uöt32_t
 
shi·
,

1065 c⁄° 
nvxcu_image_t
* 
accum
,

1066 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1098 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuBôwi£And
(c⁄° 
nvxcu_image_t
* 
ö1
,

1099 c⁄° 
nvxcu_image_t
* 
ö2
,

1100 c⁄° 
nvxcu_image_t
* 
out
,

1101 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1133 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuBôwi£Or
(c⁄° 
nvxcu_image_t
* 
ö1
,

1134 c⁄° 
nvxcu_image_t
* 
ö2
,

1135 c⁄° 
nvxcu_image_t
* 
out
,

1136 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1168 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuBôwi£X‹
(c⁄° 
nvxcu_image_t
* 
ö1
,

1169 c⁄° 
nvxcu_image_t
* 
ö2
,

1170 c⁄° 
nvxcu_image_t
* 
out
,

1171 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1200 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuBôwi£NŸ
(c⁄° 
nvxcu_image_t
* 
öput
,

1201 c⁄° 
nvxcu_image_t
* 
ouçut
,

1202 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1240 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuAdd
(c⁄° 
nvxcu_image_t
* 
ö1
,

1241 c⁄° 
nvxcu_image_t
* 
ö2
,

1242 
nvxcu_c⁄vît_pﬁicy_e
 
pﬁicy
,

1243 c⁄° 
nvxcu_image_t
* 
out
,

1244 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1282 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuSubåa˘
(c⁄° 
nvxcu_image_t
* 
ö1
,

1283 c⁄° 
nvxcu_image_t
* 
ö2
,

1284 
nvxcu_c⁄vît_pﬁicy_e
 
pﬁicy
,

1285 c⁄° 
nvxcu_image_t
* 
out
,

1286 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1338 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuMu…ùly
(c⁄° 
nvxcu_image_t
* 
ö1
,

1339 c⁄° 
nvxcu_image_t
* 
ö2
,

1340 
sˇÀ
,

1341 
nvxcu_c⁄vît_pﬁicy_e
 
ovîÊow_pﬁicy
,

1342 
nvxcu_round_pﬁicy_e
 
roundög_pﬁicy
,

1343 c⁄° 
nvxcu_image_t
* 
out
,

1344 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1411 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuC⁄vîtDïth
(c⁄° 
nvxcu_image_t
* 
öput
,

1412 c⁄° 
nvxcu_image_t
* 
ouçut
,

1413 
nvxcu_c⁄vît_pﬁicy_e
 
pﬁicy
,

1414 
öt32_t
 
shi·
,

1415 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1654 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuCﬁ‹C⁄vît
(c⁄° 
nvxcu_image_t
* 
öput
,

1655 c⁄° 
nvxcu_image_t
* 
ouçut
,

1656 
nvxcu_cﬁ‹_•a˚_e
 
cﬁ‹_•a˚
,

1657 
nvxcu_ch™√l_ønge_e
 
ch™√l_ønge
,

1658 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1685 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuTabÀLookup
(c⁄° 
nvxcu_image_t
* 
öput
,

1686 c⁄° * 
lut_dev_±r
,

1687 
uöt32_t
 
lut_cou¡
, uöt32_à
lut_off£t
,

1688 c⁄° 
nvxcu_image_t
* 
ouçut
,

1689 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1732 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuSobñ3x3
(c⁄° 
nvxcu_image_t
* 
öput
,

1733 c⁄° 
nvxcu_image_t
* 
ouçut_x
,

1734 c⁄° 
nvxcu_image_t
* 
ouçut_y
,

1735 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

1736 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1763 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuErode3x3
(c⁄° 
nvxcu_image_t
* 
öput
,

1764 c⁄° 
nvxcu_image_t
* 
ouçut
,

1765 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

1766 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1794 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuDû©e3x3
(c⁄° 
nvxcu_image_t
* 
öput
,

1795 c⁄° 
nvxcu_image_t
* 
ouçut
,

1796 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

1797 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1820 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuMedün3x3
(c⁄° 
nvxcu_image_t
* 
öput
,

1821 c⁄° 
nvxcu_image_t
* 
ouçut
,

1822 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

1823 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1854 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuBox3x3
(c⁄° 
nvxcu_image_t
* 
öput
,

1855 c⁄° 
nvxcu_image_t
* 
ouçut
,

1856 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

1857 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1888 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuGaussün3x3
(c⁄° 
nvxcu_image_t
* 
öput
,

1889 c⁄° 
nvxcu_image_t
* 
ouçut
,

1890 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

1891 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1935 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuSch¨r3x3
(c⁄° 
nvxcu_image_t
* 
öput
,

1936 c⁄° 
nvxcu_image_t
* 
ouçut_x
,

1937 c⁄° 
nvxcu_image_t
* 
ouçut_y
,

1938 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

1939 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1961 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuL≠œcün3x3
(c⁄° 
nvxcu_image_t
* 
öput
,

1962 c⁄° 
nvxcu_image_t
* 
ouçut
,

1963 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

1964 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

1996 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuI¡egølImage
(c⁄° 
nvxcu_image_t
* 
öput
,

1997 c⁄° 
nvxcu_image_t
* 
ouçut
,

1998 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2020 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuHi°ogøm_GëBufSize
(
uöt32_t
 
öput_width
, uöt32_à
öput_height
,

2021 
nvxcu_df_image_e
 
öput_f‹m©
,

2022 
uöt32_t
 
off£t
,

2023 
uöt32_t
 
ønge
,

2024 
uöt32_t
 
num_bös
,

2025 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

2056 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuHi°ogøm
(c⁄° 
nvxcu_image_t
* 
öput
,

2057 
uöt32_t
 *
di°ributi⁄_dev_±r
,

2058 
uöt32_t
 
off£t
,

2059 
uöt32_t
 
ønge
,

2060 
uöt32_t
 
num_bös
,

2061 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

2062 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2081 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuEquÆizeHi°_GëBufSize
(
uöt32_t
 
öput_width
, uöt32_à
öput_height
,

2082 
nvxcu_df_image_e
 
öput_f‹m©
,

2083 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

2104 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuEquÆizeHi°
(c⁄° 
nvxcu_image_t
* 
öput
,

2105 c⁄° 
nvxcu_image_t
* 
ouçut
,

2106 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

2107 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2235 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuSˇÀImage
(c⁄° 
nvxcu_image_t
* 
§c
,

2236 c⁄° 
nvxcu_image_t
* 
d°
,

2237 
nvxcu_öãΩﬁ©i⁄_ty≥_e
 
ty≥
,

2238 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

2239 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2277 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuW¨pAfföe
(c⁄° 
nvxcu_image_t
* 
öput
,

2278 c⁄° *
m©rix_dev_±r
,

2279 
nvxcu_öãΩﬁ©i⁄_ty≥_e
 
ty≥
,

2280 c⁄° 
nvxcu_image_t
* 
ouçut
,

2281 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

2282 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2321 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuW¨pPî•e˘ive
(c⁄° 
nvxcu_image_t
* 
öput
,

2322 c⁄° *
m©rix_dev_±r
,

2323 
nvxcu_öãΩﬁ©i⁄_ty≥_e
 
ty≥
,

2324 c⁄° 
nvxcu_image_t
* 
ouçut
,

2325 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

2326 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2361 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuRem≠
(c⁄° 
nvxcu_image_t
* 
öput
,

2362 c⁄° 
nvxcu_image_t
* 
èbÀ
,

2363 
nvxcu_öãΩﬁ©i⁄_ty≥_e
 
pﬁicy
,

2364 c⁄° 
nvxcu_image_t
* 
ouçut
,

2365 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

2366 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2385 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuMónStdDev_GëBufSize
(
uöt32_t
 
öput_width
, uöt32_à
öput_height
,

2386 
nvxcu_df_image_e
 
öput_f‹m©
,

2387 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

2413 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuMónStdDev
(c⁄° 
nvxcu_image_t
* 
öput
,

2414 *
món_dev_±r
,

2415 *
°ddev_dev_±r
,

2416 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

2417 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2436 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuMöMaxLoc_GëBufSize
(
uöt32_t
 
öput_width
, uöt32_à
öput_height
,

2437 
nvxcu_df_image_e
 
öput_f‹m©
,

2438 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

2485 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuMöMaxLoc
(c⁄° 
nvxcu_image_t
* 
öput
,

2486 *
mö_vÆ_dev_±r
,

2487 *
max_vÆ_dev_±r
,

2488 c⁄° 
nvxcu_¨øy_t
* 
mö_loc
,

2489 c⁄° 
nvxcu_¨øy_t
* 
max_loc
,

2490 
uöt32_t
 *
mö_cou¡_dev_±r
,

2491 
uöt32_t
 *
max_cou¡_dev_±r
,

2492 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

2493 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2522 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuC⁄vﬁve_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
,

2523 
nvxcu_df_image_e
 
öput_f‹m©
,

2524 
öt32_t
 
kî√l_width
, i¡32_à
kî√l_height
,

2525 
nvxcu_df_image_e
 
ouçut_f‹m©
,

2526 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

2527 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

2585 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuC⁄vﬁve
(c⁄° 
nvxcu_image_t
* 
öput
,

2586 c⁄° 
öt16_t
 *
kî√l_dev_±r
,

2587 
uöt32_t
 
kî√l_div
,

2588 
öt32_t
 
kî√l_width
, i¡32_à
kî√l_height
,

2589 c⁄° 
nvxcu_image_t
* 
ouçut
,

2590 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

2591 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

2592 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2626 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuN⁄LöórFûãr
(
nvxcu_n⁄_löór_fûãr_e
 
fun˘i⁄
,

2627 c⁄° 
nvxcu_image_t
* 
öput
,

2628 
nvxcu_∑âîn_e
 
mask_∑âîn
,

2629 c⁄° 
uöt8_t
* 
mask_dev_±r
,

2630 
öt32_t
 
mask_width
, i¡32_à
mask_height
,

2631 c⁄° 
nvxcu_image_t
* 
ouçut
,

2632 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

2633 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2659 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuHÆfSˇÀGaussün
(c⁄° 
nvxcu_image_t
* 
öput
,

2660 c⁄° 
nvxcu_image_t
* 
ouçut
,

2661 
öt32_t
 
kî√l_size
,

2662 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

2663 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2684 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuGaussünPyømid_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
,

2685 
uöt32_t
 
num_Àvñs
,

2686 
sˇÀ
,

2687 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

2688 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

2722 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuGaussünPyømid
(c⁄° 
nvxcu_pyømid_t
* 
pyr
,

2723 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

2724 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

2725 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2745 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuL≠œcünPyømid_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
,

2746 
uöt32_t
 
num_Àvñs
,

2747 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

2748 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

2780 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuL≠œcünPyømid
(c⁄° 
nvxcu_image_t
* 
öput
,

2781 c⁄° 
nvxcu_pyømid_t
* 
œ∂acün
,

2782 c⁄° 
nvxcu_image_t
* 
ouçut
,

2783 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

2784 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

2785 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2804 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuL≠œcünRec⁄°ru˘_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
,

2805 
uöt32_t
 
num_Àvñs
,

2806 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

2843 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuL≠œcünRec⁄°ru˘
(c⁄° 
nvxcu_pyømid_t
* 
œ∂acün
,

2844 c⁄° 
nvxcu_image_t
* 
öput
,

2845 c⁄° 
nvxcu_image_t
* 
ouçut
,

2846 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

2847 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

2867 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuC™nyEdgeDëe˘‹_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
,

2868 
öt32_t
 
gødõ¡_size
,

2869 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

2989 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuC™nyEdgeDëe˘‹
(c⁄° 
nvxcu_image_t
* 
öput
,

2990 
öt32_t
 
lowî_thªsh
, i¡32_à
uµî_thªsh
,

2991 
öt8_t
 
åue_vÆue
, i¡8_à
Ál£_vÆue
,

2992 
öt32_t
 
gødõ¡_size
,

2993 
nvxcu_n‹m_ty≥_e
 
n‹m_ty≥
,

2994 c⁄° 
nvxcu_image_t
* 
ouçut
,

2995 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

2996 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

3023 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuH¨risC‹√rs_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
,

3024 
nvxcu_df_image_e
 
f‹m©
,

3025 
mö_di°™˚
,

3026 
öt32_t
 
gødõ¡_size
,

3027 
öt32_t
 
block_size
,

3028 
nvxcu_¨øy_ôem_ty≥_e
 
¨r_ty≥
, 
uöt32_t
 
¨r_ˇ∑côy
,

3029 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

3030 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

3157 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuH¨risC‹√rs
(c⁄° 
nvxcu_image_t
* 
öput
,

3158 
°ªngth_thªsh
,

3159 
mö_di°™˚
,

3160 
£nsôivôy
,

3161 
öt32_t
 
gødõ¡_size
,

3162 
öt32_t
 
block_size
,

3163 c⁄° 
nvxcu_¨øy_t
* 
c‹√rs
,

3164 
uöt32_t
 *
num_c‹√rs_dev_±r
,

3165 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

3166 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

3167 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

3190 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuFa°C‹√rs_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
,

3191 
nvxcu_df_image_e
 
f‹m©
,

3192 
öt32_t
 
n⁄max_suµªssi⁄
,

3193 
nvxcu_¨øy_ôem_ty≥_e
 
¨r_ty≥
, 
uöt32_t
 
¨r_ˇ∑côy
,

3194 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

3195 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

3284 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuFa°C‹√rs
(c⁄° 
nvxcu_image_t
* 
öput
,

3285 
°ªngth_thªsh
,

3286 
öt32_t
 
n⁄max_suµªssi⁄
,

3287 c⁄° 
nvxcu_¨øy_t
* 
c‹√rs
,

3288 
uöt32_t
 *
num_c‹√rs_dev_±r
,

3289 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

3290 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

3291 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

3316 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuO±iˇlFlowPyrLK_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
, uöt32_à
Àvñs
, 
sˇÀ
,

3317 
nvxcu_¨øy_ôem_ty≥_e
 
¨r_ty≥
, 
uöt32_t
 
ˇ∑côy
,

3318 
uöt32_t
 
wödow_dimísi⁄
,

3319 
öt32_t
 
ˇlcEº‹
,

3320 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

3321 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

3427 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuO±iˇlFlowPyrLK
(c⁄° 
nvxcu_pyømid_t
* 
ﬁd_images
,

3428 c⁄° 
nvxcu_pyømid_t
* 
√w_images
,

3429 c⁄° 
nvxcu_¨øy_t
* 
ﬁd_poöts
,

3430 c⁄° 
nvxcu_¨øy_t
* 
√w_poöts
,

3431 
nvxcu_ãrmö©i⁄_¸ôîü_e
 
ãrmö©i⁄
,

3432 
ïsû⁄
,

3433 
uöt32_t
 
num_ôî©i⁄s
,

3434 
uöt32_t
 
wödow_dimísi⁄
,

3435 
öt32_t
 
ˇlcEº‹
,

3436 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

3437 c⁄° 
nvxcu_b‹dî_t
* 
b‹dî
,

3438 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

3471 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuFlùImage
(c⁄° 
nvxcu_image_t
* 
öput
,

3472 c⁄° 
nvxcu_image_t
* 
ouçut
,

3473 
nvxcu_Êù_mode_e
 
Êù_mode
,

3474 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

3496 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuH¨risTøck_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
,

3497 
nvxcu_¨øy_ôem_ty≥_e
 
¨r_ty≥
, 
uöt32_t
 
¨r_ˇ∑côy
,

3498 
uöt32_t
 
˚Œ_size
,

3499 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

3575 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuH¨risTøck
(c⁄° 
nvxcu_image_t
* 
öput
,

3576 c⁄° 
nvxcu_¨øy_t
* 
ouçut
,

3577 c⁄° 
nvxcu_image_t
* 
mask
,

3578 c⁄° 
nvxcu_¨øy_t
* 
åacked_poöts
,

3579 
k
, 
thªshﬁd
, 
uöt32_t
 
˚Œ_size
,

3580 
size_t
 *
num_c‹√rs_dev_±r
,

3581 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

3582 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

3604 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuFa°Tøck_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
,

3605 
nvxcu_¨øy_ôem_ty≥_e
 
¨r_ty≥
, 
uöt32_t
 
¨r_ˇ∑côy
,

3606 
uöt32_t
 
˚Œ_size
,

3607 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

3700 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuFa°Tøck
(c⁄° 
nvxcu_image_t
* 
öput
,

3701 c⁄° 
nvxcu_¨øy_t
* 
ouçut
,

3702 c⁄° 
nvxcu_image_t
* 
mask
,

3703 c⁄° 
nvxcu_¨øy_t
* 
åacked_poöts
,

3704 
uöt32_t
 
ty≥
, uöt32_à
thªshﬁd
, uöt32_à
˚Œ_size
,

3705 
size_t
 *
num_c‹√rs_dev_±r
,

3706 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

3707 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

3743 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuMu…ùlyBySˇœr
(c⁄° 
nvxcu_image_t
* 
§c
,

3744 c⁄° 
nvxcu_image_t
* 
d°
,

3745 
Æpha
,

3746 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

3843 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuCª©eMŸi⁄Fõld
(c⁄° 
nvxcu_image_t
* 
ªf_image
,

3844 c⁄° 
nvxcu_image_t
* 
cur_image
,

3845 c⁄° 
nvxcu_image_t
* 
™ch‹
,

3846 c⁄° 
nvxcu_image_t
* 
büs
,

3847 c⁄° 
nvxcu_image_t
* 
be°_mv0
,

3848 c⁄° 
nvxcu_image_t
* 
be°_mv1
,

3849 c⁄° 
nvxcu_image_t
* 
ßd_èbÀ
,

3850 
öt32_t
 
block_size
,

3851 
öt32_t
 
£¨ch_wödow_width
, i¡32_à
£¨ch_wödow_height
,

3852 
büs_weight
,

3853 
öt32_t
 
mv_div_Á˘‹
,

3854 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

3874 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuReföeMŸi⁄Fõld_GëBufSize
(
uöt32_t
 
mv_width
, uöt32_à
mv_height
,

3875 
öt32_t
 
£¨ch_wödow_width
, i¡32_à
£¨ch_wödow_height
,

3876 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

3947 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuReföeMŸi⁄Fõld
(c⁄° 
nvxcu_image_t
* 
ö_mv0
,

3948 c⁄° 
nvxcu_image_t
* 
ö_mv1
,

3949 c⁄° 
nvxcu_image_t
* 
ßd_èbÀ
,

3950 c⁄° 
nvxcu_image_t
* 
out_mv0
,

3951 c⁄° 
nvxcu_image_t
* 
out_mv1
,

3952 
öt32_t
 
£¨ch_wödow_width
, i¡32_à
£¨ch_wödow_height
,

3953 
öt32_t
 
num_ôî©i⁄s
,

3954 
smoŸh√ss_Á˘‹
,

3955 
öt32_t
 
mv_div_Á˘‹
,

3956 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

3957 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4014 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuP¨tôi⁄MŸi⁄Fõld
(c⁄° 
nvxcu_image_t
* 
ªf_image
,

4015 c⁄° 
nvxcu_image_t
* 
cur_image
,

4016 c⁄° 
nvxcu_image_t
* 
ö_mv_0
,

4017 c⁄° 
nvxcu_image_t
* 
ö_mv_1
,

4018 c⁄° 
nvxcu_image_t
* 
out_mv_0
,

4019 c⁄° 
nvxcu_image_t
* 
out_mv_1
,

4020 
smoŸh√ss_Á˘‹
,

4021 
öt32_t
 
mv_div_Á˘‹
,

4022 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4043 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuSãªoBlockM©chög_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
,

4044 
uöt32_t
 
wö_size
,

4045 
uöt32_t
 
max_di•¨ôy
,

4046 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

4093 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuSãªoBlockM©chög
(c⁄° 
nvxcu_image_t
* 
À·
,

4094 c⁄° 
nvxcu_image_t
* 
right
,

4095 c⁄° 
nvxcu_image_t
* 
di•
,

4096 
uöt32_t
 
wö_size
,

4097 
uöt32_t
 
max_di•¨ôy
,

4098 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

4099 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4124 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuSemiGlobÆM©chög_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
,

4125 
öt32_t
 
möD
, i¡32_à
maxD
,

4126 
öt32_t
 
ßd
, i¡32_à
˘_wö_size
, 
nvxcu_sgm_Êags_e
 
Êags
,

4127 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

4169 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuSemiGlobÆM©chög
(c⁄° 
nvxcu_image_t
* 
À·
,

4170 c⁄° 
nvxcu_image_t
* 
right
,

4171 c⁄° 
nvxcu_image_t
* 
di•¨ôy
,

4172 
öt32_t
 
möD
,

4173 
öt32_t
 
maxD
,

4174 
öt32_t
 
P1
,

4175 
öt32_t
 
P2
,

4176 
öt32_t
 
ßd
,

4177 
öt32_t
 
˘_wö_size
,

4178 
öt32_t
 
hc_wö_size
,

4179 
öt32_t
 
˛ù
,

4180 
öt32_t
 
max_diff
,

4181 
öt32_t
 
uniquíess
,

4182 
nvxcu_sˇ∆öe_e
 
sˇ∆öes_mask
,

4183 
nvxcu_sgm_Êags_e
 
Êags
,

4184 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

4185 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4201 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuCompuãCo°BT_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
,

4202 
nvxcu_df_image_e
 
f‹m©
,

4203 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

4231 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuCompuãCo°BT
(c⁄° 
nvxcu_image_t
* 
À·
,

4232 c⁄° 
nvxcu_image_t
* 
right
,

4233 c⁄° 
nvxcu_image_t
* 
co°
,

4234 
öt32_t
 
möD
,

4235 
öt32_t
 
maxD
,

4236 
öt32_t
 
˛ù
,

4237 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

4238 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4253 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuCompuãModifõdCo°BT_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
,

4254 
nvxcu_df_image_e
 
f‹m©
,

4255 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

4285 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuCompuãModifõdCo°BT
(c⁄° 
nvxcu_image_t
* 
À·
,

4286 c⁄° 
nvxcu_image_t
* 
right
,

4287 c⁄° 
nvxcu_image_t
* 
co°
,

4288 
öt32_t
 
möD
,

4289 
öt32_t
 
maxD
,

4290 
öt32_t
 
˛ù
,

4291 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

4292 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4312 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuC⁄vﬁveCo°
(c⁄° 
nvxcu_image_t
* 
pixñ_co°
,

4313 c⁄° 
nvxcu_image_t
* 
block_co°
,

4314 
öt32_t
 
D
,

4315 
öt32_t
 
wö_size
,

4316 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4340 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuAggªg©eCo°Sˇ∆öes
(c⁄° 
nvxcu_image_t
* 
öput_co°
,

4341 c⁄° 
nvxcu_image_t
* 
ouçut_co°
,

4342 
öt32_t
 
D
,

4343 
öt32_t
 
P1
,

4344 
öt32_t
 
P2
,

4345 
nvxcu_sˇ∆öe_e
 
sˇ∆öes_mask
,

4346 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4374 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuCompuãDi•¨ôy
(c⁄° 
nvxcu_image_t
* 
co°
,

4375 c⁄° 
nvxcu_image_t
* 
di•¨ôy
,

4376 
öt32_t
 
möD
,

4377 
öt32_t
 
maxD
,

4378 
öt32_t
 
uniquíess
,

4379 
öt32_t
 
maxDiff
,

4380 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4412 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuPSGMCo°Pri‹
(c⁄° 
nvxcu_image_t
* 
¥ev
,

4413 c⁄° 
nvxcu_image_t
* 
co°
,

4414 
öt32_t
 
D
,

4415 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4445 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuPSGMDi•¨ôyMîge
(c⁄° 
nvxcu_image_t
* 
¥ev
,

4446 c⁄° 
nvxcu_image_t
* 
cuº
,

4447 
öt32_t
 
D
,

4448 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4476 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuCísusTønsf‹m
(c⁄° 
nvxcu_image_t
* 
§c
,

4477 c⁄° 
nvxcu_image_t
* 
d°
,

4478 
öt32_t
 
wö_size
,

4479 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4513 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuCompuãCo°Hammög
(c⁄° 
nvxcu_image_t
* 
À·
,

4514 c⁄° 
nvxcu_image_t
* 
right
,

4515 c⁄° 
nvxcu_image_t
* 
co°
,

4516 
öt32_t
 
möD
,

4517 
öt32_t
 
maxD
,

4518 
öt32_t
 
wö_size
,

4519 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4541 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuHoughLöes_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
,

4542 
uöt32_t
 
¨r_ˇ∑côy
,

4543 
rho
, 
thëa
,

4544 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

4581 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuHoughLöes
(c⁄° 
nvxcu_image_t
* 
öput
,

4582 c⁄° 
nvxcu_¨øy_t
* 
ouçut
,

4583 
rho
, 
thëa
, 
uöt32_t
 
thªshﬁd
,

4584 
uöt32_t
 *
num_löes_dev_±r
,

4585 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

4586 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4610 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuHoughSegmíts_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
,

4611 
uöt32_t
 
¨r_ˇ∑côy
,

4612 
rho
, 
thëa
,

4613 
uöt32_t
 
mö_löe_Àngth
, uöt32_à
max_löe_g≠
,

4614 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

4651 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuHoughSegmíts
(c⁄° 
nvxcu_image_t
* 
öput
,

4652 c⁄° 
nvxcu_¨øy_t
* 
ouçut
,

4653 
rho
, 
thëa
, 
uöt32_t
 
thªshﬁd
,

4654 
uöt32_t
 
mö_löe_Àngth
, uöt32_à
max_löe_g≠
,

4655 
uöt32_t
 *
num_£gmíts_dev_±r
,

4656 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

4657 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

4681 
NVX_C_API
 
nvxcu_tmp_buf_size_t
 
nvxcuHoughCú˛es_GëBufSize
(
uöt32_t
 
width
, uöt32_à
height
, 
nvxcu_df_image_e
 
f‹m©
,

4682 
uöt32_t
 
¨r_ˇ∑côy
,

4683 
dp
, 
mö_di°
,

4684 
uöt32_t
 
mö_ødius
, uöt32_à
max_ødius
,

4685 c⁄° 
cudaDevi˚Pr›
* 
¥›
);

4735 
NVX_C_API
 
nvxcu_îr‹_°©us_e
 
nvxcuHoughCú˛es
(c⁄° 
nvxcu_image_t
* 
edges
,

4736 c⁄° 
nvxcu_image_t
* 
dx
,

4737 c⁄° 
nvxcu_image_t
* 
dy
,

4738 c⁄° 
nvxcu_¨øy_t
* 
cú˛es
,

4739 
uöt32_t
 *
num_dëe˘i⁄s_dev_±r
,

4740 
dp
,

4741 
mö_di°
,

4742 
uöt32_t
 
mö_ødius
, uöt32_à
max_ødius
,

4743 
uöt32_t
 
acc_thªshﬁd
,

4744 c⁄° 
nvxcu_tmp_buf_t
* 
tmp_buf
,

4745 c⁄° 
nvxcu_exec_èrgë_t
* 
exec_èrgë
);

	@/usr/include/VX/vx.h

29 #i‚de‡
_OPENVX_H_


30 
	#_OPENVX_H_


	)

40 
	#VX_MAX_IMPLEMENTATION_NAME
 (64)

	)

45 
	#VX_MAX_KERNEL_NAME
 (256)

	)

50 
	#VX_MAX_LOG_MESSAGE_LEN
 (1024)

	)

56 
	#VX_MAX_REFERENCE_NAME
 (64)

	)

58 
	~<VX/vx_víd‹s.h
>

59 
	~<VX/vx_ty≥s.h
>

60 
	~<VX/vx_kî√ls.h
>

61 
	~<VX/vx_≠i.h
>

62 
	~<VX/vx_nodes.h
>

63 
	~<VX/vx_com∑tibûôy.h
>

68 
	#VX_VERSION_MAJOR
(
x
Ë((x & 0xFFË<< 8)

	)

73 
	#VX_VERSION_MINOR
(
x
Ë((x & 0xFFË<< 0)

	)

78 
	#VX_VERSION_1_0
 (
	`VX_VERSION_MAJOR
(1Ë| 
	`VX_VERSION_MINOR
(0))

	)

79 
	#VX_VERSION_1_1
 (
	`VX_VERSION_MAJOR
(1Ë| 
	`VX_VERSION_MINOR
(1))

	)

84 
	#VX_VERSION
 
VX_VERSION_1_1


	)

	@/usr/include/VX/vxu.h

29 #i‚de‡
_OPENVX_UTILITY_H_


30 
	#_OPENVX_UTILITY_H_


	)

37 #ifde‡
__˝lu•lus


50 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuCﬁ‹C⁄vît
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
);

62 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuCh™√lExåa˘
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_íum
 
ch™√l
, vx_imagê
ouçut
);

76 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuCh™√lComböe
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
∂™e0
, vx_imagê
∂™e1
, vx_imagê
∂™e2
, vx_imagê
∂™e3
, vx_imagê
ouçut
);

88 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuSobñ3x3
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut_x
, vx_imagê
ouçut_y
);

100 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuMagnôude
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
gød_x
, vx_imagê
gød_y
, vx_imagê
mag
);

112 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuPha£
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
gød_x
, vx_imagê
gød_y
, vx_imagê
‹õ¡©i⁄
);

124 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuSˇÀImage
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
§c
, vx_imagê
d°
, 
vx_íum
 
ty≥
);

136 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuTabÀLookup
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_lut
 
lut
, vx_imagê
ouçut
);

147 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuHi°ogøm
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_di°ributi⁄
 
di°ributi⁄
);

158 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuEquÆizeHi°
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
);

170 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuAbsDiff
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
ö1
, vx_imagê
ö2
, vx_imagê
out
);

182 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuMónStdDev
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_Êﬂt32
 *
món
, vx_Êﬂt32 *
°ddev
);

196 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuThªshﬁd
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_thªshﬁd
 
thªsh
, vx_imagê
ouçut
);

207 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuI¡egølImage
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
);

218 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuErode3x3
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
);

229 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuDû©e3x3
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
);

240 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuMedün3x3
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
);

251 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuBox3x3
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
);

262 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuGaussün3x3
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
);

276 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuN⁄LöórFûãr
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_íum
 
fun˘i⁄
, 
vx_image
 
öput
, 
vx_m©rix
 
mask
, vx_imagê
ouçut
);

290 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuC⁄vﬁve
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_c⁄vﬁuti⁄
 
c⁄v
, vx_imagê
ouçut
);

301 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuGaussünPyømid
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_pyømid
 
gaussün
);

314 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuL≠œcünPyømid
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_pyømid
 
œ∂acün
, vx_imagê
ouçut
);

327 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuL≠œcünRec⁄°ru˘
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_pyømid
 
œ∂acün
, 
vx_image
 
öput
,

328 
vx_image
 
ouçut
);

339 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuAccumuœãImage
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
accum
);

351 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuAccumuœãWeighãdImage
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_sˇœr
 
Æpha
, vx_imagê
accum
);

363 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuAccumuœãSqu¨eImage
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_sˇœr
 
shi·
, vx_imagê
accum
);

379 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuMöMaxLoc
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
,

380 
vx_sˇœr
 
möVÆ
, vx_sˇœ∏
maxVÆ
,

381 
vx_¨øy
 
möLoc
, vx_¨øy 
maxLoc
,

382 
vx_sˇœr
 
möCou¡
, vx_sˇœ∏
maxCou¡
);

395 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuC⁄vîtDïth
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
, 
vx_íum
 
pﬁicy
, 
vx_öt32
 
shi·
);

412 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuC™nyEdgeDëe˘‹
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_thªshﬁd
 
hy°
,

413 
vx_öt32
 
gødõ¡_size
, 
vx_íum
 
n‹m_ty≥
,

414 
vx_image
 
ouçut
);

426 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuHÆfSˇÀGaussün
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
, 
vx_öt32
 
kî√l_size
);

438 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuAnd
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
ö1
, vx_imagê
ö2
, vx_imagê
out
);

450 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuOr
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
ö1
, vx_imagê
ö2
, vx_imagê
out
);

462 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuX‹
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
ö1
, vx_imagê
ö2
, vx_imagê
out
);

473 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuNŸ
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, vx_imagê
ouçut
);

488 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuMu…ùly
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
ö1
, vx_imagê
ö2
, 
vx_Êﬂt32
 
sˇÀ
, 
vx_íum
 
ovîÊow_pﬁicy
, vx_íum 
roundög_pﬁicy
, vx_imagê
out
);

501 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuAdd
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
ö1
, vx_imagê
ö2
, 
vx_íum
 
pﬁicy
, vx_imagê
out
);

514 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuSubåa˘
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
ö1
, vx_imagê
ö2
, 
vx_íum
 
pﬁicy
, vx_imagê
out
);

528 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuW¨pAfföe
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_m©rix
 
m©rix
, 
vx_íum
 
ty≥
, vx_imagê
ouçut
);

542 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuW¨pPî•e˘ive
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_m©rix
 
m©rix
, 
vx_íum
 
ty≥
, vx_imagê
ouçut
);

561 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuH¨risC‹√rs
(
vx_c⁄ãxt
 
c⁄ãxt
,

562 
vx_image
 
öput
,

563 
vx_sˇœr
 
°ªngth_thªsh
,

564 
vx_sˇœr
 
mö_di°™˚
,

565 
vx_sˇœr
 
£nsôivôy
,

566 
vx_öt32
 
gødõ¡_size
,

567 
vx_öt32
 
block_size
,

568 
vx_¨øy
 
c‹√rs
,

569 
vx_sˇœr
 
num_c‹√rs
);

585 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuFa°C‹√rs
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_image
 
öput
, 
vx_sˇœr
 
°ªngth_thªsh
, 
vx_boﬁ
 
n⁄max_suµªssi⁄
, 
vx_¨øy
 
c‹√rs
, vx_sˇœ∏
num_c‹√rs
);

610 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuO±iˇlFlowPyrLK
(
vx_c⁄ãxt
 
c⁄ãxt
,

611 
vx_pyømid
 
ﬁd_images
,

612 
vx_pyømid
 
√w_images
,

613 
vx_¨øy
 
ﬁd_poöts
,

614 
vx_¨øy
 
√w_poöts_e°im©es
,

615 
vx_¨øy
 
√w_poöts
,

616 
vx_íum
 
ãrmö©i⁄
,

617 
vx_sˇœr
 
ïsû⁄
,

618 
vx_sˇœr
 
num_ôî©i⁄s
,

619 
vx_sˇœr
 
u£_öôül_e°im©e
,

620 
vx_size
 
wödow_dimísi⁄
);

632 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxuRem≠
(
vx_c⁄ãxt
 
c⁄ãxt
,

633 
vx_image
 
öput
,

634 
vx_ªm≠
 
èbÀ
,

635 
vx_íum
 
pﬁicy
,

636 
vx_image
 
ouçut
);

638 #ifde‡
__˝lu•lus


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/opencv2/core/core.hpp

46 #i‚de‡
__OPENCV_CORE_HPP__


47 
	#__OPENCV_CORE_HPP__


	)

49 
	~"›ícv2/c‹e/ty≥s_c.h
"

50 
	~"›ícv2/c‹e/vîsi⁄.hµ
"

52 #ifde‡
__˝lu•lus


54 #i‚de‡
SKIP_INCLUDES


55 
	~<limôs.h
>

56 
	~<Æg‹ôhm
>

57 
	~<cm©h
>

58 
	~<c°ddef
>

59 
	~<com∂ex
>

60 
	~<m≠
>

61 
	~<√w
>

62 
	~<°rög
>

63 
	~<ve˘‹
>

64 
	~<s°ªam
>

70 
«me•a˚
 
	gcv
 {

72 #unde‡
abs


73 #unde‡
mö


74 #unde‡
max


75 #unde‡
Com∂ex


77 
usög
 
	g°d
::
ve˘‹
;

78 
usög
 
	g°d
::
°rög
;

79 
usög
 
	g°d
::
±rdiff_t
;

81 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gSize_
;

82 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gPoöt_
;

83 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gRe˘_
;

84 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
˛ass
 
	gVec
;

85 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
˛ass
 
	gM©x
;

87 
	g°d
::
	t°rög
 
	tSåög
;

89 
˛ass
 
	gM©
;

90 
˛ass
 
	gS∑r£M©
;

91 
M©
 
	tM©ND
;

93 
«me•a˚
 
	gogl
 {

94 
˛ass
 
	gBuf„r
;

95 
˛ass
 
	gTextuª2D
;

96 
˛ass
 
	gAºays
;

100 
˛ass
 
	gGlBuf„r
;

101 
˛ass
 
	gGlTextuª
;

102 
˛ass
 
	gGlAºays
;

103 
˛ass
 
	gGlCamîa
;

106 
«me•a˚
 
	ggpu
 {

107 
˛ass
 
	gGpuM©
;

110 
˛ass
 
CV_EXPORTS
 
	gM©Ex¥
;

111 
˛ass
 
CV_EXPORTS
 
	gM©Op_Ba£
;

112 
˛ass
 
CV_EXPORTS
 
	gM©Arg
;

113 
˛ass
 
CV_EXPORTS
 
	gM©C⁄°Iãøt‹
;

115 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gM©_
;

116 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gM©Iãøt‹_
;

117 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gM©C⁄°Iãøt‹_
;

118 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gM©CommaInôülizî_
;

120 #i‡!
deföed
(
ANDROID
Ë|| (deföed(
_GLIBCXX_USE_WCHAR_T
) && _GLIBCXX_USE_WCHAR_T)

121 
	g°d
::
	tbasic_°rög
<
	twch¨_t
> 
	tWSåög
;

123 
CV_EXPORTS
 
°rög
 
‰omUtf16
(c⁄° 
WSåög
& 
°r
);

124 
CV_EXPORTS
 
WSåög
 
toUtf16
(c⁄° 
°rög
& 
°r
);

127 
CV_EXPORTS
 
°rög
 
f‹m©
–c⁄° * 
fmt
, ... );

128 
CV_EXPORTS
 
°rög
 
ãmpfûe
–c⁄° * 
suffix
 
CV_DEFAULT
(0));

131 íum { 
	gDECOMP_LU
=0, 
	gDECOMP_SVD
=1, 
	gDECOMP_EIG
=2, 
	gDECOMP_CHOLESKY
=3, 
	gDECOMP_QR
=4, 
	gDECOMP_NORMAL
=16 };

132 íum { 
	gNORM_INF
=1, 
	gNORM_L1
=2, 
	gNORM_L2
=4, 
	gNORM_L2SQR
=5, 
	gNORM_HAMMING
=6, 
	gNORM_HAMMING2
=7, 
	gNORM_TYPE_MASK
=7, 
	gNORM_RELATIVE
=8, 
	gNORM_MINMAX
=32 };

133 íum { 
	gCMP_EQ
=0, 
	gCMP_GT
=1, 
	gCMP_GE
=2, 
	gCMP_LT
=3, 
	gCMP_LE
=4, 
	gCMP_NE
=5 };

134 íum { 
	gGEMM_1_T
=1, 
	gGEMM_2_T
=2, 
	gGEMM_3_T
=4 };

135 íum { 
	gDFT_INVERSE
=1, 
	gDFT_SCALE
=2, 
	gDFT_ROWS
=4, 
	gDFT_COMPLEX_OUTPUT
=16, 
	gDFT_REAL_OUTPUT
=32,

136 
	gDCT_INVERSE
 = 
DFT_INVERSE
, 
	gDCT_ROWS
=
DFT_ROWS
 };

143 ˛as†
	cCV_EXPORTS
 
	gEx˚±i⁄
 : 
public
 
°d
::
ex˚±i⁄


145 
public
:

149 
Ex˚±i⁄
();

154 
Ex˚±i⁄
(
_code
, c⁄° 
°rög
& 
_îr
, c⁄° såög& 
_func
, c⁄° såög& 
_fûe
, 
_löe
);

155 
	gvútuÆ
 ~
Ex˚±i⁄
(Ë
throw
();

160 
vútuÆ
 c⁄° *
wh©
(Ëc⁄° 
throw
();

161 
f‹m©Mesßge
();

163 
°rög
 
	gmsg
;

165 
	gcode
;

166 
°rög
 
	gîr
;

167 
°rög
 
	gfunc
;

168 
°rög
 
	gfûe
;

169 
	glöe
;

182 
CV_EXPORTS
 
îr‹
–c⁄° 
Ex˚±i⁄
& 
exc
 );

192 
CV_EXPORTS
 
boﬁ
 
£tBªakOnEº‹
(boﬁ 
Êag
);

194 (
	tCV_CDECL
 *
	tEº‹CÆlback
)–
	t°©us
, c⁄° * 
	tfunc_«me
,

195 c⁄° * 
	tîr_msg
, c⁄° * 
	tfûe_«me
,

196 
	tlöe
, * 
	tu£rd©a
 );

209 
CV_EXPORTS
 
Eº‹CÆlback
 
	`ªdúe˘Eº‹
–Eº‹CÆlback 
îrCÆlback
,

210 * 
u£rd©a
=0, ** 
¥evU£rd©a
=0);

213 #i‡
deföed
 
__GNUC__


214 
	#CV_Func
 
__func__


	)

215 #ñi‡
deföed
 
_MSC_VER


216 
	#CV_Func
 
__FUNCTION__


	)

218 
	#CV_Func
 ""

	)

221 
	#CV_Eº‹
–
code
, 
msg
 ) 
cv
::
	`îr‹
–cv::
	$Ex˚±i⁄
(
code
, 
msg
, 
CV_Func
, 
__FILE__
, 
__LINE__
Ë)

	)

222 
	#CV_Eº‹_
–
code
, 
¨gs
 ) 
cv
::
	`îr‹
–cv::
	$Ex˚±i⁄
(
code
, 
cv
::
f‹m©
 
¨gs
, 
CV_Func
, 
__FILE__
, 
__LINE__
Ë)

	)

223 
	#CV_As£π
–
ex¥
 ) if(!!”x¥)Ë; 
cv
::
	`îr‹
–cv::
	`Ex˚±i⁄
(
CV_StsAs£π
, #ex¥, 
CV_Func
, 
__FILE__
, 
__LINE__
Ë)

	)

225 #ifde‡
_DEBUG


226 
	#CV_DbgAs£π
(
ex¥
Ë
	$CV_As£π
(
ex¥
)

	)

228 
	#CV_DbgAs£π
(
ex¥
)

	)

231 
CV_EXPORTS
 
	`glob
(
Såög
 
∑âîn
, 
°d
::
ve˘‹
<Såög>& 
ªsu…
, 
boﬁ
 
ªcursive
 = 
Ál£
);

233 
CV_EXPORTS
 
	`£tNumThªads
(
¡hªads
);

234 
CV_EXPORTS
 
	`gëNumThªads
();

235 
CV_EXPORTS
 
	`gëThªadNum
();

237 
CV_EXPORTS_W
 c⁄° 
°rög
& 
	`gëBuûdInf‹m©i⁄
();

247 
CV_EXPORTS_W
 
öt64
 
	`gëTickCou¡
();

261 
CV_EXPORTS_W
 
	`gëTickFªquícy
();

271 
CV_EXPORTS_W
 
öt64
 
	`gëCPUTickCou¡
();

292 
CV_EXPORTS_W
 
boﬁ
 
	`checkH¨dw¨eSuµ‹t
(
„©uª
);

295 
CV_EXPORTS_W
 
	`gëNumbîOfCPUs
();

307 
CV_EXPORTS
 * 
	`Á°MÆloc
(
size_t
 
bufSize
);

315 
CV_EXPORTS
 
	`Á°Fªe
(* 
±r
);

317 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 _Tp* 
	$Æloˇã
(
size_t
 
n
)

319  
√w
 
_Tp
[
n
];

320 
	}
}

322 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	$dóŒoˇã
(
_Tp
* 
±r
, 
size_t
)

324 
dñëe
[] 
±r
;

325 
	}
}

333 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
* 
ÆignPå
(_Tp* 
±r
, 
n
=()(_Tp))

335  (
_Tp
*)(((
size_t
)
±r
 + 
n
-1) & -n);

336 
	}
}

343 
ölöe
 
size_t
 
	$ÆignSize
(
size_t
 
sz
, 
n
)

345 
	`as£π
((
n
 & (n - 1)) == 0);

346  (
sz
 + 
n
-1) & -n;

347 
	}
}

358 
CV_EXPORTS_W
 
£tU£O±imized
(
boﬁ
 
⁄off
);

365 
CV_EXPORTS_W
 
boﬁ
 
u£O±imized
();

370 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cAŒoˇt‹


372 
	gpublic
:

373 
_Tp
 
	tvÆue_ty≥
;

374 
vÆue_ty≥
* 
	tpoöãr
;

375 c⁄° 
	tvÆue_ty≥
* 
	tc⁄°_poöãr
;

376 
	gvÆue_ty≥
& 
	tª„ªn˚
;

377 c⁄° 
	tvÆue_ty≥
& 
	tc⁄°_ª„ªn˚
;

378 
size_t
 
	tsize_ty≥
;

379 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

380 
	gãm∂©e
<
ty≥«me
 
	gU
> cœs†
	cªböd
 { 
	gAŒoˇt‹
<
	tU
> 
	tŸhî
; };

382 
ex∂icô
 
AŒoˇt‹
() {}

383 ~
AŒoˇt‹
() {}

384 
ex∂icô
 
AŒoˇt‹
(Allocator const&) {}

385 
	gãm∂©e
<
ty≥«me
 
	gU
>

386 
ex∂icô
 
AŒoˇt‹
(AŒoˇt‹<
U
> const&) {}

389 
poöãr
 
addªss
(
ª„ªn˚
 
r
Ë{  &
	gr
; }

390 
c⁄°_poöãr
 
addªss
(
c⁄°_ª„ªn˚
 
r
Ë{  &
	gr
; }

392 
poöãr
 
Æloˇã
(
size_ty≥
 
cou¡
, const * =0)

393 {  
ªöãΩªt_ˇ°
<
poöãr
>(
Á°MÆloc
(
cou¡
 *  (
_Tp
))); }

395 
dóŒoˇã
(
poöãr
 
p
, 
size_ty≥
Ë{
Á°Fªe
(p); }

397 
size_ty≥
 
max_size
() const

398 {  
max
(
°©ic_ˇ°
<
_Tp
>(-1)/(_Tp), 1); }

400 
c⁄°ru˘
(
poöãr
 
p
, c⁄° 
_Tp
& 
v
Ë{ 
√w
(
°©ic_ˇ°
<*>(p)) _Tp(v); }

401 
de°roy
(
poöãr
 
p
Ë{ 
	gp
->~
_Tp
(); }

412 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cD©aDïth
 {};

414 
	gãm∂©e
<> 
˛ass
 
	gD©aDïth
<
	gboﬁ
> { 
	gpublic
:Énum { 
vÆue
 = 
CV_8U
, 
	gfmt
=()'u' }; };

415 
	gãm∂©e
<> 
˛ass
 
	gD©aDïth
<
	guch¨
> { 
	gpublic
:Énum { 
vÆue
 = 
CV_8U
, 
	gfmt
=()'u' }; };

416 
	gãm∂©e
<> 
˛ass
 
	gD©aDïth
<
	gsch¨
> { 
	gpublic
:Énum { 
vÆue
 = 
CV_8S
, 
	gfmt
=()'c' }; };

417 
	gãm∂©e
<> 
˛ass
 
	gD©aDïth
<> { 
	gpublic
:Énum { 
vÆue
 = 
CV_8S
, 
	gfmt
=()'c' }; };

418 
	gãm∂©e
<> 
˛ass
 
	gD©aDïth
<
	gush‹t
> { 
	gpublic
:Énum { 
vÆue
 = 
CV_16U
, 
	gfmt
=()'w' }; };

419 
	gãm∂©e
<> 
˛ass
 
	gD©aDïth
<> { 
	gpublic
:Énum { 
vÆue
 = 
CV_16S
, 
	gfmt
=()'s' }; };

420 
	gãm∂©e
<> 
˛ass
 
	gD©aDïth
<> { 
	gpublic
:Énum { 
vÆue
 = 
CV_32S
, 
	gfmt
=()'i' }; };

422 
	gãm∂©e
<> 
˛ass
 
	gD©aDïth
<> { 
	gpublic
:Énum { 
vÆue
 = 
CV_32S
, 
	gfmt
=()'i' }; };

423 
	gãm∂©e
<> 
˛ass
 
	gD©aDïth
<> { 
	gpublic
:Énum { 
vÆue
 = 
CV_32F
, 
	gfmt
=()'f' }; };

424 
	gãm∂©e
<> 
˛ass
 
	gD©aDïth
<> { 
	gpublic
:Énum { 
vÆue
 = 
CV_64F
, 
	gfmt
=()'d' }; };

425 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gD©aDïth
<_Tp*> { 
	gpublic
:Énum { 
vÆue
 = 
CV_USRTYPE1
, 
	gfmt
=()'r' }; };

446 
CV_EXPORTS
 
	gM©x_AddOp
 {};

447 
CV_EXPORTS
 
	gM©x_SubOp
 {};

448 
CV_EXPORTS
 
	gM©x_SˇÀOp
 {};

449 
CV_EXPORTS
 
	gM©x_MulOp
 {};

450 
CV_EXPORTS
 
	gM©x_M©MulOp
 {};

451 
CV_EXPORTS
 
	gM©x_TOp
 {};

453 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> cœs†
	cM©x


455 
	gpublic
:

456 
_Tp
 
	tvÆue_ty≥
;

457 
	gM©x
<
	t_Tp
, (
	tm
 < 
	tn
 ? m :Ç), 1> 
	tdüg_ty≥
;

458 
	gM©x
<
	t_Tp
, 
	tm
, 
	tn
> 
	tm©_ty≥
;

459 íum { 
	gdïth
 = 
D©aDïth
<
_Tp
>::
vÆue
, 
	grows
 = 
m
, 
	gcﬁs
 = 
n
, 
	gch™√ls
 = 
rows
*
cﬁs
,

460 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

463 
M©x
();

465 
M©x
(
_Tp
 
v0
);

466 
M©x
(
_Tp
 
v0
, _T∞
v1
);

467 
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
);

468 
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
);

469 
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
);

470 
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
, _T∞
v5
);

471 
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
, _T∞
v5
, _T∞
v6
);

472 
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
);

473 
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
, _T∞
v8
);

474 
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
, _T∞
v8
, _T∞
v9
);

475 
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

476 
_Tp
 
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
,

477 
_Tp
 
v8
, _T∞
v9
, _T∞
v10
, _T∞
v11
);

478 
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

479 
_Tp
 
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
,

480 
_Tp
 
v8
, _T∞
v9
, _T∞
v10
, _T∞
v11
,

481 
_Tp
 
v12
, _T∞
v13
, _T∞
v14
, _T∞
v15
);

482 
ex∂icô
 
M©x
(c⁄° 
_Tp
* 
vÆs
);

484 
M©x
 
Æl
(
_Tp
 
Æpha
);

485 
M©x
 
zîos
();

486 
M©x
 
⁄es
();

487 
M©x
 
eye
();

488 
M©x
 
düg
(c⁄° 
düg_ty≥
& 
d
);

489 
M©x
 
øndu
(
_Tp
 
a
, _T∞
b
);

490 
M©x
 
øndn
(
_Tp
 
a
, _T∞
b
);

493 
_Tp
 
dŸ
(c⁄° 
M©x
<_Tp, 
m
, 
n
>& 
v
) const;

496 
ddŸ
(c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
v
) const;

499 
	gãm∂©e
<
ty≥«me
 
	gT2
> 
›î©‹
 
	gM©x
<T2, 
	gm
, 
	gn
>() const;

502 
	gãm∂©e
<
	gm1
, 
	gn1
> 
	gM©x
<
	g_Tp
, m1,Ç1> 
ªsh≠e
() const;

505 
	gãm∂©e
<
	gm1
, 
	gn1
> 
	gM©x
<
	g_Tp
, m1,Ç1> 
gë_mö‹
(
i
, 
j
) const;

508 
	gM©x
<
	g_Tp
, 1, 
	gn
> 
row
(
i
) const;

511 
	gM©x
<
	g_Tp
, 
	gm
, 1> 
cﬁ
(
i
) const;

514 
düg_ty≥
 
düg
() const;

517 
	gM©x
<
	g_Tp
, 
	gn
, 
	gm
> 
t
() const;

520 
	gM©x
<
	g_Tp
, 
	gn
, 
	gm
> 
öv
(
mëhod
=
DECOMP_LU
) const;

523 
	gãm∂©e
<
	gl
> 
	gM©x
<
	g_Tp
, 
	gn
,Ü> 
sﬁve
(c⁄° 
M©x
<
_Tp
, 
m
, 
l
>& 
rhs
, 
Êags
=
DECOMP_LU
) const;

524 
	gVec
<
	g_Tp
, 
	gn
> 
sﬁve
(c⁄° 
Vec
<
_Tp
, 
m
>& 
rhs
, 
mëhod
) const;

527 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
mul
(c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
a
) const;

530 c⁄° 
	g_Tp
& 
›î©‹
 ()(
	gi
, 
	gj
) const;

531 
	g_Tp
& 
›î©‹
 ()(
	gi
, 
	gj
);

534 c⁄° 
	g_Tp
& 
›î©‹
 ()(
	gi
) const;

535 
	g_Tp
& 
›î©‹
 ()(
	gi
);

537 
M©x
(c⁄° M©x<
_Tp
, 
m
, 
n
>& 
a
, c⁄° M©x<_Tp, m,Ç>& 
b
, 
M©x_AddOp
);

538 
M©x
(c⁄° M©x<
_Tp
, 
m
, 
n
>& 
a
, c⁄° M©x<_Tp, m,Ç>& 
b
, 
M©x_SubOp
);

539 
	gãm∂©e
<
ty≥«me
 
	g_T2
> 
M©x
(c⁄° M©x<
_Tp
, 
m
, 
n
>& 
a
, 
_T2
 
Æpha
, 
M©x_SˇÀOp
);

540 
M©x
(c⁄° M©x<
_Tp
, 
m
, 
n
>& 
a
, c⁄° M©x<_Tp, m,Ç>& 
b
, 
M©x_MulOp
);

541 
	gãm∂©e
<
	gl
> 
M©x
(c⁄° M©x<
_Tp
, 
m
, 
l
>& 
a
, c⁄° M©x<_Tp,Ü, 
n
>& 
b
, 
M©x_M©MulOp
);

542 
M©x
(c⁄° M©x<
_Tp
, 
n
, 
m
>& 
a
, 
M©x_TOp
);

544 
_Tp
 
	gvÆ
[
m
*
n
];

548 
	gM©x
<, 1, 2> 
	tM©x12f
;

549 
	gM©x
<, 1, 2> 
	tM©x12d
;

550 
	gM©x
<, 1, 3> 
	tM©x13f
;

551 
	gM©x
<, 1, 3> 
	tM©x13d
;

552 
	gM©x
<, 1, 4> 
	tM©x14f
;

553 
	gM©x
<, 1, 4> 
	tM©x14d
;

554 
	gM©x
<, 1, 6> 
	tM©x16f
;

555 
	gM©x
<, 1, 6> 
	tM©x16d
;

557 
	gM©x
<, 2, 1> 
	tM©x21f
;

558 
	gM©x
<, 2, 1> 
	tM©x21d
;

559 
	gM©x
<, 3, 1> 
	tM©x31f
;

560 
	gM©x
<, 3, 1> 
	tM©x31d
;

561 
	gM©x
<, 4, 1> 
	tM©x41f
;

562 
	gM©x
<, 4, 1> 
	tM©x41d
;

563 
	gM©x
<, 6, 1> 
	tM©x61f
;

564 
	gM©x
<, 6, 1> 
	tM©x61d
;

566 
	gM©x
<, 2, 2> 
	tM©x22f
;

567 
	gM©x
<, 2, 2> 
	tM©x22d
;

568 
	gM©x
<, 2, 3> 
	tM©x23f
;

569 
	gM©x
<, 2, 3> 
	tM©x23d
;

570 
	gM©x
<, 3, 2> 
	tM©x32f
;

571 
	gM©x
<, 3, 2> 
	tM©x32d
;

573 
	gM©x
<, 3, 3> 
	tM©x33f
;

574 
	gM©x
<, 3, 3> 
	tM©x33d
;

576 
	gM©x
<, 3, 4> 
	tM©x34f
;

577 
	gM©x
<, 3, 4> 
	tM©x34d
;

578 
	gM©x
<, 4, 3> 
	tM©x43f
;

579 
	gM©x
<, 4, 3> 
	tM©x43d
;

581 
	gM©x
<, 4, 4> 
	tM©x44f
;

582 
	gM©x
<, 4, 4> 
	tM©x44d
;

583 
	gM©x
<, 6, 6> 
	tM©x66f
;

584 
	gM©x
<, 6, 6> 
	tM©x66d
;

602 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
˛ass
 
	gVec
 : 
public
 
M©x
<
_Tp
, cn, 1>

604 
	gpublic
:

605 
_Tp
 
	tvÆue_ty≥
;

606 íum { 
	gdïth
 = 
D©aDïth
<
_Tp
>::
vÆue
, 
	gch™√ls
 = 
˙
, 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

609 
Vec
();

611 
Vec
(
_Tp
 
v0
);

612 
Vec
(
_Tp
 
v0
, _T∞
v1
);

613 
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
);

614 
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
);

615 
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
);

616 
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
, _T∞
v5
);

617 
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
, _T∞
v5
, _T∞
v6
);

618 
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
);

619 
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
, _T∞
v8
);

620 
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
, _T∞
v8
, _T∞
v9
);

621 
ex∂icô
 
Vec
(c⁄° 
_Tp
* 
vÆues
);

623 
Vec
(c⁄° Vec<
_Tp
, 
˙
>& 
v
);

625 
Vec
 
Æl
(
_Tp
 
Æpha
);

628 
Vec
 
mul
(c⁄° Vec<
_Tp
, 
˙
>& 
v
) const;

631 
Vec
 
c⁄j
() const;

638 
Vec
 
¸oss
(c⁄° Vec& 
v
) const;

640 
	gãm∂©e
<
ty≥«me
 
	gT2
> 
›î©‹
 
	gVec
<T2, 
	g˙
>() const;

642 
›î©‹
 
CvSˇœr
() const;

645 c⁄° 
	g_Tp
& 
	g›î©‹
 [](
	gi
) const;

646 
	g_Tp
& 
	g›î©‹
[](
	gi
);

647 c⁄° 
	g_Tp
& 
›î©‹
 ()(
	gi
) const;

648 
	g_Tp
& 
›î©‹
 ()(
	gi
);

650 
Vec
(c⁄° 
M©x
<
_Tp
, 
˙
, 1>& 
a
, c⁄° M©x<_Tp, cn, 1>& 
b
, 
M©x_AddOp
);

651 
Vec
(c⁄° 
M©x
<
_Tp
, 
˙
, 1>& 
a
, c⁄° M©x<_Tp, cn, 1>& 
b
, 
M©x_SubOp
);

652 
	gãm∂©e
<
ty≥«me
 
	g_T2
> 
Vec
(c⁄° 
M©x
<
_Tp
, 
˙
, 1>& 
a
, 
_T2
 
Æpha
, 
M©x_SˇÀOp
);

660 
	gVec
<
	tuch¨
, 2> 
	tVec2b
;

661 
	gVec
<
	tuch¨
, 3> 
	tVec3b
;

662 
	gVec
<
	tuch¨
, 4> 
	tVec4b
;

664 
	gVec
<, 2> 
	tVec2s
;

665 
	gVec
<, 3> 
	tVec3s
;

666 
	gVec
<, 4> 
	tVec4s
;

668 
	gVec
<
	tush‹t
, 2> 
	tVec2w
;

669 
	gVec
<
	tush‹t
, 3> 
	tVec3w
;

670 
	gVec
<
	tush‹t
, 4> 
	tVec4w
;

672 
	gVec
<, 2> 
	tVec2i
;

673 
	gVec
<, 3> 
	tVec3i
;

674 
	gVec
<, 4> 
	tVec4i
;

675 
	gVec
<, 6> 
	tVec6i
;

676 
	gVec
<, 8> 
	tVec8i
;

678 
	gVec
<, 2> 
	tVec2f
;

679 
	gVec
<, 3> 
	tVec3f
;

680 
	gVec
<, 4> 
	tVec4f
;

681 
	gVec
<, 6> 
	tVec6f
;

683 
	gVec
<, 2> 
	tVec2d
;

684 
	gVec
<, 3> 
	tVec3d
;

685 
	gVec
<, 4> 
	tVec4d
;

686 
	gVec
<, 6> 
	tVec6d
;

698 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cCom∂ex


700 
	gpublic
:

703 
Com∂ex
();

704 
Com∂ex
–
_Tp
 
_ª
, _T∞
_im
=0 );

705 
Com∂ex
–c⁄° 
°d
::
com∂ex
<
_Tp
>& 
c
 );

708 
	gãm∂©e
<
ty≥«me
 
	gT2
> 
›î©‹
 
	gCom∂ex
<T2>() const;

710 
Com∂ex
 
c⁄j
() const;

712 
›î©‹
 
	g°d
::
com∂ex
<
_Tp
>() const;

714 
_Tp
 
	gª
, 
	gim
;

721 
	gCom∂ex
<> 
	tCom∂exf
;

722 
	gCom∂ex
<> 
	tCom∂exd
;

734 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cPoöt_


736 
	gpublic
:

737 
_Tp
 
	tvÆue_ty≥
;

740 
Poöt_
();

741 
Poöt_
(
_Tp
 
_x
, _T∞
_y
);

742 
Poöt_
(c⁄° Poöt_& 
±
);

743 
Poöt_
(c⁄° 
CvPoöt
& 
±
);

744 
Poöt_
(c⁄° 
CvPoöt2D32f
& 
±
);

745 
Poöt_
(c⁄° 
Size_
<
_Tp
>& 
sz
);

746 
Poöt_
(c⁄° 
Vec
<
_Tp
, 2>& 
v
);

748 
	gPoöt_
& 
	g›î©‹
 = (c⁄° 
Poöt_
& 
±
);

750 
	gãm∂©e
<
ty≥«me
 
	g_Tp2
> 
›î©‹
 
	gPoöt_
<_Tp2>() const;

753 
›î©‹
 
CvPoöt
() const;

754 
›î©‹
 
CvPoöt2D32f
() const;

755 
›î©‹
 
	gVec
<
	g_Tp
, 2>() const;

758 
_Tp
 
dŸ
(c⁄° 
Poöt_
& 
±
) const;

760 
ddŸ
(c⁄° 
Poöt_
& 
±
) const;

762 
¸oss
(c⁄° 
Poöt_
& 
±
) const;

764 
boﬁ
 
öside
(c⁄° 
Re˘_
<
_Tp
>& 
r
) const;

766 
_Tp
 
	gx
, 
	gy
;

777 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cPoöt3_


779 
	gpublic
:

780 
_Tp
 
	tvÆue_ty≥
;

783 
Poöt3_
();

784 
Poöt3_
(
_Tp
 
_x
, _T∞
_y
, _T∞
_z
);

785 
Poöt3_
(c⁄° Poöt3_& 
±
);

786 
ex∂icô
 
Poöt3_
(c⁄° 
Poöt_
<
_Tp
>& 
±
);

787 
Poöt3_
(c⁄° 
CvPoöt3D32f
& 
±
);

788 
Poöt3_
(c⁄° 
Vec
<
_Tp
, 3>& 
v
);

790 
	gPoöt3_
& 
	g›î©‹
 = (c⁄° 
Poöt3_
& 
±
);

792 
	gãm∂©e
<
ty≥«me
 
	g_Tp2
> 
›î©‹
 
	gPoöt3_
<_Tp2>() const;

794 
›î©‹
 
CvPoöt3D32f
() const;

796 
›î©‹
 
	gVec
<
	g_Tp
, 3>() const;

799 
_Tp
 
dŸ
(c⁄° 
Poöt3_
& 
±
) const;

801 
ddŸ
(c⁄° 
Poöt3_
& 
±
) const;

803 
Poöt3_
 
¸oss
(c⁄° Poöt3_& 
±
) const;

805 
_Tp
 
	gx
, 
	gy
, 
	gz
;

816 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cSize_


818 
	gpublic
:

819 
_Tp
 
	tvÆue_ty≥
;

822 
Size_
();

823 
Size_
(
_Tp
 
_width
, _T∞
_height
);

824 
Size_
(c⁄° Size_& 
sz
);

825 
Size_
(c⁄° 
CvSize
& 
sz
);

826 
Size_
(c⁄° 
CvSize2D32f
& 
sz
);

827 
Size_
(c⁄° 
Poöt_
<
_Tp
>& 
±
);

829 
	gSize_
& 
	g›î©‹
 = (c⁄° 
Size_
& 
sz
);

831 
_Tp
 
¨ó
() const;

834 
	gãm∂©e
<
ty≥«me
 
	g_Tp2
> 
›î©‹
 
	gSize_
<_Tp2>() const;

837 
›î©‹
 
CvSize
() const;

838 
›î©‹
 
CvSize2D32f
() const;

840 
_Tp
 
	gwidth
, 
	gheight
;

851 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cRe˘_


853 
	gpublic
:

854 
_Tp
 
	tvÆue_ty≥
;

857 
Re˘_
();

858 
Re˘_
(
_Tp
 
_x
, _T∞
_y
, _T∞
_width
, _T∞
_height
);

859 
Re˘_
(c⁄° Re˘_& 
r
);

860 
Re˘_
(c⁄° 
CvRe˘
& 
r
);

861 
Re˘_
(c⁄° 
Poöt_
<
_Tp
>& 
‹g
, c⁄° 
Size_
<_Tp>& 
sz
);

862 
Re˘_
(c⁄° 
Poöt_
<
_Tp
>& 
±1
, c⁄° Poöt_<_Tp>& 
±2
);

864 
	gRe˘_
& 
	g›î©‹
 = ( c⁄° 
Re˘_
& 
r
 );

866 
	gPoöt_
<
	g_Tp
> 
é
() const;

868 
	gPoöt_
<
	g_Tp
> 
br
() const;

871 
	gSize_
<
	g_Tp
> 
size
() const;

873 
_Tp
 
¨ó
() const;

876 
	gãm∂©e
<
ty≥«me
 
	g_Tp2
> 
›î©‹
 
	gRe˘_
<_Tp2>() const;

878 
›î©‹
 
CvRe˘
() const;

881 
boﬁ
 
c⁄èös
(c⁄° 
Poöt_
<
_Tp
>& 
±
) const;

883 
_Tp
 
	gx
, 
	gy
, 
	gwidth
, 
	gheight
;

892 
	gPoöt_
<> 
	tPoöt2i
;

893 
Poöt2i
 
	tPoöt
;

894 
	gSize_
<> 
	tSize2i
;

895 
	gSize_
<> 
	tSize2d
;

896 
Size2i
 
	tSize
;

897 
	gRe˘_
<> 
	tRe˘
;

898 
	gPoöt_
<> 
	tPoöt2f
;

899 
	gPoöt_
<> 
	tPoöt2d
;

900 
	gSize_
<> 
	tSize2f
;

901 
	gPoöt3_
<> 
	tPoöt3i
;

902 
	gPoöt3_
<> 
	tPoöt3f
;

903 
	gPoöt3_
<> 
	tPoöt3d
;

913 ˛as†
	cCV_EXPORTS
 
	gRŸ©edRe˘


915 
	gpublic
:

917 
RŸ©edRe˘
();

918 
RŸ©edRe˘
(c⁄° 
Poöt2f
& 
˚¡î
, c⁄° 
Size2f
& 
size
, 
™gÀ
);

919 
RŸ©edRe˘
(c⁄° 
CvBox2D
& 
box
);

922 
poöts
(
Poöt2f
 
±s
[]) const;

924 
Re˘
 
boundögRe˘
() const;

926 
›î©‹
 
CvBox2D
() const;

928 
Poöt2f
 
	g˚¡î
;

929 
Size2f
 
	gsize
;

930 
	g™gÀ
;

941 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gSˇœr_
 : 
public
 
Vec
<
_Tp
, 4>

943 
	gpublic
:

945 
Sˇœr_
();

946 
Sˇœr_
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
=0, _T∞
v3
=0);

947 
Sˇœr_
(c⁄° 
CvSˇœr
& 
s
);

948 
Sˇœr_
(
_Tp
 
v0
);

951 
	gSˇœr_
<
	g_Tp
> 
Æl
(
_Tp
 
v0
);

953 
›î©‹
 
CvSˇœr
() const;

956 
	gãm∂©e
<
ty≥«me
 
	gT2
> 
›î©‹
 
	gSˇœr_
<T2>() const;

959 
	gSˇœr_
<
	g_Tp
> 
mul
(c⁄° 
Sˇœr_
<
_Tp
>& 
t
, 
sˇÀ
=1 ) const;

962 
	gSˇœr_
<
	g_Tp
> 
c⁄j
() const;

965 
boﬁ
 
isRól
() const;

968 
	gSˇœr_
<> 
	tSˇœr
;

970 
CV_EXPORTS
 
sˇœrToRawD©a
(c⁄° 
Sˇœr
& 
s
, * 
buf
, 
ty≥
, 
uƒﬁl_to
=0);

979 ˛as†
	cCV_EXPORTS
 
	gR™ge


981 
	gpublic
:

982 
R™ge
();

983 
R™ge
(
_°¨t
, 
_íd
);

984 
R™ge
(c⁄° 
CvSli˚
& 
¶i˚
);

985 
size
() const;

986 
boﬁ
 
em±y
() const;

987 
R™ge
 
Æl
();

988 
›î©‹
 
CvSli˚
() const;

990 
	g°¨t
, 
	gíd
;

1006 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cD©aTy≥


1008 
	gpublic
:

1009 
_Tp
 
	tvÆue_ty≥
;

1010 
vÆue_ty≥
 
	tw‹k_ty≥
;

1011 
vÆue_ty≥
 
	tch™√l_ty≥
;

1012 
vÆue_ty≥
 
	tvec_ty≥
;

1013 íum { 
	ggíîic_ty≥
 = 1, 
	gdïth
 = -1, 
	gch™√ls
 = 1, 
	gfmt
=0,

1014 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1017 
	gãm∂©e
<> 
˛ass
 
	gD©aTy≥
<
	gboﬁ
>

1019 
	gpublic
:

1020 
boﬁ
 
	tvÆue_ty≥
;

1021 
	tw‹k_ty≥
;

1022 
vÆue_ty≥
 
	tch™√l_ty≥
;

1023 
vÆue_ty≥
 
	tvec_ty≥
;

1024 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 1,

1025 
	gfmt
=
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1026 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1029 
	gãm∂©e
<> 
˛ass
 
	gD©aTy≥
<
	guch¨
>

1031 
	gpublic
:

1032 
uch¨
 
	tvÆue_ty≥
;

1033 
	tw‹k_ty≥
;

1034 
vÆue_ty≥
 
	tch™√l_ty≥
;

1035 
vÆue_ty≥
 
	tvec_ty≥
;

1036 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 1,

1037 
	gfmt
=
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1038 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1041 
	gãm∂©e
<> 
˛ass
 
	gD©aTy≥
<
	gsch¨
>

1043 
	gpublic
:

1044 
sch¨
 
	tvÆue_ty≥
;

1045 
	tw‹k_ty≥
;

1046 
vÆue_ty≥
 
	tch™√l_ty≥
;

1047 
vÆue_ty≥
 
	tvec_ty≥
;

1048 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 1,

1049 
	gfmt
=
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1050 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1053 
	gãm∂©e
<> 
˛ass
 
	gD©aTy≥
<>

1055 
	gpublic
:

1056 
sch¨
 
	tvÆue_ty≥
;

1057 
	tw‹k_ty≥
;

1058 
vÆue_ty≥
 
	tch™√l_ty≥
;

1059 
vÆue_ty≥
 
	tvec_ty≥
;

1060 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 1,

1061 
	gfmt
=
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1062 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1065 
	gãm∂©e
<> 
˛ass
 
	gD©aTy≥
<
	gush‹t
>

1067 
	gpublic
:

1068 
ush‹t
 
	tvÆue_ty≥
;

1069 
	tw‹k_ty≥
;

1070 
vÆue_ty≥
 
	tch™√l_ty≥
;

1071 
vÆue_ty≥
 
	tvec_ty≥
;

1072 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 1,

1073 
	gfmt
=
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1074 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1077 
	gãm∂©e
<> 
˛ass
 
	gD©aTy≥
<>

1079 
	gpublic
:

1080 
	tvÆue_ty≥
;

1081 
	tw‹k_ty≥
;

1082 
vÆue_ty≥
 
	tch™√l_ty≥
;

1083 
vÆue_ty≥
 
	tvec_ty≥
;

1084 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 1,

1085 
	gfmt
=
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1086 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1089 
	gãm∂©e
<> 
˛ass
 
	gD©aTy≥
<>

1091 
	gpublic
:

1092 
	tvÆue_ty≥
;

1093 
vÆue_ty≥
 
	tw‹k_ty≥
;

1094 
vÆue_ty≥
 
	tch™√l_ty≥
;

1095 
vÆue_ty≥
 
	tvec_ty≥
;

1096 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 1,

1097 
	gfmt
=
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1098 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1101 
	gãm∂©e
<> 
˛ass
 
	gD©aTy≥
<>

1103 
	gpublic
:

1104 
	tvÆue_ty≥
;

1105 
vÆue_ty≥
 
	tw‹k_ty≥
;

1106 
vÆue_ty≥
 
	tch™√l_ty≥
;

1107 
vÆue_ty≥
 
	tvec_ty≥
;

1108 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 1,

1109 
	gfmt
=
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1110 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1113 
	gãm∂©e
<> 
˛ass
 
	gD©aTy≥
<>

1115 
	gpublic
:

1116 
	tvÆue_ty≥
;

1117 
vÆue_ty≥
 
	tw‹k_ty≥
;

1118 
vÆue_ty≥
 
	tch™√l_ty≥
;

1119 
vÆue_ty≥
 
	tvec_ty≥
;

1120 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 1,

1121 
	gfmt
=
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1122 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1125 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
˛ass
 
	gD©aTy≥
<
	gM©x
<_Tp, m,Ç> >

1127 
	gpublic
:

1128 
M©x
<
	t_Tp
, 
	tm
, 
	tn
> 
	tvÆue_ty≥
;

1129 
	gM©x
<
	tty≥«me
 
	tD©aTy≥
<
	t_Tp
>::
	tw‹k_ty≥
, 
	tm
, 
	tn
> work_type;

1130 
_Tp
 
	tch™√l_ty≥
;

1131 
vÆue_ty≥
 
	tvec_ty≥
;

1132 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 
m
*
n
,

1133 
	gfmt
 = ((
ch™√ls
-1)<<8Ë+ 
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1134 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1137 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
˛ass
 
	gD©aTy≥
<
	gVec
<_Tp, cn> >

1139 
	gpublic
:

1140 
Vec
<
	t_Tp
, 
	t˙
> 
	tvÆue_ty≥
;

1141 
	gVec
<
	tty≥«me
 
	tD©aTy≥
<
	t_Tp
>::
	tw‹k_ty≥
, 
	t˙
> work_type;

1142 
_Tp
 
	tch™√l_ty≥
;

1143 
vÆue_ty≥
 
	tvec_ty≥
;

1144 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 
˙
,

1145 
	gfmt
 = ((
ch™√ls
-1)<<8Ë+ 
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1146 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1149 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gD©aTy≥
<
	g°d
::
com∂ex
<
_Tp
> >

1151 
public
:

1152 
°d
::
	tcom∂ex
<
	t_Tp
> 
	tvÆue_ty≥
;

1153 
vÆue_ty≥
 
	tw‹k_ty≥
;

1154 
_Tp
 
	tch™√l_ty≥
;

1155 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 2,

1156 
	gfmt
 = ((
ch™√ls
-1)<<8Ë+ 
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1157 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1158 
	gVec
<
	tch™√l_ty≥
, 
	tch™√ls
> 
	tvec_ty≥
;

1161 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gD©aTy≥
<
	gCom∂ex
<_Tp> >

1163 
	gpublic
:

1164 
Com∂ex
<
	t_Tp
> 
	tvÆue_ty≥
;

1165 
vÆue_ty≥
 
	tw‹k_ty≥
;

1166 
_Tp
 
	tch™√l_ty≥
;

1167 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 2,

1168 
	gfmt
 = ((
ch™√ls
-1)<<8Ë+ 
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1169 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1170 
	gVec
<
	tch™√l_ty≥
, 
	tch™√ls
> 
	tvec_ty≥
;

1173 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gD©aTy≥
<
	gPoöt_
<_Tp> >

1175 
	gpublic
:

1176 
Poöt_
<
	t_Tp
> 
	tvÆue_ty≥
;

1177 
	gPoöt_
<
	tty≥«me
 
	tD©aTy≥
<
	t_Tp
>::
	tw‹k_ty≥
> work_type;

1178 
_Tp
 
	tch™√l_ty≥
;

1179 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 2,

1180 
	gfmt
 = ((
ch™√ls
-1)<<8Ë+ 
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1181 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1182 
	gVec
<
	tch™√l_ty≥
, 
	tch™√ls
> 
	tvec_ty≥
;

1185 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gD©aTy≥
<
	gPoöt3_
<_Tp> >

1187 
	gpublic
:

1188 
Poöt3_
<
	t_Tp
> 
	tvÆue_ty≥
;

1189 
	gPoöt3_
<
	tty≥«me
 
	tD©aTy≥
<
	t_Tp
>::
	tw‹k_ty≥
> work_type;

1190 
_Tp
 
	tch™√l_ty≥
;

1191 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 3,

1192 
	gfmt
 = ((
ch™√ls
-1)<<8Ë+ 
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1193 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1194 
	gVec
<
	tch™√l_ty≥
, 
	tch™√ls
> 
	tvec_ty≥
;

1197 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gD©aTy≥
<
	gSize_
<_Tp> >

1199 
	gpublic
:

1200 
Size_
<
	t_Tp
> 
	tvÆue_ty≥
;

1201 
	gSize_
<
	tty≥«me
 
	tD©aTy≥
<
	t_Tp
>::
	tw‹k_ty≥
> work_type;

1202 
_Tp
 
	tch™√l_ty≥
;

1203 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 2,

1204 
	gfmt
 = ((
ch™√ls
-1)<<8Ë+ 
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1205 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1206 
	gVec
<
	tch™√l_ty≥
, 
	tch™√ls
> 
	tvec_ty≥
;

1209 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gD©aTy≥
<
	gRe˘_
<_Tp> >

1211 
	gpublic
:

1212 
Re˘_
<
	t_Tp
> 
	tvÆue_ty≥
;

1213 
	gRe˘_
<
	tty≥«me
 
	tD©aTy≥
<
	t_Tp
>::
	tw‹k_ty≥
> work_type;

1214 
_Tp
 
	tch™√l_ty≥
;

1215 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 4,

1216 
	gfmt
 = ((
ch™√ls
-1)<<8Ë+ 
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1217 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1218 
	gVec
<
	tch™√l_ty≥
, 
	tch™√ls
> 
	tvec_ty≥
;

1221 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gD©aTy≥
<
	gSˇœr_
<_Tp> >

1223 
	gpublic
:

1224 
Sˇœr_
<
	t_Tp
> 
	tvÆue_ty≥
;

1225 
	gSˇœr_
<
	tty≥«me
 
	tD©aTy≥
<
	t_Tp
>::
	tw‹k_ty≥
> work_type;

1226 
_Tp
 
	tch™√l_ty≥
;

1227 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 4,

1228 
	gfmt
 = ((
ch™√ls
-1)<<8Ë+ 
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1229 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1230 
	gVec
<
	tch™√l_ty≥
, 
	tch™√ls
> 
	tvec_ty≥
;

1233 
	gãm∂©e
<> 
˛ass
 
	gD©aTy≥
<
	gR™ge
>

1235 
	gpublic
:

1236 
R™ge
 
	tvÆue_ty≥
;

1237 
vÆue_ty≥
 
	tw‹k_ty≥
;

1238 
	tch™√l_ty≥
;

1239 íum { 
	ggíîic_ty≥
 = 0, 
	gdïth
 = 
D©aDïth
<
ch™√l_ty≥
>::
vÆue
, 
	gch™√ls
 = 2,

1240 
	gfmt
 = ((
ch™√ls
-1)<<8Ë+ 
D©aDïth
<
ch™√l_ty≥
>::
fmt
,

1241 
	gty≥
 = 
CV_MAKETYPE
(
dïth
, 
ch™√ls
) };

1242 
	gVec
<
	tch™√l_ty≥
, 
	tch™√ls
> 
	tvec_ty≥
;

1268 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cPå


1270 
	gpublic
:

1272 
På
();

1274 
På
(
_Tp
* 
_obj
);

1276 ~
På
();

1278 
På
(c⁄° På& 
±r
);

1279 
	gãm∂©e
<
ty≥«me
 
	g_Tp2
> 
På
(c⁄° På<
_Tp2
>& 
±r
);

1281 
	gPå
& 
	g›î©‹
 = (c⁄° 
På
& 
±r
);

1283 
addªf
();

1285 
ªÀa£
();

1287 
dñëe_obj
();

1289 
boﬁ
 
em±y
() const;

1292 
	gãm∂©e
<
ty≥«me
 
	g_Tp2
> 
	gPå
<_Tp2> 
±r
();

1293 
	gãm∂©e
<
ty≥«me
 
	g_Tp2
> c⁄° 
	gPå
<_Tp2> 
±r
() const;

1296 
_Tp
* 
	g›î©‹
 -> ();

1297 c⁄° 
_Tp
* 
	g›î©‹
 -> () const;

1299 
›î©‹
 
	g_Tp
* ();

1300 
›î©‹
 c⁄° 
	g_Tp
*() const;

1302 
_Tp
* 
	gobj
;

1303 
_Atomic_w‹d
* 
	gªfcou¡
;

1312 ˛as†
	cCV_EXPORTS
 
	g_I≈utAºay


1314 
	gpublic
:

1316 
KIND_SHIFT
 = 16,

1317 
	gFIXED_TYPE
 = 0x8000 << 
KIND_SHIFT
,

1318 
	gFIXED_SIZE
 = 0x4000 << 
KIND_SHIFT
,

1319 
	gKIND_MASK
 = ~(
FIXED_TYPE
|
FIXED_SIZE
Ë- (1 << 
KIND_SHIFT
) + 1,

1321 
	gNONE
 = 0 << 
KIND_SHIFT
,

1322 
	gMAT
 = 1 << 
KIND_SHIFT
,

1323 
	gMATX
 = 2 << 
KIND_SHIFT
,

1324 
	gSTD_VECTOR
 = 3 << 
KIND_SHIFT
,

1325 
	gSTD_VECTOR_VECTOR
 = 4 << 
KIND_SHIFT
,

1326 
	gSTD_VECTOR_MAT
 = 5 << 
KIND_SHIFT
,

1327 
	gEXPR
 = 6 << 
KIND_SHIFT
,

1328 
	gOPENGL_BUFFER
 = 7 << 
KIND_SHIFT
,

1329 
	gOPENGL_TEXTURE
 = 8 << 
KIND_SHIFT
,

1330 
	gGPU_MAT
 = 9 << 
KIND_SHIFT
,

1331 
	gOCL_MAT
 =10 << 
KIND_SHIFT


1333 
_I≈utAºay
();

1335 
_I≈utAºay
(c⁄° 
M©
& 
m
);

1336 
_I≈utAºay
(c⁄° 
M©Ex¥
& 
ex¥
);

1337 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_I≈utAºay
(c⁄° 
_Tp
* 
vec
, 
n
);

1338 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_I≈utAºay
(c⁄° 
ve˘‹
<
_Tp
>& 
vec
);

1339 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_I≈utAºay
(c⁄° 
ve˘‹
<ve˘‹<
_Tp
> >& 
vec
);

1340 
_I≈utAºay
(c⁄° 
ve˘‹
<
M©
>& 
vec
);

1341 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_I≈utAºay
(c⁄° 
ve˘‹
<
M©_
<
_Tp
> >& 
vec
);

1342 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_I≈utAºay
(c⁄° 
M©_
<
_Tp
>& 
m
);

1343 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
_I≈utAºay
(c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
m©x
);

1344 
_I≈utAºay
(c⁄° 
Sˇœr
& 
s
);

1345 
_I≈utAºay
(c⁄° & 
vÆ
);

1347 
_I≈utAºay
(c⁄° 
GlBuf„r
& 
buf
);

1348 
_I≈utAºay
(c⁄° 
GlTextuª
& 
ãx
);

1350 
_I≈utAºay
(c⁄° 
gpu
::
GpuM©
& 
d_m©
);

1351 
_I≈utAºay
(c⁄° 
ogl
::
Buf„r
& 
buf
);

1352 
_I≈utAºay
(c⁄° 
ogl
::
Textuª2D
& 
ãx
);

1354 
vútuÆ
 
M©
 
gëM©
(
i
=-1) const;

1355 
vútuÆ
 
gëM©Ve˘‹
(
ve˘‹
<
M©
>& 
mv
) const;

1357 
vútuÆ
 
GlBuf„r
 
gëGlBuf„r
() const;

1358 
vútuÆ
 
GlTextuª
 
gëGlTextuª
() const;

1360 
vútuÆ
 
	ggpu
::
GpuM©
 
gëGpuM©
() const;

1361  
	gogl
::
Buf„r
 
gëOGlBuf„r
() const;

1362  
	gogl
::
Textuª2D
 
gëOGlTextuª2D
() const;

1364 
vútuÆ
 
köd
() const;

1365 
vútuÆ
 
Size
 
size
(
i
=-1) const;

1366 
vútuÆ
 
size_t
 
tŸÆ
(
i
=-1) const;

1367 
vútuÆ
 
ty≥
(
i
=-1) const;

1368 
vútuÆ
 
dïth
(
i
=-1) const;

1369 
vútuÆ
 
ch™√ls
(
i
=-1) const;

1370 
vútuÆ
 
boﬁ
 
em±y
() const;

1372 #ifde‡
OPENCV_CAN_BREAK_BINARY_COMPATIBILITY


1373 
	gvútuÆ
 ~
_I≈utAºay
();

1376 
	gÊags
;

1377 * 
	gobj
;

1378 
Size
 
	gsz
;

1384 
	gDEPTH_MASK_8U
 = 1 << 
CV_8U
,

1385 
	gDEPTH_MASK_8S
 = 1 << 
CV_8S
,

1386 
	gDEPTH_MASK_16U
 = 1 << 
CV_16U
,

1387 
	gDEPTH_MASK_16S
 = 1 << 
CV_16S
,

1388 
	gDEPTH_MASK_32S
 = 1 << 
CV_32S
,

1389 
	gDEPTH_MASK_32F
 = 1 << 
CV_32F
,

1390 
	gDEPTH_MASK_64F
 = 1 << 
CV_64F
,

1391 
	gDEPTH_MASK_ALL
 = (
DEPTH_MASK_64F
<<1)-1,

1392 
	gDEPTH_MASK_ALL_BUT_8S
 = 
DEPTH_MASK_ALL
 & ~
DEPTH_MASK_8S
,

1393 
	gDEPTH_MASK_FLT
 = 
DEPTH_MASK_32F
 + 
DEPTH_MASK_64F


1400 ˛as†
	cCV_EXPORTS
 
	g_OuçutAºay
 : 
public
 
_I≈utAºay


1402 
public
:

1403 
_OuçutAºay
();

1405 
_OuçutAºay
(
M©
& 
m
);

1406 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_OuçutAºay
(
ve˘‹
<
_Tp
>& 
vec
);

1407 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_OuçutAºay
(
ve˘‹
<ve˘‹<
_Tp
> >& 
vec
);

1408 
_OuçutAºay
(
ve˘‹
<
M©
>& 
vec
);

1409 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_OuçutAºay
(
ve˘‹
<
M©_
<
_Tp
> >& 
vec
);

1410 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_OuçutAºay
(
M©_
<
_Tp
>& 
m
);

1411 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
_OuçutAºay
(
M©x
<
_Tp
, 
m
, 
n
>& 
m©x
);

1412 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_OuçutAºay
(
_Tp
* 
vec
, 
n
);

1413 
_OuçutAºay
(
gpu
::
GpuM©
& 
d_m©
);

1414 
_OuçutAºay
(
ogl
::
Buf„r
& 
buf
);

1415 
_OuçutAºay
(
ogl
::
Textuª2D
& 
ãx
);

1417 
_OuçutAºay
(c⁄° 
M©
& 
m
);

1418 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_OuçutAºay
(c⁄° 
ve˘‹
<
_Tp
>& 
vec
);

1419 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_OuçutAºay
(c⁄° 
ve˘‹
<ve˘‹<
_Tp
> >& 
vec
);

1420 
_OuçutAºay
(c⁄° 
ve˘‹
<
M©
>& 
vec
);

1421 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_OuçutAºay
(c⁄° 
ve˘‹
<
M©_
<
_Tp
> >& 
vec
);

1422 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_OuçutAºay
(c⁄° 
M©_
<
_Tp
>& 
m
);

1423 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
_OuçutAºay
(c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
m©x
);

1424 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_OuçutAºay
(c⁄° 
_Tp
* 
vec
, 
n
);

1425 
_OuçutAºay
(c⁄° 
gpu
::
GpuM©
& 
d_m©
);

1426 
_OuçutAºay
(c⁄° 
ogl
::
Buf„r
& 
buf
);

1427 
_OuçutAºay
(c⁄° 
ogl
::
Textuª2D
& 
ãx
);

1429 
vútuÆ
 
boﬁ
 
fixedSize
() const;

1430 
vútuÆ
 
boﬁ
 
fixedTy≥
() const;

1431 
vútuÆ
 
boﬁ
 
√eded
() const;

1432 
vútuÆ
 
	gM©
& 
gëM©Ref
(
i
=-1) const;

1433  
	ggpu
::
GpuM©
& 
gëGpuM©Ref
() const;

1434  
	gogl
::
Buf„r
& 
gëOGlBuf„rRef
() const;

1435  
	gogl
::
Textuª2D
& 
gëOGlTextuª2DRef
() const;

1436 
vútuÆ
 
¸óã
(
Size
 
sz
, 
ty≥
, 
i
=-1, 
boﬁ
 
ÆlowTøn•o£d
=
Ál£
, 
fixedDïthMask
=0) const;

1437 
vútuÆ
 
¸óã
(
rows
, 
cﬁs
, 
ty≥
, 
i
=-1, 
boﬁ
 
ÆlowTøn•o£d
=
Ál£
, 
fixedDïthMask
=0) const;

1438 
vútuÆ
 
¸óã
(
dims
, c⁄° * 
size
, 
ty≥
, 
i
=-1, 
boﬁ
 
ÆlowTøn•o£d
=
Ál£
, 
fixedDïthMask
=0) const;

1439 
vútuÆ
 
ªÀa£
() const;

1440 
vútuÆ
 
˛ór
() const;

1442 #ifde‡
OPENCV_CAN_BREAK_BINARY_COMPATIBILITY


1443 
	gvútuÆ
 ~
_OuçutAºay
();

1447 c⁄° 
	t_I≈utAºay
& 
	tI≈utAºay
;

1448 
I≈utAºay
 
	tI≈utAºayOfAºays
;

1449 c⁄° 
	t_OuçutAºay
& 
	tOuçutAºay
;

1450 
OuçutAºay
 
	tOuçutAºayOfAºays
;

1451 
OuçutAºay
 
	tI≈utOuçutAºay
;

1452 
OuçutAºay
 
	tI≈utOuçutAºayOfAºays
;

1454 
CV_EXPORTS
 
OuçutAºay
 
noAºay
();

1458 íum { 
	gMAGIC_MASK
=0xFFFF0000, 
	gTYPE_MASK
=0x00000FFF, 
	gDEPTH_MASK
=7 };

1460 
ölöe
 
size_t
 
	$gëEÀmSize
(
ty≥
Ë{  
	`CV_ELEM_SIZE
—y≥); 
	}
}

1466 ˛as†
	cCV_EXPORTS
 
	gM©AŒoˇt‹


1468 
	gpublic
:

1469 
M©AŒoˇt‹
() {}

1470 
vútuÆ
 ~
M©AŒoˇt‹
() {}

1471 
vútuÆ
 
Æloˇã
(
dims
, c⁄° * 
sizes
, 
ty≥
, 
_Atomic_w‹d
*& 
ªfcou¡
,

1472 
uch¨
*& 
d©a°¨t
, uch¨*& 
d©a
, 
size_t
* 
°ï
) = 0;

1473 
vútuÆ
 
dóŒoˇã
(
_Atomic_w‹d
* 
ªfcou¡
, 
uch¨
* 
d©a°¨t
, uch¨* 
d©a
) = 0;

1688 ˛as†
	cCV_EXPORTS
 
	gM©


1690 
	gpublic
:

1692 
M©
();

1695 
M©
(
rows
, 
cﬁs
, 
ty≥
);

1696 
M©
(
Size
 
size
, 
ty≥
);

1698 
M©
(
rows
, 
cﬁs
, 
ty≥
, c⁄° 
Sˇœr
& 
s
);

1699 
M©
(
Size
 
size
, 
ty≥
, c⁄° 
Sˇœr
& 
s
);

1702 
M©
(
ndims
, c⁄° * 
sizes
, 
ty≥
);

1703 
M©
(
ndims
, c⁄° * 
sizes
, 
ty≥
, c⁄° 
Sˇœr
& 
s
);

1706 
M©
(c⁄° M©& 
m
);

1708 
M©
(
rows
, 
cﬁs
, 
ty≥
, * 
d©a
, 
size_t
 
°ï
=
AUTO_STEP
);

1709 
M©
(
Size
 
size
, 
ty≥
, * 
d©a
, 
size_t
 
°ï
=
AUTO_STEP
);

1710 
M©
(
ndims
, c⁄° * 
sizes
, 
ty≥
, * 
d©a
, c⁄° 
size_t
* 
°ïs
=0);

1713 
M©
(c⁄° M©& 
m
, c⁄° 
R™ge
& 
rowR™ge
, c⁄° R™ge& 
cﬁR™ge
=R™ge::
Æl
());

1714 
M©
(c⁄° M©& 
m
, c⁄° 
Re˘
& 
roi
);

1715 
M©
(c⁄° M©& 
m
, c⁄° 
R™ge
* 
ønges
);

1717 
M©
(c⁄° 
CvM©
* 
m
, 
boﬁ
 
c›yD©a
=
Ál£
);

1719 
M©
(c⁄° 
CvM©ND
* 
m
, 
boﬁ
 
c›yD©a
=
Ál£
);

1721 
M©
(c⁄° 
I∂Image
* 
img
, 
boﬁ
 
c›yD©a
=
Ál£
);

1723 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ex∂icô
 
M©
(c⁄° 
ve˘‹
<
_Tp
>& 
vec
, 
boﬁ
 
c›yD©a
=
Ál£
);

1725 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gn
> 
ex∂icô
 
M©
(c⁄° 
Vec
<
_Tp
, 
n
>& 
vec
, 
boﬁ
 
c›yD©a
=
åue
);

1727 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ex∂icô
 
M©
(c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
mtx
, 
boﬁ
 
c›yD©a
=
åue
);

1729 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ex∂icô
 
M©
(c⁄° 
Poöt_
<
_Tp
>& 
±
, 
boﬁ
 
c›yD©a
=
åue
);

1731 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ex∂icô
 
M©
(c⁄° 
Poöt3_
<
_Tp
>& 
±
, 
boﬁ
 
c›yD©a
=
åue
);

1733 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ex∂icô
 
M©
(c⁄° 
M©CommaInôülizî_
<
_Tp
>& 
commaInôülizî
);

1736 
ex∂icô
 
M©
(c⁄° 
gpu
::
GpuM©
& 
m
);

1739 ~
M©
();

1741 
	gM©
& 
	g›î©‹
 = (c⁄° 
M©
& 
m
);

1742 
	gM©
& 
	g›î©‹
 = (c⁄° 
M©Ex¥
& 
ex¥
);

1745 
M©
 
row
(
y
) const;

1747 
M©
 
cﬁ
(
x
) const;

1749 
M©
 
rowR™ge
(
°¨åow
, 
ídrow
) const;

1750 
M©
 
rowR™ge
(c⁄° 
R™ge
& 
r
) const;

1752 
M©
 
cﬁR™ge
(
°¨tcﬁ
, 
ídcﬁ
) const;

1753 
M©
 
cﬁR™ge
(c⁄° 
R™ge
& 
r
) const;

1758 
M©
 
düg
(
d
=0) const;

1760 
M©
 
düg
(c⁄° M©& 
d
);

1763 
M©
 
˛⁄e
() const;

1766 
c›yTo
–
OuçutAºay
 
m
 ) const;

1768 
c›yTo
–
OuçutAºay
 
m
, 
I≈utAºay
 
mask
 ) const;

1770 
c⁄vîtTo
–
OuçutAºay
 
m
, 
πy≥
, 
Æpha
=1, 
bëa
=0 ) const;

1772 
assignTo
–
M©
& 
m
, 
ty≥
=-1 ) const;

1775 
	gM©
& 
	g›î©‹
 = (c⁄° 
Sˇœr
& 
s
);

1777 
	gM©
& 
£tTo
(
I≈utAºay
 
vÆue
, I≈utAºay 
mask
=
noAºay
());

1780 
M©
 
ªsh≠e
(
˙
, 
rows
=0) const;

1781 
M©
 
ªsh≠e
(
˙
, 
√wndims
, c⁄° * 
√wsz
) const;

1784 
M©Ex¥
 
t
() const;

1786 
M©Ex¥
 
öv
(
mëhod
=
DECOMP_LU
) const;

1788 
M©Ex¥
 
mul
(
I≈utAºay
 
m
, 
sˇÀ
=1) const;

1791 
M©
 
¸oss
(
I≈utAºay
 
m
) const;

1793 
dŸ
(
I≈utAºay
 
m
) const;

1796 
M©Ex¥
 
zîos
(
rows
, 
cﬁs
, 
ty≥
);

1797 
M©Ex¥
 
zîos
(
Size
 
size
, 
ty≥
);

1798 
M©Ex¥
 
zîos
(
ndims
, c⁄° * 
sz
, 
ty≥
);

1799 
M©Ex¥
 
⁄es
(
rows
, 
cﬁs
, 
ty≥
);

1800 
M©Ex¥
 
⁄es
(
Size
 
size
, 
ty≥
);

1801 
M©Ex¥
 
⁄es
(
ndims
, c⁄° * 
sz
, 
ty≥
);

1802 
M©Ex¥
 
eye
(
rows
, 
cﬁs
, 
ty≥
);

1803 
M©Ex¥
 
eye
(
Size
 
size
, 
ty≥
);

1807 
¸óã
(
rows
, 
cﬁs
, 
ty≥
);

1808 
¸óã
(
Size
 
size
, 
ty≥
);

1809 
¸óã
(
ndims
, c⁄° * 
sizes
, 
ty≥
);

1812 
addªf
();

1815 
ªÀa£
();

1818 
dóŒoˇã
();

1820 
c›ySize
(c⁄° 
M©
& 
m
);

1823 
ª£rve
(
size_t
 
sz
);

1825 
ªsize
(
size_t
 
sz
);

1827 
ªsize
(
size_t
 
sz
, c⁄° 
Sˇœr
& 
s
);

1829 
push_back_
(c⁄° * 
ñem
);

1831 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
push_back
(c⁄° 
_Tp
& 
ñem
);

1832 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
push_back
(c⁄° 
M©_
<
_Tp
>& 
ñem
);

1833 
push_back
(c⁄° 
M©
& 
m
);

1835 
p›_back
(
size_t
 
√Àms
=1);

1838 
loˇãROI
–
Size
& 
whﬁeSize
, 
Poöt
& 
ofs
 ) const;

1840 
	gM©
& 
adju°ROI
–
dt›
, 
dbŸtom
, 
dÀ·
, 
dright
 );

1843 
M©
 
›î©‹
()–
R™ge
 
	growR™ge
, R™gê
	gcﬁR™ge
 ) const;

1844 
M©
 
›î©‹
()–c⁄° 
	gRe˘
& 
	groi
 ) const;

1845 
M©
 
›î©‹
()–c⁄° 
R™ge
* 
	gønges
 ) const;

1848 
›î©‹
 
CvM©
() const;

1850 
›î©‹
 
CvM©ND
() const;

1852 
›î©‹
 
I∂Image
() const;

1854 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
›î©‹
 
	gve˘‹
<_Tp>() const;

1855 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gn
> 
›î©‹
 
	gVec
<_Tp,Ç>() const;

1856 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
›î©‹
 
	gM©x
<_Tp, m,Ç>() const;

1861 
boﬁ
 
isC⁄töuous
() const;

1864 
boﬁ
 
isSubm©rix
() const;

1868 
size_t
 
ñemSize
() const;

1870 
size_t
 
ñemSize1
() const;

1872 
ty≥
() const;

1874 
dïth
() const;

1876 
ch™√ls
() const;

1878 
size_t
 
°ï1
(
i
=0) const;

1880 
boﬁ
 
em±y
() const;

1882 
size_t
 
tŸÆ
() const;

1885 
checkVe˘‹
(
ñemCh™√ls
, 
dïth
=-1, 
boﬁ
 
ªquúeC⁄töuous
=
åue
) const;

1888 
uch¨
* 
±r
(
i0
=0);

1889 c⁄° 
uch¨
* 
±r
(
i0
=0) const;

1892 
uch¨
* 
±r
(
i0
, 
i1
);

1893 c⁄° 
uch¨
* 
±r
(
i0
, 
i1
) const;

1896 
uch¨
* 
±r
(
i0
, 
i1
, 
i2
);

1897 c⁄° 
uch¨
* 
±r
(
i0
, 
i1
, 
i2
) const;

1900 
uch¨
* 
±r
(c⁄° * 
idx
);

1902 c⁄° 
uch¨
* 
±r
(c⁄° * 
idx
) const;

1904 
	gãm∂©e
<
	gn
> 
uch¨
* 
±r
(c⁄° 
Vec
<, 
n
>& 
idx
);

1905 
	gãm∂©e
<
	gn
> c⁄° 
uch¨
* 
±r
(c⁄° 
Vec
<, 
n
>& 
idx
) const;

1908 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_Tp
* 
±r
(
i0
=0);

1909 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> c⁄° 
_Tp
* 
±r
(
i0
=0) const;

1911 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_Tp
* 
±r
(
i0
, 
i1
);

1912 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> c⁄° 
_Tp
* 
±r
(
i0
, 
i1
) const;

1914 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_Tp
* 
±r
(
i0
, 
i1
, 
i2
);

1915 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> c⁄° 
_Tp
* 
±r
(
i0
, 
i1
, 
i2
) const;

1917 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
_Tp
* 
±r
(c⁄° * 
idx
);

1918 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> c⁄° 
_Tp
* 
±r
(c⁄° * 
idx
) const;

1920 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gn
> 
_Tp
* 
±r
(c⁄° 
Vec
<, 
n
>& 
idx
);

1921 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gn
> c⁄° 
_Tp
* 
±r
(c⁄° 
Vec
<, 
n
>& 
idx
) const;

1924 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> _Tp& 
©
(
i0
=0);

1925 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> c⁄° _Tp& 
©
(
i0
=0) const;

1927 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> _Tp& 
©
(
i0
, 
i1
);

1928 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> c⁄° _Tp& 
©
(
i0
, 
i1
) const;

1930 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> _Tp& 
©
(
i0
, 
i1
, 
i2
);

1931 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> c⁄° _Tp& 
©
(
i0
, 
i1
, 
i2
) const;

1933 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> _Tp& 
©
(c⁄° * 
idx
);

1934 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> c⁄° _Tp& 
©
(c⁄° * 
idx
) const;

1936 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gn
> _Tp& 
©
(c⁄° 
Vec
<, 
n
>& 
idx
);

1937 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gn
> c⁄° _Tp& 
©
(c⁄° 
Vec
<, 
n
>& 
idx
) const;

1940 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> _Tp& 
©
(
Poöt
 
±
);

1941 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> c⁄° _Tp& 
©
(
Poöt
 
±
) const;

1945 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gM©Iãøt‹_
<_Tp> 
begö
();

1946 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gM©Iãøt‹_
<_Tp> 
íd
();

1947 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gM©C⁄°Iãøt‹_
<_Tp> 
begö
() const;

1948 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gM©C⁄°Iãøt‹_
<_Tp> 
íd
() const;

1950 íum { 
	gMAGIC_VAL
=0x42FF0000, 
	gAUTO_STEP
=0, 
	gCONTINUOUS_FLAG
=
CV_MAT_CONT_FLAG
, 
	gSUBMATRIX_FLAG
=
CV_SUBMAT_FLAG
 };

1958 
	gÊags
;

1960 
	gdims
;

1962 
	grows
, 
	gcﬁs
;

1964 
uch¨
* 
	gd©a
;

1968 
_Atomic_w‹d
* 
	gªfcou¡
;

1971 
uch¨
* 
	gd©a°¨t
;

1972 
uch¨
* 
	gd©´nd
;

1973 
uch¨
* 
	gd©Æimô
;

1976 
M©AŒoˇt‹
* 
	gÆloˇt‹
;

1978 
CV_EXPORTS
 
	gMSize


1980 
MSize
(* 
_p
);

1981 
Size
 
›î©‹
()() const;

1982 c⁄° & 
	g›î©‹
[](
	gi
) const;

1983 & 
	g›î©‹
[](
	gi
);

1984 
›î©‹
 const *() const;

1985 
boﬁ
 
	g›î©‹
 =(c⁄° 
MSize
& 
sz
) const;

1986 
boﬁ
 
	g›î©‹
 !(c⁄° 
MSize
& 
sz
) const;

1988 * 
	gp
;

1991 
CV_EXPORTS
 
	gMSãp


1993 
MSãp
();

1994 
MSãp
(
size_t
 
s
);

1995 c⁄° 
	gsize_t
& 
	g›î©‹
[](
	gi
) const;

1996 
	gsize_t
& 
	g›î©‹
[](
	gi
);

1997 
›î©‹
 
size_t
() const;

1998 
	gMSãp
& 
	g›î©‹
 = (
size_t
 
s
);

2000 
size_t
* 
	gp
;

2001 
size_t
 
	gbuf
[2];

2002 
	g¥Ÿe˘ed
:

2003 
MSãp
& 
›î©‹
 = (const MStep&);

2006 
MSize
 
	gsize
;

2007 
MSãp
 
	g°ï
;

2009 
	g¥Ÿe˘ed
:

2010 
öôEm±y
();

2019 ˛as†
	cCV_EXPORTS
 
	gRNG


2021 
	gpublic
:

2022 íum { 
UNIFORM
=0, 
	gNORMAL
=1 };

2024 
RNG
();

2025 
RNG
(
uöt64
 
°©e
);

2027 
√xt
();

2029 
›î©‹
 
uch¨
();

2030 
›î©‹
 
sch¨
();

2031 
›î©‹
 
ush‹t
();

2032 
›î©‹
 ();

2033 
›î©‹
 ();

2035 
›î©‹
 ()(
	gN
);

2036 
›î©‹
 ()();

2037 
›î©‹
 ();

2038 
›î©‹
 ();

2039 
›î©‹
 ();

2041 
unif‹m
(
a
, 
b
);

2043 
unif‹m
(
a
, 
b
);

2045 
unif‹m
(
a
, 
b
);

2046 
fûl
–
I≈utOuçutAºay
 
m©
, 
di°Ty≥
, 
I≈utAºay
 
a
, I≈utAºay 
b
, 
boﬁ
 
ßtuøãR™ge
=
Ál£
 );

2048 
gaussün
(
sigma
);

2050 
uöt64
 
	g°©e
;

2058 ˛as†
	cCV_EXPORTS
 
	gRNG_MT19937


2060 
	gpublic
:

2061 
RNG_MT19937
();

2062 
RNG_MT19937
(
s
);

2063 
£ed
(
s
);

2065 
√xt
();

2067 
›î©‹
 ();

2068 
›î©‹
 ();

2069 
›î©‹
 ();

2070 
›î©‹
 ();

2072 
›î©‹
 ()(
	gN
);

2073 
›î©‹
 ()();

2076 
unif‹m
(
a
, 
b
);

2078 
unif‹m
(
a
, 
b
);

2080 
unif‹m
(
a
, 
b
);

2082 
	g¥iv©e
:

2083 
	ePîiodP¨amëîs
 {
N
 = 624, 
	gM
 = 397};

2084 
	g°©e
[
N
];

2085 
	gmti
;

2091 ˛as†
	cCV_EXPORTS
 
	gTîmCrôîü


2093 
	gpublic
:

2096 
COUNT
=1,

2097 
	gMAX_ITER
=
COUNT
,

2098 
	gEPS
=2

2102 
TîmCrôîü
();

2104 
TîmCrôîü
(
ty≥
, 
maxCou¡
, 
ïsû⁄
);

2106 
TîmCrôîü
(c⁄° 
CvTîmCrôîü
& 
¸ôîü
);

2108 
›î©‹
 
CvTîmCrôîü
() const;

2110 
	gty≥
;

2111 
	gmaxCou¡
;

2112 
	gïsû⁄
;

2116 (*
	tBö¨yFunc
)(c⁄° 
	tuch¨
* 
	t§c1
, 
	tsize_t
 
	t°ï1
,

2117 c⁄° 
	tuch¨
* 
	t§c2
, 
	tsize_t
 
	t°ï2
,

2118 
	tuch¨
* 
	td°
, 
	tsize_t
 
	t°ï
, 
	tSize
 
	tsz
,

2121 
CV_EXPORTS
 
Bö¨yFunc
 
	`gëC⁄vîtFunc
(
sdïth
, 
ddïth
);

2122 
CV_EXPORTS
 
Bö¨yFunc
 
	`gëC⁄vîtSˇÀFunc
(
sdïth
, 
ddïth
);

2123 
CV_EXPORTS
 
Bö¨yFunc
 
	`gëC›yMaskFunc
(
size_t
 
esz
);

2126 
CV_EXPORTS
 
	`sw≠
(
M©
& 
a
, M©& 
b
);

2129 
CV_EXPORTS
 
M©
 
	`cv¨rToM©
(c⁄° 
CvAº
* 
¨r
, 
boﬁ
 
c›yD©a
=
Ál£
,

2130 
boﬁ
 
ÆlowND
=
åue
, 
coiMode
=0);

2132 
CV_EXPORTS
 
	`exåa˘ImageCOI
(c⁄° 
CvAº
* 
¨r
, 
OuçutAºay
 
coiimg
, 
coi
=-1);

2134 
CV_EXPORTS
 
	`ö£πImageCOI
(
I≈utAºay
 
coiimg
, 
CvAº
* 
¨r
, 
coi
=-1);

2137 
CV_EXPORTS_W
 
	`add
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
, 
OuçutAºay
 
d°
,

2138 
I≈utAºay
 
mask
=
	`noAºay
(), 
dty≥
=-1);

2140 
CV_EXPORTS_W
 
	`subåa˘
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
, 
OuçutAºay
 
d°
,

2141 
I≈utAºay
 
mask
=
	`noAºay
(), 
dty≥
=-1);

2144 
CV_EXPORTS_W
 
	`mu…ùly
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
,

2145 
OuçutAºay
 
d°
, 
sˇÀ
=1, 
dty≥
=-1);

2148 
CV_EXPORTS_W
 
	`divide
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
, 
OuçutAºay
 
d°
,

2149 
sˇÀ
=1, 
dty≥
=-1);

2152 
CV_EXPORTS_W
 
	`divide
(
sˇÀ
, 
I≈utAºay
 
§c2
,

2153 
OuçutAºay
 
d°
, 
dty≥
=-1);

2156 
CV_EXPORTS_W
 
	`sˇÀAdd
(
I≈utAºay
 
§c1
, 
Æpha
, I≈utAºay 
§c2
, 
OuçutAºay
 
d°
);

2159 
CV_EXPORTS_W
 
	`addWeighãd
(
I≈utAºay
 
§c1
, 
Æpha
, I≈utAºay 
§c2
,

2160 
bëa
, 
gamma
, 
OuçutAºay
 
d°
, 
dty≥
=-1);

2163 
CV_EXPORTS_W
 
	`c⁄vîtSˇÀAbs
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

2164 
Æpha
=1, 
bëa
=0);

2166 
CV_EXPORTS_W
 
	`LUT
(
I≈utAºay
 
§c
, I≈utAºay 
lut
, 
OuçutAºay
 
d°
,

2167 
öãΩﬁ©i⁄
=0);

2170 
	$CV_EXPORTS_AS
(
sumEÀms
Ë
Sˇœr
 
	`sum
(
I≈utAºay
 
§c
);

2172 
CV_EXPORTS_W
 
	`cou¡N⁄Zîo
–
I≈utAºay
 
§c
 );

2174 
CV_EXPORTS_W
 
	`födN⁄Zîo
–
I≈utAºay
 
§c
, 
OuçutAºay
 
idx
 );

2177 
CV_EXPORTS_W
 
Sˇœr
 
	`món
(
I≈utAºay
 
§c
, I≈utAºay 
mask
=
	`noAºay
());

2179 
CV_EXPORTS_W
 
	`mónStdDev
(
I≈utAºay
 
§c
, 
OuçutAºay
 
món
, OuçutAºay 
°ddev
,

2180 
I≈utAºay
 
mask
=
	`noAºay
());

2182 
CV_EXPORTS_W
 
	`n‹m
(
I≈utAºay
 
§c1
, 
n‹mTy≥
=
NORM_L2
, I≈utAºay 
mask
=
	`noAºay
());

2184 
CV_EXPORTS_W
 
	`n‹m
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
,

2185 
n‹mTy≥
=
NORM_L2
, 
I≈utAºay
 
mask
=
	`noAºay
());

2188 
CV_EXPORTS_W
 
	`b©chDi°™˚
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
,

2189 
OuçutAºay
 
di°
, 
dty≥
, OuçutAºay 
nidx
,

2190 
n‹mTy≥
=
NORM_L2
, 
K
=0,

2191 
I≈utAºay
 
mask
=
	`noAºay
(), 
upd©e
=0,

2192 
boﬁ
 
¸osscheck
=
Ál£
);

2195 
CV_EXPORTS_W
 
	`n‹mÆize
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
Æpha
=1, 
bëa
=0,

2196 
n‹m_ty≥
=
NORM_L2
, 
dty≥
=-1, 
I≈utAºay
 
mask
=
	`noAºay
());

2199 
CV_EXPORTS_W
 
	`möMaxLoc
(
I≈utAºay
 
§c
, 
CV_OUT
 * 
möVÆ
,

2200 
CV_OUT
 * 
maxVÆ
=0, CV_OUT 
Poöt
* 
möLoc
=0,

2201 
CV_OUT
 
Poöt
* 
maxLoc
=0, 
I≈utAºay
 
mask
=
	`noAºay
());

2202 
CV_EXPORTS
 
	`möMaxIdx
(
I≈utAºay
 
§c
, * 
möVÆ
, * 
maxVÆ
,

2203 * 
möIdx
=0, * 
maxIdx
=0, 
I≈utAºay
 
mask
=
	`noAºay
());

2206 
CV_EXPORTS_W
 
	`ªdu˚
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
dim
, 
πy≥
, 
dty≥
=-1);

2209 
CV_EXPORTS
 
	`mîge
(c⁄° 
M©
* 
mv
, 
size_t
 
cou¡
, 
OuçutAºay
 
d°
);

2210 
CV_EXPORTS
 
	`mîge
(c⁄° 
ve˘‹
<
M©
>& 
mv
, 
OuçutAºay
 
d°
 );

2213 
CV_EXPORTS_W
 
	`mîge
(
I≈utAºayOfAºays
 
mv
, 
OuçutAºay
 
d°
);

2216 
CV_EXPORTS
 
	`•lô
(c⁄° 
M©
& 
§c
, M©* 
mvbegö
);

2217 
CV_EXPORTS
 
	`•lô
(c⁄° 
M©
& 
m
, 
ve˘‹
<M©>& 
mv
 );

2220 
CV_EXPORTS_W
 
	`•lô
(
I≈utAºay
 
m
, 
OuçutAºayOfAºays
 
mv
);

2223 
CV_EXPORTS
 
	`mixCh™√ls
(c⁄° 
M©
* 
§c
, 
size_t
 
n§cs
, M©* 
d°
, size_à
nd°s
,

2224 c⁄° * 
‰omTo
, 
size_t
 
≈aús
);

2225 
CV_EXPORTS
 
	`mixCh™√ls
(c⁄° 
ve˘‹
<
M©
>& 
§c
, ve˘‹<M©>& 
d°
,

2226 c⁄° * 
‰omTo
, 
size_t
 
≈aús
);

2227 
CV_EXPORTS_W
 
	`mixCh™√ls
(
I≈utAºayOfAºays
 
§c
, I≈utAºayOfAºay†
d°
,

2228 c⁄° 
ve˘‹
<>& 
‰omTo
);

2231 
CV_EXPORTS_W
 
	`exåa˘Ch™√l
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
coi
);

2234 
CV_EXPORTS_W
 
	`ö£πCh™√l
(
I≈utAºay
 
§c
, 
I≈utOuçutAºay
 
d°
, 
coi
);

2237 
CV_EXPORTS_W
 
	`Êù
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
ÊùCode
);

2240 
CV_EXPORTS_W
 
	`ª≥©
(
I≈utAºay
 
§c
, 
ny
, 
nx
, 
OuçutAºay
 
d°
);

2241 
CV_EXPORTS
 
M©
 
	`ª≥©
(c⁄° M©& 
§c
, 
ny
, 
nx
);

2243 
CV_EXPORTS
 
	`hc⁄ˇt
(c⁄° 
M©
* 
§c
, 
size_t
 
n§c
, 
OuçutAºay
 
d°
);

2244 
CV_EXPORTS
 
	`hc⁄ˇt
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
, 
OuçutAºay
 
d°
);

2245 
CV_EXPORTS_W
 
	`hc⁄ˇt
(
I≈utAºayOfAºays
 
§c
, 
OuçutAºay
 
d°
);

2247 
CV_EXPORTS
 
	`vc⁄ˇt
(c⁄° 
M©
* 
§c
, 
size_t
 
n§c
, 
OuçutAºay
 
d°
);

2248 
CV_EXPORTS
 
	`vc⁄ˇt
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
, 
OuçutAºay
 
d°
);

2249 
CV_EXPORTS_W
 
	`vc⁄ˇt
(
I≈utAºayOfAºays
 
§c
, 
OuçutAºay
 
d°
);

2252 
CV_EXPORTS_W
 
	`bôwi£_™d
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
,

2253 
OuçutAºay
 
d°
, 
I≈utAºay
 
mask
=
	`noAºay
());

2255 
CV_EXPORTS_W
 
	`bôwi£_‹
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
,

2256 
OuçutAºay
 
d°
, 
I≈utAºay
 
mask
=
	`noAºay
());

2258 
CV_EXPORTS_W
 
	`bôwi£_x‹
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
,

2259 
OuçutAºay
 
d°
, 
I≈utAºay
 
mask
=
	`noAºay
());

2261 
CV_EXPORTS_W
 
	`bôwi£_nŸ
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

2262 
I≈utAºay
 
mask
=
	`noAºay
());

2264 
CV_EXPORTS_W
 
	`absdiff
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
, 
OuçutAºay
 
d°
);

2266 
CV_EXPORTS_W
 
	`öR™ge
(
I≈utAºay
 
§c
, I≈utAºay 
lowîb
,

2267 
I≈utAºay
 
uµîb
, 
OuçutAºay
 
d°
);

2269 
CV_EXPORTS_W
 
	`com∑ª
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
, 
OuçutAºay
 
d°
, 
cmp›
);

2271 
CV_EXPORTS_W
 
	`mö
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
, 
OuçutAºay
 
d°
);

2273 
CV_EXPORTS_W
 
	`max
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
, 
OuçutAºay
 
d°
);

2276 
CV_EXPORTS
 
	`mö
(c⁄° 
M©
& 
§c1
, c⁄° M©& 
§c2
, M©& 
d°
);

2278 
CV_EXPORTS
 
	`mö
(c⁄° 
M©
& 
§c1
, 
§c2
, M©& 
d°
);

2280 
CV_EXPORTS
 
	`max
(c⁄° 
M©
& 
§c1
, c⁄° M©& 
§c2
, M©& 
d°
);

2282 
CV_EXPORTS
 
	`max
(c⁄° 
M©
& 
§c1
, 
§c2
, M©& 
d°
);

2285 
CV_EXPORTS_W
 
	`sqπ
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
);

2287 
CV_EXPORTS_W
 
	`pow
(
I≈utAºay
 
§c
, 
powî
, 
OuçutAºay
 
d°
);

2289 
CV_EXPORTS_W
 
	`exp
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
);

2291 
CV_EXPORTS_W
 
	`log
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
);

2293 
CV_EXPORTS_W
 
	`cubeRoŸ
(
vÆ
);

2295 
CV_EXPORTS_W
 
	`Á°Aèn2
(
y
, 
x
);

2297 
CV_EXPORTS
 
	`exp
(c⁄° * 
§c
, * 
d°
, 
n
);

2298 
CV_EXPORTS
 
	`log
(c⁄° * 
§c
, * 
d°
, 
n
);

2299 
CV_EXPORTS
 
	`Á°Aèn2
(c⁄° * 
y
, c⁄° * 
x
, * 
d°
, 
n
, 
boﬁ
 
™gÀInDegªes
);

2300 
CV_EXPORTS
 
	`magnôude
(c⁄° * 
x
, c⁄° * 
y
, * 
d°
, 
n
);

2303 
CV_EXPORTS_W
 
	`pﬁ¨ToC¨t
(
I≈utAºay
 
magnôude
, I≈utAºay 
™gÀ
,

2304 
OuçutAºay
 
x
, OuçutAºay 
y
, 
boﬁ
 
™gÀInDegªes
=
Ál£
);

2306 
CV_EXPORTS_W
 
	`ˇπToPﬁ¨
(
I≈utAºay
 
x
, I≈utAºay 
y
,

2307 
OuçutAºay
 
magnôude
, OuçutAºay 
™gÀ
,

2308 
boﬁ
 
™gÀInDegªes
=
Ál£
);

2310 
CV_EXPORTS_W
 
	`pha£
(
I≈utAºay
 
x
, I≈utAºay 
y
, 
OuçutAºay
 
™gÀ
,

2311 
boﬁ
 
™gÀInDegªes
=
Ál£
);

2313 
CV_EXPORTS_W
 
	`magnôude
(
I≈utAºay
 
x
, I≈utAºay 
y
, 
OuçutAºay
 
magnôude
);

2315 
CV_EXPORTS_W
 
boﬁ
 
	`checkR™ge
(
I≈utAºay
 
a
, boﬁ 
quõt
=
åue
, 
CV_OUT
 
Poöt
* 
pos
=0,

2316 
möVÆ
=-
DBL_MAX
, 
maxVÆ
=DBL_MAX);

2318 
CV_EXPORTS_W
 
	`∑tchNaNs
(
I≈utOuçutAºay
 
a
, 
vÆ
=0);

2321 
CV_EXPORTS_W
 
	`gemm
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
, 
Æpha
,

2322 
I≈utAºay
 
§c3
, 
gamma
, 
OuçutAºay
 
d°
, 
Êags
=0);

2324 
CV_EXPORTS_W
 
	`mulTøn•o£d
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
boﬁ
 
aTa
,

2325 
I≈utAºay
 
dñè
=
	`noAºay
(),

2326 
sˇÀ
=1, 
dty≥
=-1 );

2328 
CV_EXPORTS_W
 
	`å™•o£
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
);

2330 
CV_EXPORTS_W
 
	`å™sf‹m
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, I≈utAºay 
m
 );

2332 
CV_EXPORTS_W
 
	`≥r•e˘iveTønsf‹m
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, I≈utAºay 
m
 );

2335 
CV_EXPORTS_W
 
	`com∂ëeSymm
(
I≈utOuçutAºay
 
mtx
, 
boﬁ
 
lowîToUµî
=
Ál£
);

2337 
CV_EXPORTS_W
 
	`£tIdítôy
(
I≈utOuçutAºay
 
mtx
, c⁄° 
Sˇœr
& 
s
=
	`Sˇœr
(1));

2339 
CV_EXPORTS_W
 
	`dëîmö™t
(
I≈utAºay
 
mtx
);

2341 
CV_EXPORTS_W
 
Sˇœr
 
	`åa˚
(
I≈utAºay
 
mtx
);

2343 
CV_EXPORTS_W
 
	`övît
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
Êags
=
DECOMP_LU
);

2345 
CV_EXPORTS_W
 
boﬁ
 
	`sﬁve
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
,

2346 
OuçutAºay
 
d°
, 
Êags
=
DECOMP_LU
);

2350 
SORT_EVERY_ROW
=0,

2351 
SORT_EVERY_COLUMN
=1,

2352 
SORT_ASCENDING
=0,

2353 
SORT_DESCENDING
=16

2354 
	}
};

2357 
CV_EXPORTS_W
 
s‹t
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
Êags
);

2359 
CV_EXPORTS_W
 
s‹tIdx
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
Êags
);

2361 
CV_EXPORTS_W
 
sﬁveCubic
(
I≈utAºay
 
c€ffs
, 
OuçutAºay
 
roŸs
);

2363 
CV_EXPORTS_W
 
sﬁvePﬁy
(
I≈utAºay
 
c€ffs
, 
OuçutAºay
 
roŸs
, 
maxIãrs
=300);

2365 
CV_EXPORTS
 
boﬁ
 
eigí
(
I≈utAºay
 
§c
, 
OuçutAºay
 
eigívÆues
, 
lowödex
=-1,

2366 
highödex
=-1);

2368 
CV_EXPORTS
 
boﬁ
 
eigí
(
I≈utAºay
 
§c
, 
OuçutAºay
 
eigívÆues
,

2369 
OuçutAºay
 
eigíve˘‹s
,

2370 
lowödex
=-1, 
highödex
=-1);

2371 
CV_EXPORTS_W
 
boﬁ
 
eigí
(
I≈utAºay
 
§c
, boﬁ 
compuãEigíve˘‹s
,

2372 
OuçutAºay
 
eigívÆues
, OuçutAºay 
eigíve˘‹s
);

2376 
	gCOVAR_SCRAMBLED
=0,

2377 
	gCOVAR_NORMAL
=1,

2378 
	gCOVAR_USE_AVG
=2,

2379 
	gCOVAR_SCALE
=4,

2380 
	gCOVAR_ROWS
=8,

2381 
	gCOVAR_COLS
=16

2385 
CV_EXPORTS
 
ˇlcCov¨M©rix
–c⁄° 
M©
* 
ßm∂es
, 
nßm∂es
, M©& 
cov¨
, M©& 
món
,

2386 
Êags
, 
˘y≥
=
CV_64F
);

2388 
CV_EXPORTS_W
 
ˇlcCov¨M©rix
–
I≈utAºay
 
ßm∂es
, 
OuçutAºay
 
cov¨
,

2389 
OuçutAºay
 
món
, 
Êags
, 
˘y≥
=
CV_64F
);

2445 ˛as†
	cCV_EXPORTS
 
	gPCA


2447 
	gpublic
:

2449 
PCA
();

2451 
PCA
(
I≈utAºay
 
d©a
, I≈utAºay 
món
, 
Êags
, 
maxComp⁄íts
=0);

2452 
PCA
(
I≈utAºay
 
d©a
, I≈utAºay 
món
, 
Êags
, 
ªèöedV¨ün˚
);

2454 
	gPCA
& 
›î©‹
()(
I≈utAºay
 
	gd©a
, I≈utAºay 
	gmón
, 
	gÊags
, 
	gmaxComp⁄íts
=0);

2455 
	gPCA
& 
compuãV¨
(
I≈utAºay
 
d©a
, I≈utAºay 
món
, 
Êags
, 
ªèöedV¨ün˚
);

2457 
M©
 
¥oje˘
(
I≈utAºay
 
vec
) const;

2459 
¥oje˘
(
I≈utAºay
 
vec
, 
OuçutAºay
 
ªsu…
) const;

2461 
M©
 
backProje˘
(
I≈utAºay
 
vec
) const;

2463 
backProje˘
(
I≈utAºay
 
vec
, 
OuçutAºay
 
ªsu…
) const;

2465 
M©
 
	geigíve˘‹s
;

2466 
M©
 
	geigívÆues
;

2467 
M©
 
	gmón
;

2470 
CV_EXPORTS_W
 
PCACompuã
(
I≈utAºay
 
d©a
, 
CV_OUT
 
I≈utOuçutAºay
 
món
,

2471 
OuçutAºay
 
eigíve˘‹s
, 
maxComp⁄íts
=0);

2473 
CV_EXPORTS_W
 
PCACompuãV¨
(
I≈utAºay
 
d©a
, 
CV_OUT
 
I≈utOuçutAºay
 
món
,

2474 
OuçutAºay
 
eigíve˘‹s
, 
ªèöedV¨ün˚
);

2476 
CV_EXPORTS_W
 
PCAProje˘
(
I≈utAºay
 
d©a
, I≈utAºay 
món
,

2477 
I≈utAºay
 
eigíve˘‹s
, 
OuçutAºay
 
ªsu…
);

2479 
CV_EXPORTS_W
 
PCABackProje˘
(
I≈utAºay
 
d©a
, I≈utAºay 
món
,

2480 
I≈utAºay
 
eigíve˘‹s
, 
OuçutAºay
 
ªsu…
);

2496 ˛as†
	cCV_EXPORTS
 
	gSVD


2498 
	gpublic
:

2499 íum { 
MODIFY_A
=1, 
	gNO_UV
=2, 
	gFULL_UV
=4 };

2501 
SVD
();

2503 
SVD
–
I≈utAºay
 
§c
, 
Êags
=0 );

2505 
	gSVD
& 
›î©‹
 ()–
I≈utAºay
 
	g§c
, 
	gÊags
=0 );

2508 
compuã
–
I≈utAºay
 
§c
, 
OuçutAºay
 
w
,

2509 
OuçutAºay
 
u
, OuçutAºay 
vt
, 
Êags
=0 );

2511 
compuã
–
I≈utAºay
 
§c
, 
OuçutAºay
 
w
, 
Êags
=0 );

2513 
backSub°
–
I≈utAºay
 
w
, I≈utAºay 
u
,

2514 
I≈utAºay
 
vt
, I≈utAºay 
rhs
,

2515 
OuçutAºay
 
d°
 );

2517 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
, 
	gnm
> 
compuã
–c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
a
,

2518 
M©x
<
_Tp
, 
nm
, 1>& 
w
, M©x<_Tp, 
m
,Çm>& 
u
, M©x<_Tp, 
n
,Çm>& 
vt
 );

2519 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
, 
	gnm
> 
compuã
–c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
a
,

2520 
M©x
<
_Tp
, 
nm
, 1>& 
w
 );

2521 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
, 
	gnm
, 
	gnb
> 
backSub°
–c⁄° 
M©x
<
_Tp
, 
nm
, 1>& 
w
,

2522 c⁄° 
M©x
<
_Tp
, 
m
, 
nm
>& 
u
, c⁄° M©x<_Tp, 
n
,Çm>& 
vt
, c⁄° M©x<_Tp, m, 
nb
>& 
rhs
, M©x<_Tp,Ç,Çb>& 
d°
 );

2525 
sﬁveZ
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
 );

2527 
backSub°
–
I≈utAºay
 
rhs
, 
OuçutAºay
 
d°
 ) const;

2529 
M©
 
	gu
, 
	gw
, 
	gvt
;

2533 
CV_EXPORTS_W
 
SVDecomp
–
I≈utAºay
 
§c
, 
CV_OUT
 
OuçutAºay
 
w
,

2534 
CV_OUT
 
OuçutAºay
 
u
, CV_OUT OuçutAºay 
vt
, 
Êags
=0 );

2537 
CV_EXPORTS_W
 
SVBackSub°
–
I≈utAºay
 
w
, I≈utAºay 
u
, I≈utAºay 
vt
,

2538 
I≈utAºay
 
rhs
, 
CV_OUT
 
OuçutAºay
 
d°
 );

2541 
CV_EXPORTS_W
 
MahÆ™obis
(
I≈utAºay
 
v1
, I≈utAºay 
v2
, I≈utAºay 
icov¨
);

2543 
CV_EXPORTS
 
MahÆ⁄obis
(
I≈utAºay
 
v1
, I≈utAºay 
v2
, I≈utAºay 
icov¨
);

2546 
CV_EXPORTS_W
 
d·
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
Êags
=0, 
n⁄zîoRows
=0);

2548 
CV_EXPORTS_W
 
id·
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
Êags
=0, 
n⁄zîoRows
=0);

2550 
CV_EXPORTS_W
 
d˘
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
Êags
=0);

2552 
CV_EXPORTS_W
 
id˘
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
Êags
=0);

2554 
CV_EXPORTS_W
 
mulS≥˘rums
(
I≈utAºay
 
a
, I≈utAºay 
b
, 
OuçutAºay
 
c
,

2555 
Êags
, 
boﬁ
 
c⁄jB
=
Ál£
);

2557 
CV_EXPORTS_W
 
gëO±imÆDFTSize
(
vecsize
);

2564 
	gKMEANS_RANDOM_CENTERS
=0,

2565 
	gKMEANS_PP_CENTERS
=2,

2566 
	gKMEANS_USE_INITIAL_LABELS
=1

2569 
CV_EXPORTS_W
 
kmóns
–
I≈utAºay
 
d©a
, 
K
, 
CV_OUT
 
I≈utOuçutAºay
 
be°Labñs
,

2570 
TîmCrôîü
 
¸ôîü
, 
©ãm±s
,

2571 
Êags
, 
OuçutAºay
 
˚¡îs
=
noAºay
() );

2574 
CV_EXPORTS
 
	gRNG
& 
theRNG
();

2577 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
	$øndu
(Ë{  (
_Tp
)
	`theRNG
(); 
	}
}

2580 
CV_EXPORTS_W
 
øndu
(
I≈utOuçutAºay
 
d°
, 
I≈utAºay
 
low
, I≈utAºay 
high
);

2583 
CV_EXPORTS_W
 
øndn
(
I≈utOuçutAºay
 
d°
, 
I≈utAºay
 
món
, I≈utAºay 
°ddev
);

2586 
CV_EXPORTS
 
øndShufÊe
(
I≈utOuçutAºay
 
d°
, 
ôîFa˘‹
=1., 
RNG
* 
∫g
=0);

2587 
	$CV_EXPORTS_AS
(
øndShufÊe
Ë
	`øndShufÊe_
(
I≈utOuçutAºay
 
d°
, 
ôîFa˘‹
=1.);

2590 
CV_EXPORTS_W
 
	`löe
(
CV_IN_OUT
 
M©
& 
img
, 
Poöt
 
±1
, Poöà
±2
, c⁄° 
Sˇœr
& 
cﬁ‹
,

2591 
thick√ss
=1, 
löeTy≥
=8, 
shi·
=0);

2594 
CV_EXPORTS_W
 
	`ª˘™gÀ
(
CV_IN_OUT
 
M©
& 
img
, 
Poöt
 
±1
, Poöà
±2
,

2595 c⁄° 
Sˇœr
& 
cﬁ‹
, 
thick√ss
=1,

2596 
löeTy≥
=8, 
shi·
=0);

2599 
CV_EXPORTS
 
	`ª˘™gÀ
(
CV_IN_OUT
 
M©
& 
img
, 
Re˘
 
ªc
,

2600 c⁄° 
Sˇœr
& 
cﬁ‹
, 
thick√ss
=1,

2601 
löeTy≥
=8, 
shi·
=0);

2604 
CV_EXPORTS_W
 
	`cú˛e
(
CV_IN_OUT
 
M©
& 
img
, 
Poöt
 
˚¡î
, 
ødius
,

2605 c⁄° 
Sˇœr
& 
cﬁ‹
, 
thick√ss
=1,

2606 
löeTy≥
=8, 
shi·
=0);

2609 
CV_EXPORTS_W
 
	`ñlù£
(
CV_IN_OUT
 
M©
& 
img
, 
Poöt
 
˚¡î
, 
Size
 
axes
,

2610 
™gÀ
, 
°¨tAngÀ
, 
ídAngÀ
,

2611 c⁄° 
Sˇœr
& 
cﬁ‹
, 
thick√ss
=1,

2612 
löeTy≥
=8, 
shi·
=0);

2615 
CV_EXPORTS_W
 
	`ñlù£
(
CV_IN_OUT
 
M©
& 
img
, c⁄° 
RŸ©edRe˘
& 
box
, c⁄° 
Sˇœr
& 
cﬁ‹
,

2616 
thick√ss
=1, 
löeTy≥
=8);

2619 
CV_EXPORTS
 
	`fûlC⁄vexPﬁy
(
M©
& 
img
, c⁄° 
Poöt
* 
±s
, 
≈ts
,

2620 c⁄° 
Sˇœr
& 
cﬁ‹
, 
löeTy≥
=8,

2621 
shi·
=0);

2622 
CV_EXPORTS_W
 
	`fûlC⁄vexPﬁy
(
I≈utOuçutAºay
 
img
, 
I≈utAºay
 
poöts
,

2623 c⁄° 
Sˇœr
& 
cﬁ‹
, 
löeTy≥
=8,

2624 
shi·
=0);

2627 
CV_EXPORTS
 
	`fûlPﬁy
(
M©
& 
img
, c⁄° 
Poöt
** 
±s
,

2628 c⁄° * 
≈ts
, 
nc⁄tours
,

2629 c⁄° 
Sˇœr
& 
cﬁ‹
, 
löeTy≥
=8, 
shi·
=0,

2630 
Poöt
 
off£t
=
	`Poöt
() );

2632 
CV_EXPORTS_W
 
	`fûlPﬁy
(
I≈utOuçutAºay
 
img
, 
I≈utAºayOfAºays
 
±s
,

2633 c⁄° 
Sˇœr
& 
cﬁ‹
, 
löeTy≥
=8, 
shi·
=0,

2634 
Poöt
 
off£t
=
	`Poöt
() );

2637 
CV_EXPORTS
 
	`pﬁylöes
(
M©
& 
img
, c⁄° 
Poöt
** 
±s
, c⁄° * 
≈ts
,

2638 
nc⁄tours
, 
boﬁ
 
isClo£d
, c⁄° 
Sˇœr
& 
cﬁ‹
,

2639 
thick√ss
=1, 
löeTy≥
=8, 
shi·
=0 );

2641 
CV_EXPORTS_W
 
	`pﬁylöes
(
I≈utOuçutAºay
 
img
, 
I≈utAºayOfAºays
 
±s
,

2642 
boﬁ
 
isClo£d
, c⁄° 
Sˇœr
& 
cﬁ‹
,

2643 
thick√ss
=1, 
löeTy≥
=8, 
shi·
=0 );

2646 
CV_EXPORTS
 
boﬁ
 
	`˛ùLöe
(
Size
 
imgSize
, 
CV_IN_OUT
 
Poöt
& 
±1
, CV_IN_OUT Poöt& 
±2
);

2649 
CV_EXPORTS_W
 
boﬁ
 
	`˛ùLöe
(
Re˘
 
imgRe˘
, 
CV_OUT
 
CV_IN_OUT
 
Poöt
& 
±1
, CV_OUT CV_IN_OUT Poöt& 
±2
);

2657 ˛as†
	cCV_EXPORTS
 
LöeIãøt‹


2659 
public
:

2661 
	`LöeIãøt‹
–c⁄° 
M©
& 
img
, 
Poöt
 
±1
, Poöà
±2
,

2662 
c⁄√˘ivôy
=8, 
boﬁ
 
À·ToRight
=
Ál£
 );

2664 
uch¨
* 
›î©‹
 *();

2666 
LöeIãøt‹
& 
›î©‹
 ++();

2668 
LöeIãøt‹
 
›î©‹
 ++();

2670 
Poöt
 
	`pos
() const;

2672 
uch¨
* 
±r
;

2673 c⁄° 
uch¨
* 
±r0
;

2674 
°ï
, 
ñemSize
;

2675 
îr
, 
cou¡
;

2676 
möusDñè
, 
∂usDñè
;

2677 
möusSãp
, 
∂usSãp
;

2678 
	}
};

2681 
CV_EXPORTS_W
 
ñlù£2Pﬁy
–
Poöt
 
˚¡î
, 
Size
 
axes
, 
™gÀ
,

2682 
¨cSèπ
, 
¨cEnd
, 
dñè
,

2683 
CV_OUT
 
ve˘‹
<
Poöt
>& 
±s
 );

2687 
	gFONT_HERSHEY_SIMPLEX
 = 0,

2688 
	gFONT_HERSHEY_PLAIN
 = 1,

2689 
	gFONT_HERSHEY_DUPLEX
 = 2,

2690 
	gFONT_HERSHEY_COMPLEX
 = 3,

2691 
	gFONT_HERSHEY_TRIPLEX
 = 4,

2692 
	gFONT_HERSHEY_COMPLEX_SMALL
 = 5,

2693 
	gFONT_HERSHEY_SCRIPT_SIMPLEX
 = 6,

2694 
	gFONT_HERSHEY_SCRIPT_COMPLEX
 = 7,

2695 
	gFONT_ITALIC
 = 16

2699 
CV_EXPORTS_W
 
putText
–
M©
& 
img
, c⁄° 
°rög
& 
ãxt
, 
Poöt
 
‹g
,

2700 
f⁄tFa˚
, 
f⁄tSˇÀ
, 
Sˇœr
 
cﬁ‹
,

2701 
thick√ss
=1, 
löeTy≥
=8,

2702 
boﬁ
 
bŸtomLe·Origö
=
Ál£
 );

2705 
CV_EXPORTS_W
 
Size
 
gëTextSize
(c⁄° 
°rög
& 
ãxt
, 
f⁄tFa˚
,

2706 
f⁄tSˇÀ
, 
thick√ss
,

2707 
CV_OUT
 * 
ba£Löe
);

2756 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cM©_
 : 
public
 
M©


2758 
public
:

2759 
_Tp
 
	tvÆue_ty≥
;

2760 
ty≥«me
 
	tD©aTy≥
<
	t_Tp
>::
	tch™√l_ty≥
 channel_type;

2761 
	gM©Iãøt‹_
<
	t_Tp
> 
	tôî©‹
;

2762 
	gM©C⁄°Iãøt‹_
<
	t_Tp
> 
	tc⁄°_ôî©‹
;

2765 
M©_
();

2767 
M©_
(
_rows
, 
_cﬁs
);

2769 
M©_
(
_rows
, 
_cﬁs
, c⁄° 
_Tp
& 
vÆue
);

2771 
ex∂icô
 
M©_
(
Size
 
_size
);

2773 
M©_
(
Size
 
_size
, c⁄° 
_Tp
& 
vÆue
);

2775 
M©_
(
_ndims
, c⁄° * 
_sizes
);

2777 
M©_
(
_ndims
, c⁄° * 
_sizes
, c⁄° 
_Tp
& 
vÆue
);

2779 
M©_
(c⁄° 
M©
& 
m
);

2781 
M©_
(c⁄° M©_& 
m
);

2783 
M©_
(
_rows
, 
_cﬁs
, 
_Tp
* 
_d©a
, 
size_t
 
_°ï
=
AUTO_STEP
);

2785 
M©_
(
_ndims
, c⁄° * 
_sizes
, 
_Tp
* 
_d©a
, c⁄° 
size_t
* 
_°ïs
=0);

2787 
M©_
(c⁄° M©_& 
m
, c⁄° 
R™ge
& 
rowR™ge
, c⁄° R™ge& 
cﬁR™ge
=R™ge::
Æl
());

2789 
M©_
(c⁄° M©_& 
m
, c⁄° 
Re˘
& 
roi
);

2791 
M©_
(c⁄° M©_& 
m
, c⁄° 
R™ge
* 
ønges
);

2793 
ex∂icô
 
M©_
(c⁄° 
M©Ex¥
& 
e
);

2795 
ex∂icô
 
M©_
(c⁄° 
ve˘‹
<
_Tp
>& 
vec
, 
boﬁ
 
c›yD©a
=
Ál£
);

2796 
	gãm∂©e
<
	gn
> 
ex∂icô
 
M©_
(c⁄° 
Vec
<
ty≥«me
 
D©aTy≥
<
_Tp
>::
ch™√l_ty≥
, 
n
>& 
vec
, 
boﬁ
 
c›yD©a
=
åue
);

2797 
	gãm∂©e
<
	gm
, 
	gn
> 
ex∂icô
 
M©_
(c⁄° 
M©x
<
ty≥«me
 
D©aTy≥
<
_Tp
>::
ch™√l_ty≥
, 
m
, 
n
>& 
mtx
, 
boﬁ
 
c›yD©a
=
åue
);

2798 
ex∂icô
 
M©_
(c⁄° 
Poöt_
<
ty≥«me
 
D©aTy≥
<
_Tp
>::
ch™√l_ty≥
>& 
±
, 
boﬁ
 
c›yD©a
=
åue
);

2799 
ex∂icô
 
M©_
(c⁄° 
Poöt3_
<
ty≥«me
 
D©aTy≥
<
_Tp
>::
ch™√l_ty≥
>& 
±
, 
boﬁ
 
c›yD©a
=
åue
);

2800 
ex∂icô
 
M©_
(c⁄° 
M©CommaInôülizî_
<
_Tp
>& 
commaInôülizî
);

2802 
	gM©_
& 
	g›î©‹
 = (c⁄° 
M©
& 
m
);

2803 
	gM©_
& 
	g›î©‹
 = (c⁄° 
M©_
& 
m
);

2805 
	gM©_
& 
	g›î©‹
 = (c⁄° 
_Tp
& 
s
);

2807 
	gM©_
& 
	g›î©‹
 = (c⁄° 
M©Ex¥
& 
e
);

2810 
ôî©‹
 
begö
();

2811 
ôî©‹
 
íd
();

2812 
c⁄°_ôî©‹
 
begö
() const;

2813 
c⁄°_ôî©‹
 
íd
() const;

2816 
¸óã
(
_rows
, 
_cﬁs
);

2818 
¸óã
(
Size
 
_size
);

2820 
¸óã
(
_ndims
, c⁄° * 
_sizes
);

2822 
M©_
 
¸oss
(c⁄° M©_& 
m
) const;

2824 
	gãm∂©e
<
ty≥«me
 
	gT2
> 
›î©‹
 
	gM©_
<T2>() const;

2826 
M©_
 
row
(
y
) const;

2827 
M©_
 
cﬁ
(
x
) const;

2828 
M©_
 
düg
(
d
=0) const;

2829 
M©_
 
˛⁄e
() const;

2832 
size_t
 
ñemSize
() const;

2833 
size_t
 
ñemSize1
() const;

2834 
ty≥
() const;

2835 
dïth
() const;

2836 
ch™√ls
() const;

2837 
size_t
 
°ï1
(
i
=0) const;

2839 
size_t
 
°ïT
(
i
=0) const;

2842 
M©Ex¥
 
zîos
(
rows
, 
cﬁs
);

2843 
M©Ex¥
 
zîos
(
Size
 
size
);

2844 
M©Ex¥
 
zîos
(
_ndims
, c⁄° * 
_sizes
);

2845 
M©Ex¥
 
⁄es
(
rows
, 
cﬁs
);

2846 
M©Ex¥
 
⁄es
(
Size
 
size
);

2847 
M©Ex¥
 
⁄es
(
_ndims
, c⁄° * 
_sizes
);

2848 
M©Ex¥
 
eye
(
rows
, 
cﬁs
);

2849 
M©Ex¥
 
eye
(
Size
 
size
);

2852 
	gM©_
& 
adju°ROI
–
dt›
, 
dbŸtom
, 
dÀ·
, 
dright
 );

2853 
M©_
 
›î©‹
()–c⁄° 
	gR™ge
& 
	growR™ge
, c⁄° R™ge& 
	gcﬁR™ge
 ) const;

2854 
M©_
 
›î©‹
()–c⁄° 
	gRe˘
& 
	groi
 ) const;

2855 
M©_
 
›î©‹
()–c⁄° 
R™ge
* 
	gønges
 ) const;

2858 
_Tp
* 
	g›î©‹
 [](
	gy
);

2859 c⁄° 
_Tp
* 
	g›î©‹
 [](
	gy
) const;

2862 
	g_Tp
& 
›î©‹
 ()(c⁄° * 
	gidx
);

2864 c⁄° 
	g_Tp
& 
›î©‹
 ()(c⁄° * 
	gidx
) const;

2867 
	gãm∂©e
<
	gn
> 
	g_Tp
& 
›î©‹
 ()(c⁄° 
	gVec
<,Ç>& 
	gidx
);

2869 
	gãm∂©e
<
	gn
> c⁄° 
	g_Tp
& 
›î©‹
 ()(c⁄° 
	gVec
<,Ç>& 
	gidx
) const;

2872 
	g_Tp
& 
›î©‹
 ()(
	gidx0
);

2874 c⁄° 
	g_Tp
& 
›î©‹
 ()(
	gidx0
) const;

2876 
	g_Tp
& 
›î©‹
 ()(
	gidx0
, 
	gidx1
);

2878 c⁄° 
	g_Tp
& 
›î©‹
 ()(
	gidx0
, 
	gidx1
) const;

2880 
	g_Tp
& 
›î©‹
 ()(
	gidx0
, 
	gidx1
, 
	gidx2
);

2882 c⁄° 
	g_Tp
& 
›î©‹
 ()(
	gidx0
, 
	gidx1
, 
	gidx2
) const;

2884 
	g_Tp
& 
›î©‹
 ()(
Poöt
 
	g±
);

2885 c⁄° 
	g_Tp
& 
›î©‹
 ()(
Poöt
 
	g±
) const;

2888 
›î©‹
 
	gve˘‹
<
	g_Tp
>() const;

2890 
	gãm∂©e
<
	gn
> 
›î©‹
 
	gVec
<
ty≥«me
 
	gD©aTy≥
<
	g_Tp
>::
ch™√l_ty≥
,Ç>() const;

2892 
	gãm∂©e
<
	gm
, 
	gn
> 
›î©‹
 
	gM©x
<
ty≥«me
 
	gD©aTy≥
<
	g_Tp
>::
ch™√l_ty≥
, m,Ç>() const;

2895 
	gM©_
<
	tuch¨
> 
	tM©1b
;

2896 
	gM©_
<
	tVec2b
> 
	tM©2b
;

2897 
	gM©_
<
	tVec3b
> 
	tM©3b
;

2898 
	gM©_
<
	tVec4b
> 
	tM©4b
;

2900 
	gM©_
<> 
	tM©1s
;

2901 
	gM©_
<
	tVec2s
> 
	tM©2s
;

2902 
	gM©_
<
	tVec3s
> 
	tM©3s
;

2903 
	gM©_
<
	tVec4s
> 
	tM©4s
;

2905 
	gM©_
<
	tush‹t
> 
	tM©1w
;

2906 
	gM©_
<
	tVec2w
> 
	tM©2w
;

2907 
	gM©_
<
	tVec3w
> 
	tM©3w
;

2908 
	gM©_
<
	tVec4w
> 
	tM©4w
;

2910 
	gM©_
<> 
	tM©1i
;

2911 
	gM©_
<
	tVec2i
> 
	tM©2i
;

2912 
	gM©_
<
	tVec3i
> 
	tM©3i
;

2913 
	gM©_
<
	tVec4i
> 
	tM©4i
;

2915 
	gM©_
<> 
	tM©1f
;

2916 
	gM©_
<
	tVec2f
> 
	tM©2f
;

2917 
	gM©_
<
	tVec3f
> 
	tM©3f
;

2918 
	gM©_
<
	tVec4f
> 
	tM©4f
;

2920 
	gM©_
<> 
	tM©1d
;

2921 
	gM©_
<
	tVec2d
> 
	tM©2d
;

2922 
	gM©_
<
	tVec3d
> 
	tM©3d
;

2923 
	gM©_
<
	tVec4d
> 
	tM©4d
;

2927 ˛as†
	cCV_EXPORTS
 
	gM©C⁄°Iãøt‹


2929 
	gpublic
:

2930 
uch¨
* 
	tvÆue_ty≥
;

2931 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

2932 c⁄° 
	tuch¨
** 
	tpoöãr
;

2933 
uch¨
* 
	tª„ªn˚
;

2934 
	g°d
::
	tøndom_ac˚ss_ôî©‹_èg
 
	tôî©‹_ˇãg‹y
;

2937 
M©C⁄°Iãøt‹
();

2939 
M©C⁄°Iãøt‹
(c⁄° 
M©
* 
_m
);

2941 
M©C⁄°Iãøt‹
(c⁄° 
M©
* 
_m
, 
_row
, 
_cﬁ
=0);

2943 
M©C⁄°Iãøt‹
(c⁄° 
M©
* 
_m
, 
Poöt
 
_±
);

2945 
M©C⁄°Iãøt‹
(c⁄° 
M©
* 
_m
, c⁄° * 
_idx
);

2947 
M©C⁄°Iãøt‹
(c⁄° M©C⁄°Iãøt‹& 
ô
);

2950 
	gM©C⁄°Iãøt‹
& 
	g›î©‹
 = (c⁄° 
M©C⁄°Iãøt‹
& 
ô
);

2952 
uch¨
* 
	g›î©‹
 *() const;

2954 
uch¨
* 
	g›î©‹
 [](
±rdiff_t
 
	gi
) const;

2957 
	gM©C⁄°Iãøt‹
& 
	g›î©‹
 +(
±rdiff_t
 
ofs
);

2959 
	gM©C⁄°Iãøt‹
& 
	g›î©‹
 -(
±rdiff_t
 
ofs
);

2961 
	gM©C⁄°Iãøt‹
& 
	g›î©‹
 --();

2963 
M©C⁄°Iãøt‹
 
	g›î©‹
 --();

2965 
	gM©C⁄°Iãøt‹
& 
	g›î©‹
 ++();

2967 
M©C⁄°Iãøt‹
 
	g›î©‹
 ++();

2969 
Poöt
 
pos
() const;

2971 
pos
(* 
_idx
) const;

2972 
±rdiff_t
 
Õos
() const;

2973 
£ek
(
±rdiff_t
 
ofs
, 
boﬁ
 
ªœtive
=
Ál£
);

2974 
£ek
(c⁄° * 
_idx
, 
boﬁ
 
ªœtive
=
Ál£
);

2976 c⁄° 
M©
* 
	gm
;

2977 
size_t
 
	gñemSize
;

2978 
uch¨
* 
	g±r
;

2979 
uch¨
* 
	g¶i˚Sèπ
;

2980 
uch¨
* 
	g¶i˚End
;

2987 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>

2988 ˛as†
	cM©C⁄°Iãøt‹_
 : 
public
 
M©C⁄°Iãøt‹


2990 
public
:

2991 
_Tp
 
	tvÆue_ty≥
;

2992 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

2993 c⁄° 
	t_Tp
* 
	tpoöãr
;

2994 c⁄° 
	t_Tp
& 
	tª„ªn˚
;

2995 
	g°d
::
	tøndom_ac˚ss_ôî©‹_èg
 
	tôî©‹_ˇãg‹y
;

2998 
M©C⁄°Iãøt‹_
();

3000 
M©C⁄°Iãøt‹_
(c⁄° 
M©_
<
_Tp
>* 
_m
);

3002 
M©C⁄°Iãøt‹_
(c⁄° 
M©_
<
_Tp
>* 
_m
, 
_row
, 
_cﬁ
=0);

3004 
M©C⁄°Iãøt‹_
(c⁄° 
M©_
<
_Tp
>* 
_m
, 
Poöt
 
_±
);

3006 
M©C⁄°Iãøt‹_
(c⁄° 
M©_
<
_Tp
>* 
_m
, c⁄° * 
_idx
);

3008 
M©C⁄°Iãøt‹_
(c⁄° M©C⁄°Iãøt‹_& 
ô
);

3011 
	gM©C⁄°Iãøt‹_
& 
	g›î©‹
 = (c⁄° 
M©C⁄°Iãøt‹_
& 
ô
);

3013 
_Tp
 
	g›î©‹
 *() const;

3015 
_Tp
 
	g›î©‹
 [](
±rdiff_t
 
	gi
) const;

3018 
	gM©C⁄°Iãøt‹_
& 
	g›î©‹
 +(
±rdiff_t
 
ofs
);

3020 
	gM©C⁄°Iãøt‹_
& 
	g›î©‹
 -(
±rdiff_t
 
ofs
);

3022 
	gM©C⁄°Iãøt‹_
& 
	g›î©‹
 --();

3024 
M©C⁄°Iãøt‹_
 
	g›î©‹
 --();

3026 
	gM©C⁄°Iãøt‹_
& 
	g›î©‹
 ++();

3028 
M©C⁄°Iãøt‹_
 
	g›î©‹
 ++();

3030 
Poöt
 
pos
() const;

3038 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>

3039 
˛ass
 
	gM©Iãøt‹_
 : 
public
 
M©C⁄°Iãøt‹_
<
_Tp
>

3041 
public
:

3042 
_Tp
* 
	tpoöãr
;

3043 
	g_Tp
& 
	tª„ªn˚
;

3044 
	g°d
::
	tøndom_ac˚ss_ôî©‹_èg
 
	tôî©‹_ˇãg‹y
;

3047 
M©Iãøt‹_
();

3049 
M©Iãøt‹_
(
M©_
<
_Tp
>* 
_m
);

3051 
M©Iãøt‹_
(
M©_
<
_Tp
>* 
_m
, 
_row
, 
_cﬁ
=0);

3053 
M©Iãøt‹_
(c⁄° 
M©_
<
_Tp
>* 
_m
, 
Poöt
 
_±
);

3055 
M©Iãøt‹_
(c⁄° 
M©_
<
_Tp
>* 
_m
, c⁄° * 
_idx
);

3057 
M©Iãøt‹_
(c⁄° M©Iãøt‹_& 
ô
);

3059 
	gM©Iãøt‹_
& 
	g›î©‹
 = (c⁄° 
M©Iãøt‹_
<
_Tp
>& 
ô
 );

3062 
	g_Tp
& 
	g›î©‹
 *() const;

3064 
	g_Tp
& 
	g›î©‹
 [](
±rdiff_t
 
	gi
) const;

3067 
	gM©Iãøt‹_
& 
	g›î©‹
 +(
±rdiff_t
 
ofs
);

3069 
	gM©Iãøt‹_
& 
	g›î©‹
 -(
±rdiff_t
 
ofs
);

3071 
	gM©Iãøt‹_
& 
	g›î©‹
 --();

3073 
M©Iãøt‹_
 
	g›î©‹
 --();

3075 
	gM©Iãøt‹_
& 
	g›î©‹
 ++();

3077 
M©Iãøt‹_
 
	g›î©‹
 ++();

3080 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gM©Op_Iãr_
;

3095 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cM©CommaInôülizî_


3097 
	gpublic
:

3099 
M©CommaInôülizî_
(
M©_
<
_Tp
>* 
_m
);

3101 
	gãm∂©e
<
ty≥«me
 
	gT2
> 
	gM©CommaInôülizî_
<
	g_Tp
>& 
	g›î©‹
 , (
T2
 
	gv
);

3103 
	gM©_
<
	g_Tp
> 
	g›î©‹
 *() const;

3104 
›î©‹
 
	gM©_
<
	g_Tp
>() const;

3105 
	g¥Ÿe˘ed
:

3106 
M©Iãøt‹_
<
_Tp
> 
ô
;

3110 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> cœs†
	cM©xCommaInôülizî


3112 
	gpublic
:

3113 
M©xCommaInôülizî
(
M©x
<
_Tp
, 
m
, 
n
>* 
_mtx
);

3114 
	gãm∂©e
<
ty≥«me
 
	gT2
> 
	gM©xCommaInôülizî
<
	g_Tp
, 
	gm
, 
	gn
>& 
	g›î©‹
 , (
T2
 
	gvÆ
);

3115 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	g›î©‹
 *() const;

3117 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>* 
	gd°
;

3118 
	gidx
;

3121 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
> 
˛ass
 
	gVecCommaInôülizî
 : 
public
 
M©xCommaInôülizî
<
_Tp
, m, 1>

3123 
	gpublic
:

3124 
VecCommaInôülizî
(
Vec
<
_Tp
, 
m
>* 
_vec
);

3125 
	gãm∂©e
<
ty≥«me
 
	gT2
> 
	gVecCommaInôülizî
<
	g_Tp
, 
	gm
>& 
	g›î©‹
 , (
T2
 
	gvÆ
);

3126 
	gVec
<
	g_Tp
, 
	gm
> 
	g›î©‹
 *() const;

3156 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
size_t
 
	gfixed_size
=4096/(
_Tp
)+8> cœs†
	cAutoBuf„r


3158 
public
:

3159 
_Tp
 
	tvÆue_ty≥
;

3160 íum { 
	gbuf„r_∑ddög
 = ()((16 + (
_Tp
) - 1)/(_Tp)) };

3163 
AutoBuf„r
();

3165 
AutoBuf„r
(
size_t
 
_size
);

3167 ~
AutoBuf„r
();

3170 
Æloˇã
(
size_t
 
_size
);

3172 
dóŒoˇã
();

3174 
›î©‹
 
	g_Tp
* ();

3176 
›î©‹
 c⁄° 
	g_Tp
* () const;

3178 
	g¥Ÿe˘ed
:

3180 
_Tp
* 
±r
;

3182 
size_t
 
	gsize
;

3184 
_Tp
 
	gbuf
[
fixed_size
+
buf„r_∑ddög
];

3239 ˛as†
	cCV_EXPORTS
 
	gNAryM©Iãøt‹


3241 
	gpublic
:

3243 
NAryM©Iãøt‹
();

3245 
NAryM©Iãøt‹
(c⁄° 
M©
** 
¨øys
, 
uch¨
** 
±rs
, 
«ºays
=-1);

3247 
NAryM©Iãøt‹
(c⁄° 
M©
** 
¨øys
, M©* 
∂™es
, 
«ºays
=-1);

3249 
öô
(c⁄° 
M©
** 
¨øys
, M©* 
∂™es
, 
uch¨
** 
±rs
, 
«ºays
=-1);

3252 
	gNAryM©Iãøt‹
& 
	g›î©‹
 ++();

3254 
NAryM©Iãøt‹
 
	g›î©‹
 ++();

3257 c⁄° 
M©
** 
	g¨øys
;

3259 
M©
* 
	g∂™es
;

3261 
uch¨
** 
	g±rs
;

3263 
	g«ºays
;

3265 
size_t
 
	g≈œ√s
;

3267 
size_t
 
	gsize
;

3268 
	g¥Ÿe˘ed
:

3269 
ôîdïth
;

3270 
size_t
 
	gidx
;

3275 (*
	tC⁄vîtD©a
)(c⁄° * 
	t‰om
, * 
	tto
, 
	t˙
);

3276 (*
	tC⁄vîtSˇÀD©a
)(c⁄° * 
	t‰om
, * 
	tto
, 
	t˙
, 
	tÆpha
, 
	tbëa
);

3279 
CV_EXPORTS
 
C⁄vîtD©a
 
	`gëC⁄vîtEÀm
(
‰omTy≥
, 
toTy≥
);

3281 
CV_EXPORTS
 
C⁄vîtSˇÀD©a
 
	`gëC⁄vîtSˇÀEÀm
(
‰omTy≥
, 
toTy≥
);

3286 
˛ass
 
S∑r£M©Iãøt‹
;

3287 
˛ass
 
S∑r£M©C⁄°Iãøt‹
;

3288 
ãm∂©e
<
ty≥«me
 
_Tp
> 
˛ass
 
S∑r£M©Iãøt‹_
;

3289 
ãm∂©e
<
ty≥«me
 
_Tp
> 
˛ass
 
S∑r£M©C⁄°Iãøt‹_
;

3376 ˛as†
	cCV_EXPORTS
 
S∑r£M©


3378 
public
:

3379 
S∑r£M©Iãøt‹
 
	tôî©‹
;

3380 
S∑r£M©C⁄°Iãøt‹
 
	tc⁄°_ôî©‹
;

3383 
CV_EXPORTS
 
Hdr


3385 
	`Hdr
(
_dims
, c⁄° * 
_sizes
, 
_ty≥
);

3386 
	`˛ór
();

3387 
_Atomic_w‹d
 
ªfcou¡
;

3388 
dims
;

3389 
vÆueOff£t
;

3390 
size_t
 
nodeSize
;

3391 
size_t
 
nodeCou¡
;

3392 
size_t
 
‰ìLi°
;

3393 
ve˘‹
<
uch¨
> 
poﬁ
;

3394 
ve˘‹
<
size_t
> 
hashèb
;

3395 
size
[
CV_MAX_DIM
];

3399 
CV_EXPORTS
 
Node


3402 
size_t
 
hashvÆ
;

3404 
size_t
 
√xt
;

3406 
idx
[
CV_MAX_DIM
];

3410 
	`S∑r£M©
();

3412 
	`S∑r£M©
(
dims
, c⁄° * 
_sizes
, 
_ty≥
);

3414 
	`S∑r£M©
(c⁄° 
S∑r£M©
& 
m
);

3419 
ex∂icô
 
	`S∑r£M©
(c⁄° 
M©
& 
m
);

3421 
	`S∑r£M©
(c⁄° 
CvS∑r£M©
* 
m
);

3423 ~
	`S∑r£M©
();

3426 
S∑r£M©
& 
›î©‹
 = (c⁄° S∑r£M©& 
m
);

3428 
S∑r£M©
& 
›î©‹
 = (c⁄° 
M©
& 
m
);

3431 
S∑r£M©
 
	`˛⁄e
() const;

3434 
	`c›yTo
–
S∑r£M©
& 
m
 ) const;

3436 
	`c›yTo
–
M©
& 
m
 ) const;

3438 
	`c⁄vîtTo
–
S∑r£M©
& 
m
, 
πy≥
, 
Æpha
=1 ) const;

3445 
	`c⁄vîtTo
–
M©
& 
m
, 
πy≥
, 
Æpha
=1, 
bëa
=0 ) const;

3448 
	`assignTo
–
S∑r£M©
& 
m
, 
ty≥
=-1 ) const;

3456 
	`¸óã
(
dims
, c⁄° * 
_sizes
, 
_ty≥
);

3458 
	`˛ór
();

3460 
	`addªf
();

3462 
	`ªÀa£
();

3465 
›î©‹
 
CvS∑r£M©
*() const;

3467 
size_t
 
	`ñemSize
() const;

3469 
size_t
 
	`ñemSize1
() const;

3472 
	`ty≥
() const;

3474 
	`dïth
() const;

3476 
	`ch™√ls
() const;

3479 c⁄° * 
	`size
() const;

3481 
	`size
(
i
) const;

3483 
	`dims
() const;

3485 
size_t
 
	`nzcou¡
() const;

3488 
size_t
 
	`hash
(
i0
) const;

3490 
size_t
 
	`hash
(
i0
, 
i1
) const;

3492 
size_t
 
	`hash
(
i0
, 
i1
, 
i2
) const;

3494 
size_t
 
	`hash
(c⁄° * 
idx
) const;

3511 
uch¨
* 
	`±r
(
i0
, 
boﬁ
 
¸óãMissög
, 
size_t
* 
hashvÆ
=0);

3513 
uch¨
* 
	`±r
(
i0
, 
i1
, 
boﬁ
 
¸óãMissög
, 
size_t
* 
hashvÆ
=0);

3515 
uch¨
* 
	`±r
(
i0
, 
i1
, 
i2
, 
boﬁ
 
¸óãMissög
, 
size_t
* 
hashvÆ
=0);

3517 
uch¨
* 
	`±r
(c⁄° * 
idx
, 
boﬁ
 
¸óãMissög
, 
size_t
* 
hashvÆ
=0);

3529 
ãm∂©e
<
ty≥«me
 
_Tp
> _Tp& 
	`ªf
(
i0
, 
size_t
* 
hashvÆ
=0);

3531 
ãm∂©e
<
ty≥«me
 
_Tp
> _Tp& 
	`ªf
(
i0
, 
i1
, 
size_t
* 
hashvÆ
=0);

3533 
ãm∂©e
<
ty≥«me
 
_Tp
> _Tp& 
	`ªf
(
i0
, 
i1
, 
i2
, 
size_t
* 
hashvÆ
=0);

3535 
ãm∂©e
<
ty≥«me
 
_Tp
> _Tp& 
	`ªf
(c⁄° * 
idx
, 
size_t
* 
hashvÆ
=0);

3551 
ãm∂©e
<
ty≥«me
 
_Tp
> _T∞
	`vÆue
(
i0
, 
size_t
* 
hashvÆ
=0) const;

3553 
ãm∂©e
<
ty≥«me
 
_Tp
> _T∞
	`vÆue
(
i0
, 
i1
, 
size_t
* 
hashvÆ
=0) const;

3555 
ãm∂©e
<
ty≥«me
 
_Tp
> _T∞
	`vÆue
(
i0
, 
i1
, 
i2
, 
size_t
* 
hashvÆ
=0) const;

3557 
ãm∂©e
<
ty≥«me
 
_Tp
> _T∞
	`vÆue
(c⁄° * 
idx
, 
size_t
* 
hashvÆ
=0) const;

3569 
ãm∂©e
<
ty≥«me
 
_Tp
> c⁄° _Tp* 
	`föd
(
i0
, 
size_t
* 
hashvÆ
=0) const;

3571 
ãm∂©e
<
ty≥«me
 
_Tp
> c⁄° _Tp* 
	`föd
(
i0
, 
i1
, 
size_t
* 
hashvÆ
=0) const;

3573 
ãm∂©e
<
ty≥«me
 
_Tp
> c⁄° _Tp* 
	`föd
(
i0
, 
i1
, 
i2
, 
size_t
* 
hashvÆ
=0) const;

3575 
ãm∂©e
<
ty≥«me
 
_Tp
> c⁄° _Tp* 
	`föd
(c⁄° * 
idx
, 
size_t
* 
hashvÆ
=0) const;

3578 
	`îa£
(
i0
, 
i1
, 
size_t
* 
hashvÆ
=0);

3580 
	`îa£
(
i0
, 
i1
, 
i2
, 
size_t
* 
hashvÆ
=0);

3582 
	`îa£
(c⁄° * 
idx
, 
size_t
* 
hashvÆ
=0);

3589 
S∑r£M©Iãøt‹
 
	`begö
();

3591 
ãm∂©e
<
ty≥«me
 
_Tp
> 
S∑r£M©Iãøt‹_
<_Tp> 
	`begö
();

3593 
S∑r£M©C⁄°Iãøt‹
 
	`begö
() const;

3595 
ãm∂©e
<
ty≥«me
 
_Tp
> 
S∑r£M©C⁄°Iãøt‹_
<_Tp> 
	`begö
() const;

3601 
S∑r£M©Iãøt‹
 
	`íd
();

3603 
S∑r£M©C⁄°Iãøt‹
 
	`íd
() const;

3605 
ãm∂©e
<
ty≥«me
 
_Tp
> 
S∑r£M©Iãøt‹_
<_Tp> 
	`íd
();

3607 
ãm∂©e
<
ty≥«me
 
_Tp
> 
S∑r£M©C⁄°Iãøt‹_
<_Tp> 
	`íd
() const;

3610 
ãm∂©e
<
ty≥«me
 
_Tp
> _Tp& 
	`vÆue
(
Node
* 
n
);

3612 
ãm∂©e
<
ty≥«me
 
_Tp
> c⁄° _Tp& 
	`vÆue
(c⁄° 
Node
* 
n
) const;

3615 
Node
* 
	`node
(
size_t
 
nidx
);

3616 c⁄° 
Node
* 
	`node
(
size_t
 
nidx
) const;

3618 
uch¨
* 
	`√wNode
(c⁄° * 
idx
, 
size_t
 
hashvÆ
);

3619 
	`ªmoveNode
(
size_t
 
hidx
, size_à
nidx
, size_à
¥evidx
);

3620 
	`ªsizeHashTab
(
size_t
 
√wsize
);

3622 íum { 
MAGIC_VAL
=0x42FD0000, 
MAX_DIM
=
CV_MAX_DIM
, 
HASH_SCALE
=0x5bd1e995, 
HASH_BIT
=0x80000000 };

3624 
Êags
;

3625 
Hdr
* 
hdr
;

3626 
	}
};

3629 
CV_EXPORTS
 
möMaxLoc
(c⁄° 
S∑r£M©
& 
a
, * 
möVÆ
,

3630 * 
maxVÆ
, * 
möIdx
=0, * 
maxIdx
=0);

3632 
CV_EXPORTS
 
n‹m
–c⁄° 
S∑r£M©
& 
§c
, 
n‹mTy≥
 );

3634 
CV_EXPORTS
 
n‹mÆize
–c⁄° 
S∑r£M©
& 
§c
, S∑r£M©& 
d°
, 
Æpha
, 
n‹mTy≥
 );

3648 ˛as†
	cCV_EXPORTS
 
	gS∑r£M©C⁄°Iãøt‹


3650 
	gpublic
:

3652 
S∑r£M©C⁄°Iãøt‹
();

3654 
S∑r£M©C⁄°Iãøt‹
(c⁄° 
S∑r£M©
* 
_m
);

3656 
S∑r£M©C⁄°Iãøt‹
(c⁄° S∑r£M©C⁄°Iãøt‹& 
ô
);

3659 
	gS∑r£M©C⁄°Iãøt‹
& 
	g›î©‹
 = (c⁄° 
S∑r£M©C⁄°Iãøt‹
& 
ô
);

3662 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> c⁄° _Tp& 
vÆue
() const;

3664 c⁄° 
	gS∑r£M©
::
Node
* 
node
() const;

3667 
	gS∑r£M©C⁄°Iãøt‹
& 
	g›î©‹
 --();

3669 
S∑r£M©C⁄°Iãøt‹
 
	g›î©‹
 --();

3671 
	gS∑r£M©C⁄°Iãøt‹
& 
	g›î©‹
 ++();

3673 
S∑r£M©C⁄°Iãøt‹
 
	g›î©‹
 ++();

3676 
£ekEnd
();

3678 c⁄° 
S∑r£M©
* 
	gm
;

3679 
size_t
 
	ghashidx
;

3680 
uch¨
* 
	g±r
;

3689 ˛as†
	cCV_EXPORTS
 
	gS∑r£M©Iãøt‹
 : 
public
 
S∑r£M©C⁄°Iãøt‹


3691 
public
:

3693 
S∑r£M©Iãøt‹
();

3695 
S∑r£M©Iãøt‹
(
S∑r£M©
* 
_m
);

3697 
S∑r£M©Iãøt‹
(
S∑r£M©
* 
_m
, c⁄° * 
idx
);

3699 
S∑r£M©Iãøt‹
(c⁄° S∑r£M©Iãøt‹& 
ô
);

3702 
	gS∑r£M©Iãøt‹
& 
	g›î©‹
 = (c⁄° 
S∑r£M©Iãøt‹
& 
ô
);

3704 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> _Tp& 
vÆue
() const;

3706 
	gS∑r£M©
::
Node
* 
node
() const;

3709 
	gS∑r£M©Iãøt‹
& 
	g›î©‹
 ++();

3711 
S∑r£M©Iãøt‹
 
	g›î©‹
 ++();

3727 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cS∑r£M©_
 : 
public
 
S∑r£M©


3729 
public
:

3730 
S∑r£M©Iãøt‹_
<
	t_Tp
> 
	tôî©‹
;

3731 
	gS∑r£M©C⁄°Iãøt‹_
<
	t_Tp
> 
	tc⁄°_ôî©‹
;

3734 
S∑r£M©_
();

3736 
S∑r£M©_
(
dims
, c⁄° * 
_sizes
);

3738 
S∑r£M©_
(c⁄° 
S∑r£M©
& 
m
);

3740 
S∑r£M©_
(c⁄° S∑r£M©_& 
m
);

3742 
S∑r£M©_
(c⁄° 
M©
& 
m
);

3744 
S∑r£M©_
(c⁄° 
CvS∑r£M©
* 
m
);

3746 
	gS∑r£M©_
& 
	g›î©‹
 = (c⁄° 
S∑r£M©
& 
m
);

3748 
	gS∑r£M©_
& 
	g›î©‹
 = (c⁄° 
S∑r£M©_
& 
m
);

3750 
	gS∑r£M©_
& 
	g›î©‹
 = (c⁄° 
M©
& 
m
);

3753 
S∑r£M©_
 
˛⁄e
() const;

3755 
¸óã
(
dims
, c⁄° * 
_sizes
);

3757 
›î©‹
 
	gCvS∑r£M©
*() const;

3760 
ty≥
() const;

3762 
dïth
() const;

3764 
ch™√ls
() const;

3767 
	g_Tp
& 
ªf
(
i0
, 
size_t
* 
hashvÆ
=0);

3769 
	g_Tp
& 
ªf
(
i0
, 
i1
, 
size_t
* 
hashvÆ
=0);

3771 
	g_Tp
& 
ªf
(
i0
, 
i1
, 
i2
, 
size_t
* 
hashvÆ
=0);

3773 
	g_Tp
& 
ªf
(c⁄° * 
idx
, 
size_t
* 
hashvÆ
=0);

3776 
_Tp
 
›î©‹
()(
	gi0
, 
size_t
* 
	ghashvÆ
=0) const;

3778 
_Tp
 
›î©‹
()(
	gi0
, 
	gi1
, 
size_t
* 
	ghashvÆ
=0) const;

3780 
_Tp
 
›î©‹
()(
	gi0
, 
	gi1
, 
	gi2
, 
size_t
* 
	ghashvÆ
=0) const;

3782 
_Tp
 
›î©‹
()(c⁄° * 
	gidx
, 
size_t
* 
	ghashvÆ
=0) const;

3785 
	gS∑r£M©Iãøt‹_
<
	g_Tp
> 
begö
();

3787 
	gS∑r£M©C⁄°Iãøt‹_
<
	g_Tp
> 
begö
() const;

3789 
	gS∑r£M©Iãøt‹_
<
	g_Tp
> 
íd
();

3791 
	gS∑r£M©C⁄°Iãøt‹_
<
	g_Tp
> 
íd
() const;

3801 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cS∑r£M©C⁄°Iãøt‹_
 : 
public
 
S∑r£M©C⁄°Iãøt‹


3803 
public
:

3804 
°d
::
	tf‹w¨d_ôî©‹_èg
 
	tôî©‹_ˇãg‹y
;

3807 
S∑r£M©C⁄°Iãøt‹_
();

3809 
S∑r£M©C⁄°Iãøt‹_
(c⁄° 
S∑r£M©_
<
_Tp
>* 
_m
);

3810 
S∑r£M©C⁄°Iãøt‹_
(c⁄° 
S∑r£M©
* 
_m
);

3812 
S∑r£M©C⁄°Iãøt‹_
(c⁄° S∑r£M©C⁄°Iãøt‹_& 
ô
);

3815 
	gS∑r£M©C⁄°Iãøt‹_
& 
	g›î©‹
 = (c⁄° 
S∑r£M©C⁄°Iãøt‹_
& 
ô
);

3817 c⁄° 
	g_Tp
& 
	g›î©‹
 *() const;

3820 
	gS∑r£M©C⁄°Iãøt‹_
& 
	g›î©‹
 ++();

3822 
S∑r£M©C⁄°Iãøt‹_
 
	g›î©‹
 ++();

3831 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gS∑r£M©Iãøt‹_
 : 
public
 
S∑r£M©C⁄°Iãøt‹_
<
_Tp
>

3833 
public
:

3834 
°d
::
	tf‹w¨d_ôî©‹_èg
 
	tôî©‹_ˇãg‹y
;

3837 
S∑r£M©Iãøt‹_
();

3839 
S∑r£M©Iãøt‹_
(
S∑r£M©_
<
_Tp
>* 
_m
);

3840 
S∑r£M©Iãøt‹_
(
S∑r£M©
* 
_m
);

3842 
S∑r£M©Iãøt‹_
(c⁄° S∑r£M©Iãøt‹_& 
ô
);

3845 
	gS∑r£M©Iãøt‹_
& 
	g›î©‹
 = (c⁄° 
S∑r£M©Iãøt‹_
& 
ô
);

3847 
	g_Tp
& 
	g›î©‹
 *() const;

3850 
	gS∑r£M©Iãøt‹_
& 
	g›î©‹
 ++();

3852 
S∑r£M©Iãøt‹_
 
	g›î©‹
 ++();

3881 ˛as†
	cCV_EXPORTS_W
 
	gKDTªe


3883 
	gpublic
:

3887 
	sNode


3889 
Node
(Ë: 
idx
(-1), 
À·
(-1), 
right
(-1), 
bound¨y
(0.f) {}

3890 
Node
(
_idx
, 
_À·
, 
_right
, 
_bound¨y
)

3891 : 
idx
(
_idx
), 
À·
(
_À·
), 
right
(
_right
), 
bound¨y
(
_bound¨y
) {}

3893 
	gidx
;

3895 
	gÀ·
, 
	gright
;

3897 
	gbound¨y
;

3901 
CV_WRAP
 
KDTªe
();

3903 
CV_WRAP
 
KDTªe
(
I≈utAºay
 
poöts
, 
boﬁ
 
c›yAndRe‹dîPoöts
=
Ál£
);

3905 
CV_WRAP
 
KDTªe
(
I≈utAºay
 
poöts
, I≈utAºay 
_œbñs
,

3906 
boﬁ
 
c›yAndRe‹dîPoöts
=
Ál£
);

3908 
CV_WRAP
 
buûd
(
I≈utAºay
 
poöts
, 
boﬁ
 
c›yAndRe‹dîPoöts
=
Ál£
);

3910 
CV_WRAP
 
buûd
(
I≈utAºay
 
poöts
, I≈utAºay 
œbñs
,

3911 
boﬁ
 
c›yAndRe‹dîPoöts
=
Ál£
);

3913 
CV_WRAP
 
födNóª°
(
I≈utAºay
 
vec
, 
K
, 
Emax
,

3914 
OuçutAºay
 
√ighb‹sIdx
,

3915 
OuçutAºay
 
√ighb‹s
=
noAºay
(),

3916 
OuçutAºay
 
di°
=
noAºay
(),

3917 
OuçutAºay
 
œbñs
=
noAºay
()) const;

3919 
CV_WRAP
 
födOπhoR™ge
(
I≈utAºay
 
möBounds
,

3920 
I≈utAºay
 
maxBounds
,

3921 
OuçutAºay
 
√ighb‹sIdx
,

3922 
OuçutAºay
 
√ighb‹s
=
noAºay
(),

3923 
OuçutAºay
 
œbñs
=
noAºay
()) const;

3925 
CV_WRAP
 
gëPoöts
(
I≈utAºay
 
idx
, 
OuçutAºay
 
±s
,

3926 
OuçutAºay
 
œbñs
=
noAºay
()) const;

3928 c⁄° * 
gëPoöt
(
±idx
, * 
œbñ
=0) const;

3930 
CV_WRAP
 
dims
() const;

3932 
	gve˘‹
<
	gNode
> 
	gnodes
;

3933 
CV_PROP
 
M©
 
	gpoöts
;

3934 
CV_PROP
 
	gve˘‹
<> 
	gœbñs
;

3935 
CV_PROP
 
	gmaxDïth
;

3936 
CV_PROP_RW
 
	gn‹mTy≥
;

3941 
˛ass
 
CV_EXPORTS
 
	gFûeNode
;

4040 ˛as†
	cCV_EXPORTS_W
 
	gFûeSt‹age


4042 
	gpublic
:

4046 
READ
=0,

4047 
	gWRITE
=1,

4048 
	gAPPEND
=2,

4049 
	gMEMORY
=4,

4050 
	gFORMAT_MASK
=(7<<3),

4051 
	gFORMAT_AUTO
=0,

4052 
	gFORMAT_XML
=(1<<3),

4053 
	gFORMAT_YAML
=(2<<3)

4057 
	gUNDEFINED
=0,

4058 
	gVALUE_EXPECTED
=1,

4059 
	gNAME_EXPECTED
=2,

4060 
	gINSIDE_MAP
=4

4063 
CV_WRAP
 
FûeSt‹age
();

4065 
CV_WRAP
 
FûeSt‹age
(c⁄° 
°rög
& 
sour˚
, 
Êags
, c⁄° såög& 
ícodög
=string());

4067 
FûeSt‹age
(
CvFûeSt‹age
* 
fs
);

4069 
	gvútuÆ
 ~
FûeSt‹age
();

4072 
CV_WRAP
 
vútuÆ
 
boﬁ
 
›í
(c⁄° 
°rög
& 
fûíame
, 
Êags
, c⁄° såög& 
ícodög
=string());

4074 
CV_WRAP
 
vútuÆ
 
boﬁ
 
isO≥√d
() const;

4076 
CV_WRAP
 
vútuÆ
 
ªÀa£
();

4078 
CV_WRAP
 
°rög
 
ªÀa£AndGëSåög
();

4081 
CV_WRAP
 
FûeNode
 
gëFú°T›LevñNode
() const;

4083 
CV_WRAP
 
FûeNode
 
roŸ
(
°ªamidx
=0) const;

4085 
FûeNode
 
	g›î©‹
[](c⁄° 
	g°rög
& 
	gnodíame
) const;

4087 
CV_WRAP
 
FûeNode
 
	g›î©‹
[](c⁄° * 
	gnodíame
) const;

4090 
CvFûeSt‹age
* 
	g›î©‹
 *(Ë{  
	gfs
; }

4092 c⁄° 
CvFûeSt‹age
* 
	g›î©‹
 *(Ëc⁄° {  
	gfs
; }

4094 
wrôeRaw
–c⁄° 
°rög
& 
fmt
, c⁄° 
uch¨
* 
vec
, 
size_t
 
Àn
 );

4096 
wrôeObj
–c⁄° 
°rög
& 
«me
, c⁄° * 
obj
 );

4099 
°rög
 
gëDeÁu…Obje˘Name
(c⁄° såög& 
fûíame
);

4101 
	gPå
<
	gCvFûeSt‹age
> 
	gfs
;

4102 
°rög
 
	gñ«me
;

4103 
	gve˘‹
<> 
	g°ru˘s
;

4104 
	g°©e
;

4107 
˛ass
 
CV_EXPORTS
 
	gFûeNodeIãøt‹
;

4119 ˛as†
	cCV_EXPORTS_W_SIMPLE
 
	gFûeNode


4121 
	gpublic
:

4125 
NONE
=0,

4126 
	gINT
=1,

4127 
	gREAL
=2,

4128 
	gFLOAT
=
REAL
,

4129 
	gSTR
=3,

4130 
	gSTRING
=
STR
,

4131 
	gREF
=4,

4132 
	gSEQ
=5,

4133 
	gMAP
=6,

4134 
	gTYPE_MASK
=7,

4135 
	gFLOW
=8,

4136 
	gUSER
=16,

4137 
	gEMPTY
=32,

4138 
	gNAMED
=64

4141 
CV_WRAP
 
FûeNode
();

4143 
FûeNode
(c⁄° 
CvFûeSt‹age
* 
fs
, c⁄° 
CvFûeNode
* 
node
);

4145 
FûeNode
(c⁄° FûeNode& 
node
);

4147 
FûeNode
 
	g›î©‹
[](c⁄° 
	g°rög
& 
	gnodíame
) const;

4149 
CV_WRAP
 
FûeNode
 
	g›î©‹
[](c⁄° * 
	gnodíame
) const;

4151 
CV_WRAP
 
FûeNode
 
	g›î©‹
[](
	gi
) const;

4153 
CV_WRAP
 
ty≥
() const;

4156 
CV_WRAP
 
boﬁ
 
em±y
() const;

4158 
CV_WRAP
 
boﬁ
 
isN⁄e
() const;

4160 
CV_WRAP
 
boﬁ
 
isSeq
() const;

4162 
CV_WRAP
 
boﬁ
 
isM≠
() const;

4164 
CV_WRAP
 
boﬁ
 
isI¡
() const;

4166 
CV_WRAP
 
boﬁ
 
isRól
() const;

4168 
CV_WRAP
 
boﬁ
 
isSåög
() const;

4170 
CV_WRAP
 
boﬁ
 
isNamed
() const;

4172 
CV_WRAP
 
°rög
 
«me
() const;

4174 
CV_WRAP
 
size_t
 
size
() const;

4176 
›î©‹
 () const;

4178 
›î©‹
 () const;

4180 
›î©‹
 () const;

4182 
›î©‹
 
°rög
() const;

4185 
CvFûeNode
* 
	g›î©‹
 *();

4187 c⁄° 
CvFûeNode
* 
	g›î©‹
* () const;

4190 
FûeNodeIãøt‹
 
begö
() const;

4192 
FûeNodeIãøt‹
 
íd
() const;

4195 
ªadRaw
–c⁄° 
°rög
& 
fmt
, 
uch¨
* 
vec
, 
size_t
 
Àn
 ) const;

4197 * 
ªadObj
() const;

4200 c⁄° 
CvFûeSt‹age
* 
	gfs
;

4201 c⁄° 
CvFûeNode
* 
	gnode
;

4210 ˛as†
	cCV_EXPORTS
 
	gFûeNodeIãøt‹


4212 
	gpublic
:

4214 
FûeNodeIãøt‹
();

4216 
FûeNodeIãøt‹
(c⁄° 
CvFûeSt‹age
* 
fs
, c⁄° 
CvFûeNode
* 
node
, 
size_t
 
ofs
=0);

4218 
FûeNodeIãøt‹
(c⁄° FûeNodeIãøt‹& 
ô
);

4220 
FûeNode
 
	g›î©‹
 *() const;

4222 
FûeNode
 
	g›î©‹
 ->() const;

4225 
	gFûeNodeIãøt‹
& 
	g›î©‹
 ++ ();

4227 
FûeNodeIãøt‹
 
	g›î©‹
 ++ ();

4229 
	gFûeNodeIãøt‹
& 
	g›î©‹
 -- ();

4231 
FûeNodeIãøt‹
 
	g›î©‹
 -- ();

4233 
	gFûeNodeIãøt‹
& 
	g›î©‹
 +(
ofs
);

4235 
	gFûeNodeIãøt‹
& 
	g›î©‹
 -(
ofs
);

4238 
	gFûeNodeIãøt‹
& 
ªadRaw
–c⁄° 
°rög
& 
fmt
, 
uch¨
* 
vec
,

4239 
size_t
 
maxCou¡
=(size_t)
INT_MAX
 );

4241 c⁄° 
CvFûeSt‹age
* 
	gfs
;

4242 c⁄° 
CvFûeNode
* 
	gc⁄èöî
;

4243 
CvSeqRódî
 
	gªadî
;

4244 
size_t
 
	gªmaöög
;

4249 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gSeqIãøt‹
;

4251 
	gPå
<
	tCvMemSt‹age
> 
	tMemSt‹age
;

4263 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cSeq


4265 
	gpublic
:

4266 
SeqIãøt‹
<
	t_Tp
> 
	tôî©‹
;

4267 
	gSeqIãøt‹
<
	t_Tp
> 
	tc⁄°_ôî©‹
;

4270 
Seq
();

4272 
Seq
(c⁄° 
CvSeq
* 
£q
);

4274 
Seq
(
MemSt‹age
& 
°‹age
, 
hódîSize
 = (
CvSeq
));

4276 
	g_Tp
& 
	g›î©‹
 [](
	gidx
);

4278 c⁄° 
	g_Tp
& 
	g›î©‹
[](
	gidx
) const;

4280 
	gSeqIãøt‹
<
	g_Tp
> 
begö
() const;

4282 
	gSeqIãøt‹
<
	g_Tp
> 
íd
() const;

4284 
size_t
 
size
() const;

4286 
ty≥
() const;

4288 
dïth
() const;

4290 
ch™√ls
() const;

4292 
size_t
 
ñemSize
() const;

4294 
size_t
 
ödex
(c⁄° 
_Tp
& 
ñem
) const;

4296 
push_back
(c⁄° 
_Tp
& 
ñem
);

4298 
push_‰⁄t
(c⁄° 
_Tp
& 
ñem
);

4300 
push_back
(c⁄° 
_Tp
* 
ñems
, 
size_t
 
cou¡
);

4302 
push_‰⁄t
(c⁄° 
_Tp
* 
ñems
, 
size_t
 
cou¡
);

4304 
ö£π
(
idx
, c⁄° 
_Tp
& 
ñem
);

4306 
ö£π
(
idx
, c⁄° 
_Tp
* 
ñems
, 
size_t
 
cou¡
);

4308 
ªmove
(
idx
);

4310 
ªmove
(c⁄° 
R™ge
& 
r
);

4313 
	g_Tp
& 
‰⁄t
();

4315 c⁄° 
	g_Tp
& 
‰⁄t
() const;

4317 
	g_Tp
& 
back
();

4319 c⁄° 
	g_Tp
& 
back
() const;

4321 
boﬁ
 
em±y
() const;

4324 
˛ór
();

4326 
p›_‰⁄t
();

4328 
p›_back
();

4330 
p›_‰⁄t
(
_Tp
* 
ñems
, 
size_t
 
cou¡
);

4332 
p›_back
(
_Tp
* 
ñems
, 
size_t
 
cou¡
);

4335 
c›yTo
(
ve˘‹
<
_Tp
>& 
vec
, c⁄° 
R™ge
& 
ønge
=R™ge::
Æl
()) const;

4337 
›î©‹
 
	gve˘‹
<
	g_Tp
>() const;

4339 
CvSeq
* 
	g£q
;

4346 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cSeqIãøt‹
 : 
public
 
CvSeqRódî


4348 
public
:

4350 
SeqIãøt‹
();

4352 
SeqIãøt‹
(c⁄° 
Seq
<
_Tp
>& 
£q
, 
boﬁ
 
£ekEnd
=
Ál£
);

4354 
£ek
(
size_t
 
pos
);

4356 
size_t
 
ãŒ
() const;

4358 
	g_Tp
& 
	g›î©‹
 *();

4360 c⁄° 
	g_Tp
& 
	g›î©‹
 *() const;

4362 
	gSeqIãøt‹
& 
	g›î©‹
 ++();

4364 
SeqIãøt‹
 
	g›î©‹
 ++() const;

4366 
	gSeqIãøt‹
& 
	g›î©‹
 --();

4368 
SeqIãøt‹
 
	g›î©‹
 --() const;

4371 
	gSeqIãøt‹
& 
	g›î©‹
 +=();

4373 
	gSeqIãøt‹
& 
	g›î©‹
 -=();

4377 
	gödex
;

4381 
˛ass
 
CV_EXPORTS
 
	gAlg‹ôhm
;

4382 
˛ass
 
CV_EXPORTS
 
	gAlg‹ôhmInfo
;

4383 
CV_EXPORTS
 
	gAlg‹ôhmInfoD©a
;

4385 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	sP¨amTy≥
 {};

4390 ˛as†
	cCV_EXPORTS_W
 
	gAlg‹ôhm


4392 
	gpublic
:

4393 
Alg‹ôhm
();

4394 
	gvútuÆ
 ~
Alg‹ôhm
();

4395 
°rög
 
«me
() const;

4397 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åy≥«mê
	gP¨amTy≥
<_Tp>::
membî_ty≥
 
gë
(c⁄° 
°rög
& 
«me
) const;

4398 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åy≥«mê
	gP¨amTy≥
<_Tp>::
membî_ty≥
 
gë
(c⁄° * 
«me
) const;

4400 
CV_WRAP
 
gëI¡
(c⁄° 
°rög
& 
«me
) const;

4401 
CV_WRAP
 
gëDoubÀ
(c⁄° 
°rög
& 
«me
) const;

4402 
CV_WRAP
 
boﬁ
 
gëBoﬁ
(c⁄° 
°rög
& 
«me
) const;

4403 
CV_WRAP
 
°rög
 
gëSåög
(c⁄° såög& 
«me
) const;

4404 
CV_WRAP
 
M©
 
gëM©
(c⁄° 
°rög
& 
«me
) const;

4405 
CV_WRAP
 
	gve˘‹
<
	gM©
> 
gëM©Ve˘‹
(c⁄° 
°rög
& 
«me
) const;

4406 
CV_WRAP
 
	gPå
<
	gAlg‹ôhm
> 
gëAlg‹ôhm
(c⁄° 
°rög
& 
«me
) const;

4408 
£t
(c⁄° 
°rög
& 
«me
, 
vÆue
);

4409 
£t
(c⁄° 
°rög
& 
«me
, 
vÆue
);

4410 
£t
(c⁄° 
°rög
& 
«me
, 
boﬁ
 
vÆue
);

4411 
£t
(c⁄° 
°rög
& 
«me
, c⁄° såög& 
vÆue
);

4412 
£t
(c⁄° 
°rög
& 
«me
, c⁄° 
M©
& 
vÆue
);

4413 
£t
(c⁄° 
°rög
& 
«me
, c⁄° 
ve˘‹
<
M©
>& 
vÆue
);

4414 
£t
(c⁄° 
°rög
& 
«me
, c⁄° 
På
<
Alg‹ôhm
>& 
vÆue
);

4415 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
£t
(c⁄° 
°rög
& 
«me
, c⁄° 
På
<
_Tp
>& 
vÆue
);

4417 
CV_WRAP
 
£tI¡
(c⁄° 
°rög
& 
«me
, 
vÆue
);

4418 
CV_WRAP
 
£tDoubÀ
(c⁄° 
°rög
& 
«me
, 
vÆue
);

4419 
CV_WRAP
 
£tBoﬁ
(c⁄° 
°rög
& 
«me
, 
boﬁ
 
vÆue
);

4420 
CV_WRAP
 
£tSåög
(c⁄° 
°rög
& 
«me
, c⁄° såög& 
vÆue
);

4421 
CV_WRAP
 
£tM©
(c⁄° 
°rög
& 
«me
, c⁄° 
M©
& 
vÆue
);

4422 
CV_WRAP
 
£tM©Ve˘‹
(c⁄° 
°rög
& 
«me
, c⁄° 
ve˘‹
<
M©
>& 
vÆue
);

4423 
CV_WRAP
 
£tAlg‹ôhm
(c⁄° 
°rög
& 
«me
, c⁄° 
På
<
Alg‹ôhm
>& 
vÆue
);

4424 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
£tAlg‹ôhm
(c⁄° 
°rög
& 
«me
, c⁄° 
På
<
_Tp
>& 
vÆue
);

4426 
£t
(c⁄° * 
«me
, 
vÆue
);

4427 
£t
(c⁄° * 
«me
, 
vÆue
);

4428 
£t
(c⁄° * 
«me
, 
boﬁ
 
vÆue
);

4429 
£t
(c⁄° * 
«me
, c⁄° 
°rög
& 
vÆue
);

4430 
£t
(c⁄° * 
«me
, c⁄° 
M©
& 
vÆue
);

4431 
£t
(c⁄° * 
«me
, c⁄° 
ve˘‹
<
M©
>& 
vÆue
);

4432 
£t
(c⁄° * 
«me
, c⁄° 
På
<
Alg‹ôhm
>& 
vÆue
);

4433 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
£t
(c⁄° * 
«me
, c⁄° 
På
<
_Tp
>& 
vÆue
);

4435 
£tI¡
(c⁄° * 
«me
, 
vÆue
);

4436 
£tDoubÀ
(c⁄° * 
«me
, 
vÆue
);

4437 
£tBoﬁ
(c⁄° * 
«me
, 
boﬁ
 
vÆue
);

4438 
£tSåög
(c⁄° * 
«me
, c⁄° 
°rög
& 
vÆue
);

4439 
£tM©
(c⁄° * 
«me
, c⁄° 
M©
& 
vÆue
);

4440 
£tM©Ve˘‹
(c⁄° * 
«me
, c⁄° 
ve˘‹
<
M©
>& 
vÆue
);

4441 
£tAlg‹ôhm
(c⁄° * 
«me
, c⁄° 
På
<
Alg‹ôhm
>& 
vÆue
);

4442 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
£tAlg‹ôhm
(c⁄° * 
«me
, c⁄° 
På
<
_Tp
>& 
vÆue
);

4444 
CV_WRAP
 
°rög
 
∑ømHñp
(c⁄° såög& 
«me
) const;

4445 
∑ømTy≥
(c⁄° * 
«me
) const;

4446 
CV_WRAP
 
∑ømTy≥
(c⁄° 
°rög
& 
«me
) const;

4447 
CV_WRAP
 
gëP¨ams
(
CV_OUT
 
ve˘‹
<
°rög
>& 
«mes
) const;

4450 
vútuÆ
 
wrôe
(
FûeSt‹age
& 
fs
) const;

4451 
vútuÆ
 
ªad
(c⁄° 
FûeNode
& 
‚
);

4453 
	gAlg‹ôhm
* (*
	tC⁄°ru˘‹
)();

4454 (
	gAlg‹ôhm
::*
	tGëãr
)() const;

4455 (
	gAlg‹ôhm
::*
	tSëãr
)();

4457 
CV_WRAP
 
gëLi°
(
CV_OUT
 
ve˘‹
<
°rög
>& 
Æg‹ôhms
);

4458 
CV_WRAP
 
	gPå
<
	gAlg‹ôhm
> 
_¸óã
(c⁄° 
°rög
& 
«me
);

4459 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gPå
<_Tp> 
¸óã
(c⁄° 
°rög
& 
«me
);

4461 
vútuÆ
 
Alg‹ôhmInfo
* 
öfo
() const {  0; }

4465 ˛as†
	cCV_EXPORTS
 
	gAlg‹ôhmInfo


4467 
	gpublic
:

4468 
‰õnd
 
˛ass
 
Alg‹ôhm
;

4469 
Alg‹ôhmInfo
(c⁄° 
°rög
& 
«me
, 
Alg‹ôhm
::
C⁄°ru˘‹
 
¸óã
);

4470 ~
Alg‹ôhmInfo
();

4471 
gë
(c⁄° 
Alg‹ôhm
* 
Ægo
, c⁄° * 
«me
, 
¨gTy≥
, * 
vÆue
) const;

4472 
addP¨am_
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
, 
¨gTy≥
,

4473 * 
vÆue
, 
boﬁ
 
ªadO∆y
,

4474 
Alg‹ôhm
::
Gëãr
 
gëãr
, Alg‹ôhm::
Sëãr
 
£âî
,

4475 c⁄° 
°rög
& 
hñp
=string());

4476 
°rög
 
∑ømHñp
(c⁄° * 
«me
) const;

4477 
∑ømTy≥
(c⁄° * 
«me
) const;

4478 
gëP¨ams
(
ve˘‹
<
°rög
>& 
«mes
) const;

4480 
wrôe
(c⁄° 
Alg‹ôhm
* 
Ægo
, 
FûeSt‹age
& 
fs
) const;

4481 
ªad
(
Alg‹ôhm
* 
Ægo
, c⁄° 
FûeNode
& 
‚
) const;

4482 
°rög
 
«me
() const;

4484 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4485 & 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4486 (
Alg‹ôhm
::*
gëãr
)()=0,

4487 (
Alg‹ôhm
::*
£âî
)()=0,

4488 c⁄° 
°rög
& 
hñp
=string());

4489 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4490 & 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4491 (
Alg‹ôhm
::*
gëãr
)()=0,

4492 (
Alg‹ôhm
::*
£âî
)()=0,

4493 c⁄° 
°rög
& 
hñp
=string());

4494 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4495 
boﬁ
& 
vÆue
, boﬁ 
ªadO∆y
=
Ál£
,

4496 (
Alg‹ôhm
::*
gëãr
)()=0,

4497 (
Alg‹ôhm
::*
£âî
)()=0,

4498 c⁄° 
°rög
& 
hñp
=string());

4499 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4500 & 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4501 (
Alg‹ôhm
::*
gëãr
)()=0,

4502 (
Alg‹ôhm
::*
£âî
)()=0,

4503 c⁄° 
°rög
& 
hñp
=string());

4504 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4505 
°rög
& 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4506 
°rög
 (
Alg‹ôhm
::*
gëãr
)()=0,

4507 (
Alg‹ôhm
::*
£âî
)(c⁄° 
°rög
&)=0,

4508 c⁄° 
°rög
& 
hñp
=string());

4509 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4510 
M©
& 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4511 
M©
 (
Alg‹ôhm
::*
gëãr
)()=0,

4512 (
Alg‹ôhm
::*
£âî
)(c⁄° 
M©
&)=0,

4513 c⁄° 
°rög
& 
hñp
=string());

4514 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4515 
ve˘‹
<
M©
>& 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4516 
ve˘‹
<
M©
> (
Alg‹ôhm
::*
gëãr
)()=0,

4517 (
Alg‹ôhm
::*
£âî
)(c⁄° 
ve˘‹
<
M©
>&)=0,

4518 c⁄° 
°rög
& 
hñp
=string());

4519 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4520 
På
<
Alg‹ôhm
>& 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4521 
På
<
Alg‹ôhm
> (Alg‹ôhm::*
gëãr
)()=0,

4522 (
Alg‹ôhm
::*
£âî
)(c⁄° 
På
<Algorithm>&)=0,

4523 c⁄° 
°rög
& 
hñp
=string());

4524 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4525 & 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4526 (
Alg‹ôhm
::*
gëãr
)()=0,

4527 (
Alg‹ôhm
::*
£âî
)()=0,

4528 c⁄° 
°rög
& 
hñp
=string());

4529 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4530 & 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4531 (
Alg‹ôhm
::*
gëãr
)()=0,

4532 (
Alg‹ôhm
::*
£âî
)()=0,

4533 c⁄° 
°rög
& 
hñp
=string());

4534 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4535 
uöt64
& 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4536 
uöt64
 (
Alg‹ôhm
::*
gëãr
)()=0,

4537 (
Alg‹ôhm
::*
£âî
)(
uöt64
)=0,

4538 c⁄° 
°rög
& 
hñp
=string());

4539 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4540 
uch¨
& 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4541 
uch¨
 (
Alg‹ôhm
::*
gëãr
)()=0,

4542 (
Alg‹ôhm
::*
£âî
)(
uch¨
)=0,

4543 c⁄° 
°rög
& 
hñp
=string());

4544 
	gãm∂©e
<
ty≥«me
 
	g_Tp
,Åy≥«mê
	g_Ba£
> 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4545 
På
<
_Tp
>& 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4546 
På
<
_Tp
> (
Alg‹ôhm
::*
gëãr
)()=0,

4547 (
Alg‹ôhm
::*
£âî
)(c⁄° 
På
<
_Tp
>&)=0,

4548 c⁄° 
°rög
& 
hñp
=string());

4549 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
«me
,

4550 
På
<
_Tp
>& 
vÆue
, 
boﬁ
 
ªadO∆y
=
Ál£
,

4551 
På
<
_Tp
> (
Alg‹ôhm
::*
gëãr
)()=0,

4552 (
Alg‹ôhm
::*
£âî
)(c⁄° 
På
<
_Tp
>&)=0,

4553 c⁄° 
°rög
& 
hñp
=string());

4554 
	g¥Ÿe˘ed
:

4555 
Alg‹ôhmInfoD©a
* 
d©a
;

4556 
£t
(
Alg‹ôhm
* 
Ægo
, c⁄° * 
«me
, 
¨gTy≥
,

4557 c⁄° * 
vÆue
, 
boﬁ
 
f‹˚
=
Ál£
) const;

4561 
CV_EXPORTS
 
	gP¨am


4563 íum { 
	gINT
=0, 
	gBOOLEAN
=1, 
	gREAL
=2, 
	gSTRING
=3, 
	gMAT
=4, 
	gMAT_VECTOR
=5, 
	gALGORITHM
=6, 
	gFLOAT
=7, 
	gUNSIGNED_INT
=8, 
	gUINT64
=9, 
	gSHORT
=10, 
	gUCHAR
=11 };

4565 
P¨am
();

4566 
P¨am
(
_ty≥
, 
boﬁ
 
_ªad⁄ly
, 
_off£t
,

4567 
Alg‹ôhm
::
Gëãr
 
_gëãr
=0,

4568 
Alg‹ôhm
::
Sëãr
 
_£âî
=0,

4569 c⁄° 
°rög
& 
_hñp
=string());

4570 
	gty≥
;

4571 
	goff£t
;

4572 
boﬁ
 
	gªad⁄ly
;

4573 
	gAlg‹ôhm
::
Gëãr
 
gëãr
;

4574 
	gAlg‹ôhm
::
Sëãr
 
£âî
;

4575 
°rög
 
	ghñp
;

4578 
	gãm∂©e
<> 
	gP¨amTy≥
<
	gboﬁ
>

4580 
boﬁ
 
	tc⁄°_∑øm_ty≥
;

4581 
boﬁ
 
	tmembî_ty≥
;

4583 íum { 
	gty≥
 = 
P¨am
::
BOOLEAN
 };

4586 
	gãm∂©e
<> 
	gP¨amTy≥
<>

4588 
	tc⁄°_∑øm_ty≥
;

4589 
	tmembî_ty≥
;

4591 íum { 
	gty≥
 = 
P¨am
::
INT
 };

4594 
	gãm∂©e
<> 
	gP¨amTy≥
<>

4596 
	tc⁄°_∑øm_ty≥
;

4597 
	tmembî_ty≥
;

4599 íum { 
	gty≥
 = 
P¨am
::
SHORT
 };

4602 
	gãm∂©e
<> 
	gP¨amTy≥
<>

4604 
	tc⁄°_∑øm_ty≥
;

4605 
	tmembî_ty≥
;

4607 íum { 
	gty≥
 = 
P¨am
::
REAL
 };

4610 
	gãm∂©e
<> 
	gP¨amTy≥
<
	g°rög
>

4612 c⁄° 
	t°rög
& 
	tc⁄°_∑øm_ty≥
;

4613 
°rög
 
	tmembî_ty≥
;

4615 íum { 
	gty≥
 = 
P¨am
::
STRING
 };

4618 
	gãm∂©e
<> 
	gP¨amTy≥
<
	gM©
>

4620 c⁄° 
	tM©
& 
	tc⁄°_∑øm_ty≥
;

4621 
M©
 
	tmembî_ty≥
;

4623 íum { 
	gty≥
 = 
P¨am
::
MAT
 };

4626 
	gãm∂©e
<> 
	gP¨amTy≥
<
	gve˘‹
<
	gM©
> >

4628 c⁄° 
	tve˘‹
<
	tM©
>& 
	tc⁄°_∑øm_ty≥
;

4629 
	gve˘‹
<
	tM©
> 
	tmembî_ty≥
;

4631 íum { 
	gty≥
 = 
P¨am
::
MAT_VECTOR
 };

4634 
	gãm∂©e
<> 
	gP¨amTy≥
<
	gAlg‹ôhm
>

4636 c⁄° 
	tPå
<
	tAlg‹ôhm
>& 
	tc⁄°_∑øm_ty≥
;

4637 
	gPå
<
	tAlg‹ôhm
> 
	tmembî_ty≥
;

4639 íum { 
	gty≥
 = 
P¨am
::
ALGORITHM
 };

4642 
	gãm∂©e
<> 
	gP¨amTy≥
<>

4644 
	tc⁄°_∑øm_ty≥
;

4645 
	tmembî_ty≥
;

4647 íum { 
	gty≥
 = 
P¨am
::
FLOAT
 };

4650 
	gãm∂©e
<> 
	gP¨amTy≥
<>

4652 
	tc⁄°_∑øm_ty≥
;

4653 
	tmembî_ty≥
;

4655 íum { 
	gty≥
 = 
P¨am
::
UNSIGNED_INT
 };

4658 
	gãm∂©e
<> 
	gP¨amTy≥
<
	guöt64
>

4660 
uöt64
 
	tc⁄°_∑øm_ty≥
;

4661 
uöt64
 
	tmembî_ty≥
;

4663 íum { 
	gty≥
 = 
P¨am
::
UINT64
 };

4666 
	gãm∂©e
<> 
	gP¨amTy≥
<
	guch¨
>

4668 
uch¨
 
	tc⁄°_∑øm_ty≥
;

4669 
uch¨
 
	tmembî_ty≥
;

4671 íum { 
	gty≥
 = 
P¨am
::
UCHAR
 };

4715 ˛as†
	cCV_EXPORTS
 
	gComm™dLöeP¨£r


4717 
	gpublic
:

4720 
Comm™dLöeP¨£r
(
¨gc
, c⁄° * c⁄° 
¨gv
[], c⁄° * 
key_m≠
);

4723 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>

4724 
_Tp
 
gë
(c⁄° 
°d
::
°rög
& 
«me
, 
boﬁ
 
•a˚_dñëe
=
åue
)

4726 i‡(!
has
(
«me
))

4728  
_Tp
();

4730 
	g°d
::
°rög
 
°r
 = 
gëSåög
(
«me
);

4731  
	g™ÆyzeVÆue
<
	g_Tp
>(
	g°r
, 
	g•a˚_dñëe
);

4735 
¥ötP¨ams
();

4737 
	g¥Ÿe˘ed
:

4738 
°d
::
m≠
<°d::
°rög
, 
	g°d
::
ve˘‹
<°d::°rög> > 
d©a
;

4739 
	g°d
::
°rög
 
gëSåög
(c⁄° 
°d
::°rög& 
«me
);

4741 
boﬁ
 
has
(c⁄° 
°d
::
°rög
& 
keys
);

4743 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>

4744 
_Tp
 
™ÆyzeVÆue
(c⁄° 
°d
::
°rög
& 
°r
, 
boﬁ
 
•a˚_dñëe
=
Ál£
);

4746 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>

4747 
_Tp
 
gëD©a
(c⁄° 
°d
::
°rög
& 
°r
)

4749 
_Tp
 
ªs
 = _Tp();

4750 
	g°d
::
°rög°ªam
 
s1
(
°r
);

4751 
	gs1
 >> 
	gªs
;

4752  
	gªs
;

4755 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>

4756 
_Tp
 
‰omSåögNumbî
(c⁄° 
°d
::
°rög
& 
°r
);

4760 
	gãm∂©e
<> 
CV_EXPORTS


4761 
boﬁ
 
	gComm™dLöeP¨£r
::
gë
<boﬁ>(c⁄° 
°d
::
°rög
& 
«me
, boﬁ 
	g•a˚_dñëe
);

4763 
	gãm∂©e
<> 
CV_EXPORTS


4764 
	g°d
::
°rög
 
Comm™dLöeP¨£r
::
™ÆyzeVÆue
<
°d
::°rög>(c⁄° std::°rög& 
°r
, 
boﬁ
 
	g•a˚_dñëe
);

4766 
	gãm∂©e
<> 
CV_EXPORTS


4767 
	gComm™dLöeP¨£r
::
™ÆyzeVÆue
<>(c⁄° 
°d
::
°rög
& 
°r
, 
boﬁ
 
	g•a˚_dñëe
);

4769 
	gãm∂©e
<> 
CV_EXPORTS


4770 
	gComm™dLöeP¨£r
::
™ÆyzeVÆue
<>(c⁄° 
°d
::
°rög
& 
°r
, 
boﬁ
 
	g•a˚_dñëe
);

4772 
	gãm∂©e
<> 
CV_EXPORTS


4773 
uöt64
 
	gComm™dLöeP¨£r
::
™ÆyzeVÆue
<uöt64>(c⁄° 
°d
::
°rög
& 
°r
, 
boﬁ
 
	g•a˚_dñëe
);

4775 
	gãm∂©e
<> 
CV_EXPORTS


4776 
	gComm™dLöeP¨£r
::
™ÆyzeVÆue
<>(c⁄° 
°d
::
°rög
& 
°r
, 
boﬁ
 
	g•a˚_dñëe
);

4778 
	gãm∂©e
<> 
CV_EXPORTS


4779 
	gComm™dLöeP¨£r
::
™ÆyzeVÆue
<>(c⁄° 
°d
::
°rög
& 
°r
, 
boﬁ
 
	g•a˚_dñëe
);

4785 ˛as†
	cCV_EXPORTS
 
	gP¨ÆÀlLo›Body


4787 
	gpublic
:

4788 
vútuÆ
 ~
P¨ÆÀlLo›Body
();

4789 
vútuÆ
 
›î©‹
(Ë(c⁄° 
	gR™ge
& 
	gønge
) const = 0;

4792 
CV_EXPORTS
 
∑øŒñ_f‹_
(c⁄° 
R™ge
& 
ønge
, c⁄° 
P¨ÆÀlLo›Body
& 
body
, 
n°rùes
=-1.);

4796 ˛as†
	cCV_EXPORTS
 
	gMuãx


4798 
	gpublic
:

4799 
Muãx
();

4800 ~
Muãx
();

4801 
Muãx
(c⁄° Muãx& 
m
);

4802 
	gMuãx
& 
	g›î©‹
 = (c⁄° 
Muãx
& 
m
);

4804 
lock
();

4805 
boﬁ
 
åylock
();

4806 
u∆ock
();

4808 
	gIm∂
;

4809 
	g¥Ÿe˘ed
:

4810 
Im∂
* 
im∂
;

4813 ˛as†
	cCV_EXPORTS
 
	gAutoLock


4815 
	gpublic
:

4816 
AutoLock
(
Muãx
& 
m
Ë: 
muãx
(&mË{ muãx->
lock
(); }

4817 ~
AutoLock
(Ë{ 
	gmuãx
->
u∆ock
(); }

4818 
	g¥Ÿe˘ed
:

4819 
Muãx
* 
muãx
;

4820 
	g¥iv©e
:

4821 
AutoLock
(const AutoLock&);

4822 
	gAutoLock
& 
	g›î©‹
 = (c⁄° 
AutoLock
&);

4825 ˛as†
	cTLSD©aC⁄èöî


4827 
	g¥iv©e
:

4828 
key_
;

4829 
	g¥Ÿe˘ed
:

4830 
CV_EXPORTS
 
TLSD©aC⁄èöî
();

4831 
	gCV_EXPORTS
 ~
TLSD©aC⁄èöî
();

4832 
	gpublic
:

4833 
vútuÆ
 * 
¸óãD©aIn°™˚
() const = 0;

4834 
vútuÆ
 
dñëeD©aIn°™˚
(* 
d©a
) const = 0;

4836 
CV_EXPORTS
 * 
gëD©a
() const;

4839 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4840 ˛as†
	cTLSD©a
 : 
¥Ÿe˘ed
 
TLSD©aC⁄èöî


4842 
public
:

4843 
ölöe
 
TLSD©a
() {}

4844 
ölöe
 ~
TLSD©a
() {}

4845 
ölöe
 
T
* 
gë
(Ëc⁄° {  (T*)
gëD©a
(); }

4846 
	g¥iv©e
:

4847 
vútuÆ
 * 
¸óãD©aIn°™˚
(Ëc⁄° {  
√w
 
T
; }

4848 
vútuÆ
 
dñëeD©aIn°™˚
(* 
d©a
Ëc⁄° { 
dñëe
 (
T
*)
	gd©a
; }

4855 
	~"›ícv2/c‹e/›î©i⁄s.hµ
"

4856 
	~"›ícv2/c‹e/m©.hµ
"

	@/usr/include/opencv2/highgui/highgui.hpp

43 #i‚de‡
__OPENCV_HIGHGUI_HPP__


44 
	#__OPENCV_HIGHGUI_HPP__


	)

46 
	~"›ícv2/c‹e/c‹e.hµ
"

47 
	~"›ícv2/highgui/highgui_c.h
"

49 #ifde‡
__˝lu•lus


51 
	gCvC≠tuª
;

52 
	gCvVideoWrôî
;

54 
«me•a˚
 
	gcv


59 
	gWINDOW_NORMAL
 = 
CV_WINDOW_NORMAL
,

60 
	gWINDOW_AUTOSIZE
 = 
CV_WINDOW_AUTOSIZE
,

61 
	gWINDOW_OPENGL
 = 
CV_WINDOW_OPENGL
,

64 
	gWND_PROP_FULLSCREEN
 = 
CV_WND_PROP_FULLSCREEN
,

65 
	gWND_PROP_AUTOSIZE
 = 
CV_WND_PROP_AUTOSIZE
,

66 
	gWND_PROP_ASPECT_RATIO
 = 
CV_WND_PROP_ASPECTRATIO
,

67 
	gWND_PROP_OPENGL
 = 
CV_WND_PROP_OPENGL


70 
CV_EXPORTS_W
 
«medWödow
(c⁄° 
°rög
& 
wö«me
, 
Êags
 = 
WINDOW_AUTOSIZE
);

71 
CV_EXPORTS_W
 
de°royWödow
(c⁄° 
°rög
& 
wö«me
);

72 
CV_EXPORTS_W
 
de°royAŒWödows
();

74 
CV_EXPORTS_W
 
°¨tWödowThªad
();

76 
CV_EXPORTS_W
 
waôKey
(
dñay
 = 0);

78 
CV_EXPORTS_W
 
imshow
(c⁄° 
°rög
& 
wö«me
, 
I≈utAºay
 
m©
);

80 
CV_EXPORTS_W
 
ªsizeWödow
(c⁄° 
°rög
& 
wö«me
, 
width
, 
height
);

81 
CV_EXPORTS_W
 
moveWödow
(c⁄° 
°rög
& 
wö«me
, 
x
, 
y
);

83 
CV_EXPORTS_W
 
£tWödowPr›îty
(c⁄° 
°rög
& 
wö«me
, 
¥›_id
, 
¥›_vÆue
);

84 
CV_EXPORTS_W
 
gëWödowPr›îty
(c⁄° 
°rög
& 
wö«me
, 
¥›_id
);

88 
	gEVENT_MOUSEMOVE
 =0,

89 
	gEVENT_LBUTTONDOWN
 =1,

90 
	gEVENT_RBUTTONDOWN
 =2,

91 
	gEVENT_MBUTTONDOWN
 =3,

92 
	gEVENT_LBUTTONUP
 =4,

93 
	gEVENT_RBUTTONUP
 =5,

94 
	gEVENT_MBUTTONUP
 =6,

95 
	gEVENT_LBUTTONDBLCLK
 =7,

96 
	gEVENT_RBUTTONDBLCLK
 =8,

97 
	gEVENT_MBUTTONDBLCLK
 =9

102 
	gEVENT_FLAG_LBUTTON
 =1,

103 
	gEVENT_FLAG_RBUTTON
 =2,

104 
	gEVENT_FLAG_MBUTTON
 =4,

105 
	gEVENT_FLAG_CTRLKEY
 =8,

106 
	gEVENT_FLAG_SHIFTKEY
 =16,

107 
	gEVENT_FLAG_ALTKEY
 =32

110 (*
	gMou£CÆlback
)(
	tevít
, 
	tx
, 
	ty
, 
	tÊags
, * 
	tu£rd©a
);

113 
CV_EXPORTS
 
£tMou£CÆlback
(c⁄° 
°rög
& 
wö«me
, 
Mou£CÆlback
 
⁄Mou£
, * 
u£rd©a
 = 0);

116 (
CV_CDECL
 *
	tTøckb¨CÆlback
)(
	tpos
, * 
	tu£rd©a
);

118 
CV_EXPORTS
 
¸óãTøckb¨
(c⁄° 
°rög
& 
åackb¨«me
, c⁄° såög& 
wö«me
,

119 * 
vÆue
, 
cou¡
,

120 
Tøckb¨CÆlback
 
⁄Ch™ge
 = 0,

121 * 
u£rd©a
 = 0);

123 
CV_EXPORTS_W
 
gëTøckb¨Pos
(c⁄° 
°rög
& 
åackb¨«me
, c⁄° såög& 
wö«me
);

124 
CV_EXPORTS_W
 
£tTøckb¨Pos
(c⁄° 
°rög
& 
åackb¨«me
, c⁄° såög& 
wö«me
, 
pos
);

128 (*
	gO≥nGlDøwCÆlback
)(* 
	tu£rd©a
);

129 
CV_EXPORTS
 
£tO≥nGlDøwCÆlback
(c⁄° 
°rög
& 
wö«me
, 
O≥nGlDøwCÆlback
 
⁄O≥nGlDøw
, * 
u£rd©a
 = 0);

131 
CV_EXPORTS
 
£tO≥nGlC⁄ãxt
(c⁄° 
°rög
& 
wö«me
);

133 
CV_EXPORTS
 
upd©eWödow
(c⁄° 
°rög
& 
wö«me
);

136 
CV_EXPORTS
 
poötCloudShow
(c⁄° 
°rög
& 
wö«me
, c⁄° 
GlCamîa
& 
ˇmîa
, c⁄° 
GlAºays
& 
¨r
);

137 
CV_EXPORTS
 
poötCloudShow
(c⁄° 
°rög
& 
wö«me
, c⁄° 
GlCamîa
& 
ˇmîa
, 
I≈utAºay
 
poöts
, I≈utAºay 
cﬁ‹s
 = 
noAºay
());

142 
CV_EXPORTS
 
CvF⁄t
 
f⁄tQt
(c⁄° 
°rög
& 
«meF⁄t
, 
poötSize
=-1,

143 
Sˇœr
 
cﬁ‹
=Sˇœr::
Æl
(0), 
weight
=
CV_FONT_NORMAL
,

144 
°yÀ
=
CV_STYLE_NORMAL
, 
•acög
=0);

145 
CV_EXPORTS
 
addText
–c⁄° 
M©
& 
img
, c⁄° 
°rög
& 
ãxt
, 
Poöt
 
‹g
, 
CvF⁄t
 
f⁄t
);

147 
CV_EXPORTS
 
di•œyOvîœy
(c⁄° 
°rög
& 
wö«me
, c⁄° såög& 
ãxt
, 
dñayms
 
CV_DEFAULT
(0));

148 
CV_EXPORTS
 
di•œySètusB¨
(c⁄° 
°rög
& 
wö«me
, c⁄° såög& 
ãxt
, 
dñayms
 
CV_DEFAULT
(0));

150 
CV_EXPORTS
 
ßveWödowP¨amëîs
(c⁄° 
°rög
& 
wödowName
);

151 
CV_EXPORTS
 
lﬂdWödowP¨amëîs
(c⁄° 
°rög
& 
wödowName
);

152 
CV_EXPORTS
 
°¨tLo›
((*
±2Func
)(
¨gc
, *
¨gv
[]), argc, *árgv[]);

153 
CV_EXPORTS
 
°›Lo›
();

155 (
CV_CDECL
 *
	tBuâ⁄CÆlback
)(
	t°©e
, * 
	tu£rd©a
);

156 
CV_EXPORTS
 
¸óãBuâ⁄
–c⁄° 
°rög
& 
b¨_«me
, 
Buâ⁄CÆlback
 
⁄_ch™ge
,

157 * 
u£rd©a
=
NULL
, 
ty≥
=
CV_PUSH_BUTTON
,

158 
boﬁ
 
öôül_buâ⁄_°©e
=0);

165 
	gIMREAD_UNCHANGED
 =-1,

167 
	gIMREAD_GRAYSCALE
 =0,

169 
	gIMREAD_COLOR
 =1,

171 
	gIMREAD_ANYDEPTH
 =2,

173 
	gIMREAD_ANYCOLOR
 =4

178 
	gIMWRITE_JPEG_QUALITY
 =1,

179 
	gIMWRITE_PNG_COMPRESSION
 =16,

180 
	gIMWRITE_PNG_STRATEGY
 =17,

181 
	gIMWRITE_PNG_BILEVEL
 =18,

182 
	gIMWRITE_PNG_STRATEGY_DEFAULT
 =0,

183 
	gIMWRITE_PNG_STRATEGY_FILTERED
 =1,

184 
	gIMWRITE_PNG_STRATEGY_HUFFMAN_ONLY
 =2,

185 
	gIMWRITE_PNG_STRATEGY_RLE
 =3,

186 
	gIMWRITE_PNG_STRATEGY_FIXED
 =4,

187 
	gIMWRITE_PXM_BINARY
 =32

190 
CV_EXPORTS_W
 
M©
 
imªad
–c⁄° 
°rög
& 
fûíame
, 
Êags
=1 );

191 
CV_EXPORTS_W
 
boﬁ
 
imwrôe
–c⁄° 
°rög
& 
fûíame
, 
I≈utAºay
 
img
,

192 c⁄° 
ve˘‹
<>& 
∑øms
=vector<>());

193 
CV_EXPORTS_W
 
M©
 
imdecode
–
I≈utAºay
 
buf
, 
Êags
 );

194 
CV_EXPORTS
 
M©
 
imdecode
–
I≈utAºay
 
buf
, 
Êags
, M©* 
d°
 );

195 
CV_EXPORTS_W
 
boﬁ
 
imícode
–c⁄° 
°rög
& 
ext
, 
I≈utAºay
 
img
,

196 
CV_OUT
 
ve˘‹
<
uch¨
>& 
buf
,

197 c⁄° 
ve˘‹
<>& 
∑øms
=vector<>());

199 #i‚de‡
CV_NO_VIDEO_CAPTURE_CPP_API


201 
	gãm∂©e
<> 
CV_EXPORTS
 
	gPå
<
	gCvC≠tuª
>::
dñëe_obj
();

202 
	gãm∂©e
<> 
CV_EXPORTS
 
	gPå
<
	gCvVideoWrôî
>::
dñëe_obj
();

204 ˛as†
	cCV_EXPORTS_W
 
	gVideoC≠tuª


206 
	gpublic
:

207 
CV_WRAP
 
VideoC≠tuª
();

208 
CV_WRAP
 
VideoC≠tuª
(c⁄° 
°rög
& 
fûíame
);

209 
CV_WRAP
 
VideoC≠tuª
(
devi˚
);

211 
	gvútuÆ
 ~
VideoC≠tuª
();

212 
CV_WRAP
 
vútuÆ
 
boﬁ
 
›í
(c⁄° 
°rög
& 
fûíame
);

213 
CV_WRAP
 
vútuÆ
 
boﬁ
 
›í
(
devi˚
);

214 
CV_WRAP
 
vútuÆ
 
boﬁ
 
isO≥√d
() const;

215 
CV_WRAP
 
vútuÆ
 
ªÀa£
();

217 
CV_WRAP
 
vútuÆ
 
boﬁ
 
gøb
();

218 
CV_WRAP
 
vútuÆ
 
boﬁ
 
ªåõve
(
CV_OUT
 
M©
& 
image
, 
ch™√l
=0);

219 
vútuÆ
 
	gVideoC≠tuª
& 
	g›î©‹
 >> (
CV_OUT
 
	gM©
& 
	gimage
);

220 
CV_WRAP
 
vútuÆ
 
boﬁ
 
ªad
(
CV_OUT
 
M©
& 
image
);

222 
CV_WRAP
 
vútuÆ
 
boﬁ
 
£t
(
¥›Id
, 
vÆue
);

223 
CV_WRAP
 
vútuÆ
 
gë
(
¥›Id
);

225 
	g¥Ÿe˘ed
:

226 
På
<
CvC≠tuª
> 
ˇp
;

230 ˛as†
	cCV_EXPORTS_W
 
	gVideoWrôî


232 
	gpublic
:

233 
CV_WRAP
 
VideoWrôî
();

234 
CV_WRAP
 
VideoWrôî
(c⁄° 
°rög
& 
fûíame
, 
fourcc
, 
Âs
,

235 
Size
 
‰ameSize
, 
boﬁ
 
isCﬁ‹
=
åue
);

237 
	gvútuÆ
 ~
VideoWrôî
();

238 
CV_WRAP
 
vútuÆ
 
boﬁ
 
›í
(c⁄° 
°rög
& 
fûíame
, 
fourcc
, 
Âs
,

239 
Size
 
‰ameSize
, 
boﬁ
 
isCﬁ‹
=
åue
);

240 
CV_WRAP
 
vútuÆ
 
boﬁ
 
isO≥√d
() const;

241 
CV_WRAP
 
vútuÆ
 
ªÀa£
();

242 
vútuÆ
 
	gVideoWrôî
& 
	g›î©‹
 << (c⁄° 
	gM©
& 
	gimage
);

243 
CV_WRAP
 
vútuÆ
 
wrôe
(c⁄° 
M©
& 
image
);

245 
	g¥Ÿe˘ed
:

246 
På
<
CvVideoWrôî
> 
wrôî
;

	@/usr/include/opencv2/imgproc/imgproc.hpp

47 #i‚de‡
__OPENCV_IMGPROC_HPP__


48 
	#__OPENCV_IMGPROC_HPP__


	)

50 
	~"›ícv2/c‹e/c‹e.hµ
"

51 
	~"›ícv2/img¥oc/ty≥s_c.h
"

53 #ifde‡
__˝lu•lus


58 
«me•a˚
 
	gcv


62 íum { 
	gBORDER_REPLICATE
=
IPL_BORDER_REPLICATE
, 
	gBORDER_CONSTANT
=
IPL_BORDER_CONSTANT
,

63 
	gBORDER_REFLECT
=
IPL_BORDER_REFLECT
, 
	gBORDER_WRAP
=
IPL_BORDER_WRAP
,

64 
	gBORDER_REFLECT_101
=
IPL_BORDER_REFLECT_101
, 
	gBORDER_REFLECT101
=
BORDER_REFLECT_101
,

65 
	gBORDER_TRANSPARENT
=
IPL_BORDER_TRANSPARENT
,

66 
	gBORDER_DEFAULT
=
BORDER_REFLECT_101
, 
	gBORDER_ISOLATED
=16 };

69 
CV_EXPORTS_W
 
b‹dîI¡îpﬁ©e
–
p
, 
Àn
, 
b‹dîTy≥
 );

80 ˛as†
	cCV_EXPORTS
 
	gBa£RowFûãr


82 
	gpublic
:

84 
Ba£RowFûãr
();

86 
	gvútuÆ
 ~
Ba£RowFûãr
();

88 
vútuÆ
 
›î©‹
()(c⁄° 
uch¨
* 
	g§c
, uch¨* 
	gd°
,

89 
	gwidth
, 
	g˙
) = 0;

90 
	gksize
, 
	g™ch‹
;

107 ˛as†
	cCV_EXPORTS
 
	gBa£CﬁumnFûãr


109 
	gpublic
:

111 
Ba£CﬁumnFûãr
();

113 
	gvútuÆ
 ~
Ba£CﬁumnFûãr
();

115 
vútuÆ
 
›î©‹
()(c⁄° 
uch¨
** 
	g§c
, uch¨* 
	gd°
, 
	gd°°ï
,

116 
	gd°cou¡
, 
	gwidth
) = 0;

118 
vútuÆ
 
ª£t
();

119 
	gksize
, 
	g™ch‹
;

133 ˛as†
	cCV_EXPORTS
 
	gBa£Fûãr


135 
	gpublic
:

137 
Ba£Fûãr
();

139 
	gvútuÆ
 ~
Ba£Fûãr
();

141 
vútuÆ
 
›î©‹
()(c⁄° 
uch¨
** 
	g§c
, uch¨* 
	gd°
, 
	gd°°ï
,

142 
	gd°cou¡
, 
	gwidth
, 
	g˙
) = 0;

144 
vútuÆ
 
ª£t
();

145 
Size
 
	gksize
;

146 
Poöt
 
	g™ch‹
;

222 ˛as†
	cCV_EXPORTS
 
	gFûãrEngöe


224 
	gpublic
:

226 
FûãrEngöe
();

228 
FûãrEngöe
(c⁄° 
På
<
Ba£Fûãr
>& 
_fûãr2D
,

229 c⁄° 
På
<
Ba£RowFûãr
>& 
_rowFûãr
,

230 c⁄° 
På
<
Ba£CﬁumnFûãr
>& 
_cﬁumnFûãr
,

231 
§cTy≥
, 
d°Ty≥
, 
bufTy≥
,

232 
_rowB‹dîTy≥
=
BORDER_REPLICATE
,

233 
_cﬁumnB‹dîTy≥
=-1,

234 c⁄° 
Sˇœr
& 
_b‹dîVÆue
=Scalar());

236 
	gvútuÆ
 ~
FûãrEngöe
();

238 
öô
(c⁄° 
På
<
Ba£Fûãr
>& 
_fûãr2D
,

239 c⁄° 
På
<
Ba£RowFûãr
>& 
_rowFûãr
,

240 c⁄° 
På
<
Ba£CﬁumnFûãr
>& 
_cﬁumnFûãr
,

241 
§cTy≥
, 
d°Ty≥
, 
bufTy≥
,

242 
_rowB‹dîTy≥
=
BORDER_REPLICATE
, 
_cﬁumnB‹dîTy≥
=-1,

243 c⁄° 
Sˇœr
& 
_b‹dîVÆue
=Scalar());

245 
vútuÆ
 
°¨t
(
Size
 
whﬁeSize
, 
Re˘
 
roi
, 
maxBufRows
=-1);

247 
vútuÆ
 
°¨t
(c⁄° 
M©
& 
§c
, c⁄° 
Re˘
& 
§cRoi
=Rect(0,0,-1,-1),

248 
boﬁ
 
isﬁ©ed
=
Ál£
, 
maxBufRows
=-1);

250 
vútuÆ
 
¥o˚ed
(c⁄° 
uch¨
* 
§c
, 
§cSãp
, 
§cCou¡
,

251 
uch¨
* 
d°
, 
d°Sãp
);

253 
vútuÆ
 
≠∂y
–c⁄° 
M©
& 
§c
, M©& 
d°
,

254 c⁄° 
Re˘
& 
§cRoi
=Rect(0,0,-1,-1),

255 
Poöt
 
d°Ofs
=Point(0,0),

256 
boﬁ
 
isﬁ©ed
=
Ál£
);

258 
boﬁ
 
isSï¨abÀ
(Ëc⁄° {  (c⁄° 
	gBa£Fûãr
*)
	gfûãr2D
 == 0; }

260 
ªmaöögI≈utRows
() const;

261 
ªmaöögOuçutRows
() const;

263 
	g§cTy≥
, 
	gd°Ty≥
, 
	gbufTy≥
;

264 
Size
 
	gksize
;

265 
Poöt
 
	g™ch‹
;

266 
	gmaxWidth
;

267 
Size
 
	gwhﬁeSize
;

268 
Re˘
 
	groi
;

269 
	gdx1
, 
	gdx2
;

270 
	growB‹dîTy≥
, 
	gcﬁumnB‹dîTy≥
;

271 
	gve˘‹
<> 
	gb‹dîTab
;

272 
	gb‹dîEÀmSize
;

273 
	gve˘‹
<
	guch¨
> 
	grögBuf
;

274 
	gve˘‹
<
	guch¨
> 
	g§cRow
;

275 
	gve˘‹
<
	guch¨
> 
	gc⁄°B‹dîVÆue
;

276 
	gve˘‹
<
	guch¨
> 
	gc⁄°B‹dîRow
;

277 
	gbufSãp
, 
	g°¨tY
, 
	g°¨tY0
, 
	gídY
, 
	growCou¡
, 
	gd°Y
;

278 
	gve˘‹
<
	guch¨
*> 
	grows
;

280 
	gPå
<
	gBa£Fûãr
> 
	gfûãr2D
;

281 
	gPå
<
	gBa£RowFûãr
> 
	growFûãr
;

282 
	gPå
<
	gBa£CﬁumnFûãr
> 
	gcﬁumnFûãr
;

286 íum { 
	gKERNEL_GENERAL
=0, 
	gKERNEL_SYMMETRICAL
=1, 
	gKERNEL_ASYMMETRICAL
=2,

287 
	gKERNEL_SMOOTH
=4, 
	gKERNEL_INTEGER
=8 };

290 
CV_EXPORTS
 
gëKî√lTy≥
(
I≈utAºay
 
kî√l
, 
Poöt
 
™ch‹
);

293 
CV_EXPORTS
 
	gPå
<
	gBa£RowFûãr
> 
gëLöórRowFûãr
(
§cTy≥
, 
bufTy≥
,

294 
I≈utAºay
 
kî√l
, 
™ch‹
,

295 
symmëryTy≥
);

298 
CV_EXPORTS
 
	gPå
<
	gBa£CﬁumnFûãr
> 
gëLöórCﬁumnFûãr
(
bufTy≥
, 
d°Ty≥
,

299 
I≈utAºay
 
kî√l
, 
™ch‹
,

300 
symmëryTy≥
, 
dñè
=0,

301 
bôs
=0);

304 
CV_EXPORTS
 
	gPå
<
	gBa£Fûãr
> 
gëLöórFûãr
(
§cTy≥
, 
d°Ty≥
,

305 
I≈utAºay
 
kî√l
,

306 
Poöt
 
™ch‹
=Point(-1,-1),

307 
dñè
=0, 
bôs
=0);

310 
CV_EXPORTS
 
	gPå
<
	gFûãrEngöe
> 
¸óãSï¨abÀLöórFûãr
(
§cTy≥
, 
d°Ty≥
,

311 
I≈utAºay
 
rowKî√l
, I≈utAºay 
cﬁumnKî√l
,

312 
Poöt
 
™ch‹
=Poöt(-1,-1), 
dñè
=0,

313 
rowB‹dîTy≥
=
BORDER_DEFAULT
,

314 
cﬁumnB‹dîTy≥
=-1,

315 c⁄° 
Sˇœr
& 
b‹dîVÆue
=Scalar());

318 
CV_EXPORTS
 
	gPå
<
	gFûãrEngöe
> 
¸óãLöórFûãr
(
§cTy≥
, 
d°Ty≥
,

319 
I≈utAºay
 
kî√l
, 
Poöt
 
_™ch‹
=Point(-1,-1),

320 
dñè
=0, 
rowB‹dîTy≥
=
BORDER_DEFAULT
,

321 
cﬁumnB‹dîTy≥
=-1, c⁄° 
Sˇœr
& 
b‹dîVÆue
=Scalar());

324 
CV_EXPORTS_W
 
M©
 
gëGaussünKî√l
–
ksize
, 
sigma
, 
kty≥
=
CV_64F
 );

327 
CV_EXPORTS
 
	gPå
<
	gFûãrEngöe
> 
¸óãGaussünFûãr
–
ty≥
, 
Size
 
ksize
,

328 
sigma1
, 
sigma2
=0,

329 
b‹dîTy≥
=
BORDER_DEFAULT
);

331 
CV_EXPORTS_W
 
gëDîivKî√ls
–
OuçutAºay
 
kx
, OuçutAºay 
ky
,

332 
dx
, 
dy
, 
ksize
,

333 
boﬁ
 
n‹mÆize
=
Ál£
, 
kty≥
=
CV_32F
 );

335 
CV_EXPORTS
 
	gPå
<
	gFûãrEngöe
> 
¸óãDîivFûãr
–
§cTy≥
, 
d°Ty≥
,

336 
dx
, 
dy
, 
ksize
,

337 
b‹dîTy≥
=
BORDER_DEFAULT
 );

339 
CV_EXPORTS
 
	gPå
<
	gBa£RowFûãr
> 
gëRowSumFûãr
(
§cTy≥
, 
sumTy≥
,

340 
ksize
, 
™ch‹
=-1);

342 
CV_EXPORTS
 
	gPå
<
	gBa£CﬁumnFûãr
> 
gëCﬁumnSumFûãr
–
sumTy≥
, 
d°Ty≥
,

343 
ksize
, 
™ch‹
=-1,

344 
sˇÀ
=1);

346 
CV_EXPORTS
 
	gPå
<
	gFûãrEngöe
> 
¸óãBoxFûãr
–
§cTy≥
, 
d°Ty≥
, 
Size
 
ksize
,

347 
Poöt
 
™ch‹
=Point(-1,-1),

348 
boﬁ
 
n‹mÆize
=
åue
,

349 
b‹dîTy≥
=
BORDER_DEFAULT
);

352 
CV_EXPORTS_W
 
M©
 
gëGab‹Kî√l
–
Size
 
ksize
, 
sigma
, 
thëa
, 
œmbd
,

353 
gamma
, 
psi
=
CV_PI
*0.5, 
kty≥
=
CV_64F
 );

356 íum { 
	gMORPH_ERODE
=
CV_MOP_ERODE
, 
	gMORPH_DILATE
=
CV_MOP_DILATE
,

357 
	gMORPH_OPEN
=
CV_MOP_OPEN
, 
	gMORPH_CLOSE
=
CV_MOP_CLOSE
,

358 
	gMORPH_GRADIENT
=
CV_MOP_GRADIENT
, 
	gMORPH_TOPHAT
=
CV_MOP_TOPHAT
,

359 
	gMORPH_BLACKHAT
=
CV_MOP_BLACKHAT
 };

362 
CV_EXPORTS
 
	gPå
<
	gBa£RowFûãr
> 
gëM‹phﬁogyRowFûãr
(
›
, 
ty≥
, 
ksize
, 
™ch‹
=-1);

364 
CV_EXPORTS
 
	gPå
<
	gBa£CﬁumnFûãr
> 
gëM‹phﬁogyCﬁumnFûãr
(
›
, 
ty≥
, 
ksize
, 
™ch‹
=-1);

366 
CV_EXPORTS
 
	gPå
<
	gBa£Fûãr
> 
gëM‹phﬁogyFûãr
(
›
, 
ty≥
, 
I≈utAºay
 
kî√l
,

367 
Poöt
 
™ch‹
=Point(-1,-1));

370 
ölöe
 
Sˇœr
 
	$m‹phﬁogyDeÁu…B‹dîVÆue
(Ë{  
Sˇœr
::
	`Æl
(
DBL_MAX
); 
	}
}

373 
CV_EXPORTS
 
	gPå
<
	gFûãrEngöe
> 
¸óãM‹phﬁogyFûãr
(
›
, 
ty≥
, 
I≈utAºay
 
kî√l
,

374 
Poöt
 
™ch‹
=Poöt(-1,-1), 
rowB‹dîTy≥
=
BORDER_CONSTANT
,

375 
cﬁumnB‹dîTy≥
=-1,

376 c⁄° 
Sˇœr
& 
b‹dîVÆue
=
m‹phﬁogyDeÁu…B‹dîVÆue
());

379 íum { 
	gMORPH_RECT
=0, 
	gMORPH_CROSS
=1, 
	gMORPH_ELLIPSE
=2 };

381 
CV_EXPORTS_W
 
M©
 
gëSåu˘urögEÀmít
(
sh≠e
, 
Size
 
ksize
, 
Poöt
 
™ch‹
=Point(-1,-1));

383 
	gãm∂©e
<> 
CV_EXPORTS
 
	gPå
<
	gI∂C⁄vKî√l
>::
dñëe_obj
();

386 
CV_EXPORTS_W
 
c›yMakeB‹dî
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

387 
t›
, 
bŸtom
, 
À·
, 
right
,

388 
b‹dîTy≥
, c⁄° 
Sˇœr
& 
vÆue
=Scalar() );

391 
CV_EXPORTS_W
 
medünBlur
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
ksize
 );

393 
CV_EXPORTS_W
 
GaussünBlur
–
I≈utAºay
 
§c
,

394 
OuçutAºay
 
d°
, 
Size
 
ksize
,

395 
sigmaX
, 
sigmaY
=0,

396 
b‹dîTy≥
=
BORDER_DEFAULT
 );

398 
CV_EXPORTS_W
 
bû©îÆFûãr
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
d
,

399 
sigmaCﬁ‹
, 
sigmaS∑˚
,

400 
b‹dîTy≥
=
BORDER_DEFAULT
 );

402 
CV_EXPORTS_W
 
ad≠tiveBû©îÆFûãr
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
Size
 
ksize
,

403 
sigmaS∑˚
, 
maxSigmaCﬁ‹
 = 20.0, 
Poöt
 
™ch‹
=Point(-1, -1),

404 
b‹dîTy≥
=
BORDER_DEFAULT
 );

406 
CV_EXPORTS_W
 
boxFûãr
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
ddïth
,

407 
Size
 
ksize
, 
Poöt
 
™ch‹
=Point(-1,-1),

408 
boﬁ
 
n‹mÆize
=
åue
,

409 
b‹dîTy≥
=
BORDER_DEFAULT
 );

411 
CV_EXPORTS_W
 
blur
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

412 
Size
 
ksize
, 
Poöt
 
™ch‹
=Point(-1,-1),

413 
b‹dîTy≥
=
BORDER_DEFAULT
 );

416 
CV_EXPORTS_W
 
fûãr2D
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
ddïth
,

417 
I≈utAºay
 
kî√l
, 
Poöt
 
™ch‹
=Point(-1,-1),

418 
dñè
=0, 
b‹dîTy≥
=
BORDER_DEFAULT
 );

421 
CV_EXPORTS_W
 
£pFûãr2D
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
ddïth
,

422 
I≈utAºay
 
kî√lX
, I≈utAºay 
kî√lY
,

423 
Poöt
 
™ch‹
=Point(-1,-1),

424 
dñè
=0, 
b‹dîTy≥
=
BORDER_DEFAULT
 );

427 
CV_EXPORTS_W
 
Sobñ
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
ddïth
,

428 
dx
, 
dy
, 
ksize
=3,

429 
sˇÀ
=1, 
dñè
=0,

430 
b‹dîTy≥
=
BORDER_DEFAULT
 );

433 
CV_EXPORTS_W
 
Sch¨r
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
ddïth
,

434 
dx
, 
dy
, 
sˇÀ
=1, 
dñè
=0,

435 
b‹dîTy≥
=
BORDER_DEFAULT
 );

438 
CV_EXPORTS_W
 
L≠œcün
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
ddïth
,

439 
ksize
=1, 
sˇÀ
=1, 
dñè
=0,

440 
b‹dîTy≥
=
BORDER_DEFAULT
 );

443 
CV_EXPORTS_W
 
C™ny
–
I≈utAºay
 
image
, 
OuçutAºay
 
edges
,

444 
thªshﬁd1
, 
thªshﬁd2
,

445 
≠îtuªSize
=3, 
boﬁ
 
L2gødõ¡
=
Ál£
 );

448 
CV_EXPORTS_W
 
c‹√rMöEigíVÆ
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

449 
blockSize
, 
ksize
=3,

450 
b‹dîTy≥
=
BORDER_DEFAULT
 );

453 
CV_EXPORTS_W
 
c‹√rH¨ris
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
blockSize
,

454 
ksize
, 
k
,

455 
b‹dîTy≥
=
BORDER_DEFAULT
 );

458 
CV_EXPORTS
 
eigí2x2
–c⁄° * 
a
, * 
e
, 
n
 );

461 
CV_EXPORTS_W
 
c‹√rEigíVÆsAndVecs
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

462 
blockSize
, 
ksize
,

463 
b‹dîTy≥
=
BORDER_DEFAULT
 );

466 
CV_EXPORTS_W
 
¥eC‹√rDëe˘
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
ksize
,

467 
b‹dîTy≥
=
BORDER_DEFAULT
 );

470 
CV_EXPORTS_W
 
c‹√rSubPix
–
I≈utAºay
 
image
, 
I≈utOuçutAºay
 
c‹√rs
,

471 
Size
 
wöSize
, Sizê
zîoZ⁄e
,

472 
TîmCrôîü
 
¸ôîü
 );

475 
CV_EXPORTS_W
 
goodFótuªsToTøck
–
I≈utAºay
 
image
, 
OuçutAºay
 
c‹√rs
,

476 
maxC‹√rs
, 
quÆôyLevñ
, 
möDi°™˚
,

477 
I≈utAºay
 
mask
=
noAºay
(), 
blockSize
=3,

478 
boﬁ
 
u£H¨risDëe˘‹
=
Ál£
, 
k
=0.04 );

481 
CV_EXPORTS_W
 
HoughLöes
–
I≈utAºay
 
image
, 
OuçutAºay
 
löes
,

482 
rho
, 
thëa
, 
thªshﬁd
,

483 
§n
=0, 
°n
=0 );

486 
CV_EXPORTS_W
 
HoughLöesP
–
I≈utAºay
 
image
, 
OuçutAºay
 
löes
,

487 
rho
, 
thëa
, 
thªshﬁd
,

488 
möLöeLígth
=0, 
maxLöeG≠
=0 );

491 
CV_EXPORTS_W
 
HoughCú˛es
–
I≈utAºay
 
image
, 
OuçutAºay
 
cú˛es
,

492 
mëhod
, 
dp
, 
möDi°
,

493 
∑øm1
=100, 
∑øm2
=100,

494 
möRadius
=0, 
maxRadius
=0 );

498 
	gGHT_POSITION
 = 0,

499 
	gGHT_SCALE
 = 1,

500 
	gGHT_ROTATION
 = 2

506 ˛as†
	cCV_EXPORTS
 
	gGíîÆizedHough
 : 
public
 
Alg‹ôhm


508 
public
:

509 
På
<
GíîÆizedHough
> 
¸óã
(
mëhod
);

511 
	gvútuÆ
 ~
GíîÆizedHough
();

514 
£tTem∂©e
(
I≈utAºay
 
ãm∂
, 
ˇ¬yThªshﬁd
 = 100, 
Poöt
 
ãm∂Cíãr
 = Point(-1, -1));

515 
£tTem∂©e
(
I≈utAºay
 
edges
, I≈utAºay 
dx
, I≈utAºay 
dy
, 
Poöt
 
ãm∂Cíãr
 = Point(-1, -1));

518 
dëe˘
(
I≈utAºay
 
image
, 
OuçutAºay
 
posôi⁄s
, OuçutAºay 
vŸes
 = 
cv
::
noAºay
(), 
ˇ¬yThªshﬁd
 = 100);

519 
dëe˘
(
I≈utAºay
 
edges
, I≈utAºay 
dx
, I≈utAºay 
dy
, 
OuçutAºay
 
posôi⁄s
, OuçutAºay 
vŸes
 = 
cv
::
noAºay
());

521 
ªÀa£
();

523 
	g¥Ÿe˘ed
:

524 
vútuÆ
 
£tTem∂©eIm∂
(c⁄° 
M©
& 
edges
, c⁄° M©& 
dx
, c⁄° M©& 
dy
, 
Poöt
 
ãm∂Cíãr
) = 0;

525 
vútuÆ
 
dëe˘Im∂
(c⁄° 
M©
& 
edges
, c⁄° M©& 
dx
, c⁄° M©& 
dy
, 
OuçutAºay
 
posôi⁄s
, OuçutAºay 
vŸes
) = 0;

526 
vútuÆ
 
ªÀa£Im∂
() = 0;

528 
	g¥iv©e
:

529 
M©
 
edges_
, 
	gdx_
, 
	gdy_
;

533 
CV_EXPORTS_W
 
îode
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, I≈utAºay 
kî√l
,

534 
Poöt
 
™ch‹
=Poöt(-1,-1), 
ôî©i⁄s
=1,

535 
b‹dîTy≥
=
BORDER_CONSTANT
,

536 c⁄° 
Sˇœr
& 
b‹dîVÆue
=
m‹phﬁogyDeÁu…B‹dîVÆue
() );

539 
CV_EXPORTS_W
 
dû©e
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, I≈utAºay 
kî√l
,

540 
Poöt
 
™ch‹
=Poöt(-1,-1), 
ôî©i⁄s
=1,

541 
b‹dîTy≥
=
BORDER_CONSTANT
,

542 c⁄° 
Sˇœr
& 
b‹dîVÆue
=
m‹phﬁogyDeÁu…B‹dîVÆue
() );

545 
CV_EXPORTS_W
 
m‹phﬁogyEx
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

546 
›
, 
I≈utAºay
 
kî√l
,

547 
Poöt
 
™ch‹
=Poöt(-1,-1), 
ôî©i⁄s
=1,

548 
b‹dîTy≥
=
BORDER_CONSTANT
,

549 c⁄° 
Sˇœr
& 
b‹dîVÆue
=
m‹phﬁogyDeÁu…B‹dîVÆue
() );

554 
	gINTER_NEAREST
=
CV_INTER_NN
,

555 
	gINTER_LINEAR
=
CV_INTER_LINEAR
,

556 
	gINTER_CUBIC
=
CV_INTER_CUBIC
,

557 
	gINTER_AREA
=
CV_INTER_AREA
,

558 
	gINTER_LANCZOS4
=
CV_INTER_LANCZOS4
,

559 
	gINTER_MAX
=7,

560 
	gWARP_INVERSE_MAP
=
CV_WARP_INVERSE_MAP


564 
CV_EXPORTS_W
 
ªsize
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

565 
Size
 
dsize
, 
fx
=0, 
fy
=0,

566 
öãΩﬁ©i⁄
=
INTER_LINEAR
 );

569 
CV_EXPORTS_W
 
w¨pAfföe
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

570 
I≈utAºay
 
M
, 
Size
 
dsize
,

571 
Êags
=
INTER_LINEAR
,

572 
b‹dîMode
=
BORDER_CONSTANT
,

573 c⁄° 
Sˇœr
& 
b‹dîVÆue
=Scalar());

576 
CV_EXPORTS_W
 
w¨pPî•e˘ive
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

577 
I≈utAºay
 
M
, 
Size
 
dsize
,

578 
Êags
=
INTER_LINEAR
,

579 
b‹dîMode
=
BORDER_CONSTANT
,

580 c⁄° 
Sˇœr
& 
b‹dîVÆue
=Scalar());

584 
	gINTER_BITS
=5, 
	gINTER_BITS2
=
INTER_BITS
*2,

585 
	gINTER_TAB_SIZE
=(1<<
INTER_BITS
),

586 
	gINTER_TAB_SIZE2
=
INTER_TAB_SIZE
*INTER_TAB_SIZE

590 
CV_EXPORTS_W
 
ªm≠
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

591 
I≈utAºay
 
m≠1
, I≈utAºay 
m≠2
,

592 
öãΩﬁ©i⁄
, 
b‹dîMode
=
BORDER_CONSTANT
,

593 c⁄° 
Sˇœr
& 
b‹dîVÆue
=Scalar());

596 
CV_EXPORTS_W
 
c⁄vîtM≠s
–
I≈utAºay
 
m≠1
, I≈utAºay 
m≠2
,

597 
OuçutAºay
 
d°m≠1
, OuçutAºay 
d°m≠2
,

598 
d°m≠1ty≥
, 
boﬁ
 
¬öãΩﬁ©i⁄
=
Ál£
 );

601 
CV_EXPORTS_W
 
M©
 
gëRŸ©i⁄M©rix2D
–
Poöt2f
 
˚¡î
, 
™gÀ
, 
sˇÀ
 );

603 
CV_EXPORTS
 
M©
 
gëPî•e˘iveTønsf‹m
–c⁄° 
Poöt2f
 
§c
[], c⁄° Poöt2‡
d°
[] );

605 
CV_EXPORTS
 
M©
 
gëAfföeTønsf‹m
–c⁄° 
Poöt2f
 
§c
[], c⁄° Poöt2‡
d°
[] );

607 
CV_EXPORTS_W
 
övîtAfföeTønsf‹m
–
I≈utAºay
 
M
, 
OuçutAºay
 
iM
 );

609 
CV_EXPORTS_W
 
M©
 
gëPî•e˘iveTønsf‹m
–
I≈utAºay
 
§c
, I≈utAºay 
d°
 );

610 
CV_EXPORTS_W
 
M©
 
gëAfföeTønsf‹m
–
I≈utAºay
 
§c
, I≈utAºay 
d°
 );

613 
CV_EXPORTS_W
 
gëRe˘SubPix
–
I≈utAºay
 
image
, 
Size
 
∑tchSize
,

614 
Poöt2f
 
˚¡î
, 
OuçutAºay
 
∑tch
, 
∑tchTy≥
=-1 );

617 
CV_EXPORTS_W
 
öãgøl
–
I≈utAºay
 
§c
, 
OuçutAºay
 
sum
, 
sdïth
=-1 );

620 
	$CV_EXPORTS_AS
(
öãgøl2
Ë
	`öãgøl
–
I≈utAºay
 
§c
, 
OuçutAºay
 
sum
,

621 
OuçutAºay
 
sqsum
, 
sdïth
=-1 );

623 
	$CV_EXPORTS_AS
(
öãgøl3
Ë
	`öãgøl
–
I≈utAºay
 
§c
, 
OuçutAºay
 
sum
,

624 
OuçutAºay
 
sqsum
, OuçutAºay 
tûãd
,

625 
sdïth
=-1 );

628 
CV_EXPORTS_W
 
	`accumuœã
–
I≈utAºay
 
§c
, 
I≈utOuçutAºay
 
d°
,

629 
I≈utAºay
 
mask
=
	`noAºay
() );

631 
CV_EXPORTS_W
 
	`accumuœãSqu¨e
–
I≈utAºay
 
§c
, 
I≈utOuçutAºay
 
d°
,

632 
I≈utAºay
 
mask
=
	`noAºay
() );

634 
CV_EXPORTS_W
 
	`accumuœãProdu˘
–
I≈utAºay
 
§c1
, I≈utAºay 
§c2
,

635 
I≈utOuçutAºay
 
d°
, 
I≈utAºay
 
mask
=
	`noAºay
() );

637 
CV_EXPORTS_W
 
	`accumuœãWeighãd
–
I≈utAºay
 
§c
, 
I≈utOuçutAºay
 
d°
,

638 
Æpha
, 
I≈utAºay
 
mask
=
	`noAºay
() );

641 
CV_EXPORTS_W
 
	`PSNR
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
);

643 
CV_EXPORTS_W
 
Poöt2d
 
	`pha£C‹ªœã
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
,

644 
I≈utAºay
 
wödow
 = 
	`noAºay
());

645 
CV_EXPORTS_W
 
Poöt2d
 
	`pha£C‹ªœãRes
(
I≈utAºay
 
§c1
, I≈utAºay 
§c2
,

646 
I≈utAºay
 
wödow
, 
CV_OUT
 * 
ª•⁄£
 = 0);

647 
CV_EXPORTS_W
 
	`¸óãH™nögWödow
(
OuçutAºay
 
d°
, 
Size
 
wöSize
, 
ty≥
);

650 íum { 
THRESH_BINARY
=
CV_THRESH_BINARY
, 
THRESH_BINARY_INV
=
CV_THRESH_BINARY_INV
,

651 
THRESH_TRUNC
=
CV_THRESH_TRUNC
, 
THRESH_TOZERO
=
CV_THRESH_TOZERO
,

652 
THRESH_TOZERO_INV
=
CV_THRESH_TOZERO_INV
, 
THRESH_MASK
=
CV_THRESH_MASK
,

653 
THRESH_OTSU
=
CV_THRESH_OTSU
 
	}
};

656 
CV_EXPORTS_W
 
thªshﬁd
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

657 
thªsh
, 
maxvÆ
, 
ty≥
 );

660 íum { 
	gADAPTIVE_THRESH_MEAN_C
=0, 
	gADAPTIVE_THRESH_GAUSSIAN_C
=1 };

663 
CV_EXPORTS_W
 
ad≠tiveThªshﬁd
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

664 
maxVÆue
, 
ad≠tiveMëhod
,

665 
thªshﬁdTy≥
, 
blockSize
, 
C
 );

668 
CV_EXPORTS_W
 
pyrDown
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

669 c⁄° 
Size
& 
d°size
=Size(), 
b‹dîTy≥
=
BORDER_DEFAULT
 );

671 
CV_EXPORTS_W
 
pyrUp
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

672 c⁄° 
Size
& 
d°size
=Size(), 
b‹dîTy≥
=
BORDER_DEFAULT
 );

675 
CV_EXPORTS
 
buûdPyømid
–
I≈utAºay
 
§c
, 
OuçutAºayOfAºays
 
d°
,

676 
maxÀvñ
, 
b‹dîTy≥
=
BORDER_DEFAULT
 );

679 
CV_EXPORTS_W
 
undi°‹t
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

680 
I≈utAºay
 
ˇmîaM©rix
,

681 
I≈utAºay
 
di°C€ffs
,

682 
I≈utAºay
 
√wCamîaM©rix
=
noAºay
() );

685 
CV_EXPORTS_W
 
öôUndi°‹tRe˘ifyM≠
–
I≈utAºay
 
ˇmîaM©rix
, I≈utAºay 
di°C€ffs
,

686 
I≈utAºay
 
R
, I≈utAºay 
√wCamîaM©rix
,

687 
Size
 
size
, 
m1ty≥
, 
OuçutAºay
 
m≠1
, OuçutAºay 
m≠2
 );

691 
	gPROJ_SPHERICAL_ORTHO
 = 0,

692 
	gPROJ_SPHERICAL_EQRECT
 = 1

696 
CV_EXPORTS_W
 
öôWideAngÀProjM≠
–
I≈utAºay
 
ˇmîaM©rix
, I≈utAºay 
di°C€ffs
,

697 
Size
 
imageSize
, 
de°ImageWidth
,

698 
m1ty≥
, 
OuçutAºay
 
m≠1
, OuçutAºay 
m≠2
,

699 
¥ojTy≥
=
PROJ_SPHERICAL_EQRECT
, 
Æpha
=0);

702 
CV_EXPORTS_W
 
M©
 
gëDeÁu…NewCamîaM©rix
–
I≈utAºay
 
ˇmîaM©rix
, 
Size
 
imgsize
=Size(),

703 
boﬁ
 
˚¡îPröcùÆPoöt
=
Ál£
 );

706 
CV_EXPORTS_W
 
undi°‹tPoöts
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

707 
I≈utAºay
 
ˇmîaM©rix
, I≈utAºay 
di°C€ffs
,

708 
I≈utAºay
 
R
=
noAºay
(), I≈utAºay 
P
=noArray());

710 
	gãm∂©e
<> 
CV_EXPORTS
 
	gPå
<
	gCvHi°ogøm
>::
dñëe_obj
();

713 
CV_EXPORTS
 
ˇlcHi°
–c⁄° 
M©
* 
images
, 
nimages
,

714 c⁄° * 
ch™√ls
, 
I≈utAºay
 
mask
,

715 
OuçutAºay
 
hi°
, 
dims
, c⁄° * 
hi°Size
,

716 c⁄° ** 
ønges
, 
boﬁ
 
unif‹m
=
åue
, boﬁ 
accumuœã
=
Ál£
 );

719 
CV_EXPORTS
 
ˇlcHi°
–c⁄° 
M©
* 
images
, 
nimages
,

720 c⁄° * 
ch™√ls
, 
I≈utAºay
 
mask
,

721 
S∑r£M©
& 
hi°
, 
dims
,

722 c⁄° * 
hi°Size
, c⁄° ** 
ønges
,

723 
boﬁ
 
unif‹m
=
åue
, boﬁ 
accumuœã
=
Ál£
 );

725 
CV_EXPORTS_W
 
ˇlcHi°
–
I≈utAºayOfAºays
 
images
,

726 c⁄° 
ve˘‹
<>& 
ch™√ls
,

727 
I≈utAºay
 
mask
, 
OuçutAºay
 
hi°
,

728 c⁄° 
ve˘‹
<>& 
hi°Size
,

729 c⁄° 
ve˘‹
<>& 
ønges
,

730 
boﬁ
 
accumuœã
=
Ál£
 );

733 
CV_EXPORTS
 
ˇlcBackProje˘
–c⁄° 
M©
* 
images
, 
nimages
,

734 c⁄° * 
ch™√ls
, 
I≈utAºay
 
hi°
,

735 
OuçutAºay
 
backProje˘
, c⁄° ** 
ønges
,

736 
sˇÀ
=1, 
boﬁ
 
unif‹m
=
åue
 );

739 
CV_EXPORTS
 
ˇlcBackProje˘
–c⁄° 
M©
* 
images
, 
nimages
,

740 c⁄° * 
ch™√ls
, c⁄° 
S∑r£M©
& 
hi°
,

741 
OuçutAºay
 
backProje˘
, c⁄° ** 
ønges
,

742 
sˇÀ
=1, 
boﬁ
 
unif‹m
=
åue
 );

744 
CV_EXPORTS_W
 
ˇlcBackProje˘
–
I≈utAºayOfAºays
 
images
, c⁄° 
ve˘‹
<>& 
ch™√ls
,

745 
I≈utAºay
 
hi°
, 
OuçutAºay
 
d°
,

746 c⁄° 
ve˘‹
<>& 
ønges
,

747 
sˇÀ
 );

758 
CV_EXPORTS_W
 
com∑ªHi°
–
I≈utAºay
 
H1
, I≈utAºay 
H2
, 
mëhod
 );

761 
CV_EXPORTS
 
com∑ªHi°
–c⁄° 
S∑r£M©
& 
H1
, c⁄° S∑r£M©& 
H2
, 
mëhod
 );

764 
CV_EXPORTS_W
 
equÆizeHi°
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
 );

766 ˛as†
	cCV_EXPORTS_W
 
	gCLAHE
 : 
public
 
Alg‹ôhm


768 
public
:

769 
CV_WRAP
 
vútuÆ
 
≠∂y
(
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
) = 0;

771 
CV_WRAP
 
vútuÆ
 
£tClùLimô
(
˛ùLimô
) = 0;

772 
CV_WRAP
 
vútuÆ
 
gëClùLimô
() const = 0;

774 
CV_WRAP
 
vútuÆ
 
£tTûesGridSize
(
Size
 
tûeGridSize
) = 0;

775 
CV_WRAP
 
vútuÆ
 
Size
 
gëTûesGridSize
() const = 0;

777 
CV_WRAP
 
vútuÆ
 
cﬁÀ˘G¨bage
() = 0;

779 
CV_EXPORTS_W
 
	gPå
<
	gCLAHE
> 
¸óãCLAHE
(
˛ùLimô
 = 40.0, 
Size
 
tûeGridSize
 = Size(8, 8));

781 
CV_EXPORTS
 
EMD
–
I≈utAºay
 
sig«tuª1
, I≈utAºay 
sig«tuª2
,

782 
di°Ty≥
, 
I≈utAºay
 
co°
=
noAºay
(),

783 * 
lowîBound
=0, 
OuçutAºay
 
Êow
=
noAºay
() );

786 
CV_EXPORTS_W
 
w©îshed
–
I≈utAºay
 
image
, 
I≈utOuçutAºay
 
m¨kîs
 );

789 
CV_EXPORTS_W
 
pyrMónShi·Fûãrög
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

790 
•
, 
§
, 
maxLevñ
=1,

791 
TîmCrôîü
 
ãrm¸ô
=TermCriteria(

792 
TîmCrôîü
::
MAX_ITER
+TîmCrôîü::
EPS
,5,1) );

797 
	gGC_BGD
 = 0,

798 
	gGC_FGD
 = 1,

799 
	gGC_PR_BGD
 = 2,

800 
	gGC_PR_FGD
 = 3

806 
	gGC_INIT_WITH_RECT
 = 0,

807 
	gGC_INIT_WITH_MASK
 = 1,

808 
	gGC_EVAL
 = 2

812 
CV_EXPORTS_W
 
gøbCut
–
I≈utAºay
 
img
, 
I≈utOuçutAºay
 
mask
, 
Re˘
 
ª˘
,

813 
I≈utOuçutAºay
 
bgdModñ
, I≈utOuçutAºay 
fgdModñ
,

814 
ôîCou¡
, 
mode
 = 
GC_EVAL
 );

818 
	gDIST_LABEL_CCOMP
 = 0,

819 
	gDIST_LABEL_PIXEL
 = 1

823 
	$CV_EXPORTS_AS
(
di°™˚Tønsf‹mWôhLabñs
Ë
	`di°™˚Tønsf‹m
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

824 
OuçutAºay
 
œbñs
, 
di°™˚Ty≥
, 
maskSize
,

825 
œbñTy≥
=
DIST_LABEL_CCOMP
 );

828 
CV_EXPORTS_W
 
	`di°™˚Tønsf‹m
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
,

829 
di°™˚Ty≥
, 
maskSize
 );

831 íum { 
FLOODFILL_FIXED_RANGE
 = 1 << 16, 
FLOODFILL_MASK_ONLY
 = 1 << 17 
	}
};

834 
CV_EXPORTS
 
ÊoodFûl
–
I≈utOuçutAºay
 
image
,

835 
Poöt
 
£edPoöt
, 
Sˇœr
 
√wVÆ
, 
CV_OUT
 
Re˘
* 
ª˘
=0,

836 
Sˇœr
 
loDiff
=Sˇœr(), Sˇœ∏
upDiff
=Scalar(),

837 
Êags
=4 );

840 
CV_EXPORTS_W
 
ÊoodFûl
–
I≈utOuçutAºay
 
image
, I≈utOuçutAºay 
mask
,

841 
Poöt
 
£edPoöt
, 
Sˇœr
 
√wVÆ
, 
CV_OUT
 
Re˘
* 
ª˘
=0,

842 
Sˇœr
 
loDiff
=Sˇœr(), Sˇœ∏
upDiff
=Scalar(),

843 
Êags
=4 );

848 
	gCOLOR_BGR2BGRA
 =0,

849 
	gCOLOR_RGB2RGBA
 =
COLOR_BGR2BGRA
,

851 
	gCOLOR_BGRA2BGR
 =1,

852 
	gCOLOR_RGBA2RGB
 =
COLOR_BGRA2BGR
,

854 
	gCOLOR_BGR2RGBA
 =2,

855 
	gCOLOR_RGB2BGRA
 =
COLOR_BGR2RGBA
,

857 
	gCOLOR_RGBA2BGR
 =3,

858 
	gCOLOR_BGRA2RGB
 =
COLOR_RGBA2BGR
,

860 
	gCOLOR_BGR2RGB
 =4,

861 
	gCOLOR_RGB2BGR
 =
COLOR_BGR2RGB
,

863 
	gCOLOR_BGRA2RGBA
 =5,

864 
	gCOLOR_RGBA2BGRA
 =
COLOR_BGRA2RGBA
,

866 
	gCOLOR_BGR2GRAY
 =6,

867 
	gCOLOR_RGB2GRAY
 =7,

868 
	gCOLOR_GRAY2BGR
 =8,

869 
	gCOLOR_GRAY2RGB
 =
COLOR_GRAY2BGR
,

870 
	gCOLOR_GRAY2BGRA
 =9,

871 
	gCOLOR_GRAY2RGBA
 =
COLOR_GRAY2BGRA
,

872 
	gCOLOR_BGRA2GRAY
 =10,

873 
	gCOLOR_RGBA2GRAY
 =11,

875 
	gCOLOR_BGR2BGR565
 =12,

876 
	gCOLOR_RGB2BGR565
 =13,

877 
	gCOLOR_BGR5652BGR
 =14,

878 
	gCOLOR_BGR5652RGB
 =15,

879 
	gCOLOR_BGRA2BGR565
 =16,

880 
	gCOLOR_RGBA2BGR565
 =17,

881 
	gCOLOR_BGR5652BGRA
 =18,

882 
	gCOLOR_BGR5652RGBA
 =19,

884 
	gCOLOR_GRAY2BGR565
 =20,

885 
	gCOLOR_BGR5652GRAY
 =21,

887 
	gCOLOR_BGR2BGR555
 =22,

888 
	gCOLOR_RGB2BGR555
 =23,

889 
	gCOLOR_BGR5552BGR
 =24,

890 
	gCOLOR_BGR5552RGB
 =25,

891 
	gCOLOR_BGRA2BGR555
 =26,

892 
	gCOLOR_RGBA2BGR555
 =27,

893 
	gCOLOR_BGR5552BGRA
 =28,

894 
	gCOLOR_BGR5552RGBA
 =29,

896 
	gCOLOR_GRAY2BGR555
 =30,

897 
	gCOLOR_BGR5552GRAY
 =31,

899 
	gCOLOR_BGR2XYZ
 =32,

900 
	gCOLOR_RGB2XYZ
 =33,

901 
	gCOLOR_XYZ2BGR
 =34,

902 
	gCOLOR_XYZ2RGB
 =35,

904 
	gCOLOR_BGR2YCrCb
 =36,

905 
	gCOLOR_RGB2YCrCb
 =37,

906 
	gCOLOR_YCrCb2BGR
 =38,

907 
	gCOLOR_YCrCb2RGB
 =39,

909 
	gCOLOR_BGR2HSV
 =40,

910 
	gCOLOR_RGB2HSV
 =41,

912 
	gCOLOR_BGR2Lab
 =44,

913 
	gCOLOR_RGB2Lab
 =45,

915 
	gCOLOR_BayîBG2BGR
 =46,

916 
	gCOLOR_BayîGB2BGR
 =47,

917 
	gCOLOR_BayîRG2BGR
 =48,

918 
	gCOLOR_BayîGR2BGR
 =49,

920 
	gCOLOR_BayîBG2RGB
 =
COLOR_BayîRG2BGR
,

921 
	gCOLOR_BayîGB2RGB
 =
COLOR_BayîGR2BGR
,

922 
	gCOLOR_BayîRG2RGB
 =
COLOR_BayîBG2BGR
,

923 
	gCOLOR_BayîGR2RGB
 =
COLOR_BayîGB2BGR
,

925 
	gCOLOR_BGR2Luv
 =50,

926 
	gCOLOR_RGB2Luv
 =51,

927 
	gCOLOR_BGR2HLS
 =52,

928 
	gCOLOR_RGB2HLS
 =53,

930 
	gCOLOR_HSV2BGR
 =54,

931 
	gCOLOR_HSV2RGB
 =55,

933 
	gCOLOR_Lab2BGR
 =56,

934 
	gCOLOR_Lab2RGB
 =57,

935 
	gCOLOR_Luv2BGR
 =58,

936 
	gCOLOR_Luv2RGB
 =59,

937 
	gCOLOR_HLS2BGR
 =60,

938 
	gCOLOR_HLS2RGB
 =61,

940 
	gCOLOR_BayîBG2BGR_VNG
 =62,

941 
	gCOLOR_BayîGB2BGR_VNG
 =63,

942 
	gCOLOR_BayîRG2BGR_VNG
 =64,

943 
	gCOLOR_BayîGR2BGR_VNG
 =65,

945 
	gCOLOR_BayîBG2RGB_VNG
 =
COLOR_BayîRG2BGR_VNG
,

946 
	gCOLOR_BayîGB2RGB_VNG
 =
COLOR_BayîGR2BGR_VNG
,

947 
	gCOLOR_BayîRG2RGB_VNG
 =
COLOR_BayîBG2BGR_VNG
,

948 
	gCOLOR_BayîGR2RGB_VNG
 =
COLOR_BayîGB2BGR_VNG
,

950 
	gCOLOR_BGR2HSV_FULL
 = 66,

951 
	gCOLOR_RGB2HSV_FULL
 = 67,

952 
	gCOLOR_BGR2HLS_FULL
 = 68,

953 
	gCOLOR_RGB2HLS_FULL
 = 69,

955 
	gCOLOR_HSV2BGR_FULL
 = 70,

956 
	gCOLOR_HSV2RGB_FULL
 = 71,

957 
	gCOLOR_HLS2BGR_FULL
 = 72,

958 
	gCOLOR_HLS2RGB_FULL
 = 73,

960 
	gCOLOR_LBGR2Lab
 = 74,

961 
	gCOLOR_LRGB2Lab
 = 75,

962 
	gCOLOR_LBGR2Luv
 = 76,

963 
	gCOLOR_LRGB2Luv
 = 77,

965 
	gCOLOR_Lab2LBGR
 = 78,

966 
	gCOLOR_Lab2LRGB
 = 79,

967 
	gCOLOR_Luv2LBGR
 = 80,

968 
	gCOLOR_Luv2LRGB
 = 81,

970 
	gCOLOR_BGR2YUV
 = 82,

971 
	gCOLOR_RGB2YUV
 = 83,

972 
	gCOLOR_YUV2BGR
 = 84,

973 
	gCOLOR_YUV2RGB
 = 85,

975 
	gCOLOR_BayîBG2GRAY
 = 86,

976 
	gCOLOR_BayîGB2GRAY
 = 87,

977 
	gCOLOR_BayîRG2GRAY
 = 88,

978 
	gCOLOR_BayîGR2GRAY
 = 89,

981 
	gCOLOR_YUV2RGB_NV12
 = 90,

982 
	gCOLOR_YUV2BGR_NV12
 = 91,

983 
	gCOLOR_YUV2RGB_NV21
 = 92,

984 
	gCOLOR_YUV2BGR_NV21
 = 93,

985 
	gCOLOR_YUV420•2RGB
 = 
COLOR_YUV2RGB_NV21
,

986 
	gCOLOR_YUV420•2BGR
 = 
COLOR_YUV2BGR_NV21
,

988 
	gCOLOR_YUV2RGBA_NV12
 = 94,

989 
	gCOLOR_YUV2BGRA_NV12
 = 95,

990 
	gCOLOR_YUV2RGBA_NV21
 = 96,

991 
	gCOLOR_YUV2BGRA_NV21
 = 97,

992 
	gCOLOR_YUV420•2RGBA
 = 
COLOR_YUV2RGBA_NV21
,

993 
	gCOLOR_YUV420•2BGRA
 = 
COLOR_YUV2BGRA_NV21
,

995 
	gCOLOR_YUV2RGB_YV12
 = 98,

996 
	gCOLOR_YUV2BGR_YV12
 = 99,

997 
	gCOLOR_YUV2RGB_IYUV
 = 100,

998 
	gCOLOR_YUV2BGR_IYUV
 = 101,

999 
	gCOLOR_YUV2RGB_I420
 = 
COLOR_YUV2RGB_IYUV
,

1000 
	gCOLOR_YUV2BGR_I420
 = 
COLOR_YUV2BGR_IYUV
,

1001 
	gCOLOR_YUV420p2RGB
 = 
COLOR_YUV2RGB_YV12
,

1002 
	gCOLOR_YUV420p2BGR
 = 
COLOR_YUV2BGR_YV12
,

1004 
	gCOLOR_YUV2RGBA_YV12
 = 102,

1005 
	gCOLOR_YUV2BGRA_YV12
 = 103,

1006 
	gCOLOR_YUV2RGBA_IYUV
 = 104,

1007 
	gCOLOR_YUV2BGRA_IYUV
 = 105,

1008 
	gCOLOR_YUV2RGBA_I420
 = 
COLOR_YUV2RGBA_IYUV
,

1009 
	gCOLOR_YUV2BGRA_I420
 = 
COLOR_YUV2BGRA_IYUV
,

1010 
	gCOLOR_YUV420p2RGBA
 = 
COLOR_YUV2RGBA_YV12
,

1011 
	gCOLOR_YUV420p2BGRA
 = 
COLOR_YUV2BGRA_YV12
,

1013 
	gCOLOR_YUV2GRAY_420
 = 106,

1014 
	gCOLOR_YUV2GRAY_NV21
 = 
COLOR_YUV2GRAY_420
,

1015 
	gCOLOR_YUV2GRAY_NV12
 = 
COLOR_YUV2GRAY_420
,

1016 
	gCOLOR_YUV2GRAY_YV12
 = 
COLOR_YUV2GRAY_420
,

1017 
	gCOLOR_YUV2GRAY_IYUV
 = 
COLOR_YUV2GRAY_420
,

1018 
	gCOLOR_YUV2GRAY_I420
 = 
COLOR_YUV2GRAY_420
,

1019 
	gCOLOR_YUV420•2GRAY
 = 
COLOR_YUV2GRAY_420
,

1020 
	gCOLOR_YUV420p2GRAY
 = 
COLOR_YUV2GRAY_420
,

1023 
	gCOLOR_YUV2RGB_UYVY
 = 107,

1024 
	gCOLOR_YUV2BGR_UYVY
 = 108,

1027 
	gCOLOR_YUV2RGB_Y422
 = 
COLOR_YUV2RGB_UYVY
,

1028 
	gCOLOR_YUV2BGR_Y422
 = 
COLOR_YUV2BGR_UYVY
,

1029 
	gCOLOR_YUV2RGB_UYNV
 = 
COLOR_YUV2RGB_UYVY
,

1030 
	gCOLOR_YUV2BGR_UYNV
 = 
COLOR_YUV2BGR_UYVY
,

1032 
	gCOLOR_YUV2RGBA_UYVY
 = 111,

1033 
	gCOLOR_YUV2BGRA_UYVY
 = 112,

1036 
	gCOLOR_YUV2RGBA_Y422
 = 
COLOR_YUV2RGBA_UYVY
,

1037 
	gCOLOR_YUV2BGRA_Y422
 = 
COLOR_YUV2BGRA_UYVY
,

1038 
	gCOLOR_YUV2RGBA_UYNV
 = 
COLOR_YUV2RGBA_UYVY
,

1039 
	gCOLOR_YUV2BGRA_UYNV
 = 
COLOR_YUV2BGRA_UYVY
,

1041 
	gCOLOR_YUV2RGB_YUY2
 = 115,

1042 
	gCOLOR_YUV2BGR_YUY2
 = 116,

1043 
	gCOLOR_YUV2RGB_YVYU
 = 117,

1044 
	gCOLOR_YUV2BGR_YVYU
 = 118,

1045 
	gCOLOR_YUV2RGB_YUYV
 = 
COLOR_YUV2RGB_YUY2
,

1046 
	gCOLOR_YUV2BGR_YUYV
 = 
COLOR_YUV2BGR_YUY2
,

1047 
	gCOLOR_YUV2RGB_YUNV
 = 
COLOR_YUV2RGB_YUY2
,

1048 
	gCOLOR_YUV2BGR_YUNV
 = 
COLOR_YUV2BGR_YUY2
,

1050 
	gCOLOR_YUV2RGBA_YUY2
 = 119,

1051 
	gCOLOR_YUV2BGRA_YUY2
 = 120,

1052 
	gCOLOR_YUV2RGBA_YVYU
 = 121,

1053 
	gCOLOR_YUV2BGRA_YVYU
 = 122,

1054 
	gCOLOR_YUV2RGBA_YUYV
 = 
COLOR_YUV2RGBA_YUY2
,

1055 
	gCOLOR_YUV2BGRA_YUYV
 = 
COLOR_YUV2BGRA_YUY2
,

1056 
	gCOLOR_YUV2RGBA_YUNV
 = 
COLOR_YUV2RGBA_YUY2
,

1057 
	gCOLOR_YUV2BGRA_YUNV
 = 
COLOR_YUV2BGRA_YUY2
,

1059 
	gCOLOR_YUV2GRAY_UYVY
 = 123,

1060 
	gCOLOR_YUV2GRAY_YUY2
 = 124,

1062 
	gCOLOR_YUV2GRAY_Y422
 = 
COLOR_YUV2GRAY_UYVY
,

1063 
	gCOLOR_YUV2GRAY_UYNV
 = 
COLOR_YUV2GRAY_UYVY
,

1064 
	gCOLOR_YUV2GRAY_YVYU
 = 
COLOR_YUV2GRAY_YUY2
,

1065 
	gCOLOR_YUV2GRAY_YUYV
 = 
COLOR_YUV2GRAY_YUY2
,

1066 
	gCOLOR_YUV2GRAY_YUNV
 = 
COLOR_YUV2GRAY_YUY2
,

1069 
	gCOLOR_RGBA2mRGBA
 = 125,

1070 
	gCOLOR_mRGBA2RGBA
 = 126,

1072 
	gCOLOR_RGB2YUV_I420
 = 127,

1073 
	gCOLOR_BGR2YUV_I420
 = 128,

1074 
	gCOLOR_RGB2YUV_IYUV
 = 
COLOR_RGB2YUV_I420
,

1075 
	gCOLOR_BGR2YUV_IYUV
 = 
COLOR_BGR2YUV_I420
,

1077 
	gCOLOR_RGBA2YUV_I420
 = 129,

1078 
	gCOLOR_BGRA2YUV_I420
 = 130,

1079 
	gCOLOR_RGBA2YUV_IYUV
 = 
COLOR_RGBA2YUV_I420
,

1080 
	gCOLOR_BGRA2YUV_IYUV
 = 
COLOR_BGRA2YUV_I420
,

1081 
	gCOLOR_RGB2YUV_YV12
 = 131,

1082 
	gCOLOR_BGR2YUV_YV12
 = 132,

1083 
	gCOLOR_RGBA2YUV_YV12
 = 133,

1084 
	gCOLOR_BGRA2YUV_YV12
 = 134,

1086 
	gCOLOR_COLORCVT_MAX
 = 135

1091 
CV_EXPORTS_W
 
cvtCﬁ‹
–
I≈utAºay
 
§c
, 
OuçutAºay
 
d°
, 
code
, 
d°Cn
=0 );

1094 ˛as†
	cCV_EXPORTS_W_MAP
 
	gMomíts


1096 
	gpublic
:

1098 
Momíts
();

1100 
Momíts
(
m00
, 
m10
, 
m01
, 
m20
, 
m11
,

1101 
m02
, 
m30
, 
m21
, 
m12
, 
m03
 );

1103 
Momíts
–c⁄° 
CvMomíts
& 
momíts
 );

1105 
›î©‹
 
CvMomíts
() const;

1108 
CV_PROP_RW
 
	gm00
, 
	gm10
, 
	gm01
, 
	gm20
, 
	gm11
, 
	gm02
, 
	gm30
, 
	gm21
, 
	gm12
, 
	gm03
;

1110 
CV_PROP_RW
 
	gmu20
, 
	gmu11
, 
	gmu02
, 
	gmu30
, 
	gmu21
, 
	gmu12
, 
	gmu03
;

1112 
CV_PROP_RW
 
	gnu20
, 
	gnu11
, 
	gnu02
, 
	gnu30
, 
	gnu21
, 
	gnu12
, 
	gnu03
;

1116 
CV_EXPORTS_W
 
Momíts
 
momíts
–
I≈utAºay
 
¨øy
, 
boﬁ
 
bö¨yImage
=
Ál£
 );

1119 
CV_EXPORTS
 
HuMomíts
–c⁄° 
Momíts
& 
momíts
, 
hu
[7] );

1120 
CV_EXPORTS_W
 
HuMomíts
–c⁄° 
Momíts
& 
m
, 
CV_OUT
 
OuçutAºay
 
hu
 );

1123 íum { 
	gTM_SQDIFF
=0, 
	gTM_SQDIFF_NORMED
=1, 
	gTM_CCORR
=2, 
	gTM_CCORR_NORMED
=3, 
	gTM_CCOEFF
=4, 
	gTM_CCOEFF_NORMED
=5 };

1126 
CV_EXPORTS_W
 
m©chTem∂©e
–
I≈utAºay
 
image
, I≈utAºay 
ãm∂
,

1127 
OuçutAºay
 
ªsu…
, 
mëhod
 );

1132 
	gRETR_EXTERNAL
=
CV_RETR_EXTERNAL
,

1133 
	gRETR_LIST
=
CV_RETR_LIST
,

1134 
	gRETR_CCOMP
=
CV_RETR_CCOMP
,

1135 
	gRETR_TREE
=
CV_RETR_TREE
,

1136 
	gRETR_FLOODFILL
=
CV_RETR_FLOODFILL


1142 
	gCHAIN_APPROX_NONE
=
CV_CHAIN_APPROX_NONE
,

1143 
	gCHAIN_APPROX_SIMPLE
=
CV_CHAIN_APPROX_SIMPLE
,

1144 
	gCHAIN_APPROX_TC89_L1
=
CV_CHAIN_APPROX_TC89_L1
,

1145 
	gCHAIN_APPROX_TC89_KCOS
=
CV_CHAIN_APPROX_TC89_KCOS


1149 
CV_EXPORTS_W
 
födC⁄tours
–
I≈utOuçutAºay
 
image
, 
OuçutAºayOfAºays
 
c⁄tours
,

1150 
OuçutAºay
 
hõørchy
, 
mode
,

1151 
mëhod
, 
Poöt
 
off£t
=Point());

1154 
CV_EXPORTS
 
födC⁄tours
–
I≈utOuçutAºay
 
image
, 
OuçutAºayOfAºays
 
c⁄tours
,

1155 
mode
, 
mëhod
, 
Poöt
 
off£t
=Point());

1158 
CV_EXPORTS_W
 
døwC⁄tours
–
I≈utOuçutAºay
 
image
, 
I≈utAºayOfAºays
 
c⁄tours
,

1159 
c⁄tourIdx
, c⁄° 
Sˇœr
& 
cﬁ‹
,

1160 
thick√ss
=1, 
löeTy≥
=8,

1161 
I≈utAºay
 
hõørchy
=
noAºay
(),

1162 
maxLevñ
=
INT_MAX
, 
Poöt
 
off£t
=Point() );

1165 
CV_EXPORTS_W
 
≠¥oxPﬁyDP
–
I≈utAºay
 
curve
,

1166 
OuçutAºay
 
≠¥oxCurve
,

1167 
ïsû⁄
, 
boﬁ
 
˛o£d
 );

1170 
CV_EXPORTS_W
 
¨cLígth
–
I≈utAºay
 
curve
, 
boﬁ
 
˛o£d
 );

1172 
CV_EXPORTS_W
 
Re˘
 
boundögRe˘
–
I≈utAºay
 
poöts
 );

1174 
CV_EXPORTS_W
 
c⁄tourAªa
–
I≈utAºay
 
c⁄tour
, 
boﬁ
 
‹õ¡ed
=
Ál£
 );

1176 
CV_EXPORTS_W
 
RŸ©edRe˘
 
möAªaRe˘
–
I≈utAºay
 
poöts
 );

1178 
CV_EXPORTS_W
 
möEn˛osögCú˛e
–
I≈utAºay
 
poöts
,

1179 
CV_OUT
 
Poöt2f
& 
˚¡î
, CV_OUT & 
ødius
 );

1181 
CV_EXPORTS_W
 
m©chSh≠es
–
I≈utAºay
 
c⁄tour1
, I≈utAºay 
c⁄tour2
,

1182 
mëhod
, 
∑ømëî
 );

1184 
CV_EXPORTS_W
 
c⁄vexHuŒ
–
I≈utAºay
 
poöts
, 
OuçutAºay
 
huŒ
,

1185 
boﬁ
 
˛ockwi£
=
Ál£
, boﬁ 
ªtu∫Poöts
=
åue
 );

1187 
CV_EXPORTS_W
 
c⁄vexôyDe„˘s
–
I≈utAºay
 
c⁄tour
, I≈utAºay 
c⁄vexhuŒ
, 
OuçutAºay
 convexityDefects );

1190 
CV_EXPORTS_W
 
boﬁ
 
isC⁄tourC⁄vex
–
I≈utAºay
 
c⁄tour
 );

1193 
CV_EXPORTS_W
 
öãr£˘C⁄vexC⁄vex
–
I≈utAºay
 
_p1
, I≈utAºay 
_p2
,

1194 
OuçutAºay
 
_p12
, 
boﬁ
 
h™dÀNe°ed
=
åue
 );

1197 
CV_EXPORTS_W
 
RŸ©edRe˘
 
fôEŒù£
–
I≈utAºay
 
poöts
 );

1200 
CV_EXPORTS_W
 
fôLöe
–
I≈utAºay
 
poöts
, 
OuçutAºay
 
löe
, 
di°Ty≥
,

1201 
∑øm
, 
ªps
, 
´ps
 );

1203 
CV_EXPORTS_W
 
poötPﬁyg⁄Te°
–
I≈utAºay
 
c⁄tour
, 
Poöt2f
 
±
, 
boﬁ
 
mósuªDi°
 );

1206 ˛as†
	cCV_EXPORTS_W
 
	gSubdiv2D


1208 
	gpublic
:

1211 
PTLOC_ERROR
 = -2,

1212 
	gPTLOC_OUTSIDE_RECT
 = -1,

1213 
	gPTLOC_INSIDE
 = 0,

1214 
	gPTLOC_VERTEX
 = 1,

1215 
	gPTLOC_ON_EDGE
 = 2

1220 
	gNEXT_AROUND_ORG
 = 0x00,

1221 
	gNEXT_AROUND_DST
 = 0x22,

1222 
	gPREV_AROUND_ORG
 = 0x11,

1223 
	gPREV_AROUND_DST
 = 0x33,

1224 
	gNEXT_AROUND_LEFT
 = 0x13,

1225 
	gNEXT_AROUND_RIGHT
 = 0x31,

1226 
	gPREV_AROUND_LEFT
 = 0x20,

1227 
	gPREV_AROUND_RIGHT
 = 0x02

1230 
CV_WRAP
 
Subdiv2D
();

1231 
CV_WRAP
 
Subdiv2D
(
Re˘
 
ª˘
);

1232 
CV_WRAP
 
öôDñau«y
(
Re˘
 
ª˘
);

1234 
CV_WRAP
 
ö£π
(
Poöt2f
 
±
);

1235 
CV_WRAP
 
ö£π
(c⁄° 
ve˘‹
<
Poöt2f
>& 
±vec
);

1236 
CV_WRAP
 
loˇã
(
Poöt2f
 
±
, 
CV_OUT
 & 
edge
, CV_OUT & 
vîãx
);

1238 
CV_WRAP
 
födNóª°
(
Poöt2f
 
±
, 
CV_OUT
 Poöt2f* 
√¨e°Pt
=0);

1239 
CV_WRAP
 
gëEdgeLi°
(
CV_OUT
 
ve˘‹
<
Vec4f
>& 
edgeLi°
) const;

1240 
CV_WRAP
 
gëTrüngÀLi°
(
CV_OUT
 
ve˘‹
<
Vec6f
>& 
åüngÀLi°
) const;

1241 
CV_WRAP
 
gëV‹⁄oiFa˚tLi°
(c⁄° 
ve˘‹
<>& 
idx
, 
CV_OUT
 ve˘‹<ve˘‹<
Poöt2f
> >& 
Á˚tLi°
,

1242 
CV_OUT
 
ve˘‹
<
Poöt2f
>& 
Á˚tCíãrs
);

1244 
CV_WRAP
 
Poöt2f
 
gëVîãx
(
vîãx
, 
CV_OUT
 * 
fú°Edge
=0) const;

1246 
CV_WRAP
 
gëEdge
–
edge
, 
√xtEdgeTy≥
 ) const;

1247 
CV_WRAP
 
√xtEdge
(
edge
) const;

1248 
CV_WRAP
 
rŸ©eEdge
(
edge
, 
rŸ©e
) const;

1249 
CV_WRAP
 
symEdge
(
edge
) const;

1250 
CV_WRAP
 
edgeOrg
(
edge
, 
CV_OUT
 
Poöt2f
* 
‹g±
=0) const;

1251 
CV_WRAP
 
edgeD°
(
edge
, 
CV_OUT
 
Poöt2f
* 
d°±
=0) const;

1253 
	g¥Ÿe˘ed
:

1254 
√wEdge
();

1255 
dñëeEdge
(
edge
);

1256 
√wPoöt
(
Poöt2f
 
±
, 
boﬁ
 
isvútuÆ
, 
fú°Edge
=0);

1257 
dñëePoöt
(
vtx
);

1258 
£tEdgePoöts
–
edge
, 
‹gPt
, 
d°Pt
 );

1259 
•li˚
–
edgeA
, 
edgeB
 );

1260 
c⁄√˘Edges
–
edgeA
, 
edgeB
 );

1261 
sw≠Edges
–
edge
 );

1262 
isRightOf
(
Poöt2f
 
±
, 
edge
) const;

1263 
ˇlcV‹⁄oi
();

1264 
˛órV‹⁄oi
();

1265 
checkSubdiv
() const;

1267 
CV_EXPORTS
 
	gVîãx


1269 
Vîãx
();

1270 
Vîãx
(
Poöt2f
 
±
, 
boﬁ
 
_isvútuÆ
, 
_fú°Edge
=0);

1271 
boﬁ
 
isvútuÆ
() const;

1272 
boﬁ
 
is‰ì
() const;

1273 
	gfú°Edge
;

1274 
	gty≥
;

1275 
Poöt2f
 
	g±
;

1277 
CV_EXPORTS
 
	gQuadEdge


1279 
QuadEdge
();

1280 
QuadEdge
(
edgeidx
);

1281 
boﬁ
 
is‰ì
() const;

1282 
	g√xt
[4];

1283 
	g±
[4];

1286 
	gve˘‹
<
	gVîãx
> 
	gvtx
;

1287 
	gve˘‹
<
	gQuadEdge
> 
	gqedges
;

1288 
	g‰ìQEdge
;

1289 
	g‰ìPoöt
;

1290 
boﬁ
 
	gvÆidGeomëry
;

1292 
	gª˚¡Edge
;

1293 
Poöt2f
 
	gt›Le·
;

1294 
Poöt2f
 
	gbŸtomRight
;

	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/NVX/nvx_api_macros.h

11 #i‚de‡
NVX_API_MACROS_H


12 
	#NVX_API_MACROS_H


	)

14 
	~"nvx_exp‹t.h
"

16 #i‚de‡
NVX_EXTERN_C


17 #ifde‡
__˝lu•lus


18 
	#NVX_EXTERN_C
 "C"

	)

20 
	#NVX_EXTERN_C


	)

24 #i‚de‡
NVX_C_API


25 
	#NVX_C_API
 
NVX_EXTERN_C
 
NVX_EXPORT


	)

28 #i‚de‡
NVX_CXX_API


29 
	#NVX_CXX_API
 
NVX_EXPORT


	)

	@/usr/include/NVX/nvx_compatibility.h

16 #i‚de‡
NVX_COMPATIBILITY_H


17 
	#NVX_COMPATIBILITY_H


	)

25 
	#NVX_CONTEXT_ATTRIBUTE_INITIAL_CUDA_DEVICE_ID
 
NVX_CONTEXT_INITIAL_CUDA_DEVICE


	)

32 
	#NVX_NODE_ATTRIBUTE_CUDA_STREAM
 
NVX_NODE_CUDA_STREAM


	)

39 
	#NVX_DIRECTIVE_KEYPOINT_ERROR_DISABLE
 
NVX_DIRECTIVE_DISABLE_KEYPOINT_ERROR


	)

46 
	#NVX_DIRECTIVE_KEYPOINT_ERROR_ENABLE
 
NVX_DIRECTIVE_ENABLE_KEYPOINT_ERROR


	)

53 
	#NVX_DIRECTIVE_KEYPOINT_ERROR_DEFAULT
 
NVX_DIRECTIVE_DEFAULT_KEYPOINT_ERROR


	)

60 
	#NVX_DIRECTIVE_PERFORMANCE_DISABLE
 
NVX_DIRECTIVE_DISABLE_PERFORMANCE


	)

67 
	#NVX_DIRECTIVE_PERFORMANCE_ENABLE
 
NVX_DIRECTIVE_ENABLE_PERFORMANCE


	)

74 
	#NVX_DIRECTIVE_PERFORMANCE_DEFAULT
 
NVX_DIRECTIVE_DEFAULT_PERFORMANCE


	)

	@/usr/include/VX/vx_api.h

29 #i‚de‡
_OPENVX_API_H_


30 
	#_OPENVX_API_H_


	)

37 #ifde‡ 
__˝lu•lus


53 
VX_API_ENTRY
 
vx_c⁄ãxt
 
VX_API_CALL
 
vxCª©eC⁄ãxt
();

69 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£C⁄ãxt
(
vx_c⁄ãxt
 *
c⁄ãxt
);

78 
VX_API_ENTRY
 
vx_c⁄ãxt
 
VX_API_CALL
 
vxGëC⁄ãxt
(
vx_ª„ªn˚
 
ª„ªn˚
);

92 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyC⁄ãxt
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

106 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëC⁄ãxtAâribuã
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_íum
 
©åibuã
, c⁄° *
±r
, 
vx_size
 
size
);

120 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxHöt
(
vx_ª„ªn˚
 
ª„ªn˚
, 
vx_íum
 
höt
, c⁄° * 
d©a
, 
vx_size
 
d©a_size
);

134 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxDúe˘ive
(
vx_ª„ªn˚
 
ª„ªn˚
, 
vx_íum
 
dúe˘ive
);

154 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxGëSètus
(
vx_ª„ªn˚
 
ª„ªn˚
);

169 
VX_API_ENTRY
 
vx_íum
 
VX_API_CALL
 
vxRegi°îU£rSåu˘
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_size
 
size
);

181 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxAŒoˇãU£rKî√lId
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_íum
 * 
pKî√lEnumId
);

201 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxAŒoˇãU£rKî√lLibøryId
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_íum
 * 
pLibøryId
);

217 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëImmedüãModeT¨gë
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_íum
 
èrgë_íum
, c⁄° * 
èrgë_°rög
);

234 
VX_API_ENTRY
 
vx_image
 
VX_API_CALL
 
vxCª©eImage
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_uöt32
 
width
, vx_uöt32 
height
, 
vx_df_image
 
cﬁ‹
);

247 
VX_API_ENTRY
 
vx_image
 
VX_API_CALL
 
vxCª©eImageFromROI
(vx_imagê
img
, c⁄° 
vx_ª˘™gÀ_t
 *
ª˘
);

263 
VX_API_ENTRY
 
vx_image
 
VX_API_CALL
 
vxCª©eUnif‹mImage
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_uöt32
 
width
, vx_uöt32 
height
, 
vx_df_image
 
cﬁ‹
, c⁄° 
vx_pixñ_vÆue_t
 *
vÆue
);

294 
VX_API_ENTRY
 
vx_image
 
VX_API_CALL
 
vxCª©eVútuÆImage
(
vx_gøph
 
gøph
, 
vx_uöt32
 
width
, vx_uöt32 
height
, 
vx_df_image
 
cﬁ‹
);

326 
VX_API_ENTRY
 
vx_image
 
VX_API_CALL
 
vxCª©eImageFromH™dÀ
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_df_image
 
cﬁ‹
, c⁄° 
vx_imagï©ch_addªssög_t
 
addrs
[], *c⁄° 
±rs
[], 
vx_íum
 
mem‹y_ty≥
);

375 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSw≠ImageH™dÀ
(
vx_image
 
image
, * c⁄° 
√w_±rs
[], * 
¥ev_±rs
[], 
vx_size
 
num_∂™es
);

389 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyImage
(
vx_image
 
image
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

402 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëImageAâribuã
(
vx_image
 
image
, 
vx_íum
 
©åibuã
, c⁄° *
±r
, 
vx_size
 
size
);

423 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Image
(
vx_image
 *
image
);

433 
VX_API_ENTRY
 
vx_size
 
VX_API_CALL
 
vxCompuãImageP©chSize
(
vx_image
 
image
,

434 c⁄° 
vx_ª˘™gÀ_t
 *
ª˘
,

435 
vx_uöt32
 
∂™e_ödex
);

446 
VX_API_ENTRY
 * 
VX_API_CALL
 
vxF‹m©ImageP©chAddªss1d
(*
±r
, 
vx_uöt32
 
ödex
, c⁄° 
vx_imagï©ch_addªssög_t
 *
addr
);

458 
VX_API_ENTRY
 * 
VX_API_CALL
 
vxF‹m©ImageP©chAddªss2d
(*
±r
, 
vx_uöt32
 
x
, vx_uöt32 
y
, c⁄° 
vx_imagï©ch_addªssög_t
 *
addr
);

471 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxGëVÆidRegi⁄Image
(
vx_image
 
image
, 
vx_ª˘™gÀ_t
 *
ª˘
);

508 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxC›yImageP©ch
(
vx_image
 
image
, c⁄° 
vx_ª˘™gÀ_t
 *
image_ª˘
, 
vx_uöt32
 
image_∂™e_ödex
, c⁄° 
vx_imagï©ch_addªssög_t
 *
u£r_addr
, * 
u£r_±r
, 
vx_íum
 
ußge
, vx_íum 
u£r_mem_ty≥
);

571 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxM≠ImageP©ch
(
vx_image
 
image
, c⁄° 
vx_ª˘™gÀ_t
 *
ª˘
, 
vx_uöt32
 
∂™e_ödex
, 
vx_m≠_id
 *
m≠_id
, 
vx_imagï©ch_addªssög_t
 *
addr
, **
±r
, 
vx_íum
 
ußge
, vx_íum 
mem_ty≥
, vx_uöt32 
Êags
);

586 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxUnm≠ImageP©ch
(
vx_image
 
image
, 
vx_m≠_id
 
m≠_id
);

606 
VX_API_ENTRY
 
vx_image
 
VX_API_CALL
 
vxCª©eImageFromCh™√l
(vx_imagê
img
, 
vx_íum
 
ch™√l
);

621 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëImageVÆidRe˘™gÀ
(
vx_image
 
image
, c⁄° 
vx_ª˘™gÀ_t
 *
ª˘
);

648 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxLﬂdKî√ls
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
vx_ch¨
 *
moduÀ
);

668 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxU∆ﬂdKî√ls
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
vx_ch¨
 *
moduÀ
);

773 
VX_API_ENTRY
 
vx_kî√l
 
VX_API_CALL
 
vxGëKî√lByName
(
vx_c⁄ãxt
 
c⁄ãxt
, c⁄° 
vx_ch¨
 *
«me
);

787 
VX_API_ENTRY
 
vx_kî√l
 
VX_API_CALL
 
vxGëKî√lByEnum
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_íum
 
kî√l
);

802 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyKî√l
(
vx_kî√l
 
kî√l
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

813 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Kî√l
(
vx_kî√l
 *
kî√l
);

833 
VX_API_ENTRY
 
vx_kî√l
 
VX_API_CALL
 
vxAddU£rKî√l
(
vx_c⁄ãxt
 
c⁄ãxt
,

834 c⁄° 
vx_ch¨
 
«me
[
VX_MAX_KERNEL_NAME
],

835 
vx_íum
 
íumî©i⁄
,

836 
vx_kî√l_f
 
func_±r
,

837 
vx_uöt32
 
numP¨ams
,

838 
vx_kî√l_vÆid©e_f
 
vÆid©e
,

839 
vx_kî√l_öôülize_f
 
öô
,

840 
vx_kî√l_deöôülize_f
 
deöô
);

852 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxFöÆizeKî√l
(
vx_kî√l
 
kî√l
);

867 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxAddP¨amëîToKî√l
(
vx_kî√l
 
kî√l
, 
vx_uöt32
 
ödex
, 
vx_íum
 
dú
, vx_íum 
d©a_ty≥
, vx_íum 
°©e
);

885 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRemoveKî√l
(
vx_kî√l
 
kî√l
);

897 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëKî√lAâribuã
(
vx_kî√l
 
kî√l
, 
vx_íum
 
©åibuã
, c⁄° *
±r
, 
vx_size
 
size
);

908 
VX_API_ENTRY
 
vx_∑ømëî
 
VX_API_CALL
 
vxGëKî√lP¨amëîByIndex
(
vx_kî√l
 
kî√l
, 
vx_uöt32
 
ödex
);

920 
VX_API_ENTRY
 
vx_gøph
 
VX_API_CALL
 
vxCª©eGøph
(
vx_c⁄ãxt
 
c⁄ãxt
);

934 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Gøph
(
vx_gøph
 *
gøph
);

959 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxVîifyGøph
(
vx_gøph
 
gøph
);

977 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxPro˚ssGøph
(
vx_gøph
 
gøph
);

989 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxScheduÀGøph
(
vx_gøph
 
gøph
);

1003 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxWaôGøph
(
vx_gøph
 
gøph
);

1013 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyGøph
(
vx_gøph
 
gøph
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

1023 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëGøphAâribuã
(
vx_gøph
 
gøph
, 
vx_íum
 
©åibuã
, c⁄° *
±r
, 
vx_size
 
size
);

1035 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxAddP¨amëîToGøph
(
vx_gøph
 
gøph
, 
vx_∑ømëî
 
∑ømëî
);

1049 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëGøphP¨amëîByIndex
(
vx_gøph
 
gøph
, 
vx_uöt32
 
ödex
, 
vx_ª„ªn˚
 
vÆue
);

1060 
VX_API_ENTRY
 
vx_∑ømëî
 
VX_API_CALL
 
vxGëGøphP¨amëîByIndex
(
vx_gøph
 
gøph
, 
vx_uöt32
 
ödex
);

1071 
VX_API_ENTRY
 
vx_boﬁ
 
VX_API_CALL
 
vxIsGøphVîifõd
(
vx_gøph
 
gøph
);

1090 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxCª©eGíîicNode
(
vx_gøph
 
gøph
, 
vx_kî√l
 
kî√l
);

1102 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyNode
(
vx_node
 
node
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

1118 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëNodeAâribuã
(
vx_node
 
node
, 
vx_íum
 
©åibuã
, c⁄° *
±r
, 
vx_size
 
size
);

1129 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Node
(
vx_node
 *
node
);

1139 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRemoveNode
(
vx_node
 *
node
);

1154 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxAssignNodeCÆlback
(
vx_node
 
node
, 
vx_nodecom∂ëe_f
 
ˇŒback
);

1163 
VX_API_ENTRY
 
vx_nodecom∂ëe_f
 
VX_API_CALL
 
vxRërõveNodeCÆlback
(
vx_node
 
node
);

1178 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëNodeT¨gë
(
vx_node
 
node
, 
vx_íum
 
èrgë_íum
, c⁄° * 
èrgë_°rög
);

1201 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRïliˇãNode
(
vx_gøph
 
gøph
, 
vx_node
 
fú°_node
, 
vx_boﬁ
 
ª∂iˇã
[], 
vx_uöt32
 
numbî_of_∑ømëîs
);

1214 
VX_API_ENTRY
 
vx_∑ømëî
 
VX_API_CALL
 
vxGëP¨amëîByIndex
(
vx_node
 
node
, 
vx_uöt32
 
ödex
);

1225 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£P¨amëî
(
vx_∑ømëî
 *
∑øm
);

1236 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëP¨amëîByIndex
(
vx_node
 
node
, 
vx_uöt32
 
ödex
, 
vx_ª„ªn˚
 
vÆue
);

1247 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëP¨amëîByRe„ªn˚
(
vx_∑ømëî
 
∑ømëî
, 
vx_ª„ªn˚
 
vÆue
);

1257 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyP¨amëî
(
vx_∑ømëî
 
∑øm
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

1272 
VX_API_ENTRY
 
vx_sˇœr
 
VX_API_CALL
 
vxCª©eSˇœr
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_íum
 
d©a_ty≥
, c⁄° *
±r
);

1283 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Sˇœr
(
vx_sˇœr
 *
sˇœr
);

1293 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîySˇœr
(
vx_sˇœr
 
sˇœr
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

1315 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxC›ySˇœr
(
vx_sˇœr
 
sˇœr
, *
u£r_±r
, 
vx_íum
 
ußge
, vx_íum 
u£r_mem_ty≥
);

1329 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyRe„ªn˚
(
vx_ª„ªn˚
 
ªf
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

1341 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Re„ªn˚
(
vx_ª„ªn˚
* 
ªf_±r
);

1355 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRëaöRe„ªn˚
(
vx_ª„ªn˚
 
ªf
);

1379 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëRe„ªn˚Name
(
vx_ª„ªn˚
 
ªf
, c⁄° 
vx_ch¨
 *
«me
);

1393 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyDñay
(
vx_dñay
 
dñay
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

1404 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Dñay
(
vx_dñay
 *
dñay
);

1419 
VX_API_ENTRY
 
vx_dñay
 
VX_API_CALL
 
vxCª©eDñay
(
vx_c⁄ãxt
 
c⁄ãxt
,

1420 
vx_ª„ªn˚
 
exem∂¨
,

1421 
vx_size
 
¶Ÿs
);

1435 
VX_API_ENTRY
 
vx_ª„ªn˚
 
VX_API_CALL
 
vxGëRe„ªn˚FromDñay
(
vx_dñay
 
dñay
, 
vx_öt32
 
ödex
);

1447 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxAgeDñay
(
vx_dñay
 
dñay
);

1469 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRegi°îAutoAgög
(
vx_gøph
 
gøph
, 
vx_dñay
 
dñay
);

1483 
VX_API_ENTRY
 
VX_API_CALL
 
vxAddLogE¡ry
(
vx_ª„ªn˚
 
ªf
, 
vx_°©us
 
°©us
, c⁄° *
mesßge
, ...);

1492 
VX_API_ENTRY
 
VX_API_CALL
 
vxRegi°îLogCÆlback
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_log_ˇŒback_f
 
ˇŒback
, 
vx_boﬁ
 
ªíå™t
);

1511 
VX_API_ENTRY
 
vx_lut
 
VX_API_CALL
 
vxCª©eLUT
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_íum
 
d©a_ty≥
, 
vx_size
 
cou¡
);

1522 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£LUT
(
vx_lut
 *
lut
);

1532 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyLUT
(
vx_lut
 
lut
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

1557 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxC›yLUT
(
vx_lut
 
lut
, *
u£r_±r
, 
vx_íum
 
ußge
, vx_íum 
u£r_mem_ty≥
);

1597 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxM≠LUT
(
vx_lut
 
lut
, 
vx_m≠_id
 *
m≠_id
, **
±r
, 
vx_íum
 
ußge
, vx_íum 
mem_ty≥
, 
vx_bôfõld
 
Êags
);

1612 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxUnm≠LUT
(
vx_lut
 
lut
, 
vx_m≠_id
 
m≠_id
);

1628 
VX_API_ENTRY
 
vx_di°ributi⁄
 
VX_API_CALL
 
vxCª©eDi°ributi⁄
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_size
 
numBös
, 
vx_öt32
 
off£t
, 
vx_uöt32
 
ønge
);

1639 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Di°ributi⁄
(
vx_di°ributi⁄
 *
di°ributi⁄
);

1649 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyDi°ributi⁄
(
vx_di°ributi⁄
 
di°ributi⁄
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

1673 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxC›yDi°ributi⁄
(
vx_di°ributi⁄
 
di°ributi⁄
, *
u£r_±r
, 
vx_íum
 
ußge
, vx_íum 
u£r_mem_ty≥
);

1714 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxM≠Di°ributi⁄
(
vx_di°ributi⁄
 
di°ributi⁄
, 
vx_m≠_id
 *
m≠_id
, **
±r
, 
vx_íum
 
ußge
, vx_íum 
mem_ty≥
, 
vx_bôfõld
 
Êags
);

1729 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxUnm≠Di°ributi⁄
(
vx_di°ributi⁄
 
di°ributi⁄
, 
vx_m≠_id
 
m≠_id
);

1744 
VX_API_ENTRY
 
vx_thªshﬁd
 
VX_API_CALL
 
vxCª©eThªshﬁd
(
vx_c⁄ãxt
 
c
, 
vx_íum
 
thªsh_ty≥
, vx_íum 
d©a_ty≥
);

1755 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Thªshﬁd
(
vx_thªshﬁd
 *
thªsh
);

1765 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëThªshﬁdAâribuã
(
vx_thªshﬁd
 
thªsh
, 
vx_íum
 
©åibuã
, c⁄° *
±r
, 
vx_size
 
size
);

1775 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyThªshﬁd
(
vx_thªshﬁd
 
thªsh
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

1790 
VX_API_ENTRY
 
vx_m©rix
 
VX_API_CALL
 
vxCª©eM©rix
(
vx_c⁄ãxt
 
c
, 
vx_íum
 
d©a_ty≥
, 
vx_size
 
cﬁumns
, vx_sizê
rows
);

1801 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£M©rix
(
vx_m©rix
 *
m©
);

1811 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyM©rix
(
vx_m©rix
 
m©
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

1837 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxC›yM©rix
(
vx_m©rix
 
m©rix
, *
u£r_±r
, 
vx_íum
 
ußge
, vx_íum 
u£r_mem_ty≥
);

1864 
VX_API_ENTRY
 
vx_m©rix
 
VX_API_CALL
 
vxCª©eM©rixFromP©ã∫
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_íum
 
∑âîn
, 
vx_size
 
cﬁumns
, vx_sizê
rows
);

1882 
VX_API_ENTRY
 
vx_c⁄vﬁuti⁄
 
VX_API_CALL
 
vxCª©eC⁄vﬁuti⁄
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_size
 
cﬁumns
, vx_sizê
rows
);

1893 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£C⁄vﬁuti⁄
(
vx_c⁄vﬁuti⁄
 *
c⁄v
);

1903 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyC⁄vﬁuti⁄
(
vx_c⁄vﬁuti⁄
 
c⁄v
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

1913 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëC⁄vﬁuti⁄Aâribuã
(
vx_c⁄vﬁuti⁄
 
c⁄v
, 
vx_íum
 
©åibuã
, c⁄° *
±r
, 
vx_size
 
size
);

1939 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxC›yC⁄vﬁuti⁄C€fficõ¡s
(
vx_c⁄vﬁuti⁄
 
c⁄v
, *
u£r_±r
, 
vx_íum
 
ußge
, vx_íum 
u£r_mem_ty≥
);

1960 
VX_API_ENTRY
 
vx_pyømid
 
VX_API_CALL
 
vxCª©ePyømid
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_size
 
Àvñs
, 
vx_Êﬂt32
 
sˇÀ
, 
vx_uöt32
 
width
, vx_uöt32 
height
, 
vx_df_image
 
f‹m©
);

1990 
VX_API_ENTRY
 
vx_pyømid
 
VX_API_CALL
 
vxCª©eVútuÆPyømid
(
vx_gøph
 
gøph
, 
vx_size
 
Àvñs
, 
vx_Êﬂt32
 
sˇÀ
, 
vx_uöt32
 
width
, vx_uöt32 
height
, 
vx_df_image
 
f‹m©
);

2002 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Pyømid
(
vx_pyømid
 *
pyr
);

2012 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyPyømid
(
vx_pyømid
 
pyr
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

2024 
VX_API_ENTRY
 
vx_image
 
VX_API_CALL
 
vxGëPyømidLevñ
(
vx_pyømid
 
pyr
, 
vx_uöt32
 
ödex
);

2040 
VX_API_ENTRY
 
vx_ªm≠
 
VX_API_CALL
 
vxCª©eRem≠
(
vx_c⁄ãxt
 
c⁄ãxt
,

2041 
vx_uöt32
 
§c_width
,

2042 
vx_uöt32
 
§c_height
,

2043 
vx_uöt32
 
d°_width
,

2044 
vx_uöt32
 
d°_height
);

2055 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Rem≠
(
vx_ªm≠
 *
èbÀ
);

2066 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëRem≠Poöt
(
vx_ªm≠
 
èbÀ
,

2067 
vx_uöt32
 
d°_x
, vx_uöt32 
d°_y
,

2068 
vx_Êﬂt32
 
§c_x
, vx_Êﬂt32 
§c_y
);

2079 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxGëRem≠Poöt
(
vx_ªm≠
 
èbÀ
,

2080 
vx_uöt32
 
d°_x
, vx_uöt32 
d°_y
,

2081 
vx_Êﬂt32
 *
§c_x
, vx_Êﬂt32 *
§c_y
);

2091 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyRem≠
(
vx_ªm≠
 
r
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

2119 
VX_API_ENTRY
 
vx_¨øy
 
VX_API_CALL
 
vxCª©eAºay
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_íum
 
ôem_ty≥
, 
vx_size
 
ˇ∑côy
);

2152 
VX_API_ENTRY
 
vx_¨øy
 
VX_API_CALL
 
vxCª©eVútuÆAºay
(
vx_gøph
 
gøph
, 
vx_íum
 
ôem_ty≥
, 
vx_size
 
ˇ∑côy
);

2164 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Aºay
(
vx_¨øy
 *
¨r
);

2182 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyAºay
(
vx_¨øy
 
¨r
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

2207 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxAddAºayIãms
(
vx_¨øy
 
¨r
, 
vx_size
 
cou¡
, c⁄° *
±r
, vx_sizê
°ride
);

2222 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxTrunˇãAºay
(
vx_¨øy
 
¨r
, 
vx_size
 
√w_num_ôems
);

2255 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxC›yAºayR™ge
(
vx_¨øy
 
¨øy
, 
vx_size
 
ønge_°¨t
, vx_sizê
ønge_íd
, vx_sizê
u£r_°ride
, *
u£r_±r
, 
vx_íum
 
ußge
, vx_íum 
u£r_mem_ty≥
);

2308 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxM≠AºayR™ge
(
vx_¨øy
 
¨øy
, 
vx_size
 
ønge_°¨t
, vx_sizê
ønge_íd
, 
vx_m≠_id
 *
m≠_id
, vx_sizê*
°ride
, **
±r
, 
vx_íum
 
ußge
, vx_íum 
mem_ty≥
, 
vx_uöt32
 
Êags
);

2323 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxUnm≠AºayR™ge
(
vx_¨øy
 
¨øy
, 
vx_m≠_id
 
m≠_id
);

2332 
	#vxF‹m©AºayPoöãr
(
±r
, 
ödex
, 
°ride
) \

2333 (&(((
vx_uöt8
*)(
±r
))[(
ödex
Ë* (
°ride
)]))

	)

2343 
	#vxAºayIãm
(
ty≥
, 
±r
, 
ödex
, 
°ride
) \

2344 (*(
ty≥
 *)(
	`vxF‹m©AºayPoöãr
((
±r
), (
ödex
), (
°ride
))))

	)

2368 
VX_API_ENTRY
 
vx_obje˘_¨øy
 
VX_API_CALL
 
vxCª©eObje˘Aºay
(
vx_c⁄ãxt
 
c⁄ãxt
, 
vx_ª„ªn˚
 
exem∂¨
, 
vx_size
 
cou¡
);

2386 
VX_API_ENTRY
 
vx_obje˘_¨øy
 
VX_API_CALL
 
vxCª©eVútuÆObje˘Aºay
(
vx_gøph
 
gøph
, 
vx_ª„ªn˚
 
exem∂¨
, 
vx_size
 
cou¡
);

2399 
VX_API_ENTRY
 
vx_ª„ªn˚
 
VX_API_CALL
 
vxGëObje˘AºayIãm
(
vx_obje˘_¨øy
 
¨r
, 
vx_uöt32
 
ödex
);

2413 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxRñó£Obje˘Aºay
(
vx_obje˘_¨øy
 *
¨r
);

2430 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxQuîyObje˘Aºay
(
vx_obje˘_¨øy
 
¨r
, 
vx_íum
 
©åibuã
, *
±r
, 
vx_size
 
size
);

2467 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëMëaF‹m©Aâribuã
(
vx_mëa_f‹m©
 
mëa
, 
vx_íum
 
©åibuã
, c⁄° *
±r
, 
vx_size
 
size
);

2480 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
vxSëMëaF‹m©FromRe„ªn˚
(
vx_mëa_f‹m©
 
mëa
, 
vx_ª„ªn˚
 
exem∂¨
);

2482 #ifde‡ 
__˝lu•lus


	@/usr/include/VX/vx_compatibility.h

29 #i‚de‡
VX_1_0_1_NAMING_COMPATIBILITY


30 
	#VX_1_0_1_NAMING_COMPATIBILITY


	)

42 
	#vx_b‹dî_mode_e
 
vx_b‹dî_e


	)

49 
	#vx_b‹dî_mode_pﬁicy_e
 
vx_b‹dî_pﬁicy_e


	)

56 
	#_vx_b‹dî_mode_t
 
_vx_b‹dî_t


	)

63 
	#vx_b‹dî_mode_t
 
vx_b‹dî_t


	)

70 
	#VX_ENUM_BORDER_MODE
 
VX_ENUM_BORDER


	)

77 
	#VX_BORDER_MODE_UNDEFINED
 
VX_BORDER_UNDEFINED


	)

85 
	#VX_BORDER_MODE_CONSTANT
 
VX_BORDER_CONSTANT


	)

93 
	#VX_BORDER_MODE_REPLICATE
 
VX_BORDER_REPLICATE


	)

100 
	#VX_ENUM_BORDER_MODE_POLICY
 
VX_ENUM_BORDER_POLICY


	)

107 
	#VX_BORDER_MODE_UNSUPPORTED_POLICY_DEFAULT_TO_UNDEFINED
 
VX_BORDER_POLICY_DEFAULT_TO_UNDEFINED


	)

114 
	#VX_BORDER_MODE_UNSUPPORTED_POLICY_RETURN_ERROR
 
VX_BORDER_POLICY_RETURN_ERROR


	)

123 
	#VX_CONTEXT_ATTRIBUTE_VENDOR_ID
 
VX_CONTEXT_VENDOR_ID


	)

130 
	#VX_CONTEXT_ATTRIBUTE_VERSION
 
VX_CONTEXT_VERSION


	)

137 
	#VX_CONTEXT_ATTRIBUTE_UNIQUE_KERNELS
 
VX_CONTEXT_UNIQUE_KERNELS


	)

144 
	#VX_CONTEXT_ATTRIBUTE_MODULES
 
VX_CONTEXT_MODULES


	)

151 
	#VX_CONTEXT_ATTRIBUTE_REFERENCES
 
VX_CONTEXT_REFERENCES


	)

158 
	#VX_CONTEXT_ATTRIBUTE_IMPLEMENTATION
 
VX_CONTEXT_IMPLEMENTATION


	)

165 
	#VX_CONTEXT_ATTRIBUTE_EXTENSIONS_SIZE
 
VX_CONTEXT_EXTENSIONS_SIZE


	)

172 
	#VX_CONTEXT_ATTRIBUTE_EXTENSIONS
 
VX_CONTEXT_EXTENSIONS


	)

179 
	#VX_CONTEXT_ATTRIBUTE_CONVOLUTION_MAXIMUM_DIMENSION
 
VX_CONTEXT_CONVOLUTION_MAX_DIMENSION


	)

186 
	#VX_CONTEXT_ATTRIBUTE_OPTICAL_FLOW_WINDOW_MAXIMUM_DIMENSION
 
VX_CONTEXT_OPTICAL_FLOW_MAX_WINDOW_DIMENSION


	)

193 
	#VX_CONTEXT_ATTRIBUTE_IMMEDIATE_BORDER_MODE
 
VX_CONTEXT_IMMEDIATE_BORDER


	)

200 
	#VX_CONTEXT_ATTRIBUTE_UNIQUE_KERNEL_TABLE
 
VX_CONTEXT_UNIQUE_KERNEL_TABLE


	)

209 
	#VX_KERNEL_ATTRIBUTE_PARAMETERS
 
VX_KERNEL_PARAMETERS


	)

216 
	#VX_KERNEL_ATTRIBUTE_NAME
 
VX_KERNEL_NAME


	)

223 
	#VX_KERNEL_ATTRIBUTE_ENUM
 
VX_KERNEL_ENUM


	)

230 
	#VX_KERNEL_ATTRIBUTE_LOCAL_DATA_SIZE
 
VX_KERNEL_LOCAL_DATA_SIZE


	)

243 
	#VX_NODE_ATTRIBUTE_STATUS
 
VX_NODE_STATUS


	)

250 
	#VX_NODE_ATTRIBUTE_PERFORMANCE
 
VX_NODE_PERFORMANCE


	)

257 
	#VX_NODE_ATTRIBUTE_BORDER_MODE
 
VX_NODE_BORDER


	)

264 
	#VX_NODE_ATTRIBUTE_LOCAL_DATA_SIZE
 
VX_NODE_LOCAL_DATA_SIZE


	)

271 
	#VX_NODE_ATTRIBUTE_LOCAL_DATA_PTR
 
VX_NODE_LOCAL_DATA_PTR


	)

280 
	#VX_PARAMETER_ATTRIBUTE_INDEX
 
VX_PARAMETER_INDEX


	)

287 
	#VX_PARAMETER_ATTRIBUTE_DIRECTION
 
VX_PARAMETER_DIRECTION


	)

294 
	#VX_PARAMETER_ATTRIBUTE_TYPE
 
VX_PARAMETER_TYPE


	)

301 
	#VX_PARAMETER_ATTRIBUTE_STATE
 
VX_PARAMETER_STATE


	)

308 
	#VX_PARAMETER_ATTRIBUTE_REF
 
VX_PARAMETER_REF


	)

317 
	#VX_IMAGE_ATTRIBUTE_WIDTH
 
VX_IMAGE_WIDTH


	)

324 
	#VX_IMAGE_ATTRIBUTE_HEIGHT
 
VX_IMAGE_HEIGHT


	)

331 
	#VX_IMAGE_ATTRIBUTE_FORMAT
 
VX_IMAGE_FORMAT


	)

338 
	#VX_IMAGE_ATTRIBUTE_PLANES
 
VX_IMAGE_PLANES


	)

345 
	#VX_IMAGE_ATTRIBUTE_SPACE
 
VX_IMAGE_SPACE


	)

352 
	#VX_IMAGE_ATTRIBUTE_RANGE
 
VX_IMAGE_RANGE


	)

359 
	#VX_IMAGE_ATTRIBUTE_SIZE
 
VX_IMAGE_SIZE


	)

368 
	#VX_SCALAR_ATTRIBUTE_TYPE
 
VX_SCALAR_TYPE


	)

377 
	#VX_GRAPH_ATTRIBUTE_NUMNODES
 
VX_GRAPH_NUMNODES


	)

384 
	#VX_GRAPH_ATTRIBUTE_STATUS
 (
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_GRAPH
Ë+ 0x1)

	)

391 
	#VX_GRAPH_ATTRIBUTE_PERFORMANCE
 
VX_GRAPH_PERFORMANCE


	)

398 
	#VX_GRAPH_ATTRIBUTE_NUMPARAMETERS
 
VX_GRAPH_NUMPARAMETERS


	)

407 
	#VX_LUT_ATTRIBUTE_TYPE
 
VX_LUT_TYPE


	)

414 
	#VX_LUT_ATTRIBUTE_COUNT
 
VX_LUT_COUNT


	)

421 
	#VX_LUT_ATTRIBUTE_SIZE
 
VX_LUT_SIZE


	)

430 
	#VX_DISTRIBUTION_ATTRIBUTE_DIMENSIONS
 
VX_DISTRIBUTION_DIMENSIONS


	)

437 
	#VX_DISTRIBUTION_ATTRIBUTE_OFFSET
 
VX_DISTRIBUTION_OFFSET


	)

444 
	#VX_DISTRIBUTION_ATTRIBUTE_RANGE
 
VX_DISTRIBUTION_RANGE


	)

451 
	#VX_DISTRIBUTION_ATTRIBUTE_BINS
 
VX_DISTRIBUTION_BINS


	)

458 
	#VX_DISTRIBUTION_ATTRIBUTE_WINDOW
 
VX_DISTRIBUTION_WINDOW


	)

465 
	#VX_DISTRIBUTION_ATTRIBUTE_SIZE
 
VX_DISTRIBUTION_SIZE


	)

474 
	#VX_THRESHOLD_ATTRIBUTE_TYPE
 
VX_THRESHOLD_TYPE


	)

481 
	#VX_THRESHOLD_ATTRIBUTE_THRESHOLD_VALUE
 
VX_THRESHOLD_THRESHOLD_VALUE


	)

488 
	#VX_THRESHOLD_ATTRIBUTE_THRESHOLD_LOWER
 
VX_THRESHOLD_THRESHOLD_LOWER


	)

495 
	#VX_THRESHOLD_ATTRIBUTE_THRESHOLD_UPPER
 
VX_THRESHOLD_THRESHOLD_UPPER


	)

502 
	#VX_THRESHOLD_ATTRIBUTE_TRUE_VALUE
 
VX_THRESHOLD_TRUE_VALUE


	)

509 
	#VX_THRESHOLD_ATTRIBUTE_FALSE_VALUE
 
VX_THRESHOLD_FALSE_VALUE


	)

516 
	#VX_THRESHOLD_ATTRIBUTE_DATA_TYPE
 
VX_THRESHOLD_DATA_TYPE


	)

525 
	#VX_MATRIX_ATTRIBUTE_TYPE
 
VX_MATRIX_TYPE


	)

532 
	#VX_MATRIX_ATTRIBUTE_ROWS
 
VX_MATRIX_ROWS


	)

539 
	#VX_MATRIX_ATTRIBUTE_COLUMNS
 
VX_MATRIX_COLUMNS


	)

546 
	#VX_MATRIX_ATTRIBUTE_SIZE
 
VX_MATRIX_SIZE


	)

555 
	#VX_CONVOLUTION_ATTRIBUTE_ROWS
 
VX_CONVOLUTION_ROWS


	)

562 
	#VX_CONVOLUTION_ATTRIBUTE_COLUMNS
 
VX_CONVOLUTION_COLUMNS


	)

569 
	#VX_CONVOLUTION_ATTRIBUTE_SCALE
 
VX_CONVOLUTION_SCALE


	)

576 
	#VX_CONVOLUTION_ATTRIBUTE_SIZE
 
VX_CONVOLUTION_SIZE


	)

585 
	#VX_PYRAMID_ATTRIBUTE_LEVELS
 
VX_PYRAMID_LEVELS


	)

592 
	#VX_PYRAMID_ATTRIBUTE_SCALE
 
VX_PYRAMID_SCALE


	)

599 
	#VX_PYRAMID_ATTRIBUTE_WIDTH
 
VX_PYRAMID_WIDTH


	)

606 
	#VX_PYRAMID_ATTRIBUTE_HEIGHT
 
VX_PYRAMID_HEIGHT


	)

613 
	#VX_PYRAMID_ATTRIBUTE_FORMAT
 
VX_PYRAMID_FORMAT


	)

622 
	#VX_REMAP_ATTRIBUTE_SOURCE_WIDTH
 
VX_REMAP_SOURCE_WIDTH


	)

629 
	#VX_REMAP_ATTRIBUTE_SOURCE_HEIGHT
 
VX_REMAP_SOURCE_HEIGHT


	)

636 
	#VX_REMAP_ATTRIBUTE_DESTINATION_WIDTH
 
VX_REMAP_DESTINATION_WIDTH


	)

643 
	#VX_REMAP_ATTRIBUTE_DESTINATION_HEIGHT
 
VX_REMAP_DESTINATION_HEIGHT


	)

652 
	#VX_ARRAY_ATTRIBUTE_ITEMTYPE
 
VX_ARRAY_ITEMTYPE


	)

659 
	#VX_ARRAY_ATTRIBUTE_NUMITEMS
 
VX_ARRAY_NUMITEMS


	)

666 
	#VX_ARRAY_ATTRIBUTE_CAPACITY
 
VX_ARRAY_CAPACITY


	)

673 
	#VX_ARRAY_ATTRIBUTE_ITEMSIZE
 
VX_ARRAY_ITEMSIZE


	)

682 
	#VX_DELAY_ATTRIBUTE_TYPE
 
VX_DELAY_TYPE


	)

689 
	#VX_DELAY_ATTRIBUTE_SLOTS
 
VX_DELAY_SLOTS


	)

699 
	#VX_INTERPOLATION_TYPE_AREA
 
VX_INTERPOLATION_AREA


	)

707 
	#VX_INTERPOLATION_TYPE_BILINEAR
 
VX_INTERPOLATION_BILINEAR


	)

714 
	#VX_INTERPOLATION_TYPE_NEAREST_NEIGHBOR
 
VX_INTERPOLATION_NEAREST_NEIGHBOR


	)

729 
	#VX_HINT_SERIALIZE
 (
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_HINT
Ë+ 0x0)

	)

738 
	#vx_imp‹t_ty≥_e
 
vx_mem‹y_ty≥_e


	)

745 
	#VX_ENUM_IMPORT_MEM
 
VX_ENUM_MEMORY_TYPE


	)

752 
	#VX_IMPORT_TYPE_HOST
 
VX_MEMORY_TYPE_HOST


	)

759 
	#VX_IMPORT_TYPE_NONE
 
VX_MEMORY_TYPE_NONE


	)

768 
	#VX_TYPE_OBJECT_MAX
 
VX_TYPE_KHRONOS_OBJECT_END


	)

775 
	#VX_TYPE_STRUCT_MAX
 
VX_TYPE_KHRONOS_STRUCT_MAX


	)

802 
	$vx_°©us
(
	tVX_CALLBACK
 *
	tvx_kî√l_öput_vÆid©e_f
)(
	tvx_node
 
	tnode
, 
	tvx_uöt32
 
	tödex
);

823 
	$vx_°©us
(
	tVX_CALLBACK
 *
	tvx_kî√l_ouçut_vÆid©e_f
)(
	tvx_node
 
	tnode
, 
	tvx_uöt32
 
	tödex
, 
	tvx_mëa_f‹m©
 
	tmëa
);

838 #ifde‡
__˝lu•lus


866 
VX_API_ENTRY
 
vx_kî√l
 
VX_API_CALL
 
	`vxAddKî√l
(
vx_c⁄ãxt
 
c⁄ãxt
,

867 c⁄° 
vx_ch¨
 
«me
[
VX_MAX_KERNEL_NAME
],

868 
vx_íum
 
íumî©i⁄
,

869 
vx_kî√l_f
 
func_±r
,

870 
vx_uöt32
 
numP¨ams
,

871 
vx_kî√l_öput_vÆid©e_f
 
öput
,

872 
vx_kî√l_ouçut_vÆid©e_f
 
ouçut
,

873 
vx_kî√l_öôülize_f
 
öô
,

874 
vx_kî√l_deöôülize_f
 
deöô
);

928 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxAc˚ssImageP©ch
(
vx_image
 
image
,

929 c⁄° 
vx_ª˘™gÀ_t
 *
ª˘
,

930 
vx_uöt32
 
∂™e_ödex
,

931 
vx_imagï©ch_addªssög_t
 *
addr
,

932 **
±r
,

933 
vx_íum
 
ußge
);

965 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxCommôImageP©ch
(
vx_image
 
image
,

966 c⁄° 
vx_ª˘™gÀ_t
 *
ª˘
,

967 
vx_uöt32
 
∂™e_ödex
,

968 c⁄° 
vx_imagï©ch_addªssög_t
 *
addr
,

969 c⁄° *
±r
);

1011 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxAc˚ssAºayR™ge
(
vx_¨øy
 
¨r
, 
vx_size
 
°¨t
, vx_sizê
íd
, vx_sizê*
°ride
, **
±r
, 
vx_íum
 
ußge
);

1032 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxCommôAºayR™ge
(
vx_¨øy
 
¨r
, 
vx_size
 
°¨t
, vx_sizê
íd
, c⁄° *
±r
);

1054 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxAc˚ssDi°ributi⁄
(
vx_di°ributi⁄
 
di°ributi⁄
, **
±r
, 
vx_íum
 
ußge
);

1073 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxCommôDi°ributi⁄
(
vx_di°ributi⁄
 
di°ributi⁄
, c⁄° * 
±r
);

1107 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxAc˚ssLUT
(
vx_lut
 
lut
, **
±r
, 
vx_íum
 
ußge
);

1129 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxCommôLUT
(
vx_lut
 
lut
, c⁄° *
±r
);

1145 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxRódM©rix
(
vx_m©rix
 
m©
, *
¨øy
);

1161 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxWrôeM©rix
(
vx_m©rix
 
m©
, c⁄° *
¨øy
);

1177 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxRódC⁄vﬁuti⁄C€fficõ¡s
(
vx_c⁄vﬁuti⁄
 
c⁄v
, 
vx_öt16
 *
¨øy
);

1193 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxWrôeC⁄vﬁuti⁄C€fficõ¡s
(
vx_c⁄vﬁuti⁄
 
c⁄v
, c⁄° 
vx_öt16
 *
¨øy
);

1213 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxRódSˇœrVÆue
(
vx_sˇœr
 
ªf
, *
±r
);

1233 
VX_API_ENTRY
 
vx_°©us
 
VX_API_CALL
 
	`vxWrôeSˇœrVÆue
(
vx_sˇœr
 
ªf
, c⁄° *
±r
);

1235 #ifde‡
__˝lu•lus


1236 
	}
}

	@/usr/include/VX/vx_kernels.h

29 #i‚de‡
_OPENVX_KERNELS_H_


30 
	#_OPENVX_KERNELS_H_


	)

37 #ifde‡ 
__˝lu•lus


42 
	evx_libøry_e
 {

44 
VX_LIBRARY_KHR_BASE
 = 0x0,

60 
	evx_kî√l_e
 {

67 
VX_KERNEL_COLOR_CONVERT
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x1,

77 
VX_KERNEL_CHANNEL_EXTRACT
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x2,

85 
VX_KERNEL_CHANNEL_COMBINE
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x3,

90 
VX_KERNEL_SOBEL_3x3
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x4,

97 
VX_KERNEL_MAGNITUDE
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x5,

104 
VX_KERNEL_PHASE
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x6,

113 
VX_KERNEL_SCALE_IMAGE
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x7,

118 
VX_KERNEL_TABLE_LOOKUP
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x8,

123 
VX_KERNEL_HISTOGRAM
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x9,

128 
VX_KERNEL_EQUALIZE_HISTOGRAM
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0xA,

133 
VX_KERNEL_ABSDIFF
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0xB,

138 
VX_KERNEL_MEAN_STDDEV
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0xC,

143 
VX_KERNEL_THRESHOLD
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0xD,

148 
VX_KERNEL_INTEGRAL_IMAGE
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0xE,

153 
VX_KERNEL_DILATE_3x3
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0xF,

158 
VX_KERNEL_ERODE_3x3
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x10,

163 
VX_KERNEL_MEDIAN_3x3
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x11,

168 
VX_KERNEL_BOX_3x3
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x12,

173 
VX_KERNEL_GAUSSIAN_3x3
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x13,

178 
VX_KERNEL_CUSTOM_CONVOLUTION
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x14,

183 
VX_KERNEL_GAUSSIAN_PYRAMID
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x15,

188 
VX_KERNEL_ACCUMULATE
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x16,

193 
VX_KERNEL_ACCUMULATE_WEIGHTED
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x17,

198 
VX_KERNEL_ACCUMULATE_SQUARE
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x18,

203 
VX_KERNEL_MINMAXLOC
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x19,

208 
VX_KERNEL_CONVERTDEPTH
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x1A,

213 
VX_KERNEL_CANNY_EDGE_DETECTOR
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x1B,

218 
VX_KERNEL_AND
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x1C,

223 
VX_KERNEL_OR
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x1D,

228 
VX_KERNEL_XOR
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x1E,

233 
VX_KERNEL_NOT
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x1F,

238 
VX_KERNEL_MULTIPLY
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x20,

243 
VX_KERNEL_ADD
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x21,

248 
VX_KERNEL_SUBTRACT
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x22,

253 
VX_KERNEL_WARP_AFFINE
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x23,

258 
VX_KERNEL_WARP_PERSPECTIVE
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x24,

263 
VX_KERNEL_HARRIS_CORNERS
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x25,

268 
VX_KERNEL_FAST_CORNERS
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x26,

273 
VX_KERNEL_OPTICAL_FLOW_PYR_LK
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x27,

278 
VX_KERNEL_REMAP
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x28,

283 
VX_KERNEL_HALFSCALE_GAUSSIAN
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x29,

290 
VX_KERNEL_LAPLACIAN_PYRAMID
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x2A,

295 
VX_KERNEL_LAPLACIAN_RECONSTRUCT
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x2B,

300 
VX_KERNEL_NON_LINEAR_FILTER
 = 
VX_KERNEL_BASE
(
VX_ID_KHRONOS
, 
VX_LIBRARY_KHR_BASE
) + 0x2C,

303 
VX_KERNEL_MAX_1_0
,

306 #ifde‡ 
__˝lu•lus


	@/usr/include/VX/vx_nodes.h

29 #i‚de‡
_OPENVX_NODES_H_


30 
	#_OPENVX_NODES_H_


	)

38 #ifde‡
__˝lu•lus


51 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxCﬁ‹C⁄vîtNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
);

63 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxCh™√lExåa˘Node
(
vx_gøph
 
gøph
,

64 
vx_image
 
öput
,

65 
vx_íum
 
ch™√l
,

66 
vx_image
 
ouçut
);

80 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxCh™√lComböeNode
(
vx_gøph
 
gøph
,

81 
vx_image
 
∂™e0
,

82 
vx_image
 
∂™e1
,

83 
vx_image
 
∂™e2
,

84 
vx_image
 
∂™e3
,

85 
vx_image
 
ouçut
);

97 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxPha£Node
(
vx_gøph
 
gøph
, 
vx_image
 
gød_x
, vx_imagê
gød_y
, vx_imagê
‹õ¡©i⁄
);

109 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxSobñ3x3Node
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut_x
, vx_imagê
ouçut_y
);

122 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxMagnôudeNode
(
vx_gøph
 
gøph
, 
vx_image
 
gød_x
, vx_imagê
gød_y
, vx_imagê
mag
);

136 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxSˇÀImageNode
(
vx_gøph
 
gøph
, 
vx_image
 
§c
, vx_imagê
d°
, 
vx_íum
 
ty≥
);

147 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxTabÀLookupNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_lut
 
lut
, vx_imagê
ouçut
);

157 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxHi°ogømNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_di°ributi⁄
 
di°ributi⁄
);

167 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxEquÆizeHi°Node
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
);

177 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxAbsDiffNode
(
vx_gøph
 
gøph
, 
vx_image
 
ö1
, vx_imagê
ö2
, vx_imagê
out
);

188 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxMónStdDevNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_sˇœr
 
món
, vx_sˇœ∏
°ddev
);

201 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxThªshﬁdNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_thªshﬁd
 
thªsh
, vx_imagê
ouçut
);

211 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxI¡egølImageNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
);

221 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxErode3x3Node
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
);

231 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxDû©e3x3Node
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
);

241 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxMedün3x3Node
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
);

251 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxBox3x3Node
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
);

261 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxGaussün3x3Node
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
);

274 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxN⁄LöórFûãrNode
(
vx_gøph
 
gøph
, 
vx_íum
 
fun˘i⁄
, 
vx_image
 
öput
, 
vx_m©rix
 
mask
, vx_imagê
ouçut
);

285 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxC⁄vﬁveNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_c⁄vﬁuti⁄
 
c⁄v
, vx_imagê
ouçut
);

296 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxGaussünPyømidNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_pyømid
 
gaussün
);

308 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxL≠œcünPyømidNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
,

309 
vx_pyømid
 
œ∂acün
, 
vx_image
 
ouçut
);

322 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxL≠œcünRec⁄°ru˘Node
(
vx_gøph
 
gøph
, 
vx_pyømid
 
œ∂acün
, 
vx_image
 
öput
,

323 
vx_image
 
ouçut
);

333 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxAccumuœãImageNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
accum
);

344 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxAccumuœãWeighãdImageNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_sˇœr
 
Æpha
, vx_imagê
accum
);

355 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxAccumuœãSqu¨eImageNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_sˇœr
 
shi·
, vx_imagê
accum
);

370 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxMöMaxLocNode
(
vx_gøph
 
gøph
,

371 
vx_image
 
öput
,

372 
vx_sˇœr
 
möVÆ
, vx_sˇœ∏
maxVÆ
,

373 
vx_¨øy
 
möLoc
, vx_¨øy 
maxLoc
,

374 
vx_sˇœr
 
möCou¡
, vx_sˇœ∏
maxCou¡
);

385 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxAndNode
(
vx_gøph
 
gøph
, 
vx_image
 
ö1
, vx_imagê
ö2
, vx_imagê
out
);

396 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxOrNode
(
vx_gøph
 
gøph
, 
vx_image
 
ö1
, vx_imagê
ö2
, vx_imagê
out
);

407 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxX‹Node
(
vx_gøph
 
gøph
, 
vx_image
 
ö1
, vx_imagê
ö2
, vx_imagê
out
);

417 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxNŸNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
);

431 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxMu…ùlyNode
(
vx_gøph
 
gøph
,

432 
vx_image
 
ö1
, vx_imagê
ö2
,

433 
vx_sˇœr
 
sˇÀ
,

434 
vx_íum
 
ovîÊow_pﬁicy
,

435 
vx_íum
 
roundög_pﬁicy
,

436 
vx_image
 
out
);

448 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxAddNode
(
vx_gøph
 
gøph
,

449 
vx_image
 
ö1
, vx_imagê
ö2
,

450 
vx_íum
 
pﬁicy
,

451 
vx_image
 
out
);

463 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxSubåa˘Node
(
vx_gøph
 
gøph
,

464 
vx_image
 
ö1
, vx_imagê
ö2
,

465 
vx_íum
 
pﬁicy
,

466 
vx_image
 
out
);

478 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxC⁄vîtDïthNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
, 
vx_íum
 
pﬁicy
, 
vx_sˇœr
 
shi·
);

494 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxC™nyEdgeDëe˘‹Node
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_thªshﬁd
 
hy°
,

495 
vx_öt32
 
gødõ¡_size
, 
vx_íum
 
n‹m_ty≥
,

496 
vx_image
 
ouçut
);

511 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxW¨pAfföeNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_m©rix
 
m©rix
, 
vx_íum
 
ty≥
, vx_imagê
ouçut
);

526 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxW¨pPî•e˘iveNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_m©rix
 
m©rix
, 
vx_íum
 
ty≥
, vx_imagê
ouçut
);

544 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxH¨risC‹√rsNode
(
vx_gøph
 
gøph
,

545 
vx_image
 
öput
,

546 
vx_sˇœr
 
°ªngth_thªsh
,

547 
vx_sˇœr
 
mö_di°™˚
,

548 
vx_sˇœr
 
£nsôivôy
,

549 
vx_öt32
 
gødõ¡_size
,

550 
vx_öt32
 
block_size
,

551 
vx_¨øy
 
c‹√rs
,

552 
vx_sˇœr
 
num_c‹√rs
);

567 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxFa°C‹√rsNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, 
vx_sˇœr
 
°ªngth_thªsh
, 
vx_boﬁ
 
n⁄max_suµªssi⁄
, 
vx_¨øy
 
c‹√rs
, vx_sˇœ∏
num_c‹√rs
);

590 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxO±iˇlFlowPyrLKNode
(
vx_gøph
 
gøph
,

591 
vx_pyømid
 
ﬁd_images
,

592 
vx_pyømid
 
√w_images
,

593 
vx_¨øy
 
ﬁd_poöts
,

594 
vx_¨øy
 
√w_poöts_e°im©es
,

595 
vx_¨øy
 
√w_poöts
,

596 
vx_íum
 
ãrmö©i⁄
,

597 
vx_sˇœr
 
ïsû⁄
,

598 
vx_sˇœr
 
num_ôî©i⁄s
,

599 
vx_sˇœr
 
u£_öôül_e°im©e
,

600 
vx_size
 
wödow_dimísi⁄
);

615 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxRem≠Node
(
vx_gøph
 
gøph
,

616 
vx_image
 
öput
,

617 
vx_ªm≠
 
èbÀ
,

618 
vx_íum
 
pﬁicy
,

619 
vx_image
 
ouçut
);

636 
VX_API_ENTRY
 
vx_node
 
VX_API_CALL
 
vxHÆfSˇÀGaussünNode
(
vx_gøph
 
gøph
, 
vx_image
 
öput
, vx_imagê
ouçut
, 
vx_öt32
 
kî√l_size
);

638 #ifde‡
__˝lu•lus


	@/usr/include/VX/vx_types.h

29 #i‚de‡
_OPENVX_TYPES_H_


30 
	#_OPENVX_TYPES_H_


	)

37 
	~<°döt.h
>

38 
	~<°ddef.h
>

39 
	~<°rög.h
>

49 #i‚de‡
VX_API_ENTRY


50 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN64
Ë|| deföed(
__CYGWIN__
)

51 #i‡
deföed
(
OPENVX_BUILDING
)

52 #i‡
deföed
(
__GNUC__
)

53 
	#VX_API_ENTRY
 
	`__©åibuã__
((
dŒexp‹t
))

	)

55 
	#VX_API_ENTRY
 
	`__de˛•ec
(
dŒexp‹t
)

	)

58 #i‡
deföed
(
__GNUC__
)

59 
	#VX_API_ENTRY
 
	`__©åibuã__
((
dŒimp‹t
))

	)

61 
	#VX_API_ENTRY
 
	`__de˛•ec
(
dŒimp‹t
)

	)

65 #i‡(
__GNUC__
 >= 4)

66 
	#VX_API_ENTRY
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

68 
	#VX_API_ENTRY


	)

72 #i‚de‡
VX_API_CALL


73 #i‡
deföed
(
_WIN32
)

74 
	#VX_API_CALL
 
__°dˇŒ


	)

76 
	#VX_API_CALL


	)

79 #i‚de‡
VX_CALLBACK


80 #i‡
deföed
(
_WIN32
)

81 
	#VX_CALLBACK
 
__°dˇŒ


	)

83 
	#VX_CALLBACK


	)

90 
	tvx_ch¨
;

95 
uöt8_t
 
	tvx_uöt8
;

100 
uöt16_t
 
	tvx_uöt16
;

105 
uöt32_t
 
	tvx_uöt32
;

110 
uöt64_t
 
	tvx_uöt64
;

115 
öt8_t
 
	tvx_öt8
;

120 
öt16_t
 
	tvx_öt16
;

125 
öt32_t
 
	tvx_öt32
;

130 
öt64_t
 
	tvx_öt64
;

132 
uöt32_t
 
	tvx_bôfõld
;

134 #i‡
deföed
(
EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT
)

139 
hÊﬂt
 
	tvx_Êﬂt16
;

145 
	tvx_Êﬂt32
;

150 
	tvx_Êﬂt64
;

161 
_vx_ª„ªn˚
 *
	tvx_ª„ªn˚
;

168 
öt32_t
 
	tvx_íum
;

173 
size_t
 
	tvx_size
;

178 
uöt32_t
 
	tvx_df_image
;

183 
uöçå_t
 
	tvx_m≠_id
;

191 
_vx_sˇœr
 *
	tvx_sˇœr
;

198 
_vx_image
 *
	tvx_image
;

206 
_vx_kî√l
 *
	tvx_kî√l
;

213 
_vx_∑ømëî
 *
	tvx_∑ømëî
;

220 
_vx_node
 *
	tvx_node
;

227 
_vx_gøph
 *
	tvx_gøph
;

234 
_vx_c⁄ãxt
 *
	tvx_c⁄ãxt
;

242 
_vx_dñay
 *
	tvx_dñay
;

248 
_vx_lut
 *
	tvx_lut
;

255 
_vx_di°ributi⁄
 *
	tvx_di°ributi⁄
;

261 
_vx_m©rix
 *
	tvx_m©rix
;

267 
_vx_pyømid
 *
	tvx_pyømid
;

274 
_vx_thªshﬁd
 *
	tvx_thªshﬁd
;

280 
_vx_c⁄vﬁuti⁄
 *
	tvx_c⁄vﬁuti⁄
;

286 
_vx_ªm≠
 *
	tvx_ªm≠
;

291 
_vx_¨øy
 *
	tvx_¨øy
;

296 
_vx_obje˘_¨øy
 *
	tvx_obje˘_¨øy
;

309 
	e_vx_boﬁ_e
 {

311 
	mvx_Ál£_e
 = 0,

313 
	mvx_åue_e
,

314 } 
	tvx_boﬁ
;

325 
_vx_mëa_f‹m©
* 
	tvx_mëa_f‹m©
;

330 
	evx_ty≥_e
 {

331 
	mVX_TYPE_INVALID
 = 0x000,

332 
	mVX_TYPE_CHAR
 = 0x001,

333 
	mVX_TYPE_INT8
 = 0x002,

334 
	mVX_TYPE_UINT8
 = 0x003,

335 
	mVX_TYPE_INT16
 = 0x004,

336 
	mVX_TYPE_UINT16
 = 0x005,

337 
	mVX_TYPE_INT32
 = 0x006,

338 
	mVX_TYPE_UINT32
 = 0x007,

339 
	mVX_TYPE_INT64
 = 0x008,

340 
	mVX_TYPE_UINT64
 = 0x009,

341 
	mVX_TYPE_FLOAT32
 = 0x00A,

342 
	mVX_TYPE_FLOAT64
 = 0x00B,

343 
	mVX_TYPE_ENUM
 = 0x00C,

344 
	mVX_TYPE_SIZE
 = 0x00D,

345 
	mVX_TYPE_DF_IMAGE
 = 0x00E,

346 #i‡
deföed
(
EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT
)

347 
	mVX_TYPE_FLOAT16
 = 0x00F,

349 
	mVX_TYPE_BOOL
 = 0x010,

353 
	mVX_TYPE_SCALAR_MAX
,

355 
	mVX_TYPE_RECTANGLE
 = 0x020,

356 
	mVX_TYPE_KEYPOINT
 = 0x021,

357 
	mVX_TYPE_COORDINATES2D
 = 0x022,

358 
	mVX_TYPE_COORDINATES3D
 = 0x023,

360 
	mVX_TYPE_USER_STRUCT_START
 = 0x100,

361 
	mVX_TYPE_VENDOR_STRUCT_START
 = 0x400,

362 
	mVX_TYPE_KHRONOS_OBJECT_START
 = 0x800,

363 
	mVX_TYPE_VENDOR_OBJECT_START
 = 0xC00,

365 
	mVX_TYPE_KHRONOS_STRUCT_MAX
 = 
VX_TYPE_USER_STRUCT_START
 - 1,

367 
	mVX_TYPE_USER_STRUCT_END
 = 
VX_TYPE_VENDOR_STRUCT_START
 - 1,

368 
	mVX_TYPE_VENDOR_STRUCT_END
 = 
VX_TYPE_KHRONOS_OBJECT_START
 - 1,

369 
	mVX_TYPE_KHRONOS_OBJECT_END
 = 
VX_TYPE_VENDOR_OBJECT_START
 - 1,

370 
	mVX_TYPE_VENDOR_OBJECT_END
 = 0xFFF,

373 
	mVX_TYPE_REFERENCE
 = 0x800,

374 
	mVX_TYPE_CONTEXT
 = 0x801,

375 
	mVX_TYPE_GRAPH
 = 0x802,

376 
	mVX_TYPE_NODE
 = 0x803,

377 
	mVX_TYPE_KERNEL
 = 0x804,

378 
	mVX_TYPE_PARAMETER
 = 0x805,

379 
	mVX_TYPE_DELAY
 = 0x806,

380 
	mVX_TYPE_LUT
 = 0x807,

381 
	mVX_TYPE_DISTRIBUTION
 = 0x808,

382 
	mVX_TYPE_PYRAMID
 = 0x809,

383 
	mVX_TYPE_THRESHOLD
 = 0x80A,

384 
	mVX_TYPE_MATRIX
 = 0x80B,

385 
	mVX_TYPE_CONVOLUTION
 = 0x80C,

386 
	mVX_TYPE_SCALAR
 = 0x80D,

387 
	mVX_TYPE_ARRAY
 = 0x80E,

388 
	mVX_TYPE_IMAGE
 = 0x80F,

389 
	mVX_TYPE_REMAP
 = 0x810,

390 
	mVX_TYPE_ERROR
 = 0x811,

391 
	mVX_TYPE_META_FORMAT
 = 0x812,

392 
	mVX_TYPE_OBJECT_ARRAY
 = 0x813,

402 
	evx_°©us_e
 {

403 
	mVX_STATUS_MIN
 = -25,

405 
	mVX_ERROR_REFERENCE_NONZERO
 = -24,

406 
	mVX_ERROR_MULTIPLE_WRITERS
 = -23,

407 
	mVX_ERROR_GRAPH_ABANDONED
 = -22,

408 
	mVX_ERROR_GRAPH_SCHEDULED
 = -21,

409 
	mVX_ERROR_INVALID_SCOPE
 = -20,

410 
	mVX_ERROR_INVALID_NODE
 = -19,

411 
	mVX_ERROR_INVALID_GRAPH
 = -18,

412 
	mVX_ERROR_INVALID_TYPE
 = -17,

413 
	mVX_ERROR_INVALID_VALUE
 = -16,

414 
	mVX_ERROR_INVALID_DIMENSION
 = -15,

415 
	mVX_ERROR_INVALID_FORMAT
 = -14,

416 
	mVX_ERROR_INVALID_LINK
 = -13,

417 
	mVX_ERROR_INVALID_REFERENCE
 = -12,

418 
	mVX_ERROR_INVALID_MODULE
 = -11,

419 
	mVX_ERROR_INVALID_PARAMETERS
 = -10,

420 
	mVX_ERROR_OPTIMIZED_AWAY
 = -9,

421 
	mVX_ERROR_NO_MEMORY
 = -8,

422 
	mVX_ERROR_NO_RESOURCES
 = -7,

423 
	mVX_ERROR_NOT_COMPATIBLE
 = -6,

424 
	mVX_ERROR_NOT_ALLOCATED
 = -5,

425 
	mVX_ERROR_NOT_SUFFICIENT
 = -4,

426 
	mVX_ERROR_NOT_SUPPORTED
 = -3,

427 
	mVX_ERROR_NOT_IMPLEMENTED
 = -2,

428 
	mVX_FAILURE
 = -1,

429 
	mVX_SUCCESS
 = 0,

436 
vx_íum
 
	tvx_°©us
;

442 
vx_íum
 
	tvx_a˘i⁄
;

451 
	$vx_a˘i⁄
 (
	tVX_CALLBACK
 *
	tvx_nodecom∂ëe_f
)(
	tvx_node
 
	tnode
);

457 
	#VX_VENDOR_MASK
 (0xFFF00000)

	)

464 
	#VX_TYPE_MASK
 (0x000FFF00)

	)

470 
	#VX_LIBRARY_MASK
 (0x000FF000)

	)

475 
	#VX_KERNEL_MASK
 (0x00000FFF)

	)

480 
	#VX_ATTRIBUTE_ID_MASK
 (0x000000FF)

	)

485 
	#VX_ENUM_TYPE_MASK
 (0x000FF000)

	)

490 
	#VX_ENUM_MASK
 (0x00000FFF)

	)

495 
	#VX_VENDOR
(
e
Ë(((
vx_uöt32
Î & 
VX_VENDOR_MASK
Ë>> 20)

	)

500 
	#VX_TYPE
(
e
Ë(((
vx_uöt32
Î & 
VX_TYPE_MASK
Ë>> 8)

	)

505 
	#VX_ENUM_TYPE
(
e
Ë(((
vx_uöt32
Î & 
VX_ENUM_TYPE_MASK
Ë>> 12)

	)

510 
	#VX_LIBRARY
(
e
Ë(((
vx_uöt32
Î & 
VX_LIBRARY_MASK
Ë>> 12)

	)

517 
	#VX_DF_IMAGE
(
a
,
b
,
c
,
d
Ë(◊Ë| (b << 8Ë| (¯<< 16Ë| (d << 24))

	)

524 
	#VX_ATTRIBUTE_BASE
(
víd‹
, 
obje˘
Ë(((víd‹Ë<< 20Ë| (obje˘ << 8))

	)

531 
	#VX_KERNEL_BASE
(
víd‹
, 
lib
Ë(((víd‹Ë<< 20Ë| (lib << 12))

	)

541 
	#VX_ENUM_BASE
(
víd‹
, 
id
Ë(((víd‹Ë<< 20Ë| (id << 12))

	)

547 
	evx_íum_e
 {

548 
VX_ENUM_DIRECTION
 = 0x00,

549 
VX_ENUM_ACTION
 = 0x01,

550 
VX_ENUM_HINT
 = 0x02,

551 
VX_ENUM_DIRECTIVE
 = 0x03,

552 
VX_ENUM_INTERPOLATION
 = 0x04,

553 
VX_ENUM_OVERFLOW
 = 0x05,

554 
VX_ENUM_COLOR_SPACE
 = 0x06,

555 
VX_ENUM_COLOR_RANGE
 = 0x07,

556 
VX_ENUM_PARAMETER_STATE
 = 0x08,

557 
VX_ENUM_CHANNEL
 = 0x09,

558 
VX_ENUM_CONVERT_POLICY
 = 0x0A,

559 
VX_ENUM_THRESHOLD_TYPE
 = 0x0B,

560 
VX_ENUM_BORDER
 = 0x0C,

561 
VX_ENUM_COMPARISON
 = 0x0D,

562 
VX_ENUM_MEMORY_TYPE
 = 0x0E,

563 
VX_ENUM_TERM_CRITERIA
 = 0x0F,

564 
VX_ENUM_NORM_TYPE
 = 0x10,

565 
VX_ENUM_ACCESSOR
 = 0x11,

566 
VX_ENUM_ROUND_POLICY
 = 0x12,

567 
VX_ENUM_TARGET
 = 0x13,

568 
VX_ENUM_BORDER_POLICY
 = 0x14,

569 
VX_ENUM_GRAPH_STATE
 = 0x15,

570 
VX_ENUM_NONLINEAR
 = 0x16,

571 
VX_ENUM_PATTERN
 = 0x17,

578 
	evx_a˘i⁄_e
 {

580 
VX_ACTION_CONTINUE
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_ACTION
) + 0x0,

582 
VX_ACTION_ABANDON
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_ACTION
) + 0x1,

588 
	evx_dúe˘i⁄_e
 {

590 
VX_INPUT
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_DIRECTION
) + 0x0,

592 
VX_OUTPUT
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_DIRECTION
) + 0x1,

594 
VX_BIDIRECTIONAL
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_DIRECTION
) + 0x2,

602 
	evx_höt_e
 {

606 
VX_HINT_PERFORMANCE_DEFAULT
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_HINT
) + 0x1,

610 
VX_HINT_PERFORMANCE_LOW_POWER
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_HINT
) + 0x2,

614 
VX_HINT_PERFORMANCE_HIGH_SPEED
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_HINT
) + 0x3,

624 
	evx_dúe˘ive_e
 {

626 
VX_DIRECTIVE_DISABLE_LOGGING
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_DIRECTIVE
) + 0x0,

628 
VX_DIRECTIVE_ENABLE_LOGGING
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_DIRECTIVE
) + 0x1,

630 
VX_DIRECTIVE_DISABLE_PERFORMANCE
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_DIRECTIVE
) + 0x2,

632 
VX_DIRECTIVE_ENABLE_PERFORMANCE
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_DIRECTIVE
) + 0x3,

638 
	evx_gøph_°©e_e
 {

640 
VX_GRAPH_STATE_UNVERIFIED
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_GRAPH_STATE
) + 0x0,

642 
VX_GRAPH_STATE_VERIFIED
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_GRAPH_STATE
) + 0x1,

644 
VX_GRAPH_STATE_RUNNING
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_GRAPH_STATE
) + 0x2,

646 
VX_GRAPH_STATE_ABANDONED
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_GRAPH_STATE
) + 0x3,

648 
VX_GRAPH_STATE_COMPLETED
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_GRAPH_STATE
) + 0x4,

654 
	evx_gøph_©åibuã_e
 {

656 
VX_GRAPH_NUMNODES
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_GRAPH
) + 0x0,

661 
VX_GRAPH_PERFORMANCE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_GRAPH
) + 0x2,

663 
VX_GRAPH_NUMPARAMETERS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_GRAPH
) + 0x3,

665 
VX_GRAPH_STATE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_GRAPH
) + 0x4,

671 
	evx_c⁄vît_pﬁicy_e
 {

675 
VX_CONVERT_POLICY_WRAP
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CONVERT_POLICY
) + 0x0,

677 
VX_CONVERT_POLICY_SATURATE
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CONVERT_POLICY
) + 0x1,

684 
	evx_df_image_e
 {

686 
VX_DF_IMAGE_VIRT
 = 
	`VX_DF_IMAGE
('V','I','R','T'),

690 
VX_DF_IMAGE_RGB
 = 
	`VX_DF_IMAGE
('R','G','B','2'),

695 
VX_DF_IMAGE_RGBX
 = 
	`VX_DF_IMAGE
('R','G','B','A'),

699 
VX_DF_IMAGE_NV12
 = 
	`VX_DF_IMAGE
('N','V','1','2'),

703 
VX_DF_IMAGE_NV21
 = 
	`VX_DF_IMAGE
('N','V','2','1'),

707 
VX_DF_IMAGE_UYVY
 = 
	`VX_DF_IMAGE
('U','Y','V','Y'),

711 
VX_DF_IMAGE_YUYV
 = 
	`VX_DF_IMAGE
('Y','U','Y','V'),

715 
VX_DF_IMAGE_IYUV
 = 
	`VX_DF_IMAGE
('I','Y','U','V'),

719 
VX_DF_IMAGE_YUV4
 = 
	`VX_DF_IMAGE
('Y','U','V','4'),

724 
VX_DF_IMAGE_U8
 = 
	`VX_DF_IMAGE
('U','0','0','8'),

729 
VX_DF_IMAGE_U16
 = 
	`VX_DF_IMAGE
('U','0','1','6'),

734 
VX_DF_IMAGE_S16
 = 
	`VX_DF_IMAGE
('S','0','1','6'),

739 
VX_DF_IMAGE_U32
 = 
	`VX_DF_IMAGE
('U','0','3','2'),

744 
VX_DF_IMAGE_S32
 = 
	`VX_DF_IMAGE
('S','0','3','2'),

750 
	evx_èrgë_e
 {

752 
VX_TARGET_ANY
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_TARGET
) + 0x0000,

754 
VX_TARGET_STRING
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_TARGET
) + 0x0001,

756 
VX_TARGET_VENDOR_BEGIN
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_TARGET
) + 0x1000,

762 
	evx_ª„ªn˚_©åibuã_e
 {

764 
VX_REF_ATTRIBUTE_COUNT
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_REFERENCE
) + 0x0,

766 
VX_REF_ATTRIBUTE_TYPE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_REFERENCE
) + 0x1,

768 
VX_REF_ATTRIBUTE_NAME
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_REFERENCE
) + 0x2,

774 
	evx_c⁄ãxt_©åibuã_e
 {

776 
VX_CONTEXT_VENDOR_ID
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0x0,

778 
VX_CONTEXT_VERSION
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0x1,

780 
VX_CONTEXT_UNIQUE_KERNELS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0x2,

782 
VX_CONTEXT_MODULES
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0x3,

784 
VX_CONTEXT_REFERENCES
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0x4,

786 
VX_CONTEXT_IMPLEMENTATION
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0x5,

788 
VX_CONTEXT_EXTENSIONS_SIZE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0x6,

794 
VX_CONTEXT_EXTENSIONS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0x7,

805 
VX_CONTEXT_CONVOLUTION_MAX_DIMENSION
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0x8,

809 
VX_CONTEXT_OPTICAL_FLOW_MAX_WINDOW_DIMENSION
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0x9,

814 
VX_CONTEXT_IMMEDIATE_BORDER
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0xA,

820 
VX_CONTEXT_UNIQUE_KERNEL_TABLE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0xB,

826 
VX_CONTEXT_IMMEDIATE_BORDER_POLICY
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0xC,

832 
VX_CONTEXT_NONLINEAR_MAX_DIMENSION
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONTEXT
) + 0xd,

838 
	evx_kî√l_©åibuã_e
 {

842 
VX_KERNEL_PARAMETERS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_KERNEL
) + 0x0,

846 
VX_KERNEL_NAME
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_KERNEL
) + 0x1,

850 
VX_KERNEL_ENUM
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_KERNEL
) + 0x2,

856 
VX_KERNEL_LOCAL_DATA_SIZE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_KERNEL
) + 0x3,

862 
	evx_node_©åibuã_e
 {

864 
VX_NODE_STATUS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_NODE
) + 0x0,

870 
VX_NODE_PERFORMANCE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_NODE
) + 0x1,

874 
VX_NODE_BORDER
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_NODE
) + 0x2,

879 
VX_NODE_LOCAL_DATA_SIZE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_NODE
) + 0x3,

884 
VX_NODE_LOCAL_DATA_PTR
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_NODE
) + 0x4,

888 
VX_NODE_PARAMETERS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_NODE
) + 0x5,

892 
VX_NODE_IS_REPLICATED
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_NODE
) + 0x6,

896 
VX_NODE_REPLICATE_FLAGS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_NODE
) + 0x7,

900 
VX_NODE_VALID_RECT_RESET
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_NODE
) + 0x8,

906 
	evx_∑ømëî_©åibuã_e
 {

908 
VX_PARAMETER_INDEX
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_PARAMETER
) + 0x0,

910 
VX_PARAMETER_DIRECTION
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_PARAMETER
) + 0x1,

912 
VX_PARAMETER_TYPE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_PARAMETER
) + 0x2,

914 
VX_PARAMETER_STATE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_PARAMETER
) + 0x3,

916 
VX_PARAMETER_REF
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_PARAMETER
) + 0x4,

922 
	evx_image_©åibuã_e
 {

924 
VX_IMAGE_WIDTH
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_IMAGE
) + 0x0,

926 
VX_IMAGE_HEIGHT
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_IMAGE
) + 0x1,

928 
VX_IMAGE_FORMAT
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_IMAGE
) + 0x2,

930 
VX_IMAGE_PLANES
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_IMAGE
) + 0x3,

932 
VX_IMAGE_SPACE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_IMAGE
) + 0x4,

934 
VX_IMAGE_RANGE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_IMAGE
) + 0x5,

936 
VX_IMAGE_SIZE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_IMAGE
) + 0x6,

939 
VX_IMAGE_MEMORY_TYPE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_IMAGE
) + 0x7,

945 
	evx_sˇœr_©åibuã_e
 {

947 
VX_SCALAR_TYPE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_SCALAR
) + 0x0,

953 
	evx_lut_©åibuã_e
 {

955 
VX_LUT_TYPE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
,
VX_TYPE_LUT
) + 0x0,

957 
VX_LUT_COUNT
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
,
VX_TYPE_LUT
) + 0x1,

959 
VX_LUT_SIZE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
,
VX_TYPE_LUT
) + 0x2,

961 
VX_LUT_OFFSET
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
,
VX_TYPE_LUT
) + 0x3,

967 
	evx_di°ributi⁄_©åibuã_e
 {

969 
VX_DISTRIBUTION_DIMENSIONS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_DISTRIBUTION
) + 0x0,

971 
VX_DISTRIBUTION_OFFSET
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_DISTRIBUTION
) + 0x1,

973 
VX_DISTRIBUTION_RANGE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_DISTRIBUTION
) + 0x2,

975 
VX_DISTRIBUTION_BINS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_DISTRIBUTION
) + 0x3,

978 
VX_DISTRIBUTION_WINDOW
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_DISTRIBUTION
) + 0x4,

980 
VX_DISTRIBUTION_SIZE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_DISTRIBUTION
) + 0x5,

986 
	evx_thªshﬁd_ty≥_e
 {

988 
VX_THRESHOLD_TYPE_BINARY
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_THRESHOLD_TYPE
) + 0x0,

990 
VX_THRESHOLD_TYPE_RANGE
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_THRESHOLD_TYPE
) + 0x1,

996 
	evx_thªshﬁd_©åibuã_e
 {

998 
VX_THRESHOLD_TYPE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_THRESHOLD
) + 0x0,

1000 
VX_THRESHOLD_THRESHOLD_VALUE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_THRESHOLD
) + 0x1,

1002 
VX_THRESHOLD_THRESHOLD_LOWER
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_THRESHOLD
) + 0x2,

1004 
VX_THRESHOLD_THRESHOLD_UPPER
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_THRESHOLD
) + 0x3,

1006 
VX_THRESHOLD_TRUE_VALUE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_THRESHOLD
) + 0x4,

1008 
VX_THRESHOLD_FALSE_VALUE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_THRESHOLD
) + 0x5,

1010 
VX_THRESHOLD_DATA_TYPE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_THRESHOLD
) + 0x6,

1016 
	evx_m©rix_©åibuã_e
 {

1018 
VX_MATRIX_TYPE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_MATRIX
) + 0x0,

1020 
VX_MATRIX_ROWS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_MATRIX
) + 0x1,

1022 
VX_MATRIX_COLUMNS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_MATRIX
) + 0x2,

1024 
VX_MATRIX_SIZE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_MATRIX
) + 0x3,

1027 
VX_MATRIX_ORIGIN
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_MATRIX
) + 0x4,

1029 
VX_MATRIX_PATTERN
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_MATRIX
) + 0x5,

1035 
	evx_c⁄vﬁuti⁄_©åibuã_e
 {

1037 
VX_CONVOLUTION_ROWS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONVOLUTION
) + 0x0,

1039 
VX_CONVOLUTION_COLUMNS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONVOLUTION
) + 0x1,

1045 
VX_CONVOLUTION_SCALE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONVOLUTION
) + 0x2,

1047 
VX_CONVOLUTION_SIZE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_CONVOLUTION
) + 0x3,

1053 
	evx_pyømid_©åibuã_e
 {

1055 
VX_PYRAMID_LEVELS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_PYRAMID
) + 0x0,

1057 
VX_PYRAMID_SCALE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_PYRAMID
) + 0x1,

1059 
VX_PYRAMID_WIDTH
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_PYRAMID
) + 0x2,

1061 
VX_PYRAMID_HEIGHT
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_PYRAMID
) + 0x3,

1063 
VX_PYRAMID_FORMAT
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_PYRAMID
) + 0x4,

1069 
	evx_ªm≠_©åibuã_e
 {

1071 
VX_REMAP_SOURCE_WIDTH
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_REMAP
) + 0x0,

1073 
VX_REMAP_SOURCE_HEIGHT
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_REMAP
) + 0x1,

1075 
VX_REMAP_DESTINATION_WIDTH
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_REMAP
) + 0x2,

1077 
VX_REMAP_DESTINATION_HEIGHT
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_REMAP
) + 0x3,

1083 
	evx_¨øy_©åibuã_e
 {

1085 
VX_ARRAY_ITEMTYPE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_ARRAY
) + 0x0,

1087 
VX_ARRAY_NUMITEMS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_ARRAY
) + 0x1,

1089 
VX_ARRAY_CAPACITY
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_ARRAY
) + 0x2,

1091 
VX_ARRAY_ITEMSIZE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_ARRAY
) + 0x3,

1097 
	evx_obje˘_¨øy_©åibuã_e
 {

1099 
VX_OBJECT_ARRAY_ITEMTYPE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_OBJECT_ARRAY
) + 0x0,

1101 
VX_OBJECT_ARRAY_NUMITEMS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_OBJECT_ARRAY
) + 0x1,

1107 
	evx_mëa_vÆid_ª˘_©åibuã_e
 {

1109 
VX_VALID_RECT_CALLBACK
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_META_FORMAT
) + 0x1,

1118 
	evx_ch™√l_e
 {

1120 
VX_CHANNEL_0
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CHANNEL
) + 0x0,

1122 
VX_CHANNEL_1
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CHANNEL
) + 0x1,

1124 
VX_CHANNEL_2
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CHANNEL
) + 0x2,

1126 
VX_CHANNEL_3
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CHANNEL
) + 0x3,

1129 
VX_CHANNEL_R
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CHANNEL
) + 0x10,

1131 
VX_CHANNEL_G
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CHANNEL
) + 0x11,

1133 
VX_CHANNEL_B
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CHANNEL
) + 0x12,

1135 
VX_CHANNEL_A
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CHANNEL
) + 0x13,

1137 
VX_CHANNEL_Y
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CHANNEL
) + 0x14,

1139 
VX_CHANNEL_U
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CHANNEL
) + 0x15,

1141 
VX_CHANNEL_V
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_CHANNEL
) + 0x16,

1147 
	evx_mem‹y_ty≥_e
 {

1149 
VX_MEMORY_TYPE_NONE
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_MEMORY_TYPE
) + 0x0,

1152 
VX_MEMORY_TYPE_HOST
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_MEMORY_TYPE
) + 0x1,

1178 
	evx_öãΩﬁ©i⁄_ty≥_e
 {

1180 
VX_INTERPOLATION_NEAREST_NEIGHBOR
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_INTERPOLATION
) + 0x0,

1183 
VX_INTERPOLATION_BILINEAR
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_INTERPOLATION
) + 0x1,

1186 
VX_INTERPOLATION_AREA
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_INTERPOLATION
) + 0x2,

1192 
	evx_n⁄_löór_fûãr_e
 {

1194 
VX_NONLINEAR_FILTER_MEDIAN
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_NONLINEAR
) + 0x0,

1196 
VX_NONLINEAR_FILTER_MIN
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_NONLINEAR
) + 0x1 ,

1198 
VX_NONLINEAR_FILTER_MAX
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_NONLINEAR
) + 0x2,

1204 
	evx_∑âîn_e
 {

1206 
VX_PATTERN_BOX
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_PATTERN
) + 0x0,

1208 
VX_PATTERN_CROSS
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_PATTERN
) + 0x1 ,

1210 
VX_PATTERN_DISK
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_PATTERN
) + 0x2,

1212 
VX_PATTERN_OTHER
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_PATTERN
) + 0x3,

1218 
	evx_cﬁ‹_•a˚_e
 {

1220 
VX_COLOR_SPACE_NONE
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_COLOR_SPACE
) + 0x0,

1222 
VX_COLOR_SPACE_BT601_525
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_COLOR_SPACE
) + 0x1,

1224 
VX_COLOR_SPACE_BT601_625
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_COLOR_SPACE
) + 0x2,

1226 
VX_COLOR_SPACE_BT709
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_COLOR_SPACE
) + 0x3,

1229 
VX_COLOR_SPACE_DEFAULT
 = 
VX_COLOR_SPACE_BT709
,

1235 
	evx_ch™√l_ønge_e
 {

1237 
VX_CHANNEL_RANGE_FULL
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_COLOR_RANGE
) + 0x0,

1239 
VX_CHANNEL_RANGE_RESTRICTED
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_COLOR_RANGE
) + 0x1,

1245 
	evx_∑ømëî_°©e_e
 {

1249 
VX_PARAMETER_STATE_REQUIRED
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_PARAMETER_STATE
) + 0x0,

1253 
VX_PARAMETER_STATE_OPTIONAL
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_PARAMETER_STATE
) + 0x1,

1259 
	evx_b‹dî_e
 {

1261 
VX_BORDER_UNDEFINED
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_BORDER
) + 0x0,

1265 
VX_BORDER_CONSTANT
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_BORDER
) + 0x1,

1269 
VX_BORDER_REPLICATE
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_BORDER
) + 0x2,

1275 
	evx_b‹dî_pﬁicy_e
 {

1277 
VX_BORDER_POLICY_DEFAULT_TO_UNDEFINED
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_BORDER_POLICY
) + 0x0,

1279 
VX_BORDER_POLICY_RETURN_ERROR
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_BORDER_POLICY
) + 0x1,

1286 
	evx_ãrmö©i⁄_¸ôîü_e
 {

1288 
VX_TERM_CRITERIA_ITERATIONS
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_TERM_CRITERIA
) + 0x0,

1290 
VX_TERM_CRITERIA_EPSILON
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_TERM_CRITERIA
) + 0x1,

1294 
VX_TERM_CRITERIA_BOTH
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_TERM_CRITERIA
) + 0x2,

1301 
	evx_n‹m_ty≥_e
 {

1303 
VX_NORM_L1
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_NORM_TYPE
) + 0x0,

1305 
VX_NORM_L2
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_NORM_TYPE
) + 0x1,

1311 
	evx_dñay_©åibuã_e
 {

1313 
VX_DELAY_TYPE
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_DELAY
) + 0x0,

1315 
VX_DELAY_SLOTS
 = 
	`VX_ATTRIBUTE_BASE
(
VX_ID_KHRONOS
, 
VX_TYPE_DELAY
) + 0x1,

1324 
	evx_ac˚ss‹_e
 {

1328 
VX_READ_ONLY
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_ACCESSOR
) + 0x1,

1332 
VX_WRITE_ONLY
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_ACCESSOR
) + 0x2,

1335 
VX_READ_AND_WRITE
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_ACCESSOR
) + 0x3,

1341 
	evx_round_pﬁicy_e
 {

1343 
VX_ROUND_POLICY_TO_ZERO
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_ROUND_POLICY
) + 0x1,

1345 
VX_ROUND_POLICY_TO_NEAREST_EVEN
 = 
	`VX_ENUM_BASE
(
VX_ID_KHRONOS
, 
VX_ENUM_ROUND_POLICY
) + 0x2,

1348 #i‡
	`deföed
(
_WIN32
Ë|| deföed(
UNDER_CE
)

1349 #i‡
	`deföed
(
_WIN64
)

1353 
	#VX_FMT_REF
 "%I64u"

	)

1357 
	#VX_FMT_SIZE
 "%I64u"

	)

1362 
	#VX_FMT_REF
 "%lu"

	)

1366 
	#VX_FMT_SIZE
 "%lu"

	)

1372 
	#VX_FMT_REF
 "%p"

	)

1376 
	#VX_FMT_SIZE
 "%zu"

	)

1381 
	#VX_SCALE_UNITY
 (1024u)

	)

1402 
	s_vx_imagï©ch_addªssög_t
 {

1403 
vx_uöt32
 
dim_x
;

1404 
vx_uöt32
 
dim_y
;

1405 
vx_öt32
 
°ride_x
;

1406 
vx_öt32
 
°ride_y
;

1407 
vx_uöt32
 
sˇÀ_x
;

1408 
vx_uöt32
 
sˇÀ_y
;

1409 
vx_uöt32
 
°ï_x
;

1410 
vx_uöt32
 
°ï_y
;

1411 } 
	tvx_imagï©ch_addªssög_t
;

1416 
	#VX_IMAGEPATCH_ADDR_INIT
 {0u, 0u, 0, 0, 0u, 0u, 0u, 0u
	}

	)
}

1421 
	s_vx_≥rf_t
 {

1422 
vx_uöt64
 
	mtmp
;

1423 
vx_uöt64
 
	mbeg
;

1424 
vx_uöt64
 
	míd
;

1425 
vx_uöt64
 
	msum
;

1426 
vx_uöt64
 
	mavg
;

1427 
vx_uöt64
 
	mmö
;

1428 
vx_uöt64
 
	mnum
;

1429 
vx_uöt64
 
	mmax
;

1430 } 
	tvx_≥rf_t
;

1435 
	#VX_PERF_INIT
 {0ul, 0ul, 0ul, 0ul, 0ul, 0ul}

	)

1441 
	s_vx_kî√l_öfo_t
 {

1446 
vx_íum
 
	míumî©i⁄
;

1452 
vx_ch¨
 
	m«me
[
VX_MAX_KERNEL_NAME
];

1453 } 
	tvx_kî√l_öfo_t
;

1458 
	#VX_SCALE_PYRAMID_HALF
 (0.5f)

	)

1463 
	#VX_SCALE_PYRAMID_ORB
 ((
vx_Êﬂt32
)0.8408964f)

	)

1468 
	s_vx_keypoöt_t
 {

1469 
vx_öt32
 
	mx
;

1470 
vx_öt32
 
	my
;

1471 
vx_Êﬂt32
 
	m°ªngth
;

1472 
vx_Êﬂt32
 
	msˇÀ
;

1473 
vx_Êﬂt32
 
	m‹õ¡©i⁄
;

1474 
vx_öt32
 
	måackög_°©us
;

1475 
vx_Êﬂt32
 
	mîr‹
;

1476 } 
	tvx_keypoöt_t
;

1481 
	s_vx_ª˘™gÀ_t
 {

1482 
vx_uöt32
 
	m°¨t_x
;

1483 
vx_uöt32
 
	m°¨t_y
;

1484 
vx_uöt32
 
	míd_x
;

1485 
vx_uöt32
 
	míd_y
;

1486 } 
	tvx_ª˘™gÀ_t
;

1491 
	s_vx_co‹dö©es2d_t
 {

1492 
vx_uöt32
 
	mx
;

1493 
vx_uöt32
 
	my
;

1494 } 
	tvx_co‹dö©es2d_t
;

1499 
	s_vx_co‹dö©es3d_t
 {

1500 
vx_uöt32
 
	mx
;

1501 
vx_uöt32
 
	my
;

1502 
vx_uöt32
 
	mz
;

1503 } 
	tvx_co‹dö©es3d_t
;

1509 
	u_vx_pixñ_vÆue_t
 {

1510 
vx_uöt8
 
	mRGB
[3];

1511 
vx_uöt8
 
	mRGBX
[4];

1512 
vx_uöt8
 
	mYUV
[3];

1513 
vx_uöt8
 
	mU8
;

1514 
vx_uöt16
 
	mU16
;

1515 
vx_öt16
 
	mS16
;

1516 
vx_uöt32
 
	mU32
;

1517 
vx_öt32
 
	mS32
;

1518 
vx_uöt8
 
	mª£rved
[16];

1519 } 
	tvx_pixñ_vÆue_t
;

1528 
	s_vx_b‹dî_t
 {

1530 
vx_íum
 
	mmode
;

1534 
vx_pixñ_vÆue_t
 
	mc⁄°™t_vÆue
;

1535 } 
	tvx_b‹dî_t
;

1543 
	$vx_°©us
(
	tVX_API_CALL
 *
	tvx_publish_kî√ls_f
)(
	tvx_c⁄ãxt
 
	tc⁄ãxt
);

1551 
	$vx_°©us
(
	tVX_API_CALL
 *
	tvx_u≈ublish_kî√ls_f
)(
	tvx_c⁄ãxt
 
	tc⁄ãxt
);

1560 
	$vx_°©us
(
	tVX_CALLBACK
 *
	tvx_kî√l_f
)(
	tvx_node
 
	tnode
, c⁄° 
	tvx_ª„ªn˚
 *
	t∑ømëîs
, 
	tvx_uöt32
 
	tnum
);

1571 
	$vx_°©us
(
	tVX_CALLBACK
 *
	tvx_kî√l_öôülize_f
)(
	tvx_node
 
	tnode
, c⁄° 
	tvx_ª„ªn˚
 *
	t∑ømëîs
, 
	tvx_uöt32
 
	tnum
);

1582 
	$vx_°©us
(
	tVX_CALLBACK
 *
	tvx_kî√l_deöôülize_f
)(
	tvx_node
 
	tnode
, c⁄° 
	tvx_ª„ªn˚
 *
	t∑ømëîs
, 
	tvx_uöt32
 
	tnum
);

1598 
	$vx_°©us
(
	tVX_CALLBACK
 *
	tvx_kî√l_vÆid©e_f
)(
	tvx_node
 
	tnode
, c⁄° 
	tvx_ª„ªn˚
 
	t∑ømëîs
[], 
	tvx_uöt32
 
	tnum
, 
	tvx_mëa_f‹m©
 
	tmëas
[]);

1631 
	$vx_°©us
(
	tVX_CALLBACK
 *
	tvx_kî√l_image_vÆid_ª˘™gÀ_f
)(
	tvx_node
 
	tnode
, 
	tvx_uöt32
 
	tödex
, c⁄° 
	tvx_ª˘™gÀ_t
* c⁄° 
	töput_vÆid
[], vx_ª˘™gÀ_t* c⁄° 
	touçut_vÆid
[]);

1636 (
	tVX_CALLBACK
 *
	tvx_log_ˇŒback_f
)(
	tvx_c⁄ãxt
 
	tc⁄ãxt
,

1637 
	tvx_ª„ªn˚
 
	tªf
,

1638 
	tvx_°©us
 
	t°©us
,

1639 c⁄° 
	tvx_ch¨
 
	t°rög
[]);

1644 
	evx_m≠_Êag_e
 {

1645 
VX_NOGAP_X
 = 1,

	@/usr/include/VX/vx_vendors.h

24 #i‚de‡
_OPENVX_VENDORS_H_


25 
	#_OPENVX_VENDORS_H_


	)

36 
	evx_víd‹_id_e
 {

37 
	mVX_ID_KHRONOS
 = 0x000,

38 
	mVX_ID_TI
 = 0x001,

39 
	mVX_ID_QUALCOMM
 = 0x002,

40 
	mVX_ID_NVIDIA
 = 0x003,

41 
	mVX_ID_ARM
 = 0x004,

42 
	mVX_ID_BDTI
 = 0x005,

43 
	mVX_ID_RENESAS
 = 0x006,

44 
	mVX_ID_VIVANTE
 = 0x007,

45 
	mVX_ID_XILINX
 = 0x008,

46 
	mVX_ID_AXIS
 = 0x009,

47 
	mVX_ID_MOVIDIUS
 = 0x00A,

48 
	mVX_ID_SAMSUNG
 = 0x00B,

49 
	mVX_ID_FREESCALE
 = 0x00C,

50 
	mVX_ID_AMD
 = 0x00D,

51 
	mVX_ID_BROADCOM
 = 0x00E,

52 
	mVX_ID_INTEL
 = 0x00F,

53 
	mVX_ID_MARVELL
 = 0x010,

54 
	mVX_ID_MEDIATEK
 = 0x011,

55 
	mVX_ID_ST
 = 0x012,

56 
	mVX_ID_CEVA
 = 0x013,

57 
	mVX_ID_ITSEEZ
 = 0x014,

58 
	mVX_ID_IMAGINATION
=0x015,

59 
	mVX_ID_NXP
 = 0x016,

60 
	mVX_ID_VIDEANTIS
 = 0x017,

61 
	mVX_ID_SYNOPSYS
 = 0x018,

62 
	mVX_ID_CADENCE
 = 0x019,

63 
	mVX_ID_HUAWEI
 = 0x01A,

65 
	mVX_ID_USER
 = 0xFFE,

66 
	mVX_ID_MAX
 = 0xFFF,

68 
	mVX_ID_DEFAULT
 = 
VX_ID_MAX
,

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/opencv2/core/mat.hpp

43 #i‚de‡
__OPENCV_CORE_MATRIX_OPERATIONS_HPP__


44 
	#__OPENCV_CORE_MATRIX_OPERATIONS_HPP__


	)

46 #i‚de‡
SKIP_INCLUDES


47 
	~<limôs.h
>

48 
	~<°rög.h
>

51 #ifde‡
__˝lu•lus


53 
«me•a˚
 
	gcv


58 
ölöe
 
	gM©
::
öôEm±y
()

60 
Êags
 = 
MAGIC_VAL
;

61 
	gdims
 = 
rows
 = 
cﬁs
 = 0;

62 
	gd©a
 = 
d©a°¨t
 = 
d©´nd
 = 
d©Æimô
 = 0;

63 
	gªfcou¡
 = 0;

64 
	gÆloˇt‹
 = 0;

67 
ölöe
 
	gM©
::
M©
(Ë: 
size
(&
rows
)

69 
öôEm±y
();

72 
ölöe
 
	gM©
::
M©
(
_rows
, 
_cﬁs
, 
_ty≥
Ë: 
size
(&
rows
)

74 
öôEm±y
();

75 
¸óã
(
_rows
, 
_cﬁs
, 
_ty≥
);

78 
ölöe
 
	gM©
::
M©
(
_rows
, 
_cﬁs
, 
_ty≥
, c⁄° 
Sˇœr
& 
_s
Ë: 
size
(&
rows
)

80 
öôEm±y
();

81 
¸óã
(
_rows
, 
_cﬁs
, 
_ty≥
);

82 *
	gthis
 = 
_s
;

85 
ölöe
 
	gM©
::
M©
(
Size
 
_sz
, 
_ty≥
Ë: 
size
(&
rows
)

87 
öôEm±y
();

88 
¸óã
–
_sz
.
height
, _sz.
width
, 
_ty≥
 );

91 
ölöe
 
	gM©
::
M©
(
Size
 
_sz
, 
_ty≥
, c⁄° 
Sˇœr
& 
_s
Ë: 
size
(&
rows
)

93 
öôEm±y
();

94 
¸óã
(
_sz
.
height
, _sz.
width
, 
_ty≥
);

95 *
	gthis
 = 
_s
;

98 
ölöe
 
	gM©
::
M©
(
_dims
, c⁄° * 
_sz
, 
_ty≥
Ë: 
size
(&
rows
)

100 
öôEm±y
();

101 
¸óã
(
_dims
, 
_sz
, 
_ty≥
);

104 
ölöe
 
	gM©
::
M©
(
_dims
, c⁄° * 
_sz
, 
_ty≥
, c⁄° 
Sˇœr
& 
_s
Ë: 
size
(&
rows
)

106 
öôEm±y
();

107 
¸óã
(
_dims
, 
_sz
, 
_ty≥
);

108 *
	gthis
 = 
_s
;

111 
ölöe
 
	gM©
::
M©
(c⁄° M©& 
m
)

112 : 
Êags
(
m
.Êags), 
dims
(m.dims), 
rows
(m.rows), 
cﬁs
(m.cﬁs), 
d©a
(m.data),

113 
ªfcou¡
(
m
.ªfcou¡), 
d©a°¨t
(m.d©a°¨t), 
d©´nd
(m.dataend),

114 
d©Æimô
(
m
.d©Æimô), 
Æloˇt‹
(m.Æloˇt‹), 
size
(&
rows
)

116 if–
	gªfcou¡
 )

117 
CV_XADD
(
ªfcou¡
, 1);

118 if–
	gm
.
	gdims
 <= 2 )

120 
°ï
[0] = 
m
.°ï[0]; 
	g°ï
[1] = m.step[1];

124 
	gdims
 = 0;

125 
c›ySize
(
m
);

129 
ölöe
 
	gM©
::
M©
(
_rows
, 
_cﬁs
, 
_ty≥
, * 
_d©a
, 
size_t
 
_°ï
)

130 : 
Êags
(
MAGIC_VAL
 + (
_ty≥
 & 
TYPE_MASK
)), 
dims
(2), 
rows
(
_rows
), 
cﬁs
(
_cﬁs
),

131 
d©a
((
uch¨
*)
_d©a
), 
ªfcou¡
(0), 
d©a°¨t
((uch¨*)_d©a), 
d©´nd
(0),

132 
d©Æimô
(0), 
Æloˇt‹
(0), 
size
(&
rows
)

134 
size_t
 
	gesz
 = 
CV_ELEM_SIZE
(
_ty≥
), 
	gmö°ï
 = 
cﬁs
*
esz
;

135 if–
	g_°ï
 =
AUTO_STEP
 )

137 
_°ï
 = 
mö°ï
;

138 
	gÊags
 |
CONTINUOUS_FLAG
;

142 if–
	grows
 =1 ) 
_°ï
 = 
mö°ï
;

143 
CV_DbgAs£π
–
_°ï
 >
mö°ï
 );

144 
	gÊags
 |
_°ï
 =
mö°ï
 ? 
CONTINUOUS_FLAG
 : 0;

146 
	g°ï
[0] = 
_°ï
; sãp[1] = 
esz
;

147 
	gd©Æimô
 = 
d©a°¨t
 + 
_°ï
*
rows
;

148 
	gd©´nd
 = 
d©Æimô
 - 
_°ï
 + 
mö°ï
;

151 
ölöe
 
	gM©
::
M©
(
Size
 
_sz
, 
_ty≥
, * 
_d©a
, 
size_t
 
_°ï
)

152 : 
Êags
(
MAGIC_VAL
 + (
_ty≥
 & 
TYPE_MASK
)), 
dims
(2), 
rows
(
_sz
.
height
), 
cﬁs
(_sz.
width
),

153 
d©a
((
uch¨
*)
_d©a
), 
ªfcou¡
(0), 
d©a°¨t
((uch¨*)_d©a), 
d©´nd
(0),

154 
d©Æimô
(0), 
Æloˇt‹
(0), 
size
(&
rows
)

156 
size_t
 
	gesz
 = 
CV_ELEM_SIZE
(
_ty≥
), 
	gmö°ï
 = 
cﬁs
*
esz
;

157 if–
	g_°ï
 =
AUTO_STEP
 )

159 
_°ï
 = 
mö°ï
;

160 
	gÊags
 |
CONTINUOUS_FLAG
;

164 if–
	grows
 =1 ) 
_°ï
 = 
mö°ï
;

165 
CV_DbgAs£π
–
_°ï
 >
mö°ï
 );

166 
	gÊags
 |
_°ï
 =
mö°ï
 ? 
CONTINUOUS_FLAG
 : 0;

168 
	g°ï
[0] = 
_°ï
; sãp[1] = 
esz
;

169 
	gd©Æimô
 = 
d©a°¨t
 + 
_°ï
*
rows
;

170 
	gd©´nd
 = 
d©Æimô
 - 
_°ï
 + 
mö°ï
;

174 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©
::
M©
(c⁄° 
ve˘‹
<
_Tp
>& 
vec
, 
boﬁ
 
c›yD©a
)

175 : 
Êags
(
MAGIC_VAL
 | 
D©aTy≥
<
_Tp
>::
ty≥
 | 
CV_MAT_CONT_FLAG
),

176 
dims
(2), 
rows
(()
vec
.
size
()), 
cﬁs
(1), 
d©a
(0), 
ªfcou¡
(0),

177 
d©a°¨t
(0), 
d©´nd
(0), 
Æloˇt‹
(0), 
size
(&
rows
)

179 if(
	gvec
.
em±y
())

181 if–!
	gc›yD©a
 )

183 
	g°ï
[0] = 
°ï
[1] = (
_Tp
);

184 
	gd©a
 = 
d©a°¨t
 = (
uch¨
*)&
vec
[0];

185 
	gd©Æimô
 = 
d©´nd
 = 
d©a°¨t
 + 
rows
*
°ï
[0];

188 
M©
(()
vec
.
size
(), 1, 
D©aTy≥
<
_Tp
>::
ty≥
, (
uch¨
*)&vec[0]).
c›yTo
(*
this
);

192 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gn
> 
ölöe
 
	gM©
::
M©
(c⁄° 
Vec
<
_Tp
, 
n
>& 
vec
, 
boﬁ
 
c›yD©a
)

193 : 
Êags
(
MAGIC_VAL
 | 
D©aTy≥
<
_Tp
>::
ty≥
 | 
CV_MAT_CONT_FLAG
),

194 
dims
(2), 
rows
(
n
), 
cﬁs
(1), 
d©a
(0), 
ªfcou¡
(0),

195 
d©a°¨t
(0), 
d©´nd
(0), 
Æloˇt‹
(0), 
size
(&
rows
)

197 if–!
	gc›yD©a
 )

199 
	g°ï
[0] = 
°ï
[1] = (
_Tp
);

200 
	gd©a
 = 
d©a°¨t
 = (
uch¨
*)
vec
.
vÆ
;

201 
	gd©Æimô
 = 
d©´nd
 = 
d©a°¨t
 + 
rows
*
°ï
[0];

204 
M©
(
n
, 1, 
D©aTy≥
<
_Tp
>::
ty≥
, (*)
vec
.
vÆ
).
c›yTo
(*
this
);

208 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©
::
M©
(c⁄° 
M©x
<
_Tp
,
m
,
n
>& 
M
, 
boﬁ
 
c›yD©a
)

209 : 
Êags
(
MAGIC_VAL
 | 
D©aTy≥
<
_Tp
>::
ty≥
 | 
CV_MAT_CONT_FLAG
),

210 
dims
(2), 
rows
(
m
), 
cﬁs
(
n
), 
d©a
(0), 
ªfcou¡
(0),

211 
d©a°¨t
(0), 
d©´nd
(0), 
Æloˇt‹
(0), 
size
(&
rows
)

213 if–!
	gc›yD©a
 )

215 
	g°ï
[0] = 
cﬁs
*(
_Tp
);

216 
	g°ï
[1] = (
_Tp
);

217 
	gd©a
 = 
d©a°¨t
 = (
uch¨
*)
M
.
vÆ
;

218 
	gd©Æimô
 = 
d©´nd
 = 
d©a°¨t
 + 
rows
*
°ï
[0];

221 
M©
(
m
, 
n
, 
D©aTy≥
<
_Tp
>::
ty≥
, (
uch¨
*)
M
.
vÆ
).
c›yTo
(*
this
);

225 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©
::
M©
(c⁄° 
Poöt_
<
_Tp
>& 
±
, 
boﬁ
 
c›yD©a
)

226 : 
Êags
(
MAGIC_VAL
 | 
D©aTy≥
<
_Tp
>::
ty≥
 | 
CV_MAT_CONT_FLAG
),

227 
dims
(2), 
rows
(2), 
cﬁs
(1), 
d©a
(0), 
ªfcou¡
(0),

228 
d©a°¨t
(0), 
d©´nd
(0), 
Æloˇt‹
(0), 
size
(&
rows
)

230 if–!
	gc›yD©a
 )

232 
	g°ï
[0] = 
°ï
[1] = (
_Tp
);

233 
	gd©a
 = 
d©a°¨t
 = (
uch¨
*)&
±
.
x
;

234 
	gd©Æimô
 = 
d©´nd
 = 
d©a°¨t
 + 
rows
*
°ï
[0];

238 
¸óã
(2, 1, 
D©aTy≥
<
_Tp
>::
ty≥
);

239 ((
	g_Tp
*)
	gd©a
)[0] = 
±
.
x
;

240 ((
	g_Tp
*)
	gd©a
)[1] = 
±
.
y
;

245 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©
::
M©
(c⁄° 
Poöt3_
<
_Tp
>& 
±
, 
boﬁ
 
c›yD©a
)

246 : 
Êags
(
MAGIC_VAL
 | 
D©aTy≥
<
_Tp
>::
ty≥
 | 
CV_MAT_CONT_FLAG
),

247 
dims
(2), 
rows
(3), 
cﬁs
(1), 
d©a
(0), 
ªfcou¡
(0),

248 
d©a°¨t
(0), 
d©´nd
(0), 
Æloˇt‹
(0), 
size
(&
rows
)

250 if–!
	gc›yD©a
 )

252 
	g°ï
[0] = 
°ï
[1] = (
_Tp
);

253 
	gd©a
 = 
d©a°¨t
 = (
uch¨
*)&
±
.
x
;

254 
	gd©Æimô
 = 
d©´nd
 = 
d©a°¨t
 + 
rows
*
°ï
[0];

258 
¸óã
(3, 1, 
D©aTy≥
<
_Tp
>::
ty≥
);

259 ((
	g_Tp
*)
	gd©a
)[0] = 
±
.
x
;

260 ((
	g_Tp
*)
	gd©a
)[1] = 
±
.
y
;

261 ((
	g_Tp
*)
	gd©a
)[2] = 
±
.
z
;

266 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©
::
M©
(c⁄° 
M©CommaInôülizî_
<
_Tp
>& 
commaInôülizî
)

267 : 
Êags
(
MAGIC_VAL
 | 
D©aTy≥
<
_Tp
>::
ty≥
 | 
CV_MAT_CONT_FLAG
),

268 
dims
(0), 
rows
(0), 
cﬁs
(0), 
d©a
(0), 
ªfcou¡
(0),

269 
d©a°¨t
(0), 
d©´nd
(0), 
Æloˇt‹
(0), 
size
(&
rows
)

271 *
	gthis
 = *
commaInôülizî
;

274 
ölöe
 
	gM©
::~
M©
()

276 
ªÀa£
();

277 if–
	g°ï
.
	gp
 !
°ï
.
buf
 )

278 
Á°Fªe
(
°ï
.
p
);

281 
ölöe
 
	gM©
& M©::
›î©‹
 = (c⁄° 
M©
& 
m
)

283 if–
this
 !&
m
 )

285 if–
m
.
ªfcou¡
 )

286 
CV_XADD
(
m
.
ªfcou¡
, 1);

287 
ªÀa£
();

288 
	gÊags
 = 
m
.
Êags
;

289 if–
	gdims
 <2 && 
m
.
dims
 <= 2 )

291 
dims
 = 
m
.dims;

292 
	grows
 = 
m
.
rows
;

293 
	gcﬁs
 = 
m
.
cﬁs
;

294 
	g°ï
[0] = 
m
.
°ï
[0];

295 
	g°ï
[1] = 
m
.
°ï
[1];

298 
c›ySize
(
m
);

299 
	gd©a
 = 
m
.
d©a
;

300 
	gd©a°¨t
 = 
m
.
d©a°¨t
;

301 
	gd©´nd
 = 
m
.
d©´nd
;

302 
	gd©Æimô
 = 
m
.
d©Æimô
;

303 
	gªfcou¡
 = 
m
.
ªfcou¡
;

304 
	gÆloˇt‹
 = 
m
.
Æloˇt‹
;

306  *
	gthis
;

309 
ölöe
 
M©
 
	gM©
::
row
(
y
Ëc⁄° {  M©(*
this
, 
R™ge
(y, y+1), R™ge::
Æl
()); }

310 
ölöe
 
M©
 
	gM©
::
cﬁ
(
x
Ëc⁄° {  M©(*
this
, 
R™ge
::
Æl
(), Range(x, x+1)); }

311 
ölöe
 
M©
 
	gM©
::
rowR™ge
(
°¨åow
, 
ídrow
) const

312 {  
M©
(*
this
, 
R™ge
(
°¨åow
, 
ídrow
), R™ge::
Æl
()); }

313 
ölöe
 
M©
 
	gM©
::
rowR™ge
(c⁄° 
R™ge
& 
r
) const

314 {  
M©
(*
this
, 
r
, 
R™ge
::
Æl
()); }

315 
ölöe
 
M©
 
	gM©
::
cﬁR™ge
(
°¨tcﬁ
, 
ídcﬁ
) const

316 {  
M©
(*
this
, 
R™ge
::
Æl
(), R™ge(
°¨tcﬁ
, 
ídcﬁ
)); }

317 
ölöe
 
M©
 
	gM©
::
cﬁR™ge
(c⁄° 
R™ge
& 
r
) const

318 {  
M©
(*
this
, 
R™ge
::
Æl
(), 
r
); }

320 
ölöe
 
M©
 
	gM©
::
düg
(c⁄° M©& 
d
)

322 
CV_As£π
–
d
.
cﬁs
 =1 || d.
rows
 == 1 );

323 
	gÀn
 = 
d
.
rows
 + d.
cﬁs
 - 1;

324 
M©
 
m
(
Àn
,Üí, 
d
.
ty≥
(), 
Sˇœr
(0)), 
	gmd
 = m.
düg
();

325 if–
	gd
.
	gcﬁs
 == 1 )

326 
d
.
c›yTo
(
md
);

328 
å™•o£
(
d
, 
md
);

329  
	gm
;

332 
ölöe
 
M©
 
	gM©
::
˛⁄e
() const

334 
M©
 
m
;

335 
c›yTo
(
m
);

336  
	gm
;

339 
ölöe
 
	gM©
::
assignTo
–
M©
& 
m
, 
_ty≥
 ) const

341 if–
	g_ty≥
 < 0 )

342 
	gm
 = *
this
;

344 
c⁄vîtTo
(
m
, 
_ty≥
);

347 
ölöe
 
	gM©
::
¸óã
(
_rows
, 
_cﬁs
, 
_ty≥
)

349 
	g_ty≥
 &
TYPE_MASK
;

350 if–
	gdims
 <2 && 
rows
 =
_rows
 && 
cﬁs
 =
_cﬁs
 && 
ty≥
(Ë=
_ty≥
 && 
d©a
 )

352 
	gsz
[] = {
_rows
, 
_cﬁs
};

353 
¸óã
(2, 
sz
, 
_ty≥
);

356 
ölöe
 
	gM©
::
¸óã
(
Size
 
_sz
, 
_ty≥
)

358 
¸óã
(
_sz
.
height
, _sz.
width
, 
_ty≥
);

361 
ölöe
 
	gM©
::
addªf
()

362 { if–
ªfcou¡
 ) 
CV_XADD
(refcount, 1); }

364 
ölöe
 
	gM©
::
ªÀa£
()

366 if–
ªfcou¡
 && 
CV_XADD
(refcount, -1) == 1 )

367 
dóŒoˇã
();

368 
	gd©a
 = 
d©a°¨t
 = 
d©´nd
 = 
d©Æimô
 = 0;

369 
	gsize
.
	gp
[0] = 0;

370 
	gªfcou¡
 = 0;

373 
ölöe
 
M©
 
	gM©
::
›î©‹
()–
R™ge
 
_rowR™ge
, R™gê
	g_cﬁR™ge
 ) const

375  
M©
(*
this
, 
_rowR™ge
, 
_cﬁR™ge
);

378 
ölöe
 
M©
 
	gM©
::
›î©‹
()–c⁄° 
Re˘
& 
roi
 ) const

379 {  
M©
(*
this
, 
roi
); }

381 
ölöe
 
M©
 
	gM©
::
›î©‹
()(c⁄° 
R™ge
* 
ønges
) const

383  
M©
(*
this
, 
ønges
);

386 
ölöe
 
	gM©
::
›î©‹
 
CvM©
() const

388 
CV_DbgAs£π
(
dims
 <= 2);

389 
CvM©
 
	gm
 = 
cvM©
(
rows
, 
dims
 =1 ? 1 : 
cﬁs
, 
ty≥
(), 
d©a
);

390 
	gm
.
	g°ï
 = ()
°ï
[0];

391 
	gm
.
	gty≥
 = (
m
.
ty≥
 & ~
CONTINUOUS_FLAG
Ë| (
Êags
 & CONTINUOUS_FLAG);

392  
	gm
;

395 
ölöe
 
boﬁ
 
	gM©
::
isC⁄töuous
(Ëc⁄° {  (
Êags
 & 
CONTINUOUS_FLAG
) != 0; }

396 
ölöe
 
boﬁ
 
	gM©
::
isSubm©rix
(Ëc⁄° {  (
Êags
 & 
SUBMATRIX_FLAG
) != 0; }

397 
ölöe
 
size_t
 
	gM©
::
ñemSize
(Ëc⁄° {  
dims
 > 0 ? 
°ï
.
p
[dims-1] : 0; }

398 
ölöe
 
size_t
 
	gM©
::
ñemSize1
(Ëc⁄° {  
CV_ELEM_SIZE1
(
Êags
); }

399 
ölöe
 
	gM©
::
ty≥
(Ëc⁄° {  
CV_MAT_TYPE
(
Êags
); }

400 
ölöe
 
	gM©
::
dïth
(Ëc⁄° {  
CV_MAT_DEPTH
(
Êags
); }

401 
ölöe
 
	gM©
::
ch™√ls
(Ëc⁄° {  
CV_MAT_CN
(
Êags
); }

402 
ölöe
 
size_t
 
	gM©
::
°ï1
(
i
Ëc⁄° {  
°ï
.
p
[i]/
ñemSize1
(); }

403 
ölöe
 
boﬁ
 
	gM©
::
em±y
(Ëc⁄° {  
d©a
 =0 || 
tŸÆ
() == 0; }

404 
ölöe
 
size_t
 
	gM©
::
tŸÆ
() const

406 if–
dims
 <= 2 )

407  (
size_t
)
rows
*
cﬁs
;

408 
size_t
 
	gp
 = 1;

409  
	gi
 = 0; i < 
	gdims
; i++ )

410 
	gp
 *
size
[
i
];

411  
	gp
;

414 
ölöe
 
uch¨
* 
	gM©
::
±r
(
y
)

416 
CV_DbgAs£π
–
y
 =0 || (
d©a
 && 
dims
 >1 && ()y < ()
size
.
p
[0]) );

417  
	gd©a
 + 
	g°ï
.
	gp
[0]*
	gy
;

420 
ölöe
 c⁄° 
uch¨
* 
	gM©
::
±r
(
y
) const

422 
CV_DbgAs£π
–
y
 =0 || (
d©a
 && 
dims
 >1 && ()y < ()
size
.
p
[0]) );

423  
	gd©a
 + 
	g°ï
.
	gp
[0]*
	gy
;

426 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
* 
	gM©
::
±r
(
y
)

428 
CV_DbgAs£π
–
y
 =0 || (
d©a
 && 
dims
 >1 && ()y < ()
size
.
p
[0]) );

429  (
	g_Tp
*)(
	gd©a
 + 
	g°ï
.
	gp
[0]*
	gy
);

432 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° 
_Tp
* 
	gM©
::
±r
(
y
) const

434 
CV_DbgAs£π
–
y
 =0 || (
d©a
 && 
dims
 >1 && ()y < ()
size
.
p
[0]) );

435  (c⁄° 
	g_Tp
*)(
	gd©a
 + 
	g°ï
.
	gp
[0]*
	gy
);

439 
ölöe
 
uch¨
* 
	gM©
::
±r
(
i0
, 
i1
)

441 
CV_DbgAs£π
–
dims
 >2 && 
d©a
 &&

442 ()
i0
 < ()
size
.
p
[0] &&

443 ()
i1
 < ()
size
.
p
[1] );

444  
	gd©a
 + 
i0
*
	g°ï
.
	gp
[0] + 
i1
*step.p[1];

447 
ölöe
 c⁄° 
uch¨
* 
	gM©
::
±r
(
i0
, 
i1
) const

449 
CV_DbgAs£π
–
dims
 >2 && 
d©a
 &&

450 ()
i0
 < ()
size
.
p
[0] &&

451 ()
i1
 < ()
size
.
p
[1] );

452  
	gd©a
 + 
i0
*
	g°ï
.
	gp
[0] + 
i1
*step.p[1];

455 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
* 
	gM©
::
±r
(
i0
, 
i1
)

457 
CV_DbgAs£π
–
dims
 >2 && 
d©a
 &&

458 ()
i0
 < ()
size
.
p
[0] &&

459 ()
i1
 < ()
size
.
p
[1] );

460  (
	g_Tp
*)(
	gd©a
 + 
i0
*
	g°ï
.
	gp
[0] + 
i1
*step.p[1]);

463 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° 
_Tp
* 
	gM©
::
±r
(
i0
, 
i1
) const

465 
CV_DbgAs£π
–
dims
 >2 && 
d©a
 &&

466 ()
i0
 < ()
size
.
p
[0] &&

467 ()
i1
 < ()
size
.
p
[1] );

468  (c⁄° 
	g_Tp
*)(
	gd©a
 + 
i0
*
	g°ï
.
	gp
[0] + 
i1
*step.p[1]);

471 
ölöe
 
uch¨
* 
	gM©
::
±r
(
i0
, 
i1
, 
i2
)

473 
CV_DbgAs£π
–
dims
 >3 && 
d©a
 &&

474 ()
i0
 < ()
size
.
p
[0] &&

475 ()
i1
 < ()
size
.
p
[1] &&

476 ()
i2
 < ()
size
.
p
[2] );

477  
	gd©a
 + 
i0
*
	g°ï
.
	gp
[0] + 
i1
*°ï.p[1] + 
i2
*step.p[2];

480 
ölöe
 c⁄° 
uch¨
* 
	gM©
::
±r
(
i0
, 
i1
, 
i2
) const

482 
CV_DbgAs£π
–
dims
 >3 && 
d©a
 &&

483 ()
i0
 < ()
size
.
p
[0] &&

484 ()
i1
 < ()
size
.
p
[1] &&

485 ()
i2
 < ()
size
.
p
[2] );

486  
	gd©a
 + 
i0
*
	g°ï
.
	gp
[0] + 
i1
*°ï.p[1] + 
i2
*step.p[2];

489 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
* 
	gM©
::
±r
(
i0
, 
i1
, 
i2
)

491 
CV_DbgAs£π
–
dims
 >3 && 
d©a
 &&

492 ()
i0
 < ()
size
.
p
[0] &&

493 ()
i1
 < ()
size
.
p
[1] &&

494 ()
i2
 < ()
size
.
p
[2] );

495  (
	g_Tp
*)(
	gd©a
 + 
i0
*
	g°ï
.
	gp
[0] + 
i1
*°ï.p[1] + 
i2
*step.p[2]);

498 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° 
_Tp
* 
	gM©
::
±r
(
i0
, 
i1
, 
i2
) const

500 
CV_DbgAs£π
–
dims
 >3 && 
d©a
 &&

501 ()
i0
 < ()
size
.
p
[0] &&

502 ()
i1
 < ()
size
.
p
[1] &&

503 ()
i2
 < ()
size
.
p
[2] );

504  (c⁄° 
	g_Tp
*)(
	gd©a
 + 
i0
*
	g°ï
.
	gp
[0] + 
i1
*°ï.p[1] + 
i2
*step.p[2]);

507 
ölöe
 
uch¨
* 
	gM©
::
±r
(c⁄° * 
idx
)

509 
i
, 
	gd
 = 
dims
;

510 
uch¨
* 
	gp
 = 
d©a
;

511 
CV_DbgAs£π
–
d
 >1 && 
p
 );

512  
	gi
 = 0; i < 
	gd
; i++ )

514 
CV_DbgAs£π
–()
idx
[
i
] < ()
size
.
p
[i] );

515 
	gp
 +
idx
[
i
]*
°ï
.
p
[i];

517  
	gp
;

520 
ölöe
 c⁄° 
uch¨
* 
	gM©
::
±r
(c⁄° * 
idx
) const

522 
i
, 
	gd
 = 
dims
;

523 
uch¨
* 
	gp
 = 
d©a
;

524 
CV_DbgAs£π
–
d
 >1 && 
p
 );

525  
	gi
 = 0; i < 
	gd
; i++ )

527 
CV_DbgAs£π
–()
idx
[
i
] < ()
size
.
p
[i] );

528 
	gp
 +
idx
[
i
]*
°ï
.
p
[i];

530  
	gp
;

533 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gM©
::
©
(
i0
, 
i1
)

535 
CV_DbgAs£π
–
dims
 <2 && 
d©a
 && ()
i0
 < ()
size
.
p
[0] &&

536 ()(
i1
*
D©aTy≥
<
_Tp
>::
ch™√ls
Ë< ()(
size
.
p
[1]*channels()) &&

537 
CV_ELEM_SIZE1
(
D©aTy≥
<
_Tp
>::
dïth
Ë=
ñemSize1
());

538  ((
	g_Tp
*)(
	gd©a
 + 
	g°ï
.
	gp
[0]*
	gi0
))[
i1
];

541 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gM©
::
©
(
i0
, 
i1
) const

543 
CV_DbgAs£π
–
dims
 <2 && 
d©a
 && ()
i0
 < ()
size
.
p
[0] &&

544 ()(
i1
*
D©aTy≥
<
_Tp
>::
ch™√ls
Ë< ()(
size
.
p
[1]*channels()) &&

545 
CV_ELEM_SIZE1
(
D©aTy≥
<
_Tp
>::
dïth
Ë=
ñemSize1
());

546  ((c⁄° 
	g_Tp
*)(
	gd©a
 + 
	g°ï
.
	gp
[0]*
	gi0
))[
i1
];

549 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gM©
::
©
(
Poöt
 
±
)

551 
CV_DbgAs£π
–
dims
 <2 && 
d©a
 && ()
±
.
y
 < ()
size
.
p
[0] &&

552 ()(
±
.
x
*
D©aTy≥
<
_Tp
>::
ch™√ls
Ë< ()(
size
.
p
[1]*channels()) &&

553 
CV_ELEM_SIZE1
(
D©aTy≥
<
_Tp
>::
dïth
Ë=
ñemSize1
());

554  ((
	g_Tp
*)(
	gd©a
 + 
	g°ï
.
	gp
[0]*
	g±
.
	gy
))[
±
.
x
];

557 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gM©
::
©
(
Poöt
 
±
) const

559 
CV_DbgAs£π
–
dims
 <2 && 
d©a
 && ()
±
.
y
 < ()
size
.
p
[0] &&

560 ()(
±
.
x
*
D©aTy≥
<
_Tp
>::
ch™√ls
Ë< ()(
size
.
p
[1]*channels()) &&

561 
CV_ELEM_SIZE1
(
D©aTy≥
<
_Tp
>::
dïth
Ë=
ñemSize1
());

562  ((c⁄° 
	g_Tp
*)(
	gd©a
 + 
	g°ï
.
	gp
[0]*
	g±
.
	gy
))[
±
.
x
];

565 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gM©
::
©
(
i0
)

567 
CV_DbgAs£π
–
dims
 <2 && 
d©a
 &&

568 ()
i0
 < ()(
size
.
p
[0]*size.p[1]) &&

569 
ñemSize
(Ë=
CV_ELEM_SIZE
(
D©aTy≥
<
_Tp
>::
ty≥
) );

570 if–
isC⁄töuous
(Ë|| 
	gsize
.
	gp
[0] == 1 )

571  ((
_Tp
*)
d©a
)[
i0
];

572 if–
	gsize
.
	gp
[1] == 1 )

573  *(
_Tp
*)(
d©a
 + 
°ï
.
p
[0]*
i0
);

574 
	gi
 = 
i0
/
cﬁs
, 
	gj
 = i0 - 
i
*cols;

575  ((
	g_Tp
*)(
	gd©a
 + 
	g°ï
.
	gp
[0]*
	gi
))[
j
];

578 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gM©
::
©
(
i0
) const

580 
CV_DbgAs£π
–
dims
 <2 && 
d©a
 &&

581 ()
i0
 < ()(
size
.
p
[0]*size.p[1]) &&

582 
ñemSize
(Ë=
CV_ELEM_SIZE
(
D©aTy≥
<
_Tp
>::
ty≥
) );

583 if–
isC⁄töuous
(Ë|| 
	gsize
.
	gp
[0] == 1 )

584  ((c⁄° 
_Tp
*)
d©a
)[
i0
];

585 if–
	gsize
.
	gp
[1] == 1 )

586  *(c⁄° 
_Tp
*)(
d©a
 + 
°ï
.
p
[0]*
i0
);

587 
	gi
 = 
i0
/
cﬁs
, 
	gj
 = i0 - 
i
*cols;

588  ((c⁄° 
	g_Tp
*)(
	gd©a
 + 
	g°ï
.
	gp
[0]*
	gi
))[
j
];

591 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gM©
::
©
(
i0
, 
i1
, 
i2
)

593 
CV_DbgAs£π
–
ñemSize
(Ë=
CV_ELEM_SIZE
(
D©aTy≥
<
_Tp
>::
ty≥
) );

594  *(
	g_Tp
*)
±r
(
i0
, 
i1
, 
i2
);

596 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gM©
::
©
(
i0
, 
i1
, 
i2
) const

598 
CV_DbgAs£π
–
ñemSize
(Ë=
CV_ELEM_SIZE
(
D©aTy≥
<
_Tp
>::
ty≥
) );

599  *(c⁄° 
	g_Tp
*)
±r
(
i0
, 
i1
, 
i2
);

601 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gM©
::
©
(c⁄° * 
idx
)

603 
CV_DbgAs£π
–
ñemSize
(Ë=
CV_ELEM_SIZE
(
D©aTy≥
<
_Tp
>::
ty≥
) );

604  *(
	g_Tp
*)
±r
(
idx
);

606 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gM©
::
©
(c⁄° * 
idx
) const

608 
CV_DbgAs£π
–
ñemSize
(Ë=
CV_ELEM_SIZE
(
D©aTy≥
<
_Tp
>::
ty≥
) );

609  *(c⁄° 
	g_Tp
*)
±r
(
idx
);

611 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gn
> _Tp& 
	gM©
::
©
(c⁄° 
Vec
<, 
n
>& 
idx
)

613 
CV_DbgAs£π
–
ñemSize
(Ë=
CV_ELEM_SIZE
(
D©aTy≥
<
_Tp
>::
ty≥
) );

614  *(
	g_Tp
*)
±r
(
idx
.
vÆ
);

616 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gn
> 
ölöe
 c⁄° _Tp& 
	gM©
::
©
(c⁄° 
Vec
<, 
n
>& 
idx
) const

618 
CV_DbgAs£π
–
ñemSize
(Ë=
CV_ELEM_SIZE
(
D©aTy≥
<
_Tp
>::
ty≥
) );

619  *(c⁄° 
	g_Tp
*)
±r
(
idx
.
vÆ
);

623 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp> 
	gM©
::
begö
() const

625 
CV_DbgAs£π
–
ñemSize
(Ë=(
_Tp
) );

626  
	gM©C⁄°Iãøt‹_
<
	g_Tp
>((c⁄° 
	gM©_
<_Tp>*)
	gthis
);

629 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp> 
	gM©
::
íd
() const

631 
CV_DbgAs£π
–
ñemSize
(Ë=(
_Tp
) );

632 
	gM©C⁄°Iãøt‹_
<
	g_Tp
> 
ô
((c⁄° 
M©_
<
_Tp
>*)
this
);

633 
	gô
 +
tŸÆ
();

634  
	gô
;

637 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp> 
	gM©
::
begö
()

639 
CV_DbgAs£π
–
ñemSize
(Ë=(
_Tp
) );

640  
	gM©Iãøt‹_
<
	g_Tp
>((
	gM©_
<_Tp>*)
	gthis
);

643 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp> 
	gM©
::
íd
()

645 
CV_DbgAs£π
–
ñemSize
(Ë=(
_Tp
) );

646 
	gM©Iãøt‹_
<
	g_Tp
> 
ô
((
M©_
<
_Tp
>*)
this
);

647 
	gô
 +
tŸÆ
();

648  
	gô
;

651 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©
::
›î©‹
 
ve˘‹
<
_Tp
>() const

653 
ve˘‹
<
_Tp
> 
v
;

654 
c›yTo
(
v
);

655  
	gv
;

658 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gn
> 
ölöe
 
	gM©
::
›î©‹
 
Vec
<
_Tp
,Ç>() const

660 
CV_As£π
–
d©a
 && 
dims
 <2 && (
rows
 =1 || 
cﬁs
 == 1) &&

661 
rows
 + 
cﬁs
 - 1 =
n
 && 
ch™√ls
() == 1 );

663 if–
isC⁄töuous
(Ë&& 
ty≥
(Ë=
D©aTy≥
<
_Tp
>::type )

664  
Vec
<
_Tp
, 
	gn
>((
	g_Tp
*)
	gd©a
);

665 
	gVec
<
	g_Tp
, 
	gn
> 
	gv
; 
M©
 
tmp
(
rows
, 
cﬁs
, 
D©aTy≥
<
_Tp
>::
ty≥
, 
v
.
vÆ
);

666 
c⁄vîtTo
(
tmp
,Åmp.
ty≥
());

667  
	gv
;

670 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©
::
›î©‹
 
M©x
<
_Tp
, m,Ç>() const

672 
CV_As£π
–
d©a
 && 
dims
 <2 && 
rows
 =
m
 && 
cﬁs
 =
n
 && 
ch™√ls
() == 1 );

674 if–
isC⁄töuous
(Ë&& 
ty≥
(Ë=
D©aTy≥
<
_Tp
>::type )

675  
M©x
<
_Tp
, 
	gm
, 
	gn
>((
	g_Tp
*)
	gd©a
);

676 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	gmtx
; 
M©
 
tmp
(
rows
, 
cﬁs
, 
D©aTy≥
<
_Tp
>::
ty≥
, 
mtx
.
vÆ
);

677 
c⁄vîtTo
(
tmp
,Åmp.
ty≥
());

678  
	gmtx
;

682 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©
::
push_back
(c⁄° 
_Tp
& 
ñem
)

684 if–!
d©a
 )

686 *
this
 = 
M©
(1, 1, 
D©aTy≥
<
_Tp
>::
ty≥
, (*)&
ñem
).
˛⁄e
();

689 
CV_As£π
(
D©aTy≥
<
_Tp
>::
ty≥
 =ty≥(Ë&& 
cﬁs
 == 1

691 
uch¨
* 
	gtmp
 = 
d©´nd
 + 
°ï
[0];

692 if–!
isSubm©rix
(Ë&& 
isC⁄töuous
(Ë&& 
	gtmp
 <
d©Æimô
 )

694 *(
_Tp
*)(
d©a
 + (
size
.
p
[0]++)*
°ï
.p[0]Ë
ñem
;

695 
	gd©´nd
 = 
tmp
;

698 
push_back_
(&
ñem
);

701 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©
::
push_back
(c⁄° 
M©_
<
_Tp
>& 
m
)

703 
push_back
((c⁄° 
M©
&)
m
);

706 
ölöe
 
	gM©
::
MSize
::MSize(* 
_p
Ë: 
p
(_p) {}

707 
ölöe
 
Size
 
M©
::
MSize
::
›î©‹
()() const

709 
CV_DbgAs£π
(
p
[-1] <= 2);

710  
Size
(
p
[1],Ö[0]);

712 
ölöe
 c⁄° & 
	gM©
::
MSize
::
›î©‹
[](
i
Ëc⁄° {  
p
[i]; }

713 
ölöe
 & 
	gM©
::
MSize
::
›î©‹
[](
i
Ë{  
p
[i]; }

714 
ölöe
 
	gM©
::
MSize
::
›î©‹
 c⁄° *(Ëc⁄° {  
p
; }

716 
ölöe
 
boﬁ
 
	gM©
::
MSize
::
›î©‹
 =(c⁄° MSize& 
sz
) const

718 
d
 = 
p
[-1], 
	gdsz
 = 
sz
.p[-1];

719 if–
	gd
 !
dsz
 )

720  
Ál£
;

721 if–
	gd
 == 2 )

722  
p
[0] =
sz
.p[0] &&Ö[1] == sz.p[1];

724  
	gi
 = 0; i < 
	gd
; i++ )

725 if–
	gp
[
i
] !
sz
.
p
[i] )

726  
Ál£
;

727  
	gåue
;

730 
ölöe
 
boﬁ
 
	gM©
::
MSize
::
›î©‹
 !(c⁄° MSize& 
sz
) const

732  !(*
this
 =
sz
);

735 
ölöe
 
	gM©
::
MSãp
::MSãp(Ë{ 
p
 = 
buf
; 
	gp
[0] =Ö[1] = 0; }

736 
ölöe
 
	gM©
::
MSãp
::MSãp(
size_t
 
s
Ë{ 
p
 = 
buf
; 
	gp
[0] = s;Ö[1] = 0; }

737 
ölöe
 c⁄° 
	gsize_t
& 
	gM©
::
MSãp
::
›î©‹
[](
i
Ëc⁄° {  
p
[i]; }

738 
ölöe
 
	gsize_t
& 
	gM©
::
MSãp
::
›î©‹
[](
i
Ë{  
p
[i]; }

739 
ölöe
 
	gM©
::
MSãp
::
›î©‹
 
size_t
() const

741 
CV_DbgAs£π
–
p
 =
buf
 );

742  
	gbuf
[0];

744 
ölöe
 
	gM©
::
MSãp
& 
M©
::MSãp::
›î©‹
 = (
size_t
 
s
)

746 
CV_DbgAs£π
–
p
 =
buf
 );

747 
	gbuf
[0] = 
s
;

748  *
	gthis
;

751 
ölöe
 
M©
 
cv¨rToM©ND
(c⁄° 
CvAº
* 
¨r
, 
boﬁ
 
c›yD©a
=
Ál£
, 
coiMode
=0)

753  
cv¨rToM©
(
¨r
, 
c›yD©a
, 
åue
, 
coiMode
);

758 
ölöe
 
	gSVD
::
SVD
() {}

759 
ölöe
 
SVD
::SVD–
I≈utAºay
 
m
, 
Êags
 ) { 
›î©‹
 ()(
	gm
, 
	gÊags
); }

760 
ölöe
 
	gSVD
::
sﬁveZ
–
I≈utAºay
 
m
, 
OuçutAºay
 
_d°
 )

762 
M©
 
	gmtx
 = 
m
.
gëM©
();

763 
SVD
 
svd
(
mtx
, (mtx.
rows
 >mtx.
cﬁs
 ? 0 : SVD::
FULL_UV
));

764 
	g_d°
.
¸óã
(
svd
.
vt
.
cﬁs
, 1, svd.vt.
ty≥
());

765 
M©
 
	gd°
 = 
_d°
.
gëM©
();

766 
	gsvd
.
	gvt
.
row
(
svd
.
vt
.
rows
-1).
ªsh≠e
(1,svd.vt.
cﬁs
).
c›yTo
(
d°
);

769 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
, 
	gnm
> 
ölöe
 

770 
	gSVD
::
compuã
–c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
a
, M©x<_Tp, 
nm
, 1>& 
w
, M©x<_Tp, m,Çm>& 
u
, M©x<_Tp,Ç,Çm>& 
vt
 )

772 
as£π
–
nm
 =
MIN
(
m
, 
n
));

773 
M©
 
_a
(
a
, 
Ál£
), 
_u
(
u
, fÆ£), 
_w
(
w
, fÆ£), 
_vt
(
vt
, false);

774 
	gSVD
::
compuã
(
_a
, 
_w
, 
_u
, 
_vt
);

775 
CV_As£π
(
_w
.
d©a
 =(
uch¨
*)&
w
.
vÆ
[0] && 
_u
.d©®=(uch¨*)&
u
.vÆ[0] && 
_vt
.d©®=(uch¨*)&
vt
.val[0]);

778 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
, 
	gnm
> 
ölöe
 

779 
	gSVD
::
compuã
–c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
a
, M©x<_Tp, 
nm
, 1>& 
w
 )

781 
as£π
–
nm
 =
MIN
(
m
, 
n
));

782 
M©
 
_a
(
a
, 
Ál£
), 
_w
(
w
, false);

783 
	gSVD
::
compuã
(
_a
, 
_w
);

784 
CV_As£π
(
_w
.
d©a
 =(
uch¨
*)&
w
.
vÆ
[0]);

787 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
, 
	gnm
, 
	gnb
> 
ölöe
 

788 
	gSVD
::
backSub°
–c⁄° 
M©x
<
_Tp
, 
nm
, 1>& 
w
, c⁄° M©x<_Tp, 
m
,Çm>& 
u
,

789 c⁄° 
M©x
<
_Tp
, 
n
, 
nm
>& 
vt
, c⁄° M©x<_Tp, 
m
, 
nb
>& 
rhs
,

790 
M©x
<
_Tp
, 
n
, 
nb
>& 
d°
 )

792 
as£π
–
nm
 =
MIN
(
m
, 
n
));

793 
M©
 
_u
(
u
, 
Ál£
), 
_w
(
w
, fÆ£), 
_vt
(
vt
, fÆ£), 
_rhs
(
rhs
, fÆ£), 
_d°
(
d°
, false);

794 
	gSVD
::
backSub°
(
_w
, 
_u
, 
_vt
, 
_rhs
, 
_d°
);

795 
CV_As£π
(
_d°
.
d©a
 =(
uch¨
*)&
d°
.
vÆ
[0]);

800 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
M©_
()

801 : 
M©
(Ë{ 
Êags
 = (Êag†& ~
CV_MAT_TYPE_MASK
Ë| 
D©aTy≥
<
_Tp
>::
ty≥
; }

803 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
M©_
(
_rows
, 
_cﬁs
)

804 : 
M©
(
_rows
, 
_cﬁs
, 
D©aTy≥
<
_Tp
>::
ty≥
) {}

806 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
M©_
<_Tp>::M©_(
_rows
, 
_cﬁs
, c⁄° _Tp& 
vÆue
)

807 : 
M©
(
_rows
, 
_cﬁs
, 
D©aTy≥
<
_Tp
>::
ty≥
Ë{ *
this
 = 
vÆue
; }

809 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
M©_
(
Size
 
_sz
)

810 : 
M©
(
_sz
.
height
, _sz.
width
, 
D©aTy≥
<
_Tp
>::
ty≥
) {}

812 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
M©_
<_Tp>::M©_(
Size
 
_sz
, c⁄° _Tp& 
vÆue
)

813 : 
M©
(
_sz
.
height
, _sz.
width
, 
D©aTy≥
<
_Tp
>::
ty≥
Ë{ *
this
 = 
vÆue
; }

815 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
M©_
(
_dims
, c⁄° * 
_sz
)

816 : 
M©
(
_dims
, 
_sz
, 
D©aTy≥
<
_Tp
>::
ty≥
) {}

818 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
M©_
<_Tp>::M©_(
_dims
, c⁄° * 
_sz
, c⁄° _Tp& 
_s
)

819 : 
M©
(
_dims
, 
_sz
, 
D©aTy≥
<
_Tp
>::
ty≥
, 
Sˇœr
(
_s
)) {}

821 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
M©_
(c⁄° M©_<
_Tp
>& 
m
, c⁄° 
R™ge
* 
ønges
)

822 : 
M©
(
m
, 
ønges
) {}

824 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
M©_
(c⁄° 
M©
& 
m
)

825 : 
M©
(Ë{ 
Êags
 = (Êag†& ~
CV_MAT_TYPE_MASK
Ë| 
D©aTy≥
<
_Tp
>::
ty≥
; *
	gthis
 = 
m
; }

827 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
M©_
(c⁄° M©_& 
m
)

828 : 
M©
(
m
) {}

830 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
M©_
<_Tp>::M©_(
_rows
, 
_cﬁs
, _Tp* 
_d©a
, 
size_t
 
°ïs
)

831 : 
M©
(
_rows
, 
_cﬁs
, 
D©aTy≥
<
_Tp
>::
ty≥
, 
_d©a
, 
°ïs
) {}

833 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
M©_
(c⁄° M©_& 
m
, c⁄° 
R™ge
& 
_rowR™ge
, c⁄° R™ge& 
_cﬁR™ge
)

834 : 
M©
(
m
, 
_rowR™ge
, 
_cﬁR™ge
) {}

836 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
M©_
(c⁄° M©_& 
m
, c⁄° 
Re˘
& 
roi
)

837 : 
M©
(
m
, 
roi
) {}

839 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<
	gn
> 
ölöe


840 
	gM©_
<
	g_Tp
>::
M©_
(c⁄° 
Vec
<
ty≥«me
 
D©aTy≥
<
_Tp
>::
ch™√l_ty≥
, 
n
>& 
vec
, 
boﬁ
 
c›yD©a
)

841 : 
M©
(
n
/
D©aTy≥
<
_Tp
>::
ch™√ls
, 1, D©aTy≥<_Tp>::
ty≥
, (*)&
vec
)

843 
CV_As£π
(
n
%
D©aTy≥
<
_Tp
>::
ch™√ls
 == 0);

844 if–
	gc›yD©a
 )

845 *
	gthis
 = 
˛⁄e
();

848 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<
	gm
, 
	gn
> 
ölöe


849 
	gM©_
<
	g_Tp
>::
M©_
(c⁄° 
M©x
<
ty≥«me
 
D©aTy≥
<
_Tp
>::
ch™√l_ty≥
,
m
,
n
>& 
M
, 
boﬁ
 
c›yD©a
)

850 : 
M©
(
m
, 
n
/
D©aTy≥
<
_Tp
>::
ch™√ls
, D©aTy≥<_Tp>::
ty≥
, (*)&
M
)

852 
CV_As£π
(
n
 % 
D©aTy≥
<
_Tp
>::
ch™√ls
 == 0);

853 if–
	gc›yD©a
 )

854 *
	gthis
 = 
˛⁄e
();

857 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
M©_
(c⁄° 
Poöt_
<ty≥«mê
D©aTy≥
<
_Tp
>::
ch™√l_ty≥
>& 
±
, 
boﬁ
 
c›yD©a
)

858 : 
M©
(2/
D©aTy≥
<
_Tp
>::
ch™√ls
, 1, D©aTy≥<_Tp>::
ty≥
, (*)&
±
)

860 
CV_As£π
(2 % 
D©aTy≥
<
_Tp
>::
ch™√ls
 == 0);

861 if–
	gc›yD©a
 )

862 *
	gthis
 = 
˛⁄e
();

865 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
M©_
(c⁄° 
Poöt3_
<ty≥«mê
D©aTy≥
<
_Tp
>::
ch™√l_ty≥
>& 
±
, 
boﬁ
 
c›yD©a
)

866 : 
M©
(3/
D©aTy≥
<
_Tp
>::
ch™√ls
, 1, D©aTy≥<_Tp>::
ty≥
, (*)&
±
)

868 
CV_As£π
(3 % 
D©aTy≥
<
_Tp
>::
ch™√ls
 == 0);

869 if–
	gc›yD©a
 )

870 *
	gthis
 = 
˛⁄e
();

873 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
M©_
(c⁄° 
M©CommaInôülizî_
<
_Tp
>& 
commaInôülizî
)

874 : 
M©
(
commaInôülizî
) {}

876 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
M©_
<_Tp>::M©_(c⁄° 
ve˘‹
<_Tp>& 
vec
, 
boﬁ
 
c›yD©a
)

877 : 
M©
(
vec
, 
c›yD©a
) {}

879 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>& M©_<_Tp>::
›î©‹
 = (c⁄° 
M©
& 
m
)

881 if–
D©aTy≥
<
_Tp
>::
ty≥
 =
m
.type() )

883 
M©
::
›î©‹
 = (
m
);

884  *
	gthis
;

886 if–
	gD©aTy≥
<
	g_Tp
>::
dïth
 =
m
.depth() )

888  (*
this
 = 
m
.
ªsh≠e
(
D©aTy≥
<
_Tp
>::
ch™√ls
, m.
dims
, 0));

890 
CV_DbgAs£π
(
D©aTy≥
<
_Tp
>::
ch™√ls
 =
m
.channels());

891 
	gm
.
c⁄vîtTo
(*
this
, 
ty≥
());

892  *
	gthis
;

895 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>& M©_<_Tp>::
›î©‹
 = (c⁄° 
M©_
& 
m
)

897 
M©
::
›î©‹
=(
m
);

898  *
	gthis
;

901 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>& M©_<_Tp>::
›î©‹
 = (c⁄° 
_Tp
& 
s
)

903 
ty≥«me
 
	tD©aTy≥
<
	t_Tp
>::
	tvec_ty≥
 
	tVT
;

904 
	gM©
::
›î©‹
=(
Sˇœr
((c⁄° 
VT
&)
s
));

905  *
	gthis
;

908 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
¸óã
(
_rows
, 
_cﬁs
)

910 
	gM©
::
¸óã
(
_rows
, 
_cﬁs
, 
D©aTy≥
<
_Tp
>::
ty≥
);

913 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
¸óã
(
Size
 
_sz
)

915 
M©
::
¸óã
(
_sz
, 
D©aTy≥
<
_Tp
>::
ty≥
);

918 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
¸óã
(
_dims
, c⁄° * 
_sz
)

920 
	gM©
::
¸óã
(
_dims
, 
_sz
, 
D©aTy≥
<
_Tp
>::
ty≥
);

924 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp> M©_<_Tp>::
¸oss
(c⁄° 
M©_
& 
m
) const

925 {  
M©_
<
_Tp
>(
M©
::
¸oss
(
m
)); }

927 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<ty≥«mê
	gT2
> 
ölöe
 
	gM©_
<_Tp>::
›î©‹
 
M©_
<
T2
>() const

928 {  
M©_
<
T2
>(*
this
); }

930 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp> M©_<_Tp>::
row
(
y
) const

931 {  
M©_
(*
this
, 
R™ge
(
y
, y+1), R™ge::
Æl
()); }

932 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp> M©_<_Tp>::
cﬁ
(
x
) const

933 {  
M©_
(*
this
, 
R™ge
::
Æl
(), R™ge(
x
, x+1)); }

934 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp> M©_<_Tp>::
düg
(
d
) const

935 {  
M©_
(
M©
::
düg
(
d
)); }

936 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp> M©_<_Tp>::
˛⁄e
() const

937 {  
M©_
(
M©
::
˛⁄e
()); }

939 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
size_t
 
	gM©_
<_Tp>::
ñemSize
() const

941 
CV_DbgAs£π
–
M©
::
ñemSize
(Ë=(
_Tp
) );

942  (
	g_Tp
);

945 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
size_t
 
	gM©_
<_Tp>::
ñemSize1
() const

947 
CV_DbgAs£π
–
M©
::
ñemSize1
(Ë=(
_Tp
)/
D©aTy≥
<_Tp>::
ch™√ls
 );

948  (
	g_Tp
)/
	gD©aTy≥
<_Tp>::
ch™√ls
;

950 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
ty≥
() const

952 
CV_DbgAs£π
–
M©
::
ty≥
(Ë=
D©aTy≥
<
_Tp
>::type );

953  
	gD©aTy≥
<
	g_Tp
>::
ty≥
;

955 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
dïth
() const

957 
CV_DbgAs£π
–
M©
::
dïth
(Ë=
D©aTy≥
<
_Tp
>::depth );

958  
	gD©aTy≥
<
	g_Tp
>::
dïth
;

960 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
ch™√ls
() const

962 
CV_DbgAs£π
–
M©
::
ch™√ls
(Ë=
D©aTy≥
<
_Tp
>::channels );

963  
	gD©aTy≥
<
	g_Tp
>::
ch™√ls
;

965 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
size_t
 
	gM©_
<_Tp>::
°ïT
(
i
Ëc⁄° {  
°ï
.
p
[i]/
ñemSize
(); }

966 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
size_t
 
	gM©_
<_Tp>::
°ï1
(
i
Ëc⁄° {  
°ï
.
p
[i]/
ñemSize1
(); }

968 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>& M©_<_Tp>::
adju°ROI
–
dt›
, 
dbŸtom
, 
dÀ·
, 
dright
 )

969 {  (
	gM©_
<
	g_Tp
>&)(
	gM©
::
adju°ROI
(
dt›
, 
dbŸtom
, 
dÀ·
, 
dright
)); }

971 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp> M©_<_Tp>::
›î©‹
()–c⁄° 
R™ge
& 
_rowR™ge
, c⁄° 
	gR™ge
& 
	g_cﬁR™ge
 ) const

972 {  
	gM©_
<
	g_Tp
>(*
	gthis
, 
	g_rowR™ge
, 
	g_cﬁR™ge
); }

974 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp> M©_<_Tp>::
›î©‹
()–c⁄° 
Re˘
& 
roi
 ) const

975 {  
M©_
<
_Tp
>(*
this
, 
	groi
); }

977 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp> M©_<_Tp>::
›î©‹
()–c⁄° 
R™ge
* 
ønges
 ) const

978 {  
M©_
<
_Tp
>(*
this
, 
	gønges
); }

980 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
* 
	gM©_
<_Tp>::
›î©‹
 [](
y
)

981 {  (
_Tp
*)
±r
(
y
); }

982 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° 
_Tp
* 
	gM©_
<_Tp>::
›î©‹
 [](
y
) const

983 {  (c⁄° 
_Tp
*)
±r
(
y
); }

985 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gM©_
<_Tp>::
›î©‹
 ()(
i0
, 
	gi1
)

987 
CV_DbgAs£π
–
dims
 <2 && 
d©a
 &&

988 ()
i0
 < ()
size
.
p
[0] &&

989 ()
i1
 < ()
size
.
p
[1] &&

990 
ty≥
(Ë=
D©aTy≥
<
_Tp
>::type );

991  ((
	g_Tp
*)(
	gd©a
 + 
	g°ï
.
	gp
[0]*
	gi0
))[
i1
];

994 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gM©_
<_Tp>::
›î©‹
 ()(
i0
, 
	gi1
) const

996 
CV_DbgAs£π
–
dims
 <2 && 
d©a
 &&

997 ()
i0
 < ()
size
.
p
[0] &&

998 ()
i1
 < ()
size
.
p
[1] &&

999 
ty≥
(Ë=
D©aTy≥
<
_Tp
>::type );

1000  ((c⁄° 
	g_Tp
*)(
	gd©a
 + 
	g°ï
.
	gp
[0]*
	gi0
))[
i1
];

1003 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gM©_
<_Tp>::
›î©‹
 ()(
Poöt
 
±
)

1005 
CV_DbgAs£π
–
dims
 <2 && 
d©a
 &&

1006 ()
±
.
y
 < ()
size
.
p
[0] &&

1007 ()
±
.
x
 < ()
size
.
p
[1] &&

1008 
ty≥
(Ë=
D©aTy≥
<
_Tp
>::type );

1009  ((
	g_Tp
*)(
	gd©a
 + 
	g°ï
.
	gp
[0]*
	g±
.
	gy
))[
±
.
x
];

1012 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gM©_
<_Tp>::
›î©‹
 ()(
Poöt
 
±
) const

1014 
CV_DbgAs£π
–
dims
 <2 && 
d©a
 &&

1015 ()
±
.
y
 < ()
size
.
p
[0] &&

1016 ()
±
.
x
 < ()
size
.
p
[1] &&

1017 
ty≥
(Ë=
D©aTy≥
<
_Tp
>::type );

1018  ((c⁄° 
	g_Tp
*)(
	gd©a
 + 
	g°ï
.
	gp
[0]*
	g±
.
	gy
))[
±
.
x
];

1021 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gM©_
<_Tp>::
›î©‹
 ()(c⁄° * 
idx
)

1023  
M©
::
©
<
_Tp
>(
idx
);

1026 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gM©_
<_Tp>::
›î©‹
 ()(c⁄° * 
idx
) const

1028  
M©
::
©
<
_Tp
>(
idx
);

1031 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<
	gn
> 
ölöe
 _Tp& 
	gM©_
<_Tp>::
›î©‹
 ()(c⁄° 
Vec
<,Ç>& 
	gidx
)

1033  
	gM©
::
©
<
_Tp
>(
idx
);

1036 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<
	gn
> 
ölöe
 c⁄° _Tp& 
	gM©_
<_Tp>::
›î©‹
 ()(c⁄° 
Vec
<,Ç>& 
	gidx
) const

1038  
	gM©
::
©
<
_Tp
>(
idx
);

1041 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gM©_
<_Tp>::
›î©‹
 ()(
i0
)

1043  
this
->
©
<
_Tp
>(
i0
);

1046 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gM©_
<_Tp>::
›î©‹
 ()(
i0
) const

1048  
this
->
©
<
_Tp
>(
i0
);

1051 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gM©_
<_Tp>::
›î©‹
 ()(
i0
, 
	gi1
, 
	gi2
)

1053  
	gthis
->
	g©
<
	g_Tp
>(
	gi0
, 
	gi1
, 
	gi2
);

1056 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gM©_
<_Tp>::
›î©‹
 ()(
i0
, 
	gi1
, 
	gi2
) const

1058  
	gthis
->
	g©
<
	g_Tp
>(
	gi0
, 
	gi1
, 
	gi2
);

1062 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
›î©‹
 
ve˘‹
<
_Tp
>() const

1064 
ve˘‹
<
_Tp
> 
v
;

1065 
c›yTo
(
v
);

1066  
	gv
;

1069 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<
	gn
> 
ölöe
 
	gM©_
<_Tp>::
›î©‹
 
Vec
<ty≥«mê
D©aTy≥
<
_Tp
>::
ch™√l_ty≥
,Ç>() const

1071 
CV_As£π
(
n
 % 
D©aTy≥
<
_Tp
>::
ch™√ls
 == 0);

1072  
	gthis
->
	gM©
::
›î©‹
 
Vec
<
ty≥«me
 
D©aTy≥
<
_Tp
>::
ch™√l_ty≥
, 
	gn
>();

1075 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<
	gm
, 
	gn
> 
ölöe
 
	gM©_
<_Tp>::
›î©‹
 
M©x
<ty≥«mê
D©aTy≥
<
_Tp
>::
ch™√l_ty≥
, m,Ç>() const

1077 
CV_As£π
(
n
 % 
D©aTy≥
<
_Tp
>::
ch™√ls
 == 0);

1079 
	gM©x
<
ty≥«me
 
	gD©aTy≥
<
	g_Tp
>::
ch™√l_ty≥
, 
	gm
, 
	gn
> 
	gªs
 = 
this
->
M©
::
›î©‹
 
M©x
<ty≥«mê
D©aTy≥
<
_Tp
>::channel_type, m,Ç>();

1080  
	gªs
;

1083 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gOp
> 
ölöe
 

1084 
¥o˚ss
–c⁄° 
M©_
<
T1
>& 
m1
, M©_<
T2
>& 
m2
, 
Op
 
›
 )

1086 
	gy
, 
	gx
, 
	grows
 = 
m1
.
rows
, 
	gcﬁs
 = m1.
cﬁs
;

1088 
CV_DbgAs£π
–
m1
.
size
(Ë=
m2
.size() );

1090  
	gy
 = 0; y < 
	grows
; y++ )

1092 c⁄° 
T1
* 
	g§c
 = 
m1
[
y
];

1093 
T2
* 
	gd°
 = 
m2
[
y
];

1095  
	gx
 = 0; x < 
	gcﬁs
; x++ )

1096 
	gd°
[
x
] = 
›
(
§c
[x]);

1100 
	gãm∂©e
<
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
,Åy≥«mê
	gT3
,Åy≥«mê
	gOp
> 
ölöe
 

1101 
¥o˚ss
–c⁄° 
M©_
<
T1
>& 
m1
, c⁄° M©_<
T2
>& 
m2
, M©_<
T3
>& 
m3
, 
Op
 
›
 )

1103 
	gy
, 
	gx
, 
	grows
 = 
m1
.
rows
, 
	gcﬁs
 = m1.
cﬁs
;

1105 
CV_DbgAs£π
–
m1
.
size
(Ë=
m2
.size() );

1107  
	gy
 = 0; y < 
	grows
; y++ )

1109 c⁄° 
T1
* 
	g§c1
 = 
m1
[
y
];

1110 c⁄° 
T2
* 
	g§c2
 = 
m2
[
y
];

1111 
T3
* 
	gd°
 = 
m3
[
y
];

1113  
	gx
 = 0; x < 
	gcﬁs
; x++ )

1114 
	gd°
[
x
] = 
›
–
§c1
[x], 
§c2
[x] );

1121 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g_I≈utAºay
::
_I≈utAºay
(c⁄° 
ve˘‹
<
_Tp
>& 
vec
)

1122 : 
Êags
(
FIXED_TYPE
 + 
STD_VECTOR
 + 
D©aTy≥
<
_Tp
>::
ty≥
), 
obj
((*)&
vec
) {}

1124 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g_I≈utAºay
::
_I≈utAºay
(c⁄° 
ve˘‹
<ve˘‹<
_Tp
> >& 
vec
)

1125 : 
Êags
(
FIXED_TYPE
 + 
STD_VECTOR_VECTOR
 + 
D©aTy≥
<
_Tp
>::
ty≥
), 
obj
((*)&
vec
) {}

1127 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g_I≈utAºay
::
_I≈utAºay
(c⁄° 
ve˘‹
<
M©_
<
_Tp
> >& 
vec
)

1128 : 
Êags
(
FIXED_TYPE
 + 
STD_VECTOR_MAT
 + 
D©aTy≥
<
_Tp
>::
ty≥
), 
obj
((*)&
vec
) {}

1130 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	g_I≈utAºay
::
_I≈utAºay
(c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
mtx
)

1131 : 
Êags
(
FIXED_TYPE
 + 
FIXED_SIZE
 + 
MATX
 + 
D©aTy≥
<
_Tp
>::
ty≥
), 
obj
((*)&
mtx
), 
sz
(
n
, 
m
) {}

1133 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g_I≈utAºay
::
_I≈utAºay
(c⁄° 
_Tp
* 
vec
, 
n
)

1134 : 
Êags
(
FIXED_TYPE
 + 
FIXED_SIZE
 + 
MATX
 + 
D©aTy≥
<
_Tp
>::
ty≥
), 
obj
((*)
vec
), 
sz
(
n
, 1) {}

1136 
ölöe
 
	g_I≈utAºay
::
_I≈utAºay
(c⁄° 
Sˇœr
& 
s
)

1137 : 
Êags
(
FIXED_TYPE
 + 
FIXED_SIZE
 + 
MATX
 + 
CV_64F
), 
obj
((*)&
s
), 
sz
(1, 4) {}

1139 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g_I≈utAºay
::
_I≈utAºay
(c⁄° 
M©_
<
_Tp
>& 
m
)

1140 : 
Êags
(
FIXED_TYPE
 + 
MAT
 + 
D©aTy≥
<
_Tp
>::
ty≥
), 
obj
((*)&
m
) {}

1142 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g_OuçutAºay
::
_OuçutAºay
(
ve˘‹
<
_Tp
>& 
vec
)

1143 : 
_I≈utAºay
(
vec
) {}

1144 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
_OuçutAºay
::_OuçutAºay(
ve˘‹
<ve˘‹<_Tp> >& 
vec
)

1145 : 
_I≈utAºay
(
vec
) {}

1146 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
_OuçutAºay
::_OuçutAºay(
ve˘‹
<
M©_
<_Tp> >& 
vec
)

1147 : 
_I≈utAºay
(
vec
) {}

1148 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
_OuçutAºay
::_OuçutAºay(
M©_
<_Tp>& 
m
)

1149 : 
_I≈utAºay
(
m
) {}

1150 
ãm∂©e
<
ty≥«me
 
_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	g_OuçutAºay
::
_OuçutAºay
(
M©x
<_Tp, 
m
, 
n
>& 
mtx
)

1151 : 
_I≈utAºay
(
mtx
) {}

1152 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
_OuçutAºay
::_OuçutAºay(_Tp* 
vec
, 
n
)

1153 : 
_I≈utAºay
(
vec
, 
n
) {}

1155 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g_OuçutAºay
::
_OuçutAºay
(c⁄° 
ve˘‹
<
_Tp
>& 
vec
)

1156 : 
_I≈utAºay
(
vec
Ë{
Êags
 |
FIXED_SIZE
;}

1157 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g_OuçutAºay
::
_OuçutAºay
(c⁄° 
ve˘‹
<ve˘‹<
_Tp
> >& 
vec
)

1158 : 
_I≈utAºay
(
vec
Ë{
Êags
 |
FIXED_SIZE
;}

1159 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g_OuçutAºay
::
_OuçutAºay
(c⁄° 
ve˘‹
<
M©_
<
_Tp
> >& 
vec
)

1160 : 
_I≈utAºay
(
vec
Ë{
Êags
 |
FIXED_SIZE
;}

1162 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g_OuçutAºay
::
_OuçutAºay
(c⁄° 
M©_
<
_Tp
>& 
m
)

1163 : 
_I≈utAºay
(
m
Ë{
Êags
 |
FIXED_SIZE
;}

1164 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	g_OuçutAºay
::
_OuçutAºay
(c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
mtx
)

1165 : 
_I≈utAºay
(
mtx
) {}

1166 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
_OuçutAºay
::_OuçutAºay(c⁄° _Tp* 
vec
, 
n
)

1167 : 
_I≈utAºay
(
vec
, 
n
) {}

1171 ˛as†
	cCV_EXPORTS
 
	gM©Op


1173 
	gpublic
:

1174 
M©Op
() {};

1175 
	gvútuÆ
 ~
M©Op
() {};

1177 
vútuÆ
 
boﬁ
 
ñemítWi£
(c⁄° 
M©Ex¥
& 
ex¥
) const;

1178 
vútuÆ
 
assign
(c⁄° 
M©Ex¥
& 
ex¥
, 
M©
& 
m
, 
ty≥
=-1) const = 0;

1179 
vútuÆ
 
roi
(c⁄° 
M©Ex¥
& 
ex¥
, c⁄° 
R™ge
& 
rowR™ge
,

1180 c⁄° 
R™ge
& 
cﬁR™ge
, 
M©Ex¥
& 
ªs
) const;

1181 
vútuÆ
 
düg
(c⁄° 
M©Ex¥
& 
ex¥
, 
d
, M©Ex¥& 
ªs
) const;

1182 
vútuÆ
 
augAssignAdd
(c⁄° 
M©Ex¥
& 
ex¥
, 
M©
& 
m
) const;

1183 
vútuÆ
 
augAssignSubåa˘
(c⁄° 
M©Ex¥
& 
ex¥
, 
M©
& 
m
) const;

1184 
vútuÆ
 
augAssignMu…ùly
(c⁄° 
M©Ex¥
& 
ex¥
, 
M©
& 
m
) const;

1185 
vútuÆ
 
augAssignDivide
(c⁄° 
M©Ex¥
& 
ex¥
, 
M©
& 
m
) const;

1186 
vútuÆ
 
augAssignAnd
(c⁄° 
M©Ex¥
& 
ex¥
, 
M©
& 
m
) const;

1187 
vútuÆ
 
augAssignOr
(c⁄° 
M©Ex¥
& 
ex¥
, 
M©
& 
m
) const;

1188 
vútuÆ
 
augAssignX‹
(c⁄° 
M©Ex¥
& 
ex¥
, 
M©
& 
m
) const;

1190 
vútuÆ
 
add
(c⁄° 
M©Ex¥
& 
ex¥1
, c⁄° M©Ex¥& 
ex¥2
, M©Ex¥& 
ªs
) const;

1191 
vútuÆ
 
add
(c⁄° 
M©Ex¥
& 
ex¥1
, c⁄° 
Sˇœr
& 
s
, M©Ex¥& 
ªs
) const;

1193 
vútuÆ
 
subåa˘
(c⁄° 
M©Ex¥
& 
ex¥1
, c⁄° M©Ex¥& 
ex¥2
, M©Ex¥& 
ªs
) const;

1194 
vútuÆ
 
subåa˘
(c⁄° 
Sˇœr
& 
s
, c⁄° 
M©Ex¥
& 
ex¥
, M©Ex¥& 
ªs
) const;

1196 
vútuÆ
 
mu…ùly
(c⁄° 
M©Ex¥
& 
ex¥1
, c⁄° M©Ex¥& 
ex¥2
, M©Ex¥& 
ªs
, 
sˇÀ
=1) const;

1197 
vútuÆ
 
mu…ùly
(c⁄° 
M©Ex¥
& 
ex¥1
, 
s
, M©Ex¥& 
ªs
) const;

1199 
vútuÆ
 
divide
(c⁄° 
M©Ex¥
& 
ex¥1
, c⁄° M©Ex¥& 
ex¥2
, M©Ex¥& 
ªs
, 
sˇÀ
=1) const;

1200 
vútuÆ
 
divide
(
s
, c⁄° 
M©Ex¥
& 
ex¥
, M©Ex¥& 
ªs
) const;

1202 
vútuÆ
 
abs
(c⁄° 
M©Ex¥
& 
ex¥
, M©Ex¥& 
ªs
) const;

1204 
vútuÆ
 
å™•o£
(c⁄° 
M©Ex¥
& 
ex¥
, M©Ex¥& 
ªs
) const;

1205 
vútuÆ
 
m©mul
(c⁄° 
M©Ex¥
& 
ex¥1
, c⁄° M©Ex¥& 
ex¥2
, M©Ex¥& 
ªs
) const;

1206 
vútuÆ
 
övît
(c⁄° 
M©Ex¥
& 
ex¥
, 
mëhod
, M©Ex¥& 
ªs
) const;

1208 
vútuÆ
 
Size
 
size
(c⁄° 
M©Ex¥
& 
ex¥
) const;

1209 
vútuÆ
 
ty≥
(c⁄° 
M©Ex¥
& 
ex¥
) const;

1213 ˛as†
	cCV_EXPORTS
 
	gM©Ex¥


1215 
	gpublic
:

1216 
M©Ex¥
(Ë: 
›
(0), 
Êags
(0), 
a
(
M©
()), 
b
(M©()), 
c
(M©()), 
Æpha
(0), 
bëa
(0), 
s
(
Sˇœr
()) {}

1217 
M©Ex¥
(c⁄° 
M©Op
* 
_›
, 
_Êags
, c⁄° 
M©
& 
_a
=M©(), c⁄° M©& 
_b
=Mat(),

1218 c⁄° 
M©
& 
_c
=M©(), 
_Æpha
=1, 
_bëa
=1, c⁄° 
Sˇœr
& 
_s
=Scalar())

1219 : 
›
(
_›
), 
Êags
(
_Êags
), 
a
(
_a
), 
b
(
_b
), 
c
(
_c
), 
Æpha
(
_Æpha
), 
bëa
(
_bëa
), 
s
(
_s
) {}

1220 
ex∂icô
 
M©Ex¥
(c⁄° 
M©
& 
m
);

1221 
›î©‹
 
M©
() const

1223 
M©
 
	gm
;

1224 
	g›
->
assign
(*
this
, 
m
);

1225  
	gm
;

1228 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
›î©‹
 
	gM©_
<_Tp>() const

1230 
	gM©_
<
	g_Tp
> 
	gm
;

1231 
	g›
->
assign
(*
this
, 
m
, 
D©aTy≥
<
_Tp
>::
ty≥
);

1232  
	gm
;

1235 
M©Ex¥
 
row
(
y
) const;

1236 
M©Ex¥
 
cﬁ
(
x
) const;

1237 
M©Ex¥
 
düg
(
d
=0) const;

1238 
M©Ex¥
 
›î©‹
()–c⁄° 
	gR™ge
& 
	growR™ge
, c⁄° R™ge& 
	gcﬁR™ge
 ) const;

1239 
M©Ex¥
 
›î©‹
()–c⁄° 
	gRe˘
& 
	groi
 ) const;

1241 
M©
 
¸oss
(c⁄° M©& 
m
) const;

1242 
dŸ
(c⁄° 
M©
& 
m
) const;

1244 
M©Ex¥
 
t
() const;

1245 
M©Ex¥
 
öv
(
mëhod
 = 
DECOMP_LU
) const;

1246 
M©Ex¥
 
mul
(c⁄° M©Ex¥& 
e
, 
sˇÀ
=1) const;

1247 
M©Ex¥
 
mul
(c⁄° 
M©
& 
m
, 
sˇÀ
=1) const;

1249 
Size
 
size
() const;

1250 
ty≥
() const;

1252 c⁄° 
M©Op
* 
	g›
;

1253 
	gÊags
;

1255 
M©
 
	ga
, 
	gb
, 
	gc
;

1256 
	gÆpha
, 
	gbëa
;

1257 
Sˇœr
 
	gs
;

1261 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 + (c⁄° 
	gM©
& 
	ga
, c⁄° M©& 
	gb
);

1262 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 + (c⁄° 
	gM©
& 
	ga
, c⁄° 
	gSˇœr
& 
	gs
);

1263 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 + (c⁄° 
	gSˇœr
& 
	gs
, c⁄° 
	gM©
& 
	ga
);

1264 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 + (c⁄° 
	gM©Ex¥
& 
	ge
, c⁄° 
	gM©
& 
	gm
);

1265 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 + (c⁄° 
	gM©
& 
	gm
, c⁄° 
	gM©Ex¥
& 
	ge
);

1266 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 + (c⁄° 
	gM©Ex¥
& 
	ge
, c⁄° 
	gSˇœr
& 
	gs
);

1267 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 + (c⁄° 
	gSˇœr
& 
	gs
, c⁄° 
	gM©Ex¥
& 
	ge
);

1268 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 + (c⁄° 
	gM©Ex¥
& 
	ge1
, c⁄° M©Ex¥& 
	ge2
);

1270 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 - (c⁄° 
	gM©
& 
	ga
, c⁄° M©& 
	gb
);

1271 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 - (c⁄° 
	gM©
& 
	ga
, c⁄° 
	gSˇœr
& 
	gs
);

1272 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 - (c⁄° 
	gSˇœr
& 
	gs
, c⁄° 
	gM©
& 
	ga
);

1273 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 - (c⁄° 
	gM©Ex¥
& 
	ge
, c⁄° 
	gM©
& 
	gm
);

1274 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 - (c⁄° 
	gM©
& 
	gm
, c⁄° 
	gM©Ex¥
& 
	ge
);

1275 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 - (c⁄° 
	gM©Ex¥
& 
	ge
, c⁄° 
	gSˇœr
& 
	gs
);

1276 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 - (c⁄° 
	gSˇœr
& 
	gs
, c⁄° 
	gM©Ex¥
& 
	ge
);

1277 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 - (c⁄° 
	gM©Ex¥
& 
	ge1
, c⁄° M©Ex¥& 
	ge2
);

1279 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 - (c⁄° 
	gM©
& 
	gm
);

1280 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 - (c⁄° 
	gM©Ex¥
& 
	ge
);

1282 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 * (c⁄° 
	gM©
& 
	ga
, c⁄° M©& 
	gb
);

1283 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 * (c⁄° 
	gM©
& 
	ga
, 
	gs
);

1284 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 * (
	gs
, c⁄° 
	gM©
& 
	ga
);

1285 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 * (c⁄° 
	gM©Ex¥
& 
	ge
, c⁄° 
	gM©
& 
	gm
);

1286 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 * (c⁄° 
	gM©
& 
	gm
, c⁄° 
	gM©Ex¥
& 
	ge
);

1287 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 * (c⁄° 
	gM©Ex¥
& 
	ge
, 
	gs
);

1288 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 * (
	gs
, c⁄° 
	gM©Ex¥
& 
	ge
);

1289 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 * (c⁄° 
	gM©Ex¥
& 
	ge1
, c⁄° M©Ex¥& 
	ge2
);

1291 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 / (c⁄° 
	gM©
& 
	ga
, c⁄° M©& 
	gb
);

1292 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 / (c⁄° 
	gM©
& 
	ga
, 
	gs
);

1293 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 / (
	gs
, c⁄° 
	gM©
& 
	ga
);

1294 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 / (c⁄° 
	gM©Ex¥
& 
	ge
, c⁄° 
	gM©
& 
	gm
);

1295 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 / (c⁄° 
	gM©
& 
	gm
, c⁄° 
	gM©Ex¥
& 
	ge
);

1296 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 / (c⁄° 
	gM©Ex¥
& 
	ge
, 
	gs
);

1297 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 / (
	gs
, c⁄° 
	gM©Ex¥
& 
	ge
);

1298 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 / (c⁄° 
	gM©Ex¥
& 
	ge1
, c⁄° M©Ex¥& 
	ge2
);

1300 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 < (c⁄° 
	gM©
& 
	ga
, c⁄° M©& 
	gb
);

1301 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 < (c⁄° 
	gM©
& 
	ga
, 
	gs
);

1302 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 < (
	gs
, c⁄° 
	gM©
& 
	ga
);

1304 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 <(c⁄° 
M©
& 
a
, c⁄° 
	gM©
& 
	gb
);

1305 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 <(c⁄° 
M©
& 
a
, 
	gs
);

1306 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 <(
s
, c⁄° 
	gM©
& 
	ga
);

1308 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 =(c⁄° 
M©
& 
a
, c⁄° 
	gM©
& 
	gb
);

1309 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 =(c⁄° 
M©
& 
a
, 
	gs
);

1310 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 =(
s
, c⁄° 
	gM©
& 
	ga
);

1312 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 !(c⁄° 
M©
& 
a
, c⁄° 
	gM©
& 
	gb
);

1313 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 !(c⁄° 
M©
& 
a
, 
	gs
);

1314 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 !(
s
, c⁄° 
	gM©
& 
	ga
);

1316 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 >(c⁄° 
M©
& 
a
, c⁄° 
	gM©
& 
	gb
);

1317 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 >(c⁄° 
M©
& 
a
, 
	gs
);

1318 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 >(
s
, c⁄° 
	gM©
& 
	ga
);

1320 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 > (c⁄° 
	gM©
& 
	ga
, c⁄° M©& 
	gb
);

1321 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 > (c⁄° 
	gM©
& 
	ga
, 
	gs
);

1322 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 > (
	gs
, c⁄° 
	gM©
& 
	ga
);

1324 
CV_EXPORTS
 
M©Ex¥
 
mö
(c⁄° 
M©
& 
a
, c⁄° M©& 
b
);

1325 
CV_EXPORTS
 
M©Ex¥
 
mö
(c⁄° 
M©
& 
a
, 
s
);

1326 
CV_EXPORTS
 
M©Ex¥
 
mö
(
s
, c⁄° 
M©
& 
a
);

1328 
CV_EXPORTS
 
M©Ex¥
 
max
(c⁄° 
M©
& 
a
, c⁄° M©& 
b
);

1329 
CV_EXPORTS
 
M©Ex¥
 
max
(c⁄° 
M©
& 
a
, 
s
);

1330 
CV_EXPORTS
 
M©Ex¥
 
max
(
s
, c⁄° 
M©
& 
a
);

1332 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
mö
(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° M©_<_Tp>& 
b
)

1334  
	gcv
::
mö
((c⁄° 
M©
&)
a
, (c⁄° M©&)
b
);

1337 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
mö
(c⁄° 
M©_
<
_Tp
>& 
a
, 
s
)

1339  
	gcv
::
mö
((c⁄° 
M©
&)
a
, 
s
);

1342 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
mö
(
s
, c⁄° 
M©_
<
_Tp
>& 
a
)

1344  
	gcv
::
mö
((c⁄° 
M©
&)
a
, 
s
);

1347 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
max
(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° M©_<_Tp>& 
b
)

1349  
	gcv
::
max
((c⁄° 
M©
&)
a
, (c⁄° M©&)
b
);

1352 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
max
(c⁄° 
M©_
<
_Tp
>& 
a
, 
s
)

1354  
	gcv
::
max
((c⁄° 
M©
&)
a
, 
s
);

1357 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
max
(
s
, c⁄° 
M©_
<
_Tp
>& 
a
)

1359  
	gcv
::
max
((c⁄° 
M©
&)
a
, 
s
);

1362 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
mö
(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° M©_<_Tp>& 
b
, M©_<_Tp>& 
c
)

1364 
	gcv
::
mö
((c⁄° 
M©
&)
a
, (c⁄° M©&)
b
, (M©&)
c
);

1367 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
mö
(c⁄° 
M©_
<
_Tp
>& 
a
, 
s
, M©_<_Tp>& 
c
)

1369 
	gcv
::
mö
((c⁄° 
M©
&)
a
, 
s
, (M©&)
c
);

1372 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
mö
(
s
, c⁄° 
M©_
<
_Tp
>& 
a
, M©_<_Tp>& 
c
)

1374 
	gcv
::
mö
((c⁄° 
M©
&)
a
, 
s
, (M©&)
c
);

1377 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
max
(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° M©_<_Tp>& 
b
, M©_<_Tp>& 
c
)

1379 
	gcv
::
max
((c⁄° 
M©
&)
a
, (c⁄° M©&)
b
, (M©&)
c
);

1382 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
max
(c⁄° 
M©_
<
_Tp
>& 
a
, 
s
, M©_<_Tp>& 
c
)

1384 
	gcv
::
max
((c⁄° 
M©
&)
a
, 
s
, (M©&)
c
);

1387 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
max
(
s
, c⁄° 
M©_
<
_Tp
>& 
a
, M©_<_Tp>& 
c
)

1389 
	gcv
::
max
((c⁄° 
M©
&)
a
, 
s
, (M©&)
c
);

1393 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 & (c⁄° 
	gM©
& 
	ga
, c⁄° M©& 
	gb
);

1394 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 & (c⁄° 
	gM©
& 
	ga
, c⁄° 
	gSˇœr
& 
	gs
);

1395 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 & (c⁄° 
	gSˇœr
& 
	gs
, c⁄° 
	gM©
& 
	ga
);

1397 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 | (c⁄° 
	gM©
& 
	ga
, c⁄° M©& 
	gb
);

1398 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 | (c⁄° 
	gM©
& 
	ga
, c⁄° 
	gSˇœr
& 
	gs
);

1399 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 | (c⁄° 
	gSˇœr
& 
	gs
, c⁄° 
	gM©
& 
	ga
);

1401 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 ^ (c⁄° 
	gM©
& 
	ga
, c⁄° M©& 
	gb
);

1402 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 ^ (c⁄° 
	gM©
& 
	ga
, c⁄° 
	gSˇœr
& 
	gs
);

1403 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 ^ (c⁄° 
	gSˇœr
& 
	gs
, c⁄° 
	gM©
& 
	ga
);

1405 
CV_EXPORTS
 
M©Ex¥
 
	g›î©‹
 ~(c⁄° 
	gM©
& 
	gm
);

1407 
CV_EXPORTS
 
M©Ex¥
 
abs
(c⁄° 
M©
& 
m
);

1408 
CV_EXPORTS
 
M©Ex¥
 
abs
(c⁄° M©Ex¥& 
e
);

1410 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
abs
(c⁄° 
M©_
<
_Tp
>& 
m
)

1412  
	gcv
::
abs
((c⁄° 
M©
&)
m
);

1417 
ölöe
 
	gM©
& M©::
›î©‹
 = (c⁄° 
M©Ex¥
& 
e
)

1419 
e
.
›
->
assign
”, *
this
);

1420  *
	gthis
;

1423 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>::
	$M©_
(c⁄° 
M©Ex¥
& 
e
)

1425 
e
.
›
->
	`assign
”, *
this
, 
D©aTy≥
<
_Tp
>::
ty≥
);

1426 
	}
}

1428 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gM©_
<_Tp>& M©_<_Tp>::
›î©‹
 = (c⁄° 
M©Ex¥
& 
e
)

1430 
e
.
›
->
assign
”, *
this
, 
D©aTy≥
<
_Tp
>::
ty≥
);

1431  *
	gthis
;

1434 
ölöe
 
	gM©
& 
	g›î©‹
 +(c⁄° 
M©
& 
a
, c⁄° M©& 
	gb
)

1436 
add
(
a
, 
b
, (
M©
&)a);

1437  (
	gM©
&)
	ga
;

1440 
ölöe
 
	gM©
& 
	g›î©‹
 +(c⁄° 
M©
& 
a
, c⁄° 
	gSˇœr
& 
	gs
)

1442 
add
(
a
, 
s
, (
M©
&)a);

1443  (
	gM©
&)
	ga
;

1446 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1447 
	gM©_
<
	g_Tp
>& 
	g›î©‹
 +(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° M©_<_Tp>& 
	gb
)

1449 
add
(
a
, 
b
, (
M©
&)a);

1450  (
	gM©_
<
	g_Tp
>&)
	ga
;

1453 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1454 
	gM©_
<
	g_Tp
>& 
	g›î©‹
 +(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° 
	gSˇœr
& 
	gs
)

1456 
add
(
a
, 
s
, (
M©
&)a);

1457  (
	gM©_
<
	g_Tp
>&)
	ga
;

1460 
ölöe
 
	gM©
& 
	g›î©‹
 +(c⁄° 
M©
& 
a
, c⁄° 
	gM©Ex¥
& 
	gb
)

1462 
	gb
.
	g›
->
augAssignAdd
(
b
, (
M©
&)
a
);

1463  (
	gM©
&)
	ga
;

1466 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1467 
	gM©_
<
	g_Tp
>& 
	g›î©‹
 +(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° 
	gM©Ex¥
& 
	gb
)

1469 
	gb
.
	g›
->
augAssignAdd
(
b
, (
M©
&)
a
);

1470  (
	gM©_
<
	g_Tp
>&)
	ga
;

1473 
ölöe
 
	gM©
& 
	g›î©‹
 -(c⁄° 
M©
& 
a
, c⁄° M©& 
	gb
)

1475 
subåa˘
(
a
, 
b
, (
M©
&)a);

1476  (
	gM©
&)
	ga
;

1479 
ölöe
 
	gM©
& 
	g›î©‹
 -(c⁄° 
M©
& 
a
, c⁄° 
	gSˇœr
& 
	gs
)

1481 
subåa˘
(
a
, 
s
, (
M©
&)a);

1482  (
	gM©
&)
	ga
;

1485 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1486 
	gM©_
<
	g_Tp
>& 
	g›î©‹
 -(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° M©_<_Tp>& 
	gb
)

1488 
subåa˘
(
a
, 
b
, (
M©
&)a);

1489  (
	gM©_
<
	g_Tp
>&)
	ga
;

1492 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1493 
	gM©_
<
	g_Tp
>& 
	g›î©‹
 -(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° 
	gSˇœr
& 
	gs
)

1495 
subåa˘
(
a
, 
s
, (
M©
&)a);

1496  (
	gM©_
<
	g_Tp
>&)
	ga
;

1499 
ölöe
 
	gM©
& 
	g›î©‹
 -(c⁄° 
M©
& 
a
, c⁄° 
	gM©Ex¥
& 
	gb
)

1501 
	gb
.
	g›
->
augAssignSubåa˘
(
b
, (
M©
&)
a
);

1502  (
	gM©
&)
	ga
;

1505 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1506 
	gM©_
<
	g_Tp
>& 
	g›î©‹
 -(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° 
	gM©Ex¥
& 
	gb
)

1508 
	gb
.
	g›
->
augAssignSubåa˘
(
b
, (
M©
&)
a
);

1509  (
	gM©_
<
	g_Tp
>&)
	ga
;

1512 
ölöe
 
	gM©
& 
	g›î©‹
 *(c⁄° 
M©
& 
a
, c⁄° M©& 
	gb
)

1514 
gemm
(
a
, 
b
, 1, 
M©
(), 0, (Mat&)a, 0);

1515  (
	gM©
&)
	ga
;

1518 
ölöe
 
	gM©
& 
	g›î©‹
 *(c⁄° 
M©
& 
a
, 
	gs
)

1520 
	ga
.
c⁄vîtTo
((
M©
&)
a
, -1, 
s
);

1521  (
	gM©
&)
	ga
;

1524 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1525 
	gM©_
<
	g_Tp
>& 
	g›î©‹
 *(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° M©_<_Tp>& 
	gb
)

1527 
gemm
(
a
, 
b
, 1, 
M©
(), 0, (Mat&)a, 0);

1528  (
	gM©_
<
	g_Tp
>&)
	ga
;

1531 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1532 
	gM©_
<
	g_Tp
>& 
	g›î©‹
 *(c⁄° 
M©_
<
_Tp
>& 
a
, 
	gs
)

1534 
	ga
.
c⁄vîtTo
((
M©
&)
a
, -1, 
s
);

1535  (
	gM©_
<
	g_Tp
>&)
	ga
;

1538 
ölöe
 
	gM©
& 
	g›î©‹
 *(c⁄° 
M©
& 
a
, c⁄° 
	gM©Ex¥
& 
	gb
)

1540 
	gb
.
	g›
->
augAssignMu…ùly
(
b
, (
M©
&)
a
);

1541  (
	gM©
&)
	ga
;

1544 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1545 
	gM©_
<
	g_Tp
>& 
	g›î©‹
 *(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° 
	gM©Ex¥
& 
	gb
)

1547 
	gb
.
	g›
->
augAssignMu…ùly
(
b
, (
M©
&)
a
);

1548  (
	gM©_
<
	g_Tp
>&)
	ga
;

1551 
ölöe
 
	gM©
& 
	g›î©‹
 /(c⁄° 
M©
& 
a
, c⁄° M©& 
	gb
)

1553 
divide
(
a
, 
b
, (
M©
&)a);

1554  (
	gM©
&)
	ga
;

1557 
ölöe
 
	gM©
& 
	g›î©‹
 /(c⁄° 
M©
& 
a
, 
	gs
)

1559 
	ga
.
c⁄vîtTo
((
M©
&)
a
, -1, 1./
s
);

1560  (
	gM©
&)
	ga
;

1563 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1564 
	gM©_
<
	g_Tp
>& 
	g›î©‹
 /(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° M©_<_Tp>& 
	gb
)

1566 
divide
(
a
, 
b
, (
M©
&)a);

1567  (
	gM©_
<
	g_Tp
>&)
	ga
;

1570 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1571 
	gM©_
<
	g_Tp
>& 
	g›î©‹
 /(c⁄° 
M©_
<
_Tp
>& 
a
, 
	gs
)

1573 
	ga
.
c⁄vîtTo
((
M©
&)
a
, -1, 1./
s
);

1574  (
	gM©_
<
	g_Tp
>&)
	ga
;

1577 
ölöe
 
	gM©
& 
	g›î©‹
 /(c⁄° 
M©
& 
a
, c⁄° 
	gM©Ex¥
& 
	gb
)

1579 
	gb
.
	g›
->
augAssignDivide
(
b
, (
M©
&)
a
);

1580  (
	gM©
&)
	ga
;

1583 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1584 
	gM©_
<
	g_Tp
>& 
	g›î©‹
 /(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° 
	gM©Ex¥
& 
	gb
)

1586 
	gb
.
	g›
->
augAssignDivide
(
b
, (
M©
&)
a
);

1587  (
	gM©_
<
	g_Tp
>&)
	ga
;

1592 
ölöe
 
	gM©
& 
	g›î©‹
 &(c⁄° 
M©
& 
a
, c⁄° M©& 
	gb
)

1594 
bôwi£_™d
(
a
, 
b
, (
M©
&)a);

1595  (
	gM©
&)
	ga
;

1598 
ölöe
 
	gM©
& 
	g›î©‹
 &(c⁄° 
M©
& 
a
, c⁄° 
	gSˇœr
& 
	gs
)

1600 
bôwi£_™d
(
a
, 
s
, (
M©
&)a);

1601  (
	gM©
&)
	ga
;

1604 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>&

1605 
	g›î©‹
 &(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° 
	gM©_
<
	g_Tp
>& 
	gb
)

1607 
bôwi£_™d
(
a
, 
b
, (
M©
&)a);

1608  (
	gM©_
<
	g_Tp
>&)
	ga
;

1611 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>&

1612 
	g›î©‹
 &(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° 
	gSˇœr
& 
	gs
)

1614 
bôwi£_™d
(
a
, 
s
, (
M©
&)a);

1615  (
	gM©_
<
	g_Tp
>&)
	ga
;

1618 
ölöe
 
	gM©
& 
	g›î©‹
 |(c⁄° 
M©
& 
a
, c⁄° M©& 
	gb
)

1620 
bôwi£_‹
(
a
, 
b
, (
M©
&)a);

1621  (
	gM©
&)
	ga
;

1624 
ölöe
 
	gM©
& 
	g›î©‹
 |(c⁄° 
M©
& 
a
, c⁄° 
	gSˇœr
& 
	gs
)

1626 
bôwi£_‹
(
a
, 
s
, (
M©
&)a);

1627  (
	gM©
&)
	ga
;

1630 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>&

1631 
	g›î©‹
 |(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° 
	gM©_
<
	g_Tp
>& 
	gb
)

1633 
bôwi£_‹
(
a
, 
b
, (
M©
&)a);

1634  (
	gM©_
<
	g_Tp
>&)
	ga
;

1637 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>&

1638 
	g›î©‹
 |(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° 
	gSˇœr
& 
	gs
)

1640 
bôwi£_‹
(
a
, 
s
, (
M©
&)a);

1641  (
	gM©_
<
	g_Tp
>&)
	ga
;

1644 
ölöe
 
	gM©
& 
	g›î©‹
 ^(c⁄° 
M©
& 
a
, c⁄° M©& 
	gb
)

1646 
bôwi£_x‹
(
a
, 
b
, (
M©
&)a);

1647  (
	gM©
&)
	ga
;

1650 
ölöe
 
	gM©
& 
	g›î©‹
 ^(c⁄° 
M©
& 
a
, c⁄° 
	gSˇœr
& 
	gs
)

1652 
bôwi£_x‹
(
a
, 
s
, (
M©
&)a);

1653  (
	gM©
&)
	ga
;

1656 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>&

1657 
	g›î©‹
 ^(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° 
	gM©_
<
	g_Tp
>& 
	gb
)

1659 
bôwi£_x‹
(
a
, 
b
, (
M©
&)a);

1660  (
	gM©_
<
	g_Tp
>&)
	ga
;

1663 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp>&

1664 
	g›î©‹
 ^(c⁄° 
M©_
<
_Tp
>& 
a
, c⁄° 
	gSˇœr
& 
	gs
)

1666 
bôwi£_x‹
(
a
, 
s
, (
M©
&)a);

1667  (
	gM©_
<
	g_Tp
>&)
	ga
;

1672 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
•lô
(c⁄° 
M©
& 
§c
, 
ve˘‹
<
M©_
<
_Tp
> >& 
mv
)

1673 { 
•lô
(
§c
, (
ve˘‹
<
M©
>&)
mv
 ); }

1677 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
	gM©_
<_Tp>::
	$zîos
(
rows
, 
cﬁs
)

1679  
M©
::
	`zîos
(
rows
, 
cﬁs
, 
D©aTy≥
<
_Tp
>::
ty≥
);

1680 
	}
}

1682 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
	gM©_
<_Tp>::
	$zîos
(
Size
 
sz
)

1684  
M©
::
	`zîos
(
sz
, 
D©aTy≥
<
_Tp
>::
ty≥
);

1685 
	}
}

1687 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
	gM©_
<_Tp>::
	$⁄es
(
rows
, 
cﬁs
)

1689  
M©
::
	`⁄es
(
rows
, 
cﬁs
, 
D©aTy≥
<
_Tp
>::
ty≥
);

1690 
	}
}

1692 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
	gM©_
<_Tp>::
	$⁄es
(
Size
 
sz
)

1694  
M©
::
	`⁄es
(
sz
, 
D©aTy≥
<
_Tp
>::
ty≥
);

1695 
	}
}

1697 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
	gM©_
<_Tp>::
	$eye
(
rows
, 
cﬁs
)

1699  
M©
::
	`eye
(
rows
, 
cﬁs
, 
D©aTy≥
<
_Tp
>::
ty≥
);

1700 
	}
}

1702 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
M©Ex¥
 
	gM©_
<_Tp>::
	$eye
(
Size
 
sz
)

1704  
M©
::
	`eye
(
sz
, 
D©aTy≥
<
_Tp
>::
ty≥
);

1705 
	}
}

1709 
ölöe
 
	gM©C⁄°Iãøt‹
::
	$M©C⁄°Iãøt‹
()

1710 : 
	`m
(0), 
	`ñemSize
(0), 
	`±r
(0), 
	`¶i˚Sèπ
(0), 
	$¶i˚End
(0Ë{
	}
}

1712 
ölöe
 
	gM©C⁄°Iãøt‹
::
	$M©C⁄°Iãøt‹
(c⁄° 
M©
* 
_m
)

1713 : 
	`m
(
_m
), 
	`ñemSize
(_m->ñemSize()), 
	`±r
(0), 
	`¶i˚Sèπ
(0), 
	$¶i˚End
(0)

1715 if–
m
 && m->
	`isC⁄töuous
() )

1717 
¶i˚Sèπ
 = 
m
->
d©a
;

1718 
¶i˚End
 = 
¶i˚Sèπ
 + 
m
->
	`tŸÆ
()*
ñemSize
;

1720 
	`£ek
((const *)0);

1721 
	}
}

1723 
ölöe
 
	gM©C⁄°Iãøt‹
::
	$M©C⁄°Iãøt‹
(c⁄° 
M©
* 
_m
, 
_row
, 
_cﬁ
)

1724 : 
	`m
(
_m
), 
	`ñemSize
(_m->ñemSize()), 
	`±r
(0), 
	`¶i˚Sèπ
(0), 
	$¶i˚End
(0)

1726 
	`CV_As£π
(
m
 && m->
dims
 <= 2);

1727 if–
m
->
	`isC⁄töuous
() )

1729 
¶i˚Sèπ
 = 
m
->
d©a
;

1730 
¶i˚End
 = 
¶i˚Sèπ
 + 
m
->
	`tŸÆ
()*
ñemSize
;

1732 
idx
[]={
_row
, 
_cﬁ
};

1733 
	`£ek
(
idx
);

1734 
	}
}

1736 
ölöe
 
	gM©C⁄°Iãøt‹
::
	$M©C⁄°Iãøt‹
(c⁄° 
M©
* 
_m
, 
Poöt
 
_±
)

1737 : 
	`m
(
_m
), 
	`ñemSize
(_m->ñemSize()), 
	`±r
(0), 
	`¶i˚Sèπ
(0), 
	$¶i˚End
(0)

1739 
	`CV_As£π
(
m
 && m->
dims
 <= 2);

1740 if–
m
->
	`isC⁄töuous
() )

1742 
¶i˚Sèπ
 = 
m
->
d©a
;

1743 
¶i˚End
 = 
¶i˚Sèπ
 + 
m
->
	`tŸÆ
()*
ñemSize
;

1745 
idx
[]={
_±
.
y
, _±.
x
};

1746 
	`£ek
(
idx
);

1747 
	}
}

1749 
ölöe
 
	gM©C⁄°Iãøt‹
::
	$M©C⁄°Iãøt‹
(c⁄° 
M©C⁄°Iãøt‹
& 
ô
)

1750 : 
	`m
(
ô
.
m
), 
	`ñemSize
(ô.
ñemSize
), 
	`±r
(ô.
±r
), 
	`¶i˚Sèπ
(ô.
¶i˚Sèπ
), 
	$¶i˚End
(
ô
.
¶i˚End
)

1751 {
	}
}

1753 
ölöe
 
	gM©C⁄°Iãøt‹
& M©C⁄°Iãøt‹::
›î©‹
 = (c⁄° 
M©C⁄°Iãøt‹
& 
ô
 )

1755 
m
 = 
ô
.m; 
	gñemSize
 = it.
ñemSize
; 
	g±r
 = it.
±r
;

1756 
	g¶i˚Sèπ
 = 
ô
.
¶i˚Sèπ
; 
	g¶i˚End
 = it.
¶i˚End
;

1757  *
	gthis
;

1760 
ölöe
 
uch¨
* 
	gM©C⁄°Iãøt‹
::
›î©‹
 *(Ëc⁄° {  
±r
; }

1762 
ölöe
 
	gM©C⁄°Iãøt‹
& M©C⁄°Iãøt‹::
›î©‹
 +(
±rdiff_t
 
ofs
)

1764 if–!
m
 || 
ofs
 == 0 )

1765  *
this
;

1766 
±rdiff_t
 
	gofsb
 = 
ofs
*
ñemSize
;

1767 
	g±r
 +
ofsb
;

1768 if–
	g±r
 < 
	g¶i˚Sèπ
 || 
	g¶i˚End
 <
±r
 )

1770 
±r
 -
ofsb
;

1771 
£ek
(
ofs
, 
åue
);

1773  *
	gthis
;

1776 
ölöe
 
	gM©C⁄°Iãøt‹
& M©C⁄°Iãøt‹::
›î©‹
 -(
±rdiff_t
 
ofs
)

1777 {  (*
this
 +-
ofs
); }

1779 
ölöe
 
	gM©C⁄°Iãøt‹
& M©C⁄°Iãøt‹::
›î©‹
 --()

1781 if–
m
 && (
±r
 -
ñemSize
Ë< 
¶i˚Sèπ
 )

1783 
±r
 +
ñemSize
;

1784 
£ek
(-1, 
åue
);

1786  *
	gthis
;

1789 
ölöe
 
M©C⁄°Iãøt‹
 
	gM©C⁄°Iãøt‹
::
›î©‹
 --()

1791 
M©C⁄°Iãøt‹
 
b
 = *
this
;

1792 *
	gthis
 += -1;

1793  
	gb
;

1796 
ölöe
 
	gM©C⁄°Iãøt‹
& M©C⁄°Iãøt‹::
›î©‹
 ++()

1798 if–
m
 && (
±r
 +
ñemSize
Ë>
¶i˚End
 )

1800 
±r
 -
ñemSize
;

1801 
£ek
(1, 
åue
);

1803  *
	gthis
;

1806 
ölöe
 
M©C⁄°Iãøt‹
 
	gM©C⁄°Iãøt‹
::
›î©‹
 ++()

1808 
M©C⁄°Iãøt‹
 
b
 = *
this
;

1809 *
	gthis
 += 1;

1810  
	gb
;

1813 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp>::
	$M©C⁄°Iãøt‹_
(Ë{
	}
}

1815 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
M©C⁄°Iãøt‹_
<_Tp>::M©C⁄°Iãøt‹_(c⁄° 
M©_
<_Tp>* 
_m
)

1816 : 
	$M©C⁄°Iãøt‹
(
_m
Ë{
	}
}

1818 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
M©C⁄°Iãøt‹_
<_Tp>::

1819 
M©C⁄°Iãøt‹_
(c⁄° 
M©_
<
_Tp
>* 
_m
, 
_row
, 
_cﬁ
)

1820 : 
	$M©C⁄°Iãøt‹
(
_m
, 
_row
, 
_cﬁ
Ë{
	}
}

1822 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp>::

1823 
M©C⁄°Iãøt‹_
(c⁄° 
M©_
<
_Tp
>* 
_m
, 
Poöt
 
_±
)

1824 : 
	$M©C⁄°Iãøt‹
(
_m
, 
_±
Ë{
	}
}

1826 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp>::

1827 
	$M©C⁄°Iãøt‹_
(c⁄° 
M©C⁄°Iãøt‹_
& 
ô
)

1828 : 
	$M©C⁄°Iãøt‹
(
ô
Ë{
	}
}

1830 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
M©C⁄°Iãøt‹_
<_Tp>&

1831 
M©C⁄°Iãøt‹_
<
_Tp
>::
›î©‹
 = (c⁄° M©C⁄°Iãøt‹_& 
ô
 )

1833 
M©C⁄°Iãøt‹
::
›î©‹
 = (
ô
);

1834  *
	gthis
;

1837 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
	gM©C⁄°Iãøt‹_
<_Tp>::
›î©‹
 *(Ëc⁄° {  *(_Tp*)(
this
->
±r
); }

1839 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp>& M©C⁄°Iãøt‹_<_Tp>::
›î©‹
 +(
±rdiff_t
 
ofs
)

1841 
M©C⁄°Iãøt‹
::
›î©‹
 +(
ofs
);

1842  *
	gthis
;

1845 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp>& M©C⁄°Iãøt‹_<_Tp>::
›î©‹
 -(
±rdiff_t
 
ofs
)

1846 {  (*
this
 +-
ofs
); }

1848 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp>& M©C⁄°Iãøt‹_<_Tp>::
›î©‹
 --()

1850 
M©C⁄°Iãøt‹
::
›î©‹
 --();

1851  *
	gthis
;

1854 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp> M©C⁄°Iãøt‹_<_Tp>::
›î©‹
 --()

1856 
M©C⁄°Iãøt‹_
 
b
 = *
this
;

1857 
	gM©C⁄°Iãøt‹
::
›î©‹
 --();

1858  
	gb
;

1861 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp>& M©C⁄°Iãøt‹_<_Tp>::
›î©‹
 ++()

1863 
M©C⁄°Iãøt‹
::
›î©‹
 ++();

1864  *
	gthis
;

1867 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp> M©C⁄°Iãøt‹_<_Tp>::
›î©‹
 ++()

1869 
M©C⁄°Iãøt‹_
 
b
 = *
this
;

1870 
	gM©C⁄°Iãøt‹
::
›î©‹
 ++();

1871  
	gb
;

1874 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp>::
	$M©Iãøt‹_
(Ë: 
M©C⁄°Iãøt‹_
<
_Tp
>(Ë{
	}
}

1876 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
M©Iãøt‹_
<_Tp>::M©Iãøt‹_(
M©_
<_Tp>* 
_m
)

1877 : 
M©C⁄°Iãøt‹_
<
_Tp
>(
_m
) {}

1879 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
M©Iãøt‹_
<_Tp>::M©Iãøt‹_(
M©_
<_Tp>* 
_m
, 
_row
, 
_cﬁ
)

1880 : 
M©C⁄°Iãøt‹_
<
_Tp
>(
_m
, 
	g_row
, 
	g_cﬁ
) {}

1882 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp>::
M©Iãøt‹_
(c⁄° 
M©_
<
_Tp
>* 
_m
, 
Poöt
 
_±
)

1883 : 
M©C⁄°Iãøt‹_
<
_Tp
>(
_m
, 
	g_±
) {}

1885 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp>::
M©Iãøt‹_
(c⁄° 
M©_
<
_Tp
>* 
_m
, c⁄° * 
_idx
)

1886 : 
M©C⁄°Iãøt‹_
<
_Tp
>(
_m
, 
	g_idx
) {}

1888 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp>::
	$M©Iãøt‹_
(c⁄° 
M©Iãøt‹_
& 
ô
)

1889 : 
M©C⁄°Iãøt‹_
<
_Tp
>(
ô
Ë{
	}
}

1891 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
M©Iãøt‹_
<_Tp>& M©Iãøt‹_<_Tp>::
›î©‹
 = (c⁄° M©Iãøt‹_<_Tp>& 
ô
 )

1893 
M©C⁄°Iãøt‹
::
›î©‹
 = (
ô
);

1894  *
	gthis
;

1897 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gM©Iãøt‹_
<_Tp>::
›î©‹
 *(Ëc⁄° {  *(
_Tp
*)(
this
->
±r
); }

1899 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp>& M©Iãøt‹_<_Tp>::
›î©‹
 +(
±rdiff_t
 
ofs
)

1901 
M©C⁄°Iãøt‹
::
›î©‹
 +(
ofs
);

1902  *
	gthis
;

1905 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp>& M©Iãøt‹_<_Tp>::
›î©‹
 -(
±rdiff_t
 
ofs
)

1907 
M©C⁄°Iãøt‹
::
›î©‹
 +(-
ofs
);

1908  *
	gthis
;

1911 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp>& M©Iãøt‹_<_Tp>::
›î©‹
 --()

1913 
M©C⁄°Iãøt‹
::
›î©‹
 --();

1914  *
	gthis
;

1917 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp> M©Iãøt‹_<_Tp>::
›î©‹
 --()

1919 
M©Iãøt‹_
 
b
 = *
this
;

1920 
	gM©C⁄°Iãøt‹
::
›î©‹
 --();

1921  
	gb
;

1924 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp>& M©Iãøt‹_<_Tp>::
›î©‹
 ++()

1926 
M©C⁄°Iãøt‹
::
›î©‹
 ++();

1927  *
	gthis
;

1930 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp> M©Iãøt‹_<_Tp>::
›î©‹
 ++()

1932 
M©Iãøt‹_
 
b
 = *
this
;

1933 
	gM©C⁄°Iãøt‹
::
›î©‹
 ++();

1934  
	gb
;

1937 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
Poöt
 
	gM©C⁄°Iãøt‹_
<_Tp>::
	$pos
() const

1939 if–!
m
 )

1940  
	`Poöt
();

1941 
	`CV_DbgAs£π
–
m
->
dims
 <= 2 );

1942 if–
m
->
	`isC⁄töuous
() )

1944 
±rdiff_t
 
ofs
 = (c⁄° 
_Tp
*)
±r
 - (c⁄° _Tp*)
m
->
d©a
;

1945 
y
 = ()(
ofs
 / 
m
->
cﬁs
), 
x
 = ()(of†- (
±rdiff_t
)y*m->cols);

1946  
	`Poöt
(
x
, 
y
);

1950 
±rdiff_t
 
ofs
 = (
uch¨
*)
±r
 - 
m
->
d©a
;

1951 
y
 = ()(
ofs
 / 
m
->
°ï
), 
x
 = ()((of†- y*m->°ï)/(
_Tp
));

1952  
	`Poöt
(
x
, 
y
);

1954 
	}
}

1956 
ölöe
 
boﬁ


1957 
	g›î©‹
 =(c⁄° 
M©C⁄°Iãøt‹
& 
a
, c⁄° 
	gM©C⁄°Iãøt‹
& 
	gb
)

1958 {  
	ga
.
	gm
 =
b
.
m
 && 
a
.
±r
 == b.ptr; }

1960 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ


1961 
	g›î©‹
 !(c⁄° 
M©C⁄°Iãøt‹
& 
a
, c⁄° 
	gM©C⁄°Iãøt‹
& 
	gb
)

1962 {  !(
	ga
 =
b
); }

1964 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ


1965 
	g›î©‹
 =(c⁄° 
M©C⁄°Iãøt‹_
<
_Tp
>& 
a
, c⁄° 
	gM©C⁄°Iãøt‹_
<
	g_Tp
>& 
	gb
)

1966 {  
	ga
.
	gm
 =
b
.
m
 && 
a
.
±r
 == b.ptr; }

1968 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ


1969 
	g›î©‹
 !(c⁄° 
M©C⁄°Iãøt‹_
<
_Tp
>& 
a
, c⁄° 
	gM©C⁄°Iãøt‹_
<
	g_Tp
>& 
	gb
)

1970 {  
	ga
.
	gm
 !
b
.
m
 || 
a
.
±r
 != b.ptr; }

1972 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ


1973 
	g›î©‹
 =(c⁄° 
M©Iãøt‹_
<
_Tp
>& 
a
, c⁄° 
	gM©Iãøt‹_
<
	g_Tp
>& 
	gb
)

1974 {  
	ga
.
	gm
 =
b
.
m
 && 
a
.
±r
 == b.ptr; }

1976 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ


1977 
	g›î©‹
 !(c⁄° 
M©Iãøt‹_
<
_Tp
>& 
a
, c⁄° 
	gM©Iãøt‹_
<
	g_Tp
>& 
	gb
)

1978 {  
	ga
.
	gm
 !
b
.
m
 || 
a
.
±r
 != b.ptr; }

1980 
ölöe
 
boﬁ


1981 
	g›î©‹
 < (c⁄° 
	gM©C⁄°Iãøt‹
& 
	ga
, c⁄° M©C⁄°Iãøt‹& 
	gb
)

1982 {  
	ga
.
	g±r
 < 
	gb
.ptr; }

1984 
ölöe
 
boﬁ


1985 
	g›î©‹
 > (c⁄° 
	gM©C⁄°Iãøt‹
& 
	ga
, c⁄° M©C⁄°Iãøt‹& 
	gb
)

1986 {  
	ga
.
	g±r
 > 
	gb
.ptr; }

1988 
ölöe
 
boﬁ


1989 
	g›î©‹
 <(c⁄° 
M©C⁄°Iãøt‹
& 
a
, c⁄° 
	gM©C⁄°Iãøt‹
& 
	gb
)

1990 {  
	ga
.
	g±r
 <
b
.
±r
; }

1992 
ölöe
 
boﬁ


1993 
	g›î©‹
 >(c⁄° 
M©C⁄°Iãøt‹
& 
a
, c⁄° 
	gM©C⁄°Iãøt‹
& 
	gb
)

1994 {  
	ga
.
	g±r
 >
b
.
±r
; }

1996 
CV_EXPORTS
 
±rdiff_t
 
	g›î©‹
 - (c⁄° 
	gM©C⁄°Iãøt‹
& 
	gb
, c⁄° M©C⁄°Iãøt‹& 
	ga
);

1998 
ölöe
 
M©C⁄°Iãøt‹
 
	g›î©‹
 + (c⁄° 
	gM©C⁄°Iãøt‹
& 
	ga
, 
±rdiff_t
 
	gofs
)

1999 { 
M©C⁄°Iãøt‹
 
	gb
 = 
a
;  b +
ofs
; }

2001 
ölöe
 
M©C⁄°Iãøt‹
 
	g›î©‹
 + (
±rdiff_t
 
	gofs
, c⁄° 
	gM©C⁄°Iãøt‹
& 
	ga
)

2002 { 
M©C⁄°Iãøt‹
 
	gb
 = 
a
;  b +
ofs
; }

2004 
ölöe
 
M©C⁄°Iãøt‹
 
	g›î©‹
 - (c⁄° 
	gM©C⁄°Iãøt‹
& 
	ga
, 
±rdiff_t
 
	gofs
)

2005 { 
M©C⁄°Iãøt‹
 
	gb
 = 
a
;  b +-
ofs
; }

2007 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp>

2008 
	g›î©‹
 + (c⁄° 
	gM©C⁄°Iãøt‹_
<
	g_Tp
>& 
	ga
, 
±rdiff_t
 
	gofs
)

2009 { 
M©C⁄°Iãøt‹
 
	gt
 = (c⁄° M©C⁄°Iãøt‹&)
a
 + 
ofs
;  (
	gM©C⁄°Iãøt‹_
<
	g_Tp
>&)t; }

2011 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp>

2012 
	g›î©‹
 + (
±rdiff_t
 
	gofs
, c⁄° 
	gM©C⁄°Iãøt‹_
<
	g_Tp
>& 
	ga
)

2013 { 
M©C⁄°Iãøt‹
 
	gt
 = (c⁄° M©C⁄°Iãøt‹&)
a
 + 
ofs
;  (
	gM©C⁄°Iãøt‹_
<
	g_Tp
>&)t; }

2015 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp>

2016 
	g›î©‹
 - (c⁄° 
	gM©C⁄°Iãøt‹_
<
	g_Tp
>& 
	ga
, 
±rdiff_t
 
	gofs
)

2017 { 
M©C⁄°Iãøt‹
 
	gt
 = (c⁄° M©C⁄°Iãøt‹&)
a
 - 
ofs
;  (
	gM©C⁄°Iãøt‹_
<
	g_Tp
>&)t; }

2019 
ölöe
 
uch¨
* 
	gM©C⁄°Iãøt‹
::
›î©‹
 [](
±rdiff_t
 
i
) const

2020 {  *(*
this
 + 
i
); }

2022 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
	gM©C⁄°Iãøt‹_
<_Tp>::
›î©‹
 [](
±rdiff_t
 
i
) const

2023 {  *(
_Tp
*)
M©C⁄°Iãøt‹
::
›î©‹
 [](
i
); }

2025 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp>

2026 
	g›î©‹
 + (c⁄° 
	gM©Iãøt‹_
<
	g_Tp
>& 
	ga
, 
±rdiff_t
 
	gofs
)

2027 { 
M©C⁄°Iãøt‹
 
	gt
 = (c⁄° M©C⁄°Iãøt‹&)
a
 + 
ofs
;  (
	gM©Iãøt‹_
<
	g_Tp
>&)t; }

2029 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp>

2030 
	g›î©‹
 + (
±rdiff_t
 
	gofs
, c⁄° 
	gM©Iãøt‹_
<
	g_Tp
>& 
	ga
)

2031 { 
M©C⁄°Iãøt‹
 
	gt
 = (c⁄° M©C⁄°Iãøt‹&)
a
 + 
ofs
;  (
	gM©Iãøt‹_
<
	g_Tp
>&)t; }

2033 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp>

2034 
	g›î©‹
 - (c⁄° 
	gM©Iãøt‹_
<
	g_Tp
>& 
	ga
, 
±rdiff_t
 
	gofs
)

2035 { 
M©C⁄°Iãøt‹
 
	gt
 = (c⁄° M©C⁄°Iãøt‹&)
a
 - 
ofs
;  (
	gM©Iãøt‹_
<
	g_Tp
>&)t; }

2037 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gM©Iãøt‹_
<_Tp>::
›î©‹
 [](
±rdiff_t
 
i
) const

2038 {  *(*
this
 + 
i
); }

2040 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp> 
	gM©_
<_Tp>::
	$begö
() const

2041 {  
M©
::
begö
<
_Tp
>(); 
	}
}

2043 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©C⁄°Iãøt‹_
<_Tp> 
	gM©_
<_Tp>::
	$íd
() const

2044 {  
M©
::
íd
<
_Tp
>(); 
	}
}

2046 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp> 
	gM©_
<_Tp>::
	$begö
()

2047 {  
M©
::
begö
<
_Tp
>(); 
	}
}

2049 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©Iãøt‹_
<_Tp> 
	gM©_
<_Tp>::
	$íd
()

2050 {  
M©
::
íd
<
_Tp
>(); 
	}
}

2052 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©CommaInôülizî_
<_Tp>::
M©CommaInôülizî_
(
M©_
<
_Tp
>* 
_m
Ë: 
	$ô
(
_m
Ë{
	}
}

2054 
ãm∂©e
<
ty≥«me
 
_Tp
>Åem∂©e<ty≥«mê
T2
> 
ölöe
 
M©CommaInôülizî_
<_Tp>&

2055 
M©CommaInôülizî_
<
_Tp
>::
›î©‹
 , (
T2
 
	gv
)

2057 
CV_DbgAs£π
–
this
->
ô
 < ((c⁄° 
M©_
<
_Tp
>*Èhis->ô.
m
)->
íd
() );

2058 *
	gthis
->
	gô
 = 
_Tp
(
v
); ++this->it;

2059  *
	gthis
;

2062 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©_
<_Tp> 
	gM©CommaInôülizî_
<_Tp>::
›î©‹
 *() const

2064 
CV_DbgAs£π
–
this
->
ô
 =((c⁄° 
M©_
<
_Tp
>*Èhis->ô.
m
)->
íd
() );

2065  
	gM©_
<
	g_Tp
>(*
	gthis
->
	gô
.
	gm
);

2068 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gM©CommaInôülizî_
<_Tp>::
›î©‹
 
M©_
<
_Tp
>() const

2070 
CV_DbgAs£π
–
this
->
ô
 =((c⁄° 
M©_
<
_Tp
>*Èhis->ô.
m
)->
íd
() );

2071  
	gM©_
<
	g_Tp
>(*
	gthis
->
	gô
.
	gm
);

2074 
	gãm∂©e
<
ty≥«me
 
	g_Tp
,Åy≥«mê
	gT2
> 
ölöe
 
	gM©CommaInôülizî_
<_Tp>

2075 
	g›î©‹
 << (c⁄° 
	gM©_
<
	g_Tp
>& 
	gm
, 
T2
 
	gvÆ
)

2077 
	gM©CommaInôülizî_
<
	g_Tp
> 
commaInôülizî
((
M©_
<
_Tp
>*)&
m
);

2078  (
	gcommaInôülizî
, 
	gvÆ
);

2083 
ölöe
 
	gS∑r£M©
::
	$S∑r£M©
()

2084 : 
	`Êags
(
MAGIC_VAL
), 
	$hdr
(0)

2086 
	}
}

2088 
ölöe
 
	gS∑r£M©
::
	$S∑r£M©
(
_dims
, c⁄° * 
_sizes
, 
_ty≥
)

2089 : 
	`Êags
(
MAGIC_VAL
), 
	$hdr
(0)

2091 
	`¸óã
(
_dims
, 
_sizes
, 
_ty≥
);

2092 
	}
}

2094 
ölöe
 
	gS∑r£M©
::
	$S∑r£M©
(c⁄° 
S∑r£M©
& 
m
)

2095 : 
	`Êags
(
m
.
Êags
), 
	$hdr
(
m
.
hdr
)

2097 
	`addªf
();

2098 
	}
}

2100 
ölöe
 
	gS∑r£M©
::~
	$S∑r£M©
()

2102 
	`ªÀa£
();

2103 
	}
}

2105 
ölöe
 
	gS∑r£M©
& S∑r£M©::
›î©‹
 = (c⁄° 
S∑r£M©
& 
m
)

2107 if–
this
 !&
m
 )

2109 if–
m
.
hdr
 )

2110 
CV_XADD
(&
m
.
hdr
->
ªfcou¡
, 1);

2111 
ªÀa£
();

2112 
	gÊags
 = 
m
.
Êags
;

2113 
	ghdr
 = 
m
.
hdr
;

2115  *
	gthis
;

2118 
ölöe
 
	gS∑r£M©
& S∑r£M©::
›î©‹
 = (c⁄° 
M©
& 
m
)

2119 {  (*
this
 = 
S∑r£M©
(
m
)); }

2121 
ölöe
 
S∑r£M©
 
	gS∑r£M©
::
	$˛⁄e
() const

2123 
S∑r£M©
 
ãmp
;

2124 
this
->
	`c›yTo
(
ãmp
);

2125  
ãmp
;

2126 
	}
}

2129 
ölöe
 
	gS∑r£M©
::
	$assignTo
–
S∑r£M©
& 
m
, 
_ty≥
 ) const

2131 if–
_ty≥
 < 0 )

2132 
m
 = *
this
;

2134 
	`c⁄vîtTo
(
m
, 
_ty≥
);

2135 
	}
}

2137 
ölöe
 
	gS∑r£M©
::
	$addªf
()

2138 { if–
hdr
 ) 
	`CV_XADD
(&hdr->
ªfcou¡
, 1); 
	}
}

2140 
ölöe
 
	gS∑r£M©
::
	$ªÀa£
()

2142 if–
hdr
 && 
	`CV_XADD
(&hdr->
ªfcou¡
, -1) == 1 )

2143 
dñëe
 
hdr
;

2144 
hdr
 = 0;

2145 
	}
}

2147 
ölöe
 
size_t
 
	gS∑r£M©
::
	$ñemSize
() const

2148 {  
	`CV_ELEM_SIZE
(
Êags
); 
	}
}

2150 
ölöe
 
size_t
 
	gS∑r£M©
::
	$ñemSize1
() const

2151 {  
	`CV_ELEM_SIZE1
(
Êags
); 
	}
}

2153 
ölöe
 
	gS∑r£M©
::
	$ty≥
() const

2154 {  
	`CV_MAT_TYPE
(
Êags
); 
	}
}

2156 
ölöe
 
	gS∑r£M©
::
	$dïth
() const

2157 {  
	`CV_MAT_DEPTH
(
Êags
); 
	}
}

2159 
ölöe
 
	gS∑r£M©
::
	$ch™√ls
() const

2160 {  
	`CV_MAT_CN
(
Êags
); 
	}
}

2162 
ölöe
 c⁄° * 
	gS∑r£M©
::
	$size
() const

2164  
hdr
 ? hdr->
size
 : 0;

2165 
	}
}

2167 
ölöe
 
	gS∑r£M©
::
	$size
(
i
) const

2169 if–
hdr
 )

2171 
	`CV_DbgAs£π
(()
i
 < ()
hdr
->
dims
);

2172  
hdr
->
size
[
i
];

2175 
	}
}

2177 
ölöe
 
	gS∑r£M©
::
	$dims
() const

2179  
hdr
 ? hdr->
dims
 : 0;

2180 
	}
}

2182 
ölöe
 
size_t
 
	gS∑r£M©
::
	$nzcou¡
() const

2184  
hdr
 ? hdr->
nodeCou¡
 : 0;

2185 
	}
}

2187 
ölöe
 
size_t
 
	gS∑r£M©
::
	$hash
(
i0
) const

2189  (
size_t
)
i0
;

2190 
	}
}

2192 
ölöe
 
size_t
 
	gS∑r£M©
::
	$hash
(
i0
, 
i1
) const

2194  (
size_t
)()
i0
*
HASH_SCALE
 + ()
i1
;

2195 
	}
}

2197 
ölöe
 
size_t
 
	gS∑r£M©
::
	$hash
(
i0
, 
i1
, 
i2
) const

2199  ((
size_t
)()
i0
*
HASH_SCALE
 + ()
i1
)*HASH_SCALE + ()
i2
;

2200 
	}
}

2202 
ölöe
 
size_t
 
	gS∑r£M©
::
	$hash
(c⁄° * 
idx
) const

2204 
size_t
 
h
 = ()
idx
[0];

2205 if–!
hdr
 )

2207 
i
, 
d
 = 
hdr
->
dims
;

2208  
i
 = 1; i < 
d
; i++ )

2209 
h
 = h*
HASH_SCALE
 + ()
idx
[
i
];

2210  
h
;

2211 
	}
}

2213 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gS∑r£M©
::
	$ªf
(
i0
, 
size_t
* 
hashvÆ
)

2214 {  *(
_Tp
*)((
S∑r£M©
*)
this
)->
	`±r
(
i0
, 
åue
, 
hashvÆ
); 
	}
}

2216 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gS∑r£M©
::
	$ªf
(
i0
, 
i1
, 
size_t
* 
hashvÆ
)

2217 {  *(
_Tp
*)((
S∑r£M©
*)
this
)->
	`±r
(
i0
, 
i1
, 
åue
, 
hashvÆ
); 
	}
}

2219 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gS∑r£M©
::
	$ªf
(
i0
, 
i1
, 
i2
, 
size_t
* 
hashvÆ
)

2220 {  *(
_Tp
*)((
S∑r£M©
*)
this
)->
	`±r
(
i0
, 
i1
, 
i2
, 
åue
, 
hashvÆ
); 
	}
}

2222 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gS∑r£M©
::
	$ªf
(c⁄° * 
idx
, 
size_t
* 
hashvÆ
)

2223 {  *(
_Tp
*)((
S∑r£M©
*)
this
)->
	`±r
(
idx
, 
åue
, 
hashvÆ
); 
	}
}

2225 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
	gS∑r£M©
::
	$vÆue
(
i0
, 
size_t
* 
hashvÆ
) const

2227 c⁄° 
_Tp
* 
p
 = (c⁄° _Tp*)((
S∑r£M©
*)
this
)->
	`±r
(
i0
, 
Ál£
, 
hashvÆ
);

2228  
p
 ? *∞: 
	`_Tp
();

2229 
	}
}

2231 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
	gS∑r£M©
::
	$vÆue
(
i0
, 
i1
, 
size_t
* 
hashvÆ
) const

2233 c⁄° 
_Tp
* 
p
 = (c⁄° _Tp*)((
S∑r£M©
*)
this
)->
	`±r
(
i0
, 
i1
, 
Ál£
, 
hashvÆ
);

2234  
p
 ? *∞: 
	`_Tp
();

2235 
	}
}

2237 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
	gS∑r£M©
::
	$vÆue
(
i0
, 
i1
, 
i2
, 
size_t
* 
hashvÆ
) const

2239 c⁄° 
_Tp
* 
p
 = (c⁄° _Tp*)((
S∑r£M©
*)
this
)->
	`±r
(
i0
, 
i1
, 
i2
, 
Ál£
, 
hashvÆ
);

2240  
p
 ? *∞: 
	`_Tp
();

2241 
	}
}

2243 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
	gS∑r£M©
::
	$vÆue
(c⁄° * 
idx
, 
size_t
* 
hashvÆ
) const

2245 c⁄° 
_Tp
* 
p
 = (c⁄° _Tp*)((
S∑r£M©
*)
this
)->
	`±r
(
idx
, 
Ál£
, 
hashvÆ
);

2246  
p
 ? *∞: 
	`_Tp
();

2247 
	}
}

2249 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° 
_Tp
* 
	gS∑r£M©
::
	$föd
(
i0
, 
size_t
* 
hashvÆ
) const

2250 {  (c⁄° 
_Tp
*)((
S∑r£M©
*)
this
)->
	`±r
(
i0
, 
Ál£
, 
hashvÆ
); 
	}
}

2252 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° 
_Tp
* 
	gS∑r£M©
::
	$föd
(
i0
, 
i1
, 
size_t
* 
hashvÆ
) const

2253 {  (c⁄° 
_Tp
*)((
S∑r£M©
*)
this
)->
	`±r
(
i0
, 
i1
, 
Ál£
, 
hashvÆ
); 
	}
}

2255 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° 
_Tp
* 
	gS∑r£M©
::
	$föd
(
i0
, 
i1
, 
i2
, 
size_t
* 
hashvÆ
) const

2256 {  (c⁄° 
_Tp
*)((
S∑r£M©
*)
this
)->
	`±r
(
i0
, 
i1
, 
i2
, 
Ál£
, 
hashvÆ
); 
	}
}

2258 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° 
_Tp
* 
	gS∑r£M©
::
	$föd
(c⁄° * 
idx
, 
size_t
* 
hashvÆ
) const

2259 {  (c⁄° 
_Tp
*)((
S∑r£M©
*)
this
)->
	`±r
(
idx
, 
Ál£
, 
hashvÆ
); 
	}
}

2261 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gS∑r£M©
::
	$vÆue
(
Node
* 
n
)

2262 {  *(
_Tp
*)((
uch¨
*)
n
 + 
hdr
->
vÆueOff£t
); 
	}
}

2264 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gS∑r£M©
::
	$vÆue
(c⁄° 
Node
* 
n
) const

2265 {  *(c⁄° 
_Tp
*)((c⁄° 
uch¨
*)
n
 + 
hdr
->
vÆueOff£t
); 
	}
}

2267 
ölöe
 
	gS∑r£M©
::
Node
* 
S∑r£M©
::
	$node
(
size_t
 
nidx
)

2268 {  (
Node
*)(*)&
hdr
->
poﬁ
[
nidx
]; 
	}
}

2270 
ölöe
 c⁄° 
	gS∑r£M©
::
Node
* 
S∑r£M©
::
	$node
(
size_t
 
nidx
) const

2271 {  (c⁄° 
Node
*)(*)&
hdr
->
poﬁ
[
nidx
]; 
	}
}

2273 
ölöe
 
S∑r£M©Iãøt‹
 
	gS∑r£M©
::
	$begö
()

2274 {  
	`S∑r£M©Iãøt‹
(
this
); 
	}
}

2276 
ölöe
 
S∑r£M©C⁄°Iãøt‹
 
	gS∑r£M©
::
	$begö
() const

2277 {  
	`S∑r£M©C⁄°Iãøt‹
(
this
); 
	}
}

2279 
ölöe
 
S∑r£M©Iãøt‹
 
	gS∑r£M©
::
	$íd
()

2280 { 
S∑r£M©Iãøt‹
 
	`ô
(
this
); 
ô
.
	`£ekEnd
();  it; 
	}
}

2282 
ölöe
 
S∑r£M©C⁄°Iãøt‹
 
	gS∑r£M©
::
	$íd
() const

2283 { 
S∑r£M©C⁄°Iãøt‹
 
	`ô
(
this
); 
ô
.
	`£ekEnd
();  it; 
	}
}

2285 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©Iãøt‹_
<_Tp> 
	gS∑r£M©
::
	$begö
()

2286 {  
S∑r£M©Iãøt‹_
<
_Tp
>(
this
); 
	}
}

2288 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©C⁄°Iãøt‹_
<_Tp> 
	gS∑r£M©
::
	$begö
() const

2289 {  
S∑r£M©C⁄°Iãøt‹_
<
_Tp
>(
this
); 
	}
}

2291 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©Iãøt‹_
<_Tp> 
	gS∑r£M©
::
	$íd
()

2292 { 
S∑r£M©Iãøt‹_
<
_Tp
> 
	`ô
(
this
); 
ô
.
	`£ekEnd
();  it; 
	}
}

2294 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©C⁄°Iãøt‹_
<_Tp> 
	gS∑r£M©
::
	$íd
() const

2295 { 
S∑r£M©C⁄°Iãøt‹_
<
_Tp
> 
	`ô
(
this
); 
ô
.
	`£ekEnd
();  it; 
	}
}

2298 
ölöe
 
	gS∑r£M©C⁄°Iãøt‹
::
	$S∑r£M©C⁄°Iãøt‹
()

2299 : 
	`m
(0), 
	`hashidx
(0), 
	$±r
(0)

2301 
	}
}

2303 
ölöe
 
	gS∑r£M©C⁄°Iãøt‹
::
	$S∑r£M©C⁄°Iãøt‹
(c⁄° 
S∑r£M©C⁄°Iãøt‹
& 
ô
)

2304 : 
	`m
(
ô
.
m
), 
	`hashidx
(ô.
hashidx
), 
	$±r
(
ô
.
±r
)

2306 
	}
}

2308 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
S∑r£M©C⁄°Iãøt‹
& 
ô1
, c⁄° 
	gS∑r£M©C⁄°Iãøt‹
& 
	gô2
)

2309 {  
	gô1
.
	gm
 =
ô2
.
m
 && 
ô1
.
±r
 == it2.ptr; }

2311 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
S∑r£M©C⁄°Iãøt‹
& 
ô1
, c⁄° 
	gS∑r£M©C⁄°Iãøt‹
& 
	gô2
)

2312 {  !(
	gô1
 =
ô2
); }

2315 
ölöe
 
	gS∑r£M©C⁄°Iãøt‹
& S∑r£M©C⁄°Iãøt‹::
›î©‹
 = (c⁄° 
S∑r£M©C⁄°Iãøt‹
& 
ô
)

2317 if–
this
 !&
ô
 )

2319 
m
 = 
ô
.m;

2320 
	ghashidx
 = 
ô
.
hashidx
;

2321 
	g±r
 = 
ô
.
±r
;

2323  *
	gthis
;

2326 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gS∑r£M©C⁄°Iãøt‹
::
	$vÆue
() const

2327 {  *(
_Tp
*)
±r
; 
	}
}

2329 
ölöe
 c⁄° 
	gS∑r£M©
::
Node
* 
S∑r£M©C⁄°Iãøt‹
::
	$node
() const

2331  
±r
 && 
m
 && m->
hdr
 ?

2332 (c⁄° 
S∑r£M©
::
Node
*)(*)(
±r
 - 
m
->
hdr
->
vÆueOff£t
) : 0;

2333 
	}
}

2335 
ölöe
 
S∑r£M©C⁄°Iãøt‹
 
	gS∑r£M©C⁄°Iãøt‹
::
›î©‹
 ++()

2337 
S∑r£M©C⁄°Iãøt‹
 
ô
 = *
this
;

2338 ++*
	gthis
;

2339  
	gô
;

2343 
ölöe
 
	gS∑r£M©C⁄°Iãøt‹
::
	$£ekEnd
()

2345 if–
m
 && m->
hdr
 )

2347 
hashidx
 = 
m
->
hdr
->
hashèb
.
	`size
();

2348 
±r
 = 0;

2350 
	}
}

2352 
ölöe
 
	gS∑r£M©Iãøt‹
::
	$S∑r£M©Iãøt‹
()

2353 {
	}
}

2355 
ölöe
 
S∑r£M©Iãøt‹
::
	$S∑r£M©Iãøt‹
(
S∑r£M©
* 
_m
)

2356 : 
	$S∑r£M©C⁄°Iãøt‹
(
_m
)

2357 {
	}
}

2359 
ölöe
 
S∑r£M©Iãøt‹
::
	$S∑r£M©Iãøt‹
(c⁄° 
S∑r£M©Iãøt‹
& 
ô
)

2360 : 
	$S∑r£M©C⁄°Iãøt‹
(
ô
)

2362 
	}
}

2364 
ölöe
 
S∑r£M©Iãøt‹
& S∑r£M©Iãøt‹::
›î©‹
 = (c⁄° S∑r£M©Iãøt‹& 
ô
)

2366 (
S∑r£M©C⁄°Iãøt‹
&)*
this
 = 
ô
;

2367  *
	gthis
;

2370 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gS∑r£M©Iãøt‹
::
	$vÆue
() const

2371 {  *(
_Tp
*)
±r
; 
	}
}

2373 
ölöe
 
	gS∑r£M©
::
Node
* 
S∑r£M©Iãøt‹
::
	$node
() const

2375  (
S∑r£M©
::
Node
*)
S∑r£M©C⁄°Iãøt‹
::
	`node
();

2376 
	}
}

2378 
ölöe
 
	gS∑r£M©Iãøt‹
& S∑r£M©Iãøt‹::
›î©‹
 ++()

2380 
S∑r£M©C⁄°Iãøt‹
::
›î©‹
 ++();

2381  *
	gthis
;

2384 
ölöe
 
S∑r£M©Iãøt‹
 
	gS∑r£M©Iãøt‹
::
›î©‹
 ++()

2386 
S∑r£M©Iãøt‹
 
ô
 = *
this
;

2387 ++*
	gthis
;

2388  
	gô
;

2392 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©_
<_Tp>::
	$S∑r£M©_
()

2393 { 
Êags
 = 
MAGIC_VAL
 | 
D©aTy≥
<
_Tp
>::
ty≥
; 
	}
}

2395 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©_
<_Tp>::
	$S∑r£M©_
(
_dims
, c⁄° * 
_sizes
)

2396 : 
	`S∑r£M©
(
_dims
, 
_sizes
, 
D©aTy≥
<
_Tp
>::
ty≥
)

2397 {
	}
}

2399 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
S∑r£M©_
<_Tp>::
	$S∑r£M©_
(c⁄° 
S∑r£M©
& 
m
)

2401 if–
m
.
	`ty≥
(Ë=
D©aTy≥
<
_Tp
>::
ty≥
 )

2402 *
this
 = (c⁄° 
S∑r£M©_
<
_Tp
>&)
m
;

2404 
m
.
	`c⁄vîtTo
(*
this
, 
D©aTy≥
<
_Tp
>::
ty≥
);

2405 
	}
}

2407 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©_
<_Tp>::
S∑r£M©_
(c⁄° S∑r£M©_<
_Tp
>& 
m
)

2409 
this
->
Êags
 = 
m
.flags;

2410 
	gthis
->
	ghdr
 = 
m
.
hdr
;

2411 if–
	gthis
->
	ghdr
 )

2412 
CV_XADD
(&
this
->
hdr
->
ªfcou¡
, 1);

2415 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©_
<_Tp>::
	$S∑r£M©_
(c⁄° 
M©
& 
m
)

2417 
S∑r£M©
 
	`sm
(
m
);

2418 *
this
 = 
sm
;

2419 
	}
}

2421 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©_
<_Tp>::
	$S∑r£M©_
(c⁄° 
CvS∑r£M©
* 
m
)

2423 
S∑r£M©
 
	`sm
(
m
);

2424 *
this
 = 
sm
;

2425 
	}
}

2427 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©_
<_Tp>&

2428 
	gS∑r£M©_
<
	g_Tp
>::
›î©‹
 = (c⁄° 
S∑r£M©_
<
_Tp
>& 
m
)

2430 if–
this
 !&
m
 )

2432 if–
m
.
hdr
 ) 
CV_XADD
(&m.hdr->
ªfcou¡
, 1);

2433 
ªÀa£
();

2434 
	gÊags
 = 
m
.
Êags
;

2435 
	ghdr
 = 
m
.
hdr
;

2437  *
	gthis
;

2440 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©_
<_Tp>&

2441 
	gS∑r£M©_
<
	g_Tp
>::
›î©‹
 = (c⁄° 
S∑r£M©
& 
m
)

2443 if–
m
.
ty≥
(Ë=
D©aTy≥
<
_Tp
>::type )

2444  (*
this
 = (c⁄° 
S∑r£M©_
<
_Tp
>&)
m
);

2445 
	gm
.
c⁄vîtTo
(*
this
, 
D©aTy≥
<
_Tp
>::
ty≥
);

2446  *
	gthis
;

2449 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©_
<_Tp>&

2450 
	gS∑r£M©_
<
	g_Tp
>::
›î©‹
 = (c⁄° 
M©
& 
m
)

2451 {  (*
this
 = 
S∑r£M©
(
m
)); }

2453 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©_
<_Tp>

2454 
	gS∑r£M©_
<
	g_Tp
>::
	$˛⁄e
() const

2456 
S∑r£M©_
<
_Tp
> 
m
;

2457 
this
->
	`c›yTo
(
m
);

2458  
m
;

2459 
	}
}

2461 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 

2462 
	gS∑r£M©_
<
	g_Tp
>::
	$¸óã
(
_dims
, c⁄° * 
_sizes
)

2464 
S∑r£M©
::
	`¸óã
(
_dims
, 
_sizes
, 
D©aTy≥
<
_Tp
>::
ty≥
);

2465 
	}
}

2467 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


2468 
	gS∑r£M©_
<
	g_Tp
>::
›î©‹
 
CvS∑r£M©
*() const

2470  
S∑r£M©
::
›î©‹
 
CvS∑r£M©
*();

2473 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©_
<_Tp>::
	$ty≥
() const

2474 {  
D©aTy≥
<
_Tp
>::
ty≥
; 
	}
}

2476 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©_
<_Tp>::
	$dïth
() const

2477 {  
D©aTy≥
<
_Tp
>::
dïth
; 
	}
}

2479 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©_
<_Tp>::
	$ch™√ls
() const

2480 {  
D©aTy≥
<
_Tp
>::
ch™√ls
; 
	}
}

2482 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp&

2483 
	gS∑r£M©_
<
	g_Tp
>::
	$ªf
(
i0
, 
size_t
* 
hashvÆ
)

2484 {  
S∑r£M©
::
ªf
<
_Tp
>(
i0
, 
hashvÆ
); 
	}
}

2486 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp


2487 
	gS∑r£M©_
<
	g_Tp
>::
	$›î©‹
()(
i0
, 
size_t
* 
hashvÆ
) const

2488 {  
S∑r£M©
::
vÆue
<
_Tp
>(
i0
, 
hashvÆ
); 
	}
}

2490 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp&

2491 
	gS∑r£M©_
<
	g_Tp
>::
	$ªf
(
i0
, 
i1
, 
size_t
* 
hashvÆ
)

2492 {  
S∑r£M©
::
ªf
<
_Tp
>(
i0
, 
i1
, 
hashvÆ
); 
	}
}

2494 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp


2495 
	gS∑r£M©_
<
	g_Tp
>::
	$›î©‹
()(
i0
, 
i1
, 
size_t
* 
hashvÆ
) const

2496 {  
S∑r£M©
::
vÆue
<
_Tp
>(
i0
, 
i1
, 
hashvÆ
); 
	}
}

2498 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp&

2499 
	gS∑r£M©_
<
	g_Tp
>::
	$ªf
(
i0
, 
i1
, 
i2
, 
size_t
* 
hashvÆ
)

2500 {  
S∑r£M©
::
ªf
<
_Tp
>(
i0
, 
i1
, 
i2
, 
hashvÆ
); 
	}
}

2502 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp


2503 
	gS∑r£M©_
<
	g_Tp
>::
	$›î©‹
()(
i0
, 
i1
, 
i2
, 
size_t
* 
hashvÆ
) const

2504 {  
S∑r£M©
::
vÆue
<
_Tp
>(
i0
, 
i1
, 
i2
, 
hashvÆ
); 
	}
}

2506 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp&

2507 
	gS∑r£M©_
<
	g_Tp
>::
	$ªf
(c⁄° * 
idx
, 
size_t
* 
hashvÆ
)

2508 {  
S∑r£M©
::
ªf
<
_Tp
>(
idx
, 
hashvÆ
); 
	}
}

2510 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp


2511 
	gS∑r£M©_
<
	g_Tp
>::
	$›î©‹
()(c⁄° * 
idx
, 
size_t
* 
hashvÆ
) const

2512 {  
S∑r£M©
::
vÆue
<
_Tp
>(
idx
, 
hashvÆ
); 
	}
}

2514 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©Iãøt‹_
<_Tp> 
	gS∑r£M©_
<_Tp>::
	$begö
()

2515 {  
S∑r£M©Iãøt‹_
<
_Tp
>(
this
); 
	}
}

2517 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©C⁄°Iãøt‹_
<_Tp> 
	gS∑r£M©_
<_Tp>::
	$begö
() const

2518 {  
S∑r£M©C⁄°Iãøt‹_
<
_Tp
>(
this
); 
	}
}

2520 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©Iãøt‹_
<_Tp> 
	gS∑r£M©_
<_Tp>::
	$íd
()

2521 { 
S∑r£M©Iãøt‹_
<
_Tp
> 
	`ô
(
this
); 
ô
.
	`£ekEnd
();  it; 
	}
}

2523 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©C⁄°Iãøt‹_
<_Tp> 
	gS∑r£M©_
<_Tp>::
	$íd
() const

2524 { 
S∑r£M©C⁄°Iãøt‹_
<
_Tp
> 
	`ô
(
this
); 
ô
.
	`£ekEnd
();  it; 
	}
}

2526 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


2527 
	gS∑r£M©C⁄°Iãøt‹_
<
	g_Tp
>::
	$S∑r£M©C⁄°Iãøt‹_
()

2528 {
	}
}

2530 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe


2531 
S∑r£M©C⁄°Iãøt‹_
<
_Tp
>::S∑r£M©C⁄°Iãøt‹_(c⁄° 
S∑r£M©_
<_Tp>* 
_m
)

2532 : 
	$S∑r£M©C⁄°Iãøt‹
(
_m
)

2533 {
	}
}

2535 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe


2536 
S∑r£M©C⁄°Iãøt‹_
<
_Tp
>::
	$S∑r£M©C⁄°Iãøt‹_
(c⁄° 
S∑r£M©
* 
_m
)

2537 : 
	$S∑r£M©C⁄°Iãøt‹
(
_m
)

2539 
	`CV_As£π
–
_m
->
	`ty≥
(Ë=
D©aTy≥
<
_Tp
>::
ty≥
 );

2540 
	}
}

2542 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


2543 
	gS∑r£M©C⁄°Iãøt‹_
<
	g_Tp
>::
S∑r£M©C⁄°Iãøt‹_
(c⁄° S∑r£M©C⁄°Iãøt‹_<
_Tp
>& 
ô
)

2544 : 
	$S∑r£M©C⁄°Iãøt‹
(
ô
)

2545 {
	}
}

2547 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
S∑r£M©C⁄°Iãøt‹_
<_Tp>&

2548 
S∑r£M©C⁄°Iãøt‹_
<
_Tp
>::
›î©‹
 = (c⁄° S∑r£M©C⁄°Iãøt‹_<_Tp>& 
ô
)

2549 {  
ªöãΩªt_ˇ°
<
S∑r£M©C⁄°Iãøt‹_
<
_Tp
>&>

2550 (*
ªöãΩªt_ˇ°
<
S∑r£M©C⁄°Iãøt‹
*>(
this
) =

2551 
ªöãΩªt_ˇ°
<c⁄° 
S∑r£M©C⁄°Iãøt‹
&>(
ô
)); }

2553 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 const _Tp&

2554 
	gS∑r£M©C⁄°Iãøt‹_
<
	g_Tp
>::
›î©‹
 *() const

2555 {  *(c⁄° 
_Tp
*)
this
->
±r
; }

2557 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©C⁄°Iãøt‹_
<_Tp>&

2558 
	gS∑r£M©C⁄°Iãøt‹_
<
	g_Tp
>::
›î©‹
 ++()

2560 
S∑r£M©C⁄°Iãøt‹
::
›î©‹
 ++();

2561  *
	gthis
;

2564 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©C⁄°Iãøt‹_
<_Tp>

2565 
	gS∑r£M©C⁄°Iãøt‹_
<
	g_Tp
>::
›î©‹
 ++()

2567 
S∑r£M©C⁄°Iãøt‹
 
ô
 = *
this
;

2568 
	gS∑r£M©C⁄°Iãøt‹
::
›î©‹
 ++();

2569  
	gô
;

2572 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


2573 
	gS∑r£M©Iãøt‹_
<
	g_Tp
>::
	$S∑r£M©Iãøt‹_
()

2574 {
	}
}

2576 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe


2577 
S∑r£M©Iãøt‹_
<
_Tp
>::S∑r£M©Iãøt‹_(
S∑r£M©_
<_Tp>* 
_m
)

2578 : 
S∑r£M©C⁄°Iãøt‹_
<
_Tp
>(
_m
)

2581 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe


2582 
S∑r£M©Iãøt‹_
<
_Tp
>::
	$S∑r£M©Iãøt‹_
(
S∑r£M©
* 
_m
)

2583 : 
S∑r£M©C⁄°Iãøt‹_
<
_Tp
>(
_m
)

2584 {
	}
}

2586 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe


2587 
S∑r£M©Iãøt‹_
<
_Tp
>::S∑r£M©Iãøt‹_(c⁄° S∑r£M©Iãøt‹_<_Tp>& 
ô
)

2588 : 
S∑r£M©C⁄°Iãøt‹_
<
_Tp
>(
ô
)

2591 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
S∑r£M©Iãøt‹_
<_Tp>&

2592 
S∑r£M©Iãøt‹_
<
_Tp
>::
›î©‹
 = (c⁄° S∑r£M©Iãøt‹_<_Tp>& 
ô
)

2593 {  
ªöãΩªt_ˇ°
<
S∑r£M©Iãøt‹_
<
_Tp
>&>

2594 (*
ªöãΩªt_ˇ°
<
S∑r£M©C⁄°Iãøt‹
*>(
this
) =

2595 
ªöãΩªt_ˇ°
<c⁄° 
S∑r£M©C⁄°Iãøt‹
&>(
ô
)); }

2597 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp&

2598 
	gS∑r£M©Iãøt‹_
<
	g_Tp
>::
›î©‹
 *() const

2599 {  *(
_Tp
*)
this
->
±r
; }

2601 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©Iãøt‹_
<_Tp>&

2602 
	gS∑r£M©Iãøt‹_
<
	g_Tp
>::
›î©‹
 ++()

2604 
S∑r£M©C⁄°Iãøt‹
::
›î©‹
 ++();

2605  *
	gthis
;

2608 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gS∑r£M©Iãøt‹_
<_Tp>

2609 
	gS∑r£M©Iãøt‹_
<
	g_Tp
>::
›î©‹
 ++()

2611 
S∑r£M©Iãøt‹
 
ô
 = *
this
;

2612 
	gS∑r£M©C⁄°Iãøt‹
::
›î©‹
 ++();

2613  
	gô
;

	@/usr/include/opencv2/core/operations.hpp

43 #i‚de‡
__OPENCV_CORE_OPERATIONS_HPP__


44 
	#__OPENCV_CORE_OPERATIONS_HPP__


	)

46 #i‚de‡
SKIP_INCLUDES


47 
	~<°rög.h
>

48 
	~<limôs.h
>

52 #ifde‡
__˝lu•lus


55 #i‡
deföed
 
__INTEL_COMPILER
 && !(deföed 
WIN32
 || deföed 
_WIN32
)

56 
	#CV_XADD
(
addr
,
dñè
Ë
	`_I¡îlockedExch™geAdd
(
c⁄°_ˇ°
<*>(
ªöãΩªt_ˇ°
<vﬁ©ûê*>◊ddr)), dñè)

	)

57 #ñi‡
deföed
 
__GNUC__


59 #i‡
deföed
 
__˛™g__
 && 
__˛™g_maj‹__
 >3 && !deföed 
__ANDROID__
 && !deföed 
__EMSCRIPTEN__


60 #ifde‡
__ATOMIC_SEQ_CST


61 
	#CV_XADD
(
addr
, 
dñè
Ë
	`__c11_©omic_„tch_add
((
	`_Atomic
()*)◊ddr), (dñè), 
__ATOMIC_SEQ_CST
)

	)

63 
	#CV_XADD
(
addr
, 
dñè
Ë
	`__©omic_„tch_add
((
	`_Atomic
()*)◊ddr), (dñè), 5)

	)

65 #ñi‡
__GNUC__
*10 + 
__GNUC_MINOR__
 >= 42

67 #i‡!(
deföed
 
WIN32
 || deföed 
_WIN32
Ë&& (deföed 
__i486__
 || deföed 
__i586__
 || \

68 
deföed
 
	g__i686__
 || deföed 
	g__MMX__
 || deföed 
	g__SSE__
 || deföed 
	g__µc__
) || \

69 (
deföed
 
	g__GNUC__
 && deföed 
	g_STLPORT_MAJOR
) || \

70 
deföed
 
	g__EMSCRIPTEN__


72 
	#CV_XADD
 
__sync_„tch_™d_add


	)

74 
	~<ext/©omicôy.h
>

75 
	#CV_XADD
 
__gnu_cxx
::
__exch™ge_™d_add


	)

79 
	~<bôs/©omicôy.h
>

80 #i‡
__GNUC__
*10 + 
__GNUC_MINOR__
 >= 34

81 
	#CV_XADD
 
__gnu_cxx
::
__exch™ge_™d_add


	)

83 
	#CV_XADD
 
__exch™ge_™d_add


	)

87 #ñi‡
deföed
 
WIN32
 || deföed 
_WIN32
 || deföed 
WINCE


88 
«me•a˚
 
	gcv
 { 
CV_EXPORTS
 
_öãæockedExch™geAdd
(* 
addr
, 
dñè
); }

89 
	#CV_XADD
 
cv
::
_öãæockedExch™geAdd


	)

92 
ölöe
 
	$CV_XADD
(* 
addr
, 
dñè
)

93 { 
tmp
 = *
addr
; *add∏+
dñè
; Åmp; 
	}
}

96 
	~<limôs
>

98 #ifde‡
_MSC_VER


99 #¥agm®
w¨nög
(
push
)

100 #¥agm®
w¨nög
(
dißbÀ
:4127)

103 
«me•a˚
 
	gcv


106 
usög
 
	g°d
::
cos
;

107 
usög
 
	g°d
::
sö
;

108 
usög
 
	g°d
::
max
;

109 
usög
 
	g°d
::
mö
;

110 
usög
 
	g°d
::
exp
;

111 
usög
 
	g°d
::
log
;

112 
usög
 
	g°d
::
pow
;

113 
usög
 
	g°d
::
sqπ
;

118 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
ßtuøã_ˇ°
(
uch¨
 
v
) {  _Tp(v); }

119 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
ßtuøã_ˇ°
(
sch¨
 
v
) {  _Tp(v); }

120 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
ßtuøã_ˇ°
(
ush‹t
 
v
) {  _Tp(v); }

121 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
ßtuøã_ˇ°
(
v
) {  _Tp(v); }

122 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
ßtuøã_ˇ°
(
v
) {  _Tp(v); }

123 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
ßtuøã_ˇ°
(
v
) {  _Tp(v); }

124 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
ßtuøã_ˇ°
(
v
) {  _Tp(v); }

125 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
ßtuøã_ˇ°
(
v
) {  _Tp(v); }

127 
	gãm∂©e
<> 
ölöe
 
uch¨
 
	gßtuøã_ˇ°
<
	guch¨
>(
sch¨
 
	gv
)

128 {  (
	guch¨
)
	g°d
::
max
(()
v
, 0); }

129 
	gãm∂©e
<> 
ölöe
 
uch¨
 
	gßtuøã_ˇ°
<
	guch¨
>(
ush‹t
 
	gv
)

130 {  (
	guch¨
)
	g°d
::
mö
(()
v
, ()
UCHAR_MAX
); }

131 
	gãm∂©e
<> 
ölöe
 
uch¨
 
	gßtuøã_ˇ°
<
	guch¨
>(
	gv
)

132 {  (
	guch¨
)(()
	gv
 <
UCHAR_MAX
 ? 
v
 : v > 0 ? UCHAR_MAX : 0); }

133 
	gãm∂©e
<> 
ölöe
 
uch¨
 
	gßtuøã_ˇ°
<
	guch¨
>(
	gv
)

134 {  
	gßtuøã_ˇ°
<
	guch¨
>(()
	gv
); }

135 
	gãm∂©e
<> 
ölöe
 
uch¨
 
	gßtuøã_ˇ°
<
	guch¨
>(
	gv
)

136 {  (
	guch¨
)
	g°d
::
mö
(
v
, ()
UCHAR_MAX
); }

137 
	gãm∂©e
<> 
ölöe
 
uch¨
 
	gßtuøã_ˇ°
<
	guch¨
>(
	gv
)

138 { 
	giv
 = 
cvRound
(
v
);  
	gßtuøã_ˇ°
<
	guch¨
>(iv); }

139 
	gãm∂©e
<> 
ölöe
 
uch¨
 
	gßtuøã_ˇ°
<
	guch¨
>(
	gv
)

140 { 
	giv
 = 
cvRound
(
v
);  
	gßtuøã_ˇ°
<
	guch¨
>(iv); }

142 
	gãm∂©e
<> 
ölöe
 
sch¨
 
	gßtuøã_ˇ°
<
	gsch¨
>(
uch¨
 
	gv
)

143 {  (
	gsch¨
)
	g°d
::
mö
(()
v
, 
SCHAR_MAX
); }

144 
	gãm∂©e
<> 
ölöe
 
sch¨
 
	gßtuøã_ˇ°
<
	gsch¨
>(
ush‹t
 
	gv
)

145 {  (
	gsch¨
)
	g°d
::
mö
(()
v
, ()
SCHAR_MAX
); }

146 
	gãm∂©e
<> 
ölöe
 
sch¨
 
	gßtuøã_ˇ°
<
	gsch¨
>(
	gv
)

148  (
	gsch¨
)(()(
	gv
-
	gSCHAR_MIN
Ë<()
UCHAR_MAX
 ?

149 
v
 : v > 0 ? 
SCHAR_MAX
 : 
SCHAR_MIN
);

151 
	gãm∂©e
<> 
ölöe
 
sch¨
 
	gßtuøã_ˇ°
<
	gsch¨
>(
	gv
)

152 {  
	gßtuøã_ˇ°
<
	gsch¨
>(()
	gv
); }

153 
	gãm∂©e
<> 
ölöe
 
sch¨
 
	gßtuøã_ˇ°
<
	gsch¨
>(
	gv
)

154 {  (
	gsch¨
)
	g°d
::
mö
(
v
, ()
SCHAR_MAX
); }

156 
	gãm∂©e
<> 
ölöe
 
sch¨
 
	gßtuøã_ˇ°
<
	gsch¨
>(
	gv
)

157 { 
	giv
 = 
cvRound
(
v
);  
	gßtuøã_ˇ°
<
	gsch¨
>(iv); }

158 
	gãm∂©e
<> 
ölöe
 
sch¨
 
	gßtuøã_ˇ°
<
	gsch¨
>(
	gv
)

159 { 
	giv
 = 
cvRound
(
v
);  
	gßtuøã_ˇ°
<
	gsch¨
>(iv); }

161 
	gãm∂©e
<> 
ölöe
 
ush‹t
 
	gßtuøã_ˇ°
<
	gush‹t
>(
sch¨
 
	gv
)

162 {  (
	gush‹t
)
	g°d
::
max
(()
v
, 0); }

163 
	gãm∂©e
<> 
ölöe
 
ush‹t
 
	gßtuøã_ˇ°
<
	gush‹t
>(
	gv
)

164 {  (
	gush‹t
)
	g°d
::
max
(()
v
, 0); }

165 
	gãm∂©e
<> 
ölöe
 
ush‹t
 
	gßtuøã_ˇ°
<
	gush‹t
>(
	gv
)

166 {  (
	gush‹t
)(()
	gv
 <()
USHRT_MAX
 ? 
v
 : v > 0 ? USHRT_MAX : 0); }

167 
	gãm∂©e
<> 
ölöe
 
ush‹t
 
	gßtuøã_ˇ°
<
	gush‹t
>(
	gv
)

168 {  (
	gush‹t
)
	g°d
::
mö
(
v
, ()
USHRT_MAX
); }

169 
	gãm∂©e
<> 
ölöe
 
ush‹t
 
	gßtuøã_ˇ°
<
	gush‹t
>(
	gv
)

170 { 
	giv
 = 
cvRound
(
v
);  
	gßtuøã_ˇ°
<
	gush‹t
>(iv); }

171 
	gãm∂©e
<> 
ölöe
 
ush‹t
 
	gßtuøã_ˇ°
<
	gush‹t
>(
	gv
)

172 { 
	giv
 = 
cvRound
(
v
);  
	gßtuøã_ˇ°
<
	gush‹t
>(iv); }

174 
	gãm∂©e
<> 
ölöe
 
	gßtuøã_ˇ°
<>(
ush‹t
 
	gv
)

175 {  ()
	g°d
::
mö
(()
v
, 
SHRT_MAX
); }

176 
	gãm∂©e
<> 
ölöe
 
	gßtuøã_ˇ°
<>(
	gv
)

178  ()(()(
	gv
 - 
	gSHRT_MIN
Ë<()
USHRT_MAX
 ?

179 
v
 : v > 0 ? 
SHRT_MAX
 : 
SHRT_MIN
);

181 
	gãm∂©e
<> 
ölöe
 
	gßtuøã_ˇ°
<>(
	gv
)

182 {  ()
	g°d
::
mö
(
v
, ()
SHRT_MAX
); }

183 
	gãm∂©e
<> 
ölöe
 
	gßtuøã_ˇ°
<>(
	gv
)

184 { 
	giv
 = 
cvRound
(
v
);  
	gßtuøã_ˇ°
<>(iv); }

185 
	gãm∂©e
<> 
ölöe
 
	gßtuøã_ˇ°
<>(
	gv
)

186 { 
	giv
 = 
cvRound
(
v
);  
	gßtuøã_ˇ°
<>(iv); }

188 
	gãm∂©e
<> 
ölöe
 
	gßtuøã_ˇ°
<>(
	gv
Ë{  
cvRound
(
v
); }

189 
	gãm∂©e
<> 
ölöe
 
	gßtuøã_ˇ°
<>(
	gv
Ë{  
cvRound
(
v
); }

192 
	gãm∂©e
<> 
ölöe
 
	gßtuøã_ˇ°
<>(
	gv
){  
cvRound
(
v
); }

193 
	gãm∂©e
<> 
ölöe
 
	gßtuøã_ˇ°
<>(
	gv
Ë{  
cvRound
(
v
); }

195 
ölöe
 
Á°_abs
(
uch¨
 
v
Ë{  
	gv
; }

196 
ölöe
 
Á°_abs
(
sch¨
 
v
Ë{  
	g°d
::
abs
(()v); }

197 
ölöe
 
Á°_abs
(
ush‹t
 
v
Ë{  
	gv
; }

198 
ölöe
 
Á°_abs
(
v
Ë{  
	g°d
::
abs
(()v); }

199 
ölöe
 
Á°_abs
(
v
Ë{  
	g°d
::
abs
(v); }

200 
ölöe
 
Á°_abs
(
v
Ë{  
	g°d
::
abs
(v); }

201 
ölöe
 
Á°_abs
(
v
Ë{  
	g°d
::
abs
(v); }

206 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
M©x
()

208 
i
 = 0; 
	gi
 < 
	gch™√ls
; i++Ë
	gvÆ
[i] = 
_Tp
(0);

211 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
M©x
(
_Tp
 
v0
)

213 
vÆ
[0] = 
v0
;

214 
	gi
 = 1; i < 
	gch™√ls
; i++Ë
	gvÆ
[
i
] = 
_Tp
(0);

217 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
M©x
(
_Tp
 
v0
, _T∞
v1
)

219 
as£π
(
ch™√ls
 >= 2);

220 
	gvÆ
[0] = 
v0
; vÆ[1] = 
v1
;

221 
	gi
 = 2; i < 
	gch™√ls
; i++Ë
	gvÆ
[
i
] = 
_Tp
(0);

224 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
)

226 
as£π
(
ch™√ls
 >= 3);

227 
	gvÆ
[0] = 
v0
; vÆ[1] = 
v1
; vÆ[2] = 
v2
;

228 
	gi
 = 3; i < 
	gch™√ls
; i++Ë
	gvÆ
[
i
] = 
_Tp
(0);

231 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
)

233 
as£π
(
ch™√ls
 >= 4);

234 
	gvÆ
[0] = 
v0
; vÆ[1] = 
v1
; vÆ[2] = 
v2
; vÆ[3] = 
v3
;

235 
	gi
 = 4; i < 
	gch™√ls
; i++Ë
	gvÆ
[
i
] = 
_Tp
(0);

238 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
)

240 
as£π
(
ch™√ls
 >= 5);

241 
	gvÆ
[0] = 
v0
; vÆ[1] = 
v1
; vÆ[2] = 
v2
; vÆ[3] = 
v3
; vÆ[4] = 
v4
;

242 
	gi
 = 5; i < 
	gch™√ls
; i++Ë
	gvÆ
[
i
] = 
_Tp
(0);

245 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

246 
_Tp
 
v4
, _T∞
v5
)

248 
as£π
(
ch™√ls
 >= 6);

249 
	gvÆ
[0] = 
v0
; vÆ[1] = 
v1
; vÆ[2] = 
v2
; vÆ[3] = 
v3
;

250 
	gvÆ
[4] = 
v4
; vÆ[5] = 
v5
;

251 
	gi
 = 6; i < 
	gch™√ls
; i++Ë
	gvÆ
[
i
] = 
_Tp
(0);

254 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

255 
_Tp
 
v4
, _T∞
v5
, _T∞
v6
)

257 
as£π
(
ch™√ls
 >= 7);

258 
	gvÆ
[0] = 
v0
; vÆ[1] = 
v1
; vÆ[2] = 
v2
; vÆ[3] = 
v3
;

259 
	gvÆ
[4] = 
v4
; vÆ[5] = 
v5
; vÆ[6] = 
v6
;

260 
	gi
 = 7; i < 
	gch™√ls
; i++Ë
	gvÆ
[
i
] = 
_Tp
(0);

263 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

264 
_Tp
 
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
)

266 
as£π
(
ch™√ls
 >= 8);

267 
	gvÆ
[0] = 
v0
; vÆ[1] = 
v1
; vÆ[2] = 
v2
; vÆ[3] = 
v3
;

268 
	gvÆ
[4] = 
v4
; vÆ[5] = 
v5
; vÆ[6] = 
v6
; vÆ[7] = 
v7
;

269 
	gi
 = 8; i < 
	gch™√ls
; i++Ë
	gvÆ
[
i
] = 
_Tp
(0);

272 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

273 
_Tp
 
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
,

274 
_Tp
 
v8
)

276 
as£π
(
ch™√ls
 >= 9);

277 
	gvÆ
[0] = 
v0
; vÆ[1] = 
v1
; vÆ[2] = 
v2
; vÆ[3] = 
v3
;

278 
	gvÆ
[4] = 
v4
; vÆ[5] = 
v5
; vÆ[6] = 
v6
; vÆ[7] = 
v7
;

279 
	gvÆ
[8] = 
v8
;

280 
	gi
 = 9; i < 
	gch™√ls
; i++Ë
	gvÆ
[
i
] = 
_Tp
(0);

283 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

284 
_Tp
 
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
,

285 
_Tp
 
v8
, _T∞
v9
)

287 
as£π
(
ch™√ls
 >= 10);

288 
	gvÆ
[0] = 
v0
; vÆ[1] = 
v1
; vÆ[2] = 
v2
; vÆ[3] = 
v3
;

289 
	gvÆ
[4] = 
v4
; vÆ[5] = 
v5
; vÆ[6] = 
v6
; vÆ[7] = 
v7
;

290 
	gvÆ
[8] = 
v8
; vÆ[9] = 
v9
;

291 
	gi
 = 10; i < 
	gch™√ls
; i++Ë
	gvÆ
[
i
] = 
_Tp
(0);

295 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
>

296 
ölöe
 
	gM©x
<
	g_Tp
,
	gm
,
	gn
>::
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

297 
_Tp
 
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
,

298 
_Tp
 
v8
, _T∞
v9
, _T∞
v10
, _T∞
v11
)

300 
as£π
(
ch™√ls
 == 12);

301 
	gvÆ
[0] = 
v0
; vÆ[1] = 
v1
; vÆ[2] = 
v2
; vÆ[3] = 
v3
;

302 
	gvÆ
[4] = 
v4
; vÆ[5] = 
v5
; vÆ[6] = 
v6
; vÆ[7] = 
v7
;

303 
	gvÆ
[8] = 
v8
; vÆ[9] = 
v9
; vÆ[10] = 
v10
; vÆ[11] = 
v11
;

306 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
>

307 
ölöe
 
	gM©x
<
	g_Tp
,
	gm
,
	gn
>::
M©x
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

308 
_Tp
 
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
,

309 
_Tp
 
v8
, _T∞
v9
, _T∞
v10
, _T∞
v11
,

310 
_Tp
 
v12
, _T∞
v13
, _T∞
v14
, _T∞
v15
)

312 
as£π
(
ch™√ls
 == 16);

313 
	gvÆ
[0] = 
v0
; vÆ[1] = 
v1
; vÆ[2] = 
v2
; vÆ[3] = 
v3
;

314 
	gvÆ
[4] = 
v4
; vÆ[5] = 
v5
; vÆ[6] = 
v6
; vÆ[7] = 
v7
;

315 
	gvÆ
[8] = 
v8
; vÆ[9] = 
v9
; vÆ[10] = 
v10
; vÆ[11] = 
v11
;

316 
	gvÆ
[12] = 
v12
; vÆ[13] = 
v13
; vÆ[14] = 
v14
; vÆ[15] = 
v15
;

319 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
M©x
(c⁄° 
_Tp
* 
vÆues
)

321  
i
 = 0; 
	gi
 < 
	gch™√ls
; i++ ) 
	gvÆ
[i] = 
vÆues
[i];

324 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç> M©x<_Tp, m,Ç>::
Æl
(
_Tp
 
Æpha
)

326 
M©x
<
_Tp
, 
	gm
, 
	gn
> 
	gM
;

327  
	gi
 = 0; i < 
m
*
	gn
; i++ ) 
	gM
.
	gvÆ
[
i
] = 
Æpha
;

328  
	gM
;

331 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


332 
	gM©x
<
	g_Tp
,
	gm
,
	gn
> M©x<_Tp,m,n>::
zîos
()

334  
Æl
(0);

337 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


338 
	gM©x
<
	g_Tp
,
	gm
,
	gn
> M©x<_Tp,m,n>::
⁄es
()

340  
Æl
(1);

343 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


344 
	gM©x
<
	g_Tp
,
	gm
,
	gn
> M©x<_Tp,m,n>::
eye
()

346 
M©x
<
_Tp
,
	gm
,
	gn
> 
	gM
;

347 
	gi
 = 0; i < 
MIN
(
m
,
n
); i++)

348 
M
(
i
,i) = 1;

349  
	gM
;

352 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
_Tp
 
	gM©x
<_Tp, m,Ç>::
dŸ
(c⁄° 
M©x
<_Tp, 
m
, 
n
>& 
M
) const

354 
_Tp
 
	gs
 = 0;

355  
	gi
 = 0; i < 
m
*
	gn
; i++ ) 
	gs
 +
vÆ
[
i
]*
M
.val[i];

356  
	gs
;

360 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	gM©x
<_Tp, m,Ç>::
ddŸ
(c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
M
) const

362 
	gs
 = 0;

363  
	gi
 = 0; i < 
m
*
	gn
; i++ ) 
	gs
 +()
vÆ
[
i
]*
M
.val[i];

364  
	gs
;

369 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


370 
	gM©x
<
	g_Tp
,
	gm
,
	gn
> M©x<_Tp,m,n>::
düg
(c⁄° 
ty≥«me
 
M©x
<
_Tp
,
m
,
n
>::
düg_ty≥
& 
d
)

372 
M©x
<
_Tp
,
	gm
,
	gn
> 
	gM
;

373 
	gi
 = 0; i < 
MIN
(
m
,
n
); i++)

374 
M
(
i
,iË
d
(i, 0);

375  
	gM
;

378 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


379 
	gM©x
<
	g_Tp
,
	gm
,
	gn
> M©x<_Tp,m,n>::
øndu
(
_Tp
 
a
, _T∞
b
)

381 
	gM©x
<
	g_Tp
,
	gm
,
	gn
> 
	gM
;

382 
M©
 
m©M
(
M
, 
Ál£
);

383 
	gcv
::
øndu
(
m©M
, 
Sˇœr
(
a
), Sˇœr(
b
));

384  
	gM
;

387 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


388 
	gM©x
<
	g_Tp
,
	gm
,
	gn
> M©x<_Tp,m,n>::
øndn
(
_Tp
 
a
, _T∞
b
)

390 
	gM©x
<
	g_Tp
,
	gm
,
	gn
> 
	gM
;

391 
M©
 
m©M
(
M
, 
Ál£
);

392 
	gcv
::
øndn
(
m©M
, 
Sˇœr
(
a
), Sˇœr(
b
));

393  
	gM
;

396 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
>Åem∂©e<ty≥«mê
	gT2
>

397 
ölöe
 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>::
›î©‹
 
M©x
<
T2
, m,Ç>() const

399 
	gM©x
<
	gT2
, 
	gm
, 
	gn
> 
	gM
;

400  
	gi
 = 0; i < 
m
*
	gn
; i++ ) 
	gM
.
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
T2
>(
vÆ
[i]);

401  
	gM
;

405 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
>Åem∂©e<
	gm1
, 
	gn1
> 
ölöe


406 
	gM©x
<
	g_Tp
, 
	gm1
, 
	gn1
> M©x<_Tp, 
	gm
, 
	gn
>::
ªsh≠e
() const

408 
CV_DbgAs£π
(
m1
*
n1
 =
m
*
n
);

409  (c⁄° 
	gM©x
<
	g_Tp
, 
	gm1
, 
	gn1
>&)*
	gthis
;

413 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
>

414 
	gãm∂©e
<
	gm1
, 
	gn1
> 
ölöe


415 
	gM©x
<
	g_Tp
, 
	gm1
, 
	gn1
> M©x<_Tp, 
	gm
, 
	gn
>::
gë_mö‹
(
i
, 
j
) const

417 
CV_DbgAs£π
(0 <
i
 && i+
m1
 <
m
 && 0 <
j
 && j+
n1
 <
n
);

418 
	gM©x
<
	g_Tp
, 
	gm1
, 
	gn1
> 
	gs
;

419  
	gdi
 = 0; dò< 
	gm1
; di++ )

420  
	gdj
 = 0; dj < 
	gn1
; dj++ )

421 
s
(
di
, 
dj
Ë(*
this
)(
i
+di, 
	gj
+
	gdj
);

422  
	gs
;

426 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


427 
	gM©x
<
	g_Tp
, 1, 
	gn
> M©x<_Tp, 
	gm
,Ç>::
row
(
i
) const

429 
CV_DbgAs£π
(()
i
 < ()
m
);

430  
	gM©x
<
	g_Tp
, 1, 
	gn
>(&
	gvÆ
[
i
*
n
]);

434 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


435 
	gM©x
<
	g_Tp
, 
	gm
, 1> M©x<_Tp, m, 
	gn
>::
cﬁ
(
j
) const

437 
CV_DbgAs£π
(()
j
 < ()
n
);

438 
	gM©x
<
	g_Tp
, 
	gm
, 1> 
	gv
;

439  
	gi
 = 0; i < 
	gm
; i++ )

440 
	gv
.
	gvÆ
[
i
] = 
vÆ
[i*
n
 + 
j
];

441  
	gv
;

445 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


446 
ty≥«me
 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>::
düg_ty≥
 
M©x
<
_Tp
, m,Ç>::
düg
() const

448 
düg_ty≥
 
d
;

449  
	gi
 = 0; i < 
MIN
(
m
, 
n
); i++ )

450 
	gd
.
	gvÆ
[
i
] = 
vÆ
[i*
n
 + i];

451  
	gd
;

455 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


456 c⁄° 
	g_Tp
& 
	gM©x
<_Tp, 
	gm
, 
	gn
>::
›î©‹
 ()(
i
, 
	gj
) const

458 
CV_DbgAs£π
–()
i
 < ()
m
 && ()
j
 < ()
n
 );

459  
	gthis
->
	gvÆ
[
i
*
n
 + 
j
];

463 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


464 
	g_Tp
& 
	gM©x
<_Tp, 
	gm
, 
	gn
>::
›î©‹
 ()(
i
, 
	gj
)

466 
CV_DbgAs£π
–()
i
 < ()
m
 && ()
j
 < ()
n
 );

467  
	gvÆ
[
i
*
n
 + 
j
];

471 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


472 c⁄° 
	g_Tp
& 
	gM©x
<_Tp, 
	gm
, 
	gn
>::
›î©‹
 ()(
i
) const

474 
CV_DbgAs£π
–(
m
 =1 || 
n
 =1Ë&& ()
i
 < ()(m+n-1) );

475  
	gvÆ
[
i
];

479 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


480 
	g_Tp
& 
	gM©x
<_Tp, 
	gm
, 
	gn
>::
›î©‹
 ()(
i
)

482 
CV_DbgAs£π
–(
m
 =1 || 
n
 =1Ë&& ()
i
 < ()(m+n-1) );

483  
	gvÆ
[
i
];

487 
	gãm∂©e
<
ty≥«me
 
	g_Tp1
,Åy≥«mê
	g_Tp2
, 
	gm
, 
	gn
> 
ölöe


488 
	gM©x
<
	g_Tp1
, 
	gm
, 
	gn
>& 
	g›î©‹
 +(
M©x
<
_Tp1
, m,Ç>& 
	ga
, c⁄° M©x<
	g_Tp2
, m,Ç>& 
	gb
)

490  
	gi
 = 0; i < 
m
*
	gn
; i++ )

491 
	ga
.
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp1
>(
a
.
vÆ
[i] + 
b
.val[i]);

492  
	ga
;

496 
	gãm∂©e
<
ty≥«me
 
	g_Tp1
,Åy≥«mê
	g_Tp2
, 
	gm
, 
	gn
> 
ölöe


497 
	gM©x
<
	g_Tp1
, 
	gm
, 
	gn
>& 
	g›î©‹
 -(
M©x
<
_Tp1
, m,Ç>& 
	ga
, c⁄° M©x<
	g_Tp2
, m,Ç>& 
	gb
)

499  
	gi
 = 0; i < 
m
*
	gn
; i++ )

500 
	ga
.
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp1
>(
a
.
vÆ
[i] - 
b
.val[i]);

501  
	ga
;

505 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


506 
	gM©x
<
	g_Tp
,
	gm
,
	gn
>::
M©x
(c⁄° M©x<
_Tp
, 
m
, 
n
>& 
a
, c⁄° M©x<_Tp, m,Ç>& 
b
, 
M©x_AddOp
)

508  
	gi
 = 0; i < 
m
*
	gn
; i++ )

509 
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[i] + 
b
.val[i]);

513 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


514 
	gM©x
<
	g_Tp
,
	gm
,
	gn
>::
M©x
(c⁄° M©x<
_Tp
, 
m
, 
n
>& 
a
, c⁄° M©x<_Tp, m,Ç>& 
b
, 
M©x_SubOp
)

516  
	gi
 = 0; i < 
m
*
	gn
; i++ )

517 
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[i] - 
b
.val[i]);

521 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
>Åem∂©e<ty≥«mê
	g_T2
> 
ölöe


522 
	gM©x
<
	g_Tp
,
	gm
,
	gn
>::
M©x
(c⁄° M©x<
_Tp
, 
m
, 
n
>& 
a
, 
_T2
 
Æpha
, 
M©x_SˇÀOp
)

524  
	gi
 = 0; i < 
m
*
	gn
; i++ )

525 
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[i] * 
Æpha
);

529 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


530 
	gM©x
<
	g_Tp
,
	gm
,
	gn
>::
M©x
(c⁄° M©x<
_Tp
, 
m
, 
n
>& 
a
, c⁄° M©x<_Tp, m,Ç>& 
b
, 
M©x_MulOp
)

532  
	gi
 = 0; i < 
m
*
	gn
; i++ )

533 
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[i] * 
b
.val[i]);

537 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
>Åem∂©e<
	gl
> 
ölöe


538 
	gM©x
<
	g_Tp
,
	gm
,
	gn
>::
M©x
(c⁄° M©x<
_Tp
, 
m
, 
l
>& 
a
, c⁄° M©x<_Tp,Ü, 
n
>& 
b
, 
M©x_M©MulOp
)

540  
	gi
 = 0; i < 
	gm
; i++ )

541  
	gj
 = 0; j < 
	gn
; j++ )

543 
_Tp
 
	gs
 = 0;

544  
	gk
 = 0; k < 
	gl
; k++ )

545 
	gs
 +
a
(
i
, 
k
Ë* 
b
(k, 
j
);

546 
	gvÆ
[
i
*
n
 + 
j
] = 
s
;

551 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


552 
	gM©x
<
	g_Tp
,
	gm
,
	gn
>::
M©x
(c⁄° M©x<
_Tp
, 
n
, 
m
>& 
a
, 
M©x_TOp
)

554  
	gi
 = 0; i < 
	gm
; i++ )

555  
	gj
 = 0; j < 
	gn
; j++ )

556 
	gvÆ
[
i
*
n
 + 
j
] = 
a
(j, i);

560 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


561 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	g›î©‹
 + (c⁄° M©x<_Tp, m,Ç>& 
	ga
, c⁄° M©x<_Tp, m,Ç>& 
	gb
)

563  
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>(
	ga
, 
	gb
, 
M©x_AddOp
());

567 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


568 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	g›î©‹
 - (c⁄° M©x<_Tp, m,Ç>& 
	ga
, c⁄° M©x<_Tp, m,Ç>& 
	gb
)

570  
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>(
	ga
, 
	gb
, 
M©x_SubOp
());

574 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


575 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>& 
	g›î©‹
 *(
M©x
<
_Tp
, m,Ç>& 
	ga
, 
	gÆpha
)

577  
	gi
 = 0; i < 
m
*
	gn
; i++ )

578 
	ga
.
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[i] * 
Æpha
);

579  
	ga
;

582 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


583 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>& 
	g›î©‹
 *(
M©x
<
_Tp
, m,Ç>& 
	ga
, 
	gÆpha
)

585  
	gi
 = 0; i < 
m
*
	gn
; i++ )

586 
	ga
.
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[i] * 
Æpha
);

587  
	ga
;

590 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


591 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>& 
	g›î©‹
 *(
M©x
<
_Tp
, m,Ç>& 
	ga
, 
	gÆpha
)

593  
	gi
 = 0; i < 
m
*
	gn
; i++ )

594 
	ga
.
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[i] * 
Æpha
);

595  
	ga
;

598 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


599 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	g›î©‹
 * (c⁄° M©x<_Tp, m,Ç>& 
	ga
, 
	gÆpha
)

601  
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>(
	ga
, 
	gÆpha
, 
M©x_SˇÀOp
());

604 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


605 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	g›î©‹
 * (c⁄° M©x<_Tp, m,Ç>& 
	ga
, 
	gÆpha
)

607  
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>(
	ga
, 
	gÆpha
, 
M©x_SˇÀOp
());

610 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


611 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	g›î©‹
 * (c⁄° M©x<_Tp, m,Ç>& 
	ga
, 
	gÆpha
)

613  
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>(
	ga
, 
	gÆpha
, 
M©x_SˇÀOp
());

616 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


617 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	g›î©‹
 * (
	gÆpha
, c⁄° M©x<_Tp, m,Ç>& 
	ga
)

619  
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>(
	ga
, 
	gÆpha
, 
M©x_SˇÀOp
());

622 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


623 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	g›î©‹
 * (
	gÆpha
, c⁄° M©x<_Tp, m,Ç>& 
	ga
)

625  
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>(
	ga
, 
	gÆpha
, 
M©x_SˇÀOp
());

628 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


629 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	g›î©‹
 * (
	gÆpha
, c⁄° M©x<_Tp, m,Ç>& 
	ga
)

631  
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>(
	ga
, 
	gÆpha
, 
M©x_SˇÀOp
());

634 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


635 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	g›î©‹
 - (c⁄° M©x<_Tp, m,Ç>& 
	ga
)

637  
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>(
	ga
, -1, 
M©x_SˇÀOp
());

641 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
, 
	gl
> 
ölöe


642 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	g›î©‹
 * (c⁄° M©x<_Tp, m, 
	gl
>& 
	ga
, c⁄° M©x<_Tp,Ü,Ç>& 
	gb
)

644  
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>(
	ga
, 
	gb
, 
M©x_M©MulOp
());

648 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


649 
	gVec
<
	g_Tp
, 
	gm
> 
	g›î©‹
 * (c⁄° 
	gM©x
<_Tp, m, 
	gn
>& 
	ga
, c⁄° Vec<_Tp,Ç>& 
	gb
)

651 
	gM©x
<
	g_Tp
, 
	gm
, 1> 
c
(
a
, 
b
, 
M©x_M©MulOp
());

652  
	gªöãΩªt_ˇ°
<c⁄° 
	gVec
<
	g_Tp
, 
	gm
>&>(
	gc
);

656 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


657 
	gPoöt_
<
	g_Tp
> 
	g›î©‹
 * (c⁄° 
	gM©x
<_Tp, 2, 2>& 
	ga
, c⁄° Poöt_<_Tp>& 
	gb
)

659 
	gM©x
<
	g_Tp
, 2, 1> 
	gtmp
 = 
a
*
Vec
<
_Tp
,2>(
	gb
.
	gx
, b.
	gy
);

660  
	gPoöt_
<
	g_Tp
>(
	gtmp
.
	gvÆ
[0],Åmp.val[1]);

664 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


665 
	gPoöt3_
<
	g_Tp
> 
	g›î©‹
 * (c⁄° 
	gM©x
<_Tp, 3, 3>& 
	ga
, c⁄° Poöt3_<_Tp>& 
	gb
)

667 
	gM©x
<
	g_Tp
, 3, 1> 
	gtmp
 = 
a
*
Vec
<
_Tp
,3>(
	gb
.
	gx
, b.
	gy
, b.
	gz
);

668  
	gPoöt3_
<
	g_Tp
>(
	gtmp
.
	gvÆ
[0],Åmp.val[1],Åmp.val[2]);

672 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


673 
	gPoöt3_
<
	g_Tp
> 
	g›î©‹
 * (c⁄° 
	gM©x
<_Tp, 3, 3>& 
	ga
, c⁄° 
	gPoöt_
<_Tp>& 
	gb
)

675 
	gM©x
<
	g_Tp
, 3, 1> 
	gtmp
 = 
a
*
Vec
<
_Tp
,3>(
	gb
.
	gx
, b.
	gy
, 1);

676  
	gPoöt3_
<
	g_Tp
>(
	gtmp
.
	gvÆ
[0],Åmp.val[1],Åmp.val[2]);

680 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


681 
	gM©x
<
	g_Tp
, 4, 1> 
	g›î©‹
 * (c⁄° M©x<_Tp, 4, 4>& 
	ga
, c⁄° 
	gPoöt3_
<_Tp>& 
	gb
)

683  
a
*
	gM©x
<
	g_Tp
, 4, 1>(
	gb
.
	gx
, b.
	gy
, b.
	gz
, 1);

687 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


688 
Sˇœr
 
	g›î©‹
 * (c⁄° 
	gM©x
<
	g_Tp
, 4, 4>& 
	ga
, c⁄° 
	gSˇœr
& 
	gb
)

690 
	gM©x
<, 4, 1> 
c
(
M©x
<, 4, 4>(
a
), 
b
, 
M©x_M©MulOp
());

691  
	g°©ic_ˇ°
<c⁄° 
	gSˇœr
&>(
	gc
);

695 
ölöe


696 
Sˇœr
 
	g›î©‹
 * (c⁄° 
	gM©x
<, 4, 4>& 
	ga
, c⁄° 
	gSˇœr
& 
	gb
)

698 
	gM©x
<, 4, 1> 
c
(
a
, 
b
, 
M©x_M©MulOp
());

699  
	g°©ic_ˇ°
<c⁄° 
	gSˇœr
&>(
	gc
);

703 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


704 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> M©x<_Tp, m,Ç>::
mul
(c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
a
) const

706  
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>(*
	gthis
, 
	ga
, 
M©x_MulOp
());

710 
CV_EXPORTS
 
LU
(* 
A
, 
size_t
 
a°ï
, 
m
, * 
b
, size_à
b°ï
, 
n
);

711 
CV_EXPORTS
 
LU
(* 
A
, 
size_t
 
a°ï
, 
m
, * 
b
, size_à
b°ï
, 
n
);

712 
CV_EXPORTS
 
boﬁ
 
Chﬁesky
(* 
A
, 
size_t
 
a°ï
, 
m
, * 
b
, size_à
b°ï
, 
n
);

713 
CV_EXPORTS
 
boﬁ
 
Chﬁesky
(* 
A
, 
size_t
 
a°ï
, 
m
, * 
b
, size_à
b°ï
, 
n
);

716 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
> 
	sM©x_DëOp


718 
›î©‹
 ()(c⁄° 
	gM©x
<
	g_Tp
, 
	gm
, m>& 
	ga
) const

720 
	gM©x
<
	g_Tp
, 
	gm
, m> 
	gãmp
 = 
a
;

721 
	gp
 = 
LU
(
ãmp
.
vÆ
, 
m
*(
_Tp
), m, 0, 0, 0);

722 if–
	gp
 == 0 )

723  
p
;

724  
	gi
 = 0; i < 
	gm
; i++ )

725 
	gp
 *
ãmp
(
i
, i);

726  1./
	gp
;

731 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gM©x_DëOp
<_Tp, 1>

733 
›î©‹
 ()(c⁄° 
	gM©x
<
	g_Tp
, 1, 1>& 
	ga
) const

735  
a
(0,0);

740 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gM©x_DëOp
<_Tp, 2>

742 
›î©‹
 ()(c⁄° 
	gM©x
<
	g_Tp
, 2, 2>& 
	ga
) const

744  
a
(0,0)*a(1,1) -á(0,1)*a(1,0);

749 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gM©x_DëOp
<_Tp, 3>

751 
›î©‹
 ()(c⁄° 
	gM©x
<
	g_Tp
, 3, 3>& 
	ga
) const

753  
a
(0,0)*(a(1,1)*a(2,2) -á(2,1)*a(1,2)) -

754 
a
(0,1)*(a(1,0)*a(2,2) -á(2,0)*a(1,2)) +

755 
a
(0,2)*(a(1,0)*a(2,1) -á(2,0)*a(1,1));

759 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
> 
ölöe


760 
dëîmö™t
(c⁄° 
M©x
<
_Tp
, 
m
, m>& 
a
)

762  
	gM©x_DëOp
<
	g_Tp
, 
	gm
>()(
	ga
);

766 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


767 
åa˚
(c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
a
)

769 
_Tp
 
	gs
 = 0;

770  
	gi
 = 0; i < 
	g°d
::
mö
(
m
, 
n
); i++ )

771 
	gs
 +
a
(
i
,i);

772  
	gs
;

776 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


777 
	gM©x
<
	g_Tp
, 
	gn
, 
	gm
> M©x<_Tp, m,Ç>::
t
() const

779  
M©x
<
_Tp
, 
	gn
, 
	gm
>(*
	gthis
, 
M©x_TOp
());

783 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
> 
	sM©x_Fa°InvOp


785 
boﬁ
 
›î©‹
()(c⁄° 
	gM©x
<
	g_Tp
, 
	gm
, m>& 
	ga
, M©x<_Tp, m, m>& 
	gb
, 
	gmëhod
) const

787 
	gM©x
<
	g_Tp
, 
	gm
, m> 
	gãmp
 = 
a
;

790  
	gi
 = 0; i < 
	gm
; i++ )

791 
b
(
i
, iË(
_Tp
)1;

793 if–
	gmëhod
 =
DECOMP_CHOLESKY
 )

794  
Chﬁesky
(
ãmp
.
vÆ
, 
m
*(
_Tp
), m, 
b
.val, m*(_Tp), m);

796  
LU
(
ãmp
.
vÆ
, 
m
*(
_Tp
), m, 
b
.val, m*(_Tp), m) != 0;

801 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gM©x_Fa°InvOp
<_Tp, 2>

803 
boﬁ
 
›î©‹
()(c⁄° 
	gM©x
<
	g_Tp
, 2, 2>& 
	ga
, M©x<_Tp, 2, 2>& 
	gb
, ) const

805 
_Tp
 
	gd
 = 
dëîmö™t
(
a
);

806 if–
	gd
 == 0 )

807  
Ál£
;

808 
	gd
 = 1/
d
;

809 
b
(1,1Ë
a
(0,0)*
	gd
;

810 
b
(0,0Ë
a
(1,1)*
	gd
;

811 
b
(0,1Ë-
a
(0,1)*
	gd
;

812 
b
(1,0Ë-
a
(1,0)*
	gd
;

813  
	gåue
;

818 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gM©x_Fa°InvOp
<_Tp, 3>

820 
boﬁ
 
›î©‹
()(c⁄° 
	gM©x
<
	g_Tp
, 3, 3>& 
	ga
, M©x<_Tp, 3, 3>& 
	gb
, ) const

822 
_Tp
 
	gd
 = (_Tp)
dëîmö™t
(
a
);

823 if–
	gd
 == 0 )

824  
Ál£
;

825 
	gd
 = 1/
d
;

826 
b
(0,0Ë(
a
(1,1Ë*á(2,2Ë-á(1,2Ë*á(2,1)Ë* 
	gd
;

827 
b
(0,1Ë(
a
(0,2Ë*á(2,1Ë-á(0,1Ë*á(2,2)Ë* 
	gd
;

828 
b
(0,2Ë(
a
(0,1Ë*á(1,2Ë-á(0,2Ë*á(1,1)Ë* 
	gd
;

830 
b
(1,0Ë(
a
(1,2Ë*á(2,0Ë-á(1,0Ë*á(2,2)Ë* 
	gd
;

831 
b
(1,1Ë(
a
(0,0Ë*á(2,2Ë-á(0,2Ë*á(2,0)Ë* 
	gd
;

832 
b
(1,2Ë(
a
(0,2Ë*á(1,0Ë-á(0,0Ë*á(1,2)Ë* 
	gd
;

834 
b
(2,0Ë(
a
(1,0Ë*á(2,1Ë-á(1,1Ë*á(2,0)Ë* 
	gd
;

835 
b
(2,1Ë(
a
(0,1Ë*á(2,0Ë-á(0,0Ë*á(2,1)Ë* 
	gd
;

836 
b
(2,2Ë(
a
(0,0Ë*á(1,1Ë-á(0,1Ë*á(1,0)Ë* 
	gd
;

837  
	gåue
;

842 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


843 
	gM©x
<
	g_Tp
, 
	gn
, 
	gm
> M©x<_Tp, m,Ç>::
öv
(
mëhod
) const

845 
M©x
<
_Tp
, 
	gn
, 
	gm
> 
	gb
;

846 
boﬁ
 
	gok
;

847 if–
	gmëhod
 =
DECOMP_LU
 || 
mëhod
 =
DECOMP_CHOLESKY
 )

848 
ok
 = 
M©x_Fa°InvOp
<
_Tp
, 
	gm
>()(*
	gthis
, 
	gb
, 
	gmëhod
);

851 
M©
 
A
(*
this
, 
Ál£
), 
B
(
b
, false);

852 
	gok
 = (
övît
(
A
, 
B
, 
mëhod
) != 0);

854  
	gok
 ? 
	gb
 : 
M©x
<
_Tp
, 
	gn
, 
	gm
>::
zîos
();

858 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
	sM©x_Fa°SﬁveOp


860 
boﬁ
 
›î©‹
()(c⁄° 
	gM©x
<
	g_Tp
, 
	gm
, m>& 
	ga
, c⁄° M©x<_Tp, m, 
	gn
>& 
	gb
,

861 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
>& 
	gx
, 
	gmëhod
) const

863 
	gM©x
<
	g_Tp
, 
	gm
, m> 
	gãmp
 = 
a
;

864 
	gx
 = 
b
;

865 if–
	gmëhod
 =
DECOMP_CHOLESKY
 )

866  
Chﬁesky
(
ãmp
.
vÆ
, 
m
*(
_Tp
), m, 
x
.vÆ, 
n
*(_Tp),Ç);

868  
LU
(
ãmp
.
vÆ
, 
m
*(
_Tp
), m, 
x
.vÆ, 
n
*(_Tp),Ç) != 0;

873 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gM©x_Fa°SﬁveOp
<_Tp, 2, 1>

875 
boﬁ
 
›î©‹
()(c⁄° 
	gM©x
<
	g_Tp
, 2, 2>& 
	ga
, c⁄° M©x<_Tp, 2, 1>& 
	gb
,

876 
	gM©x
<
	g_Tp
, 2, 1>& 
	gx
, ) const

878 
_Tp
 
	gd
 = 
dëîmö™t
(
a
);

879 if–
	gd
 == 0 )

880  
Ál£
;

881 
	gd
 = 1/
d
;

882 
x
(0Ë(
b
(0)*
a
(1,1Ë- b(1)*a(0,1))*
	gd
;

883 
x
(1Ë(
b
(1)*
a
(0,0Ë- b(0)*a(1,0))*
	gd
;

884  
	gåue
;

889 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gM©x_Fa°SﬁveOp
<_Tp, 3, 1>

891 
boﬁ
 
›î©‹
()(c⁄° 
	gM©x
<
	g_Tp
, 3, 3>& 
	ga
, c⁄° M©x<_Tp, 3, 1>& 
	gb
,

892 
	gM©x
<
	g_Tp
, 3, 1>& 
	gx
, ) const

894 
_Tp
 
	gd
 = (_Tp)
dëîmö™t
(
a
);

895 if–
	gd
 == 0 )

896  
Ál£
;

897 
	gd
 = 1/
d
;

898 
x
(0Ë
d
*(
b
(0)*(
a
(1,1)*a(2,2) -á(1,2)*a(2,1)) -

899 
a
(0,1)*(
b
(1)*a(2,2) -á(1,2)*b(2)) +

900 
a
(0,2)*(
b
(1)*a(2,1) -á(1,1)*b(2)));

902 
x
(1Ë
d
*(
a
(0,0)*(
b
(1)*a(2,2) -á(1,2)*b(2)) -

903 
b
(0)*(
a
(1,0)*a(2,2) -á(1,2)*a(2,0)) +

904 
a
(0,2)*◊(1,0)*
b
(2) - b(1)*a(2,0)));

906 
x
(2Ë
d
*(
a
(0,0)*◊(1,1)*
b
(2) - b(1)*a(2,1)) -

907 
a
(0,1)*◊(1,0)*
b
(2) - b(1)*a(2,0)) +

908 
b
(0)*(
a
(1,0)*a(2,1) -á(1,1)*a(2,0)));

909  
	gåue
;

914 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
>Åem∂©e<
	gl
> 
ölöe


915 
	gM©x
<
	g_Tp
, 
	gn
, 
	gl
> M©x<_Tp, 
	gm
,Ç>::
sﬁve
(c⁄° 
M©x
<
_Tp
, 
m
, 
l
>& 
rhs
, 
mëhod
) const

917 
	gM©x
<
	g_Tp
, 
	gn
, 
	gl
> 
	gx
;

918 
boﬁ
 
	gok
;

919 if–
	gmëhod
 =
DECOMP_LU
 || 
mëhod
 =
DECOMP_CHOLESKY
 )

920 
ok
 = 
M©x_Fa°SﬁveOp
<
_Tp
, 
	gm
, 
	gl
>()(*
	gthis
, 
	grhs
, 
	gx
, 
	gmëhod
);

923 
M©
 
A
(*
this
, 
Ál£
), 
B
(
rhs
, fÆ£), 
X
(
x
, false);

924 
	gok
 = 
cv
::
sﬁve
(
A
, 
B
, 
X
, 
mëhod
);

927  
	gok
 ? 
	gx
 : 
M©x
<
_Tp
, 
	gn
, 
	gl
>::
zîos
();

930 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


931 
	gVec
<
	g_Tp
, 
	gn
> 
	gM©x
<_Tp, 
	gm
,Ç>::
sﬁve
(c⁄° 
Vec
<
_Tp
, 
m
>& 
rhs
, 
mëhod
) const

933 
	gM©x
<
	g_Tp
, 
	gn
, 1> 
	gx
 = 
sﬁve
(
ªöãΩªt_ˇ°
<c⁄° 
M©x
<
_Tp
, 
m
, 1>&>(
rhs
), 
mëhod
);

934  
	gªöãΩªt_ˇ°
<
	gVec
<
	g_Tp
, 
	gn
>&>(
	gx
);

937 
	gãm∂©e
<
ty≥«me
 
	g_Tp
,Åy≥«mê
	g_AccTp
> 
ölöe


938 
_AccTp
 
n‹mL2Sqr
(c⁄° 
_Tp
* 
a
, 
n
)

940 
_AccTp
 
	gs
 = 0;

941 
	gi
=0;

942 #i‡
CV_ENABLE_UNROLLED


943  ; 
	gi
 <
n
 - 4; i += 4 )

945 
_AccTp
 
v0
 = 
a
[
i
], 
	gv1
 =á[i+1], 
	gv2
 =á[i+2], 
	gv3
 =á[i+3];

946 
	gs
 +
v0
*v0 + 
v1
*v1 + 
v2
*v2 + 
v3
*v3;

949  ; 
	gi
 < 
	gn
; i++ )

951 
_AccTp
 
	gv
 = 
a
[
i
];

952 
	gs
 +
v
*v;

954  
	gs
;

958 
	gãm∂©e
<
ty≥«me
 
	g_Tp
,Åy≥«mê
	g_AccTp
> 
ölöe


959 
_AccTp
 
n‹mL1
(c⁄° 
_Tp
* 
a
, 
n
)

961 
_AccTp
 
	gs
 = 0;

962 
	gi
 = 0;

963 #i‡
CV_ENABLE_UNROLLED


964 ; 
	gi
 <
n
 - 4; i += 4 )

966 
s
 +(
_AccTp
)
Á°_abs
(
a
[
i
]) + (_AccTp)fast_abs(a[i+1]) +

967 (
_AccTp
)
Á°_abs
(
a
[
i
+2]) + (_AccTp)fast_abs(a[i+3]);

970  ; 
	gi
 < 
	gn
; i++ )

971 
	gs
 +
Á°_abs
(
a
[
i
]);

972  
	gs
;

976 
	gãm∂©e
<
ty≥«me
 
	g_Tp
,Åy≥«mê
	g_AccTp
> 
ölöe


977 
_AccTp
 
n‹mInf
(c⁄° 
_Tp
* 
a
, 
n
)

979 
_AccTp
 
	gs
 = 0;

980  
	gi
 = 0; i < 
	gn
; i++ )

981 
	gs
 = 
°d
::
max
(
s
, (
_AccTp
)
Á°_abs
(
a
[
i
]));

982  
	gs
;

986 
	gãm∂©e
<
ty≥«me
 
	g_Tp
,Åy≥«mê
	g_AccTp
> 
ölöe


987 
_AccTp
 
n‹mL2Sqr
(c⁄° 
_Tp
* 
a
, c⁄° _Tp* 
b
, 
n
)

989 
_AccTp
 
	gs
 = 0;

990 
	gi
= 0;

991 #i‡
CV_ENABLE_UNROLLED


992 ; 
	gi
 <
n
 - 4; i += 4 )

994 
_AccTp
 
v0
 = _AccTp(
a
[
i
] - 
b
[i]), 
	gv1
 = _AccTp◊[i+1] - b[i+1]), 
	gv2
 = _AccTp◊[i+2] - b[i+2]), 
	gv3
 = _AccTp(a[i+3] - b[i+3]);

995 
	gs
 +
v0
*v0 + 
v1
*v1 + 
v2
*v2 + 
v3
*v3;

998  ; 
	gi
 < 
	gn
; i++ )

1000 
_AccTp
 
	gv
 = _AccTp(
a
[
i
] - 
b
[i]);

1001 
	gs
 +
v
*v;

1003  
	gs
;

1006 
CV_EXPORTS
 
n‹mL2Sqr_
(c⁄° * 
a
, c⁄° * 
b
, 
n
);

1007 
CV_EXPORTS
 
n‹mL1_
(c⁄° * 
a
, c⁄° * 
b
, 
n
);

1008 
CV_EXPORTS
 
n‹mL1_
(c⁄° 
uch¨
* 
a
, c⁄° uch¨* 
b
, 
n
);

1009 
CV_EXPORTS
 
n‹mHammög
(c⁄° 
uch¨
* 
a
, c⁄° uch¨* 
b
, 
n
);

1010 
CV_EXPORTS
 
n‹mHammög
(c⁄° 
uch¨
* 
a
, c⁄° uch¨* 
b
, 
n
, 
˚ŒSize
);

1012 
	gãm∂©e
<> 
ölöe
 
n‹mL2Sqr
(c⁄° * 
a
, c⁄° * 
b
, 
n
)

1014 if–
	gn
 >= 8 )

1015  
n‹mL2Sqr_
(
a
, 
b
, 
n
);

1016 
	gs
 = 0;

1017  
	gi
 = 0; i < 
	gn
; i++ )

1019 
	gv
 = 
a
[
i
] - 
b
[i];

1020 
	gs
 +
v
*v;

1022  
	gs
;

1026 
	gãm∂©e
<
ty≥«me
 
	g_Tp
,Åy≥«mê
	g_AccTp
> 
ölöe


1027 
_AccTp
 
n‹mL1
(c⁄° 
_Tp
* 
a
, c⁄° _Tp* 
b
, 
n
)

1029 
_AccTp
 
	gs
 = 0;

1030 
	gi
= 0;

1031 #i‡
CV_ENABLE_UNROLLED


1032 ; 
	gi
 <
n
 - 4; i += 4 )

1034 
_AccTp
 
v0
 = _AccTp(
a
[
i
] - 
b
[i]), 
	gv1
 = _AccTp◊[i+1] - b[i+1]), 
	gv2
 = _AccTp◊[i+2] - b[i+2]), 
	gv3
 = _AccTp(a[i+3] - b[i+3]);

1035 
	gs
 +
°d
::
abs
(
v0
Ë+ std::abs(
v1
Ë+ std::abs(
v2
Ë+ std::abs(
v3
);

1038  ; 
	gi
 < 
	gn
; i++ )

1040 
_AccTp
 
	gv
 = _AccTp(
a
[
i
] - 
b
[i]);

1041 
	gs
 +
°d
::
abs
(
v
);

1043  
	gs
;

1046 
	gãm∂©e
<> 
ölöe
 
n‹mL1
(c⁄° * 
a
, c⁄° * 
b
, 
n
)

1048 if–
	gn
 >= 8 )

1049  
n‹mL1_
(
a
, 
b
, 
n
);

1050 
	gs
 = 0;

1051  
	gi
 = 0; i < 
	gn
; i++ )

1053 
	gv
 = 
a
[
i
] - 
b
[i];

1054 
	gs
 +
°d
::
abs
(
v
);

1056  
	gs
;

1059 
	gãm∂©e
<> 
ölöe
 
n‹mL1
(c⁄° 
uch¨
* 
a
, c⁄° uch¨* 
b
, 
n
)

1061  
n‹mL1_
(
a
, 
b
, 
n
);

1064 
	gãm∂©e
<
ty≥«me
 
	g_Tp
,Åy≥«mê
	g_AccTp
> 
ölöe


1065 
_AccTp
 
n‹mInf
(c⁄° 
_Tp
* 
a
, c⁄° _Tp* 
b
, 
n
)

1067 
_AccTp
 
	gs
 = 0;

1068  
	gi
 = 0; i < 
	gn
; i++ )

1070 
_AccTp
 
	gv0
 = 
a
[
i
] - 
b
[i];

1071 
	gs
 = 
°d
::
max
(
s
, std::
abs
(
v0
));

1073  
	gs
;

1077 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


1078 
n‹m
(c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
M
)

1080  
	g°d
::
sqπ
(
n‹mL2Sqr
<
_Tp
, >(
M
.
vÆ
, 
m
*
n
));

1084 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


1085 
n‹m
(c⁄° 
M©x
<
_Tp
, 
m
, 
n
>& 
M
, 
n‹mTy≥
)

1087  
	gn‹mTy≥
 =
NORM_INF
 ? ()
n‹mInf
<
_Tp
, 
ty≥«me
 
	gD©aTy≥
<
	g_Tp
>::
w‹k_ty≥
>(
M
.
vÆ
, 
m
*
	gn
) :

1088 
n‹mTy≥
 =
NORM_L1
 ? ()
n‹mL1
<
_Tp
, 
ty≥«me
 
	gD©aTy≥
<
	g_Tp
>::
w‹k_ty≥
>(
M
.
vÆ
, 
m
*
	gn
) :

1089 
°d
::
sqπ
(()
n‹mL2Sqr
<
_Tp
, 
ty≥«me
 
D©aTy≥
<_Tp>::
w‹k_ty≥
>(
M
.
vÆ
, 
m
*
n
));

1093 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


1094 
boﬁ
 
	g›î©‹
 =(c⁄° 
M©x
<
_Tp
, 
	gm
, 
	gn
>& 
	ga
, c⁄° 
	gM©x
<
	g_Tp
, m,Ç>& 
	gb
)

1096  
	gi
 = 0; i < 
m
*
	gn
; i++ )

1097 if–
	ga
.
	gvÆ
[
i
] !
b
.
vÆ
[i] )  
Ál£
;

1098  
	gåue
;

1101 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


1102 
boﬁ
 
	g›î©‹
 !(c⁄° 
M©x
<
_Tp
, 
	gm
, 
	gn
>& 
	ga
, c⁄° 
	gM©x
<
	g_Tp
, m,Ç>& 
	gb
)

1104  !(
	ga
 =
b
);

1108 
	gãm∂©e
<
ty≥«me
 
	g_Tp
,Åy≥«mê
	g_T2
, 
	gm
, 
	gn
> 
ölöe


1109 
	gM©xCommaInôülizî
<
	g_Tp
, 
	gm
, 
	gn
> 
	g›î©‹
 << (c⁄° 
	gM©x
<_Tp, m,Ç>& 
	gmtx
, 
_T2
 
	gvÆ
)

1111 
	gM©xCommaInôülizî
<
	g_Tp
, 
	gm
, 
	gn
> 
commaInôülizî
((
M©x
<
_Tp
, 
m
, 
n
>*)&
mtx
);

1112  (
	gcommaInôülizî
, 
	gvÆ
);

1115 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


1116 
	gM©xCommaInôülizî
<
	g_Tp
, 
	gm
, 
	gn
>::
M©xCommaInôülizî
(
M©x
<
_Tp
, 
m
, 
n
>* 
_mtx
)

1117 : 
d°
(
_mtx
), 
idx
(0)

1120 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
>Åem∂©e<ty≥«mê
	g_T2
> 
ölöe


1121 
	gM©xCommaInôülizî
<
	g_Tp
, 
	gm
, 
	gn
>& M©xCommaInôülizî<_Tp, m,Ç>::
›î©‹
 , (
_T2
 
	gvÆue
)

1123 
CV_DbgAs£π
–
idx
 < 
m
*
n
 );

1124 
	gd°
->
	gvÆ
[
idx
++] = 
ßtuøã_ˇ°
<
_Tp
>(
vÆue
);

1125  *
	gthis
;

1128 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe


1129 
	gM©x
<
	g_Tp
, 
	gm
, 
	gn
> 
	gM©xCommaInôülizî
<_Tp, m,Ç>::
›î©‹
 *() const

1131 
CV_DbgAs£π
–
idx
 =
n
*
m
 );

1132  *
	gd°
;

1137 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
Vec
()

1140 
ãm∂©e
<
ty≥«me
 
_Tp
, 
	g˙
> 
ölöe
 
	gVec
<
	g_Tp
, cn>::
Vec
(_T∞
v0
)

1141 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	gv0
)

1144 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
Vec
(
_Tp
 
v0
, _T∞
v1
)

1145 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	gv0
, 
	gv1
)

1148 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
)

1149 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	gv0
, 
	gv1
, 
	gv2
)

1152 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
)

1153 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	gv0
, 
	gv1
, 
	gv2
, 
	gv3
)

1156 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
)

1157 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	gv0
, 
	gv1
, 
	gv2
, 
	gv3
, 
	gv4
)

1160 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
, _T∞
v4
, _T∞
v5
)

1161 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	gv0
, 
	gv1
, 
	gv2
, 
	gv3
, 
	gv4
, 
	gv5
)

1164 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

1165 
_Tp
 
v4
, _T∞
v5
, _T∞
v6
)

1166 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	gv0
, 
	gv1
, 
	gv2
, 
	gv3
, 
	gv4
, 
	gv5
, 
	gv6
)

1169 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

1170 
_Tp
 
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
)

1171 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	gv0
, 
	gv1
, 
	gv2
, 
	gv3
, 
	gv4
, 
	gv5
, 
	gv6
, 
	gv7
)

1174 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

1175 
_Tp
 
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
,

1176 
_Tp
 
v8
)

1177 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	gv0
, 
	gv1
, 
	gv2
, 
	gv3
, 
	gv4
, 
	gv5
, 
	gv6
, 
	gv7
, 
	gv8
)

1180 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
Vec
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
,

1181 
_Tp
 
v4
, _T∞
v5
, _T∞
v6
, _T∞
v7
,

1182 
_Tp
 
v8
, _T∞
v9
)

1183 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	gv0
, 
	gv1
, 
	gv2
, 
	gv3
, 
	gv4
, 
	gv5
, 
	gv6
, 
	gv7
, 
	gv8
, 
	gv9
)

1186 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
Vec
(c⁄° 
_Tp
* 
vÆues
)

1187 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	gvÆues
)

1191 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
Vec
(c⁄° Vec<
_Tp
, 
˙
>& 
m
)

1192 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	gm
.
	gvÆ
)

1195 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe


1196 
	gVec
<
	g_Tp
, 
	g˙
>::
Vec
(c⁄° 
M©x
<
_Tp
, 
˙
, 1>& 
a
, c⁄° M©x<_Tp, cn, 1>& 
b
, 
M©x_AddOp
 
›
)

1197 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	ga
, 
	gb
, 
	g›
)

1200 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe


1201 
	gVec
<
	g_Tp
, 
	g˙
>::
Vec
(c⁄° 
M©x
<
_Tp
, 
˙
, 1>& 
a
, c⁄° M©x<_Tp, cn, 1>& 
b
, 
M©x_SubOp
 
›
)

1202 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	ga
, 
	gb
, 
	g›
)

1205 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
>Åem∂©e<ty≥«mê
	g_T2
> 
ölöe


1206 
	gVec
<
	g_Tp
, 
	g˙
>::
Vec
(c⁄° 
M©x
<
_Tp
, 
˙
, 1>& 
a
, 
_T2
 
Æpha
, 
M©x_SˇÀOp
 
›
)

1207 : 
M©x
<
_Tp
, 
	g˙
, 1>(
	ga
, 
	gÆpha
, 
	g›
)

1210 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn> Vec<_Tp, cn>::
Æl
(
_Tp
 
Æpha
)

1212 
Vec
 
v
;

1213  
	gi
 = 0; i < 
	g˙
; i++ ) 
	gv
.
	gvÆ
[
i
] = 
Æpha
;

1214  
	gv
;

1217 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn> Vec<_Tp, cn>::
mul
(c⁄° 
Vec
<
_Tp
, 
˙
>& 
v
) const

1219 
	gVec
<
	g_Tp
, 
	g˙
> 
	gw
;

1220  
	gi
 = 0; i < 
	g˙
; i++ ) 
	gw
.
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
this
->
vÆ
[i]*
v
.val[i]);

1221  
	gw
;

1224 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gVec
<_Tp, 2> 
c⁄jug©e
(c⁄° 
Vec
<
_Tp
, 2>& 
v
)

1226  
	gVec
<
	g_Tp
, 2>(
	gv
[0], -v[1]);

1229 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
	gVec
<_Tp, 4> 
c⁄jug©e
(c⁄° 
Vec
<
_Tp
, 4>& 
v
)

1231  
	gVec
<
	g_Tp
, 4>(
	gv
[0], -v[1], -v[2], -v[3]);

1234 
	gãm∂©e
<> 
ölöe
 
	gVec
<, 2> Vec<, 2>::
c⁄j
() const

1236  
c⁄jug©e
(*
this
);

1239 
	gãm∂©e
<> 
ölöe
 
	gVec
<, 2> Vec<, 2>::
c⁄j
() const

1241  
c⁄jug©e
(*
this
);

1244 
	gãm∂©e
<> 
ölöe
 
	gVec
<, 4> Vec<, 4>::
c⁄j
() const

1246  
c⁄jug©e
(*
this
);

1249 
	gãm∂©e
<> 
ölöe
 
	gVec
<, 4> Vec<, 4>::
c⁄j
() const

1251  
c⁄jug©e
(*
this
);

1254 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn> Vec<_Tp, cn>::
¸oss
(c⁄° 
Vec
<
_Tp
, 
˙
>&) const

1256 
CV_Eº‹
(
CV_StsEº‹
, "forárbitrary-size vectorÅhere isÇo cross-product defined");

1257  
	gVec
<
	g_Tp
, 
	g˙
>();

1260 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
>Åem∂©e<ty≥«mê
	gT2
>

1261 
ölöe
 
	gVec
<
	g_Tp
, 
	g˙
>::
›î©‹
 
Vec
<
T2
, cn>() const

1263 
	gVec
<
	gT2
, 
	g˙
> 
	gv
;

1264  
	gi
 = 0; i < 
	g˙
; i++ ) 
	gv
.
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
T2
>(
this
->
vÆ
[i]);

1265  
	gv
;

1268 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>::
›î©‹
 
CvSˇœr
() const

1270 
CvSˇœr
 
s
 = {{0,0,0,0}};

1271 
	gi
;

1272  
	gi
 = 0; i < 
	g°d
::
mö
(
˙
, 4); i++ ) 
	gs
.
	gvÆ
[
i
] = 
this
->
vÆ
[i];

1273  ; 
	gi
 < 4; i++ ) 
	gs
.
	gvÆ
[
i
] = 0;

1274  
	gs
;

1277 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 c⁄° _Tp& 
	gVec
<_Tp, cn>::
›î©‹
 [](
i
) const

1279 
CV_DbgAs£π
–()
i
 < ()
˙
 );

1280  
	gthis
->
	gvÆ
[
i
];

1283 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 _Tp& 
	gVec
<_Tp, cn>::
›î©‹
 [](
i
)

1285 
CV_DbgAs£π
–()
i
 < ()
˙
 );

1286  
	gthis
->
	gvÆ
[
i
];

1289 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 c⁄° _Tp& 
	gVec
<_Tp, cn>::
›î©‹
 ()(
i
) const

1291 
CV_DbgAs£π
–()
i
 < ()
˙
 );

1292  
	gthis
->
	gvÆ
[
i
];

1295 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 _Tp& 
	gVec
<_Tp, cn>::
›î©‹
 ()(
i
)

1297 
CV_DbgAs£π
–()
i
 < ()
˙
 );

1298  
	gthis
->
	gvÆ
[
i
];

1301 
	gãm∂©e
<
ty≥«me
 
	g_Tp1
,Åy≥«mê
	g_Tp2
, 
	g˙
> 
ölöe
 
	gVec
<_Tp1, cn>&

1302 
	g›î©‹
 +(
Vec
<
_Tp1
, 
	g˙
>& 
	ga
, c⁄° 
	gVec
<
	g_Tp2
, cn>& 
	gb
)

1304  
	gi
 = 0; i < 
	g˙
; i++ )

1305 
	ga
.
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp1
>(
a
.
vÆ
[i] + 
b
.val[i]);

1306  
	ga
;

1309 
	gãm∂©e
<
ty≥«me
 
	g_Tp1
,Åy≥«mê
	g_Tp2
, 
	g˙
> 
ölöe
 
	gVec
<_Tp1, cn>&

1310 
	g›î©‹
 -(
Vec
<
_Tp1
, 
	g˙
>& 
	ga
, c⁄° 
	gVec
<
	g_Tp2
, cn>& 
	gb
)

1312  
	gi
 = 0; i < 
	g˙
; i++ )

1313 
	ga
.
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp1
>(
a
.
vÆ
[i] - 
b
.val[i]);

1314  
	ga
;

1317 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>

1318 
	g›î©‹
 + (c⁄° 
	gVec
<
	g_Tp
, 
	g˙
>& 
	ga
, c⁄° Vec<_Tp, cn>& 
	gb
)

1320  
	gVec
<
	g_Tp
, 
	g˙
>(
	ga
, 
	gb
, 
M©x_AddOp
());

1323 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>

1324 
	g›î©‹
 - (c⁄° 
	gVec
<
	g_Tp
, 
	g˙
>& 
	ga
, c⁄° Vec<_Tp, cn>& 
	gb
)

1326  
	gVec
<
	g_Tp
, 
	g˙
>(
	ga
, 
	gb
, 
M©x_SubOp
());

1329 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe


1330 
	gVec
<
	g_Tp
, 
	g˙
>& 
	g›î©‹
 *(
Vec
<
_Tp
, cn>& 
	ga
, 
	gÆpha
)

1332  
	gi
 = 0; i < 
	g˙
; i++ )

1333 
	ga
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
[i]*
Æpha
);

1334  
	ga
;

1337 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe


1338 
	gVec
<
	g_Tp
, 
	g˙
>& 
	g›î©‹
 *(
Vec
<
_Tp
, cn>& 
	ga
, 
	gÆpha
)

1340  
	gi
 = 0; i < 
	g˙
; i++ )

1341 
	ga
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
[i]*
Æpha
);

1342  
	ga
;

1345 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe


1346 
	gVec
<
	g_Tp
, 
	g˙
>& 
	g›î©‹
 *(
Vec
<
_Tp
, cn>& 
	ga
, 
	gÆpha
)

1348  
	gi
 = 0; i < 
	g˙
; i++ )

1349 
	ga
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
[i]*
Æpha
);

1350  
	ga
;

1353 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe


1354 
	gVec
<
	g_Tp
, 
	g˙
>& 
	g›î©‹
 /(
Vec
<
_Tp
, cn>& 
	ga
, 
	gÆpha
)

1356 
	güÕha
 = 1./
Æpha
;

1357  
	gi
 = 0; i < 
	g˙
; i++ )

1358 
	ga
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
[i]*
üÕha
);

1359  
	ga
;

1362 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe


1363 
	gVec
<
	g_Tp
, 
	g˙
>& 
	g›î©‹
 /(
Vec
<
_Tp
, cn>& 
	ga
, 
	gÆpha
)

1365 
	güÕha
 = 1.f/
Æpha
;

1366  
	gi
 = 0; i < 
	g˙
; i++ )

1367 
	ga
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
[i]*
üÕha
);

1368  
	ga
;

1371 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe


1372 
	gVec
<
	g_Tp
, 
	g˙
>& 
	g›î©‹
 /(
Vec
<
_Tp
, cn>& 
	ga
, 
	gÆpha
)

1374 
	güÕha
 = 1./
Æpha
;

1375  
	gi
 = 0; i < 
	g˙
; i++ )

1376 
	ga
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(
a
[i]*
üÕha
);

1377  
	ga
;

1380 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>

1381 
	g›î©‹
 * (c⁄° 
	gVec
<
	g_Tp
, 
	g˙
>& 
	ga
, 
	gÆpha
)

1383  
	gVec
<
	g_Tp
, 
	g˙
>(
	ga
, 
	gÆpha
, 
M©x_SˇÀOp
());

1386 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>

1387 
	g›î©‹
 * (
	gÆpha
, c⁄° 
	gVec
<
	g_Tp
, 
	g˙
>& 
	ga
)

1389  
	gVec
<
	g_Tp
, 
	g˙
>(
	ga
, 
	gÆpha
, 
M©x_SˇÀOp
());

1392 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>

1393 
	g›î©‹
 * (c⁄° 
	gVec
<
	g_Tp
, 
	g˙
>& 
	ga
, 
	gÆpha
)

1395  
	gVec
<
	g_Tp
, 
	g˙
>(
	ga
, 
	gÆpha
, 
M©x_SˇÀOp
());

1398 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>

1399 
	g›î©‹
 * (
	gÆpha
, c⁄° 
	gVec
<
	g_Tp
, 
	g˙
>& 
	ga
)

1401  
	gVec
<
	g_Tp
, 
	g˙
>(
	ga
, 
	gÆpha
, 
M©x_SˇÀOp
());

1404 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>

1405 
	g›î©‹
 * (c⁄° 
	gVec
<
	g_Tp
, 
	g˙
>& 
	ga
, 
	gÆpha
)

1407  
	gVec
<
	g_Tp
, 
	g˙
>(
	ga
, 
	gÆpha
, 
M©x_SˇÀOp
());

1410 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>

1411 
	g›î©‹
 * (
	gÆpha
, c⁄° 
	gVec
<
	g_Tp
, 
	g˙
>& 
	ga
)

1413  
	gVec
<
	g_Tp
, 
	g˙
>(
	ga
, 
	gÆpha
, 
M©x_SˇÀOp
());

1416 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>

1417 
	g›î©‹
 / (c⁄° 
	gVec
<
	g_Tp
, 
	g˙
>& 
	ga
, 
	gÆpha
)

1419  
	gVec
<
	g_Tp
, 
	g˙
>(
	ga
, 1./
	gÆpha
, 
M©x_SˇÀOp
());

1422 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>

1423 
	g›î©‹
 / (c⁄° 
	gVec
<
	g_Tp
, 
	g˙
>& 
	ga
, 
	gÆpha
)

1425  
	gVec
<
	g_Tp
, 
	g˙
>(
	ga
, 1.f/
	gÆpha
, 
M©x_SˇÀOp
());

1428 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>

1429 
	g›î©‹
 / (c⁄° 
	gVec
<
	g_Tp
, 
	g˙
>& 
	ga
, 
	gÆpha
)

1431  
	gVec
<
	g_Tp
, 
	g˙
>(
	ga
, 1./
	gÆpha
, 
M©x_SˇÀOp
());

1434 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn>

1435 
	g›î©‹
 - (c⁄° 
	gVec
<
	g_Tp
, 
	g˙
>& 
	ga
)

1437 
	gVec
<
	g_Tp
,
	g˙
> 
	gt
;

1438  
	gi
 = 0; i < 
	g˙
; i++ ) 
	gt
.
	gvÆ
[
i
] = 
ßtuøã_ˇ°
<
_Tp
>(-
a
.
vÆ
[i]);

1439  
	gt
;

1442 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gVec
<_Tp, 4> 
	g›î©‹
 * (c⁄° Vec<_Tp, 4>& 
	gv1
, c⁄° Vec<_Tp, 4>& 
	gv2
)

1444  
	gVec
<
	g_Tp
, 4>(
	gßtuøã_ˇ°
<_Tp>(
	gv1
[0]*
	gv2
[0] - v1[1]*v2[1] - v1[2]*v2[2] - v1[3]*v2[3]),

1445 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gv1
[0]*
	gv2
[1] + v1[1]*v2[0] + v1[2]*v2[3] - v1[3]*v2[2]),

1446 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gv1
[0]*
	gv2
[2] - v1[1]*v2[3] + v1[2]*v2[0] + v1[3]*v2[1]),

1447 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gv1
[0]*
	gv2
[3] + v1[1]*v2[2] - v1[2]*v2[1] + v1[3]*v2[0]));

1450 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gVec
<_Tp, 4>& 
	g›î©‹
 *(
Vec
<
_Tp
, 4>& 
	gv1
, c⁄° Vec<_Tp, 4>& 
	gv2
)

1452 
	gv1
 = 
v1
 * 
v2
;

1453  
	gv1
;

1456 
	gãm∂©e
<> 
ölöe
 
	gVec
<, 3> Vec<, 3>::
¸oss
(c⁄° 
Vec
<, 3>& 
v
) const

1458  
	gVec
<,3>(
	gvÆ
[1]*
	gv
.val[2] - val[2]*v.val[1],

1459 
	gvÆ
[2]*
	gv
.val[0] - val[0]*v.val[2],

1460 
	gvÆ
[0]*
	gv
.val[1] - val[1]*v.val[0]);

1463 
	gãm∂©e
<> 
ölöe
 
	gVec
<, 3> Vec<, 3>::
¸oss
(c⁄° 
Vec
<, 3>& 
v
) const

1465  
	gVec
<,3>(
	gvÆ
[1]*
	gv
.val[2] - val[2]*v.val[1],

1466 
	gvÆ
[2]*
	gv
.val[0] - val[0]*v.val[2],

1467 
	gvÆ
[0]*
	gv
.val[1] - val[1]*v.val[0]);

1470 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
	gVec
<_Tp, cn> 
n‹mÆize
(c⁄° 
Vec
<
_Tp
, 
˙
>& 
v
)

1472 
	gnv
 = 
n‹m
(
v
);

1473  
	gv
 * (
	gnv
 ? 1./nv : 0.);

1476 
	gãm∂©e
<
ty≥«me
 
	g_Tp
,Åy≥«mê
	g_T2
, 
	g˙
> 
ölöe


1477 
	gVecCommaInôülizî
<
	g_Tp
, 
	g˙
> 
	g›î©‹
 << (c⁄° 
	gVec
<_Tp, cn>& 
	gvec
, 
_T2
 
	gvÆ
)

1479 
	gVecCommaInôülizî
<
	g_Tp
, 
	g˙
> 
commaInôülizî
((
Vec
<
_Tp
, 
˙
>*)&
vec
);

1480  (
	gcommaInôülizî
, 
	gvÆ
);

1483 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe


1484 
	gVecCommaInôülizî
<
	g_Tp
, 
	g˙
>::
VecCommaInôülizî
(
Vec
<
_Tp
, 
˙
>* 
_vec
)

1485 : 
M©xCommaInôülizî
<
_Tp
, 
	g˙
, 1>(
	g_vec
)

1488 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
>Åem∂©e<ty≥«mê
	g_T2
> 
ölöe


1489 
	gVecCommaInôülizî
<
	g_Tp
, 
	g˙
>& VecCommaInôülizî<_Tp, cn>::
›î©‹
 , (
_T2
 
	gvÆue
)

1491 
CV_DbgAs£π
–
this
->
idx
 < 
˙
 );

1492 
	gthis
->
	gd°
->
	gvÆ
[
this
->
idx
++] = 
ßtuøã_ˇ°
<
_Tp
>(
vÆue
);

1493  *
	gthis
;

1496 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe


1497 
	gVec
<
	g_Tp
, 
	g˙
> 
	gVecCommaInôülizî
<_Tp, cn>::
›î©‹
 *() const

1499 
CV_DbgAs£π
–
this
->
idx
 =
˙
 );

1500  *
	gthis
->
	gd°
;

1505 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gCom∂ex
<_Tp>::
Com∂ex
(Ë: 
ª
(0), 
im
(0) {}

1506 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gCom∂ex
<_Tp>::
Com∂ex
–
_Tp
 
_ª
, _T∞
_im
 ) : 
ª
(_ª), 
im
(_im) {}

1507 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<ty≥«mê
	gT2
> 
ölöe
 
	gCom∂ex
<_Tp>::
›î©‹
 
Com∂ex
<
T2
>() const

1508 {  
Com∂ex
<
T2
>(
ßtuøã_ˇ°
<T2>(
ª
), 
	gßtuøã_ˇ°
<
	gT2
>(
	gim
)); }

1509 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gCom∂ex
<_Tp> Com∂ex<_Tp>::
c⁄j
() const

1510 {  
Com∂ex
<
_Tp
>(
ª
, -
	gim
); }

1512 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1513 
boﬁ
 
	g›î©‹
 =(c⁄° 
Com∂ex
<
_Tp
>& 
a
, c⁄° 
	gCom∂ex
<
	g_Tp
>& 
	gb
)

1514 {  
	ga
.
	gª
 =
b
.
ª
 && 
a
.
im
 == b.im; }

1516 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1517 
boﬁ
 
	g›î©‹
 !(c⁄° 
Com∂ex
<
_Tp
>& 
a
, c⁄° 
	gCom∂ex
<
	g_Tp
>& 
	gb
)

1518 {  
	ga
.
	gª
 !
b
.
ª
 || 
a
.
im
 != b.im; }

1520 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1521 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 + (c⁄° Com∂ex<_Tp>& 
	ga
, c⁄° Com∂ex<_Tp>& 
	gb
)

1522 {  
	gCom∂ex
<
	g_Tp
>–
	ga
.
	gª
 + 
	gb
.ª,á.
	gim
 + b.im ); }

1524 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1525 
	gCom∂ex
<
	g_Tp
>& 
	g›î©‹
 +(
Com∂ex
<
_Tp
>& 
a
, c⁄° Com∂ex<_Tp>& 
	gb
)

1526 { 
	ga
.
	gª
 +
b
.
ª
;á.
	gim
 +b.
im
; á; }

1528 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1529 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 - (c⁄° Com∂ex<_Tp>& 
	ga
, c⁄° Com∂ex<_Tp>& 
	gb
)

1530 {  
	gCom∂ex
<
	g_Tp
>–
	ga
.
	gª
 - 
	gb
.ª,á.
	gim
 - b.im ); }

1532 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1533 
	gCom∂ex
<
	g_Tp
>& 
	g›î©‹
 -(
Com∂ex
<
_Tp
>& 
a
, c⁄° Com∂ex<_Tp>& 
	gb
)

1534 { 
	ga
.
	gª
 -
b
.
ª
;á.
	gim
 -b.
im
; á; }

1536 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1537 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 - (c⁄° Com∂ex<_Tp>& 
	ga
)

1538 {  
	gCom∂ex
<
	g_Tp
>(-
	ga
.
	gª
, -a.
	gim
); }

1540 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1541 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 * (c⁄° Com∂ex<_Tp>& 
	ga
, c⁄° Com∂ex<_Tp>& 
	gb
)

1542 {  
	gCom∂ex
<
	g_Tp
>–
	ga
.
ª
*
	gb
.
	gª
 -á.
im
*b.
	gim
,á.re*b.im +á.im*b.re ); }

1544 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1545 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 * (c⁄° Com∂ex<_Tp>& 
	ga
, 
_Tp
 
	gb
)

1546 {  
	gCom∂ex
<
	g_Tp
>–
	ga
.
ª
*
	gb
,á.
im
*b ); }

1548 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1549 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 * (
_Tp
 
	gb
, c⁄° Com∂ex<_Tp>& 
	ga
)

1550 {  
	gCom∂ex
<
	g_Tp
>–
	ga
.
ª
*
	gb
,á.
im
*b ); }

1552 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1553 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 + (c⁄° Com∂ex<_Tp>& 
	ga
, 
_Tp
 
	gb
)

1554 {  
	gCom∂ex
<
	g_Tp
>–
	ga
.
	gª
 + 
	gb
,á.
	gim
 ); }

1556 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1557 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 - (c⁄° Com∂ex<_Tp>& 
	ga
, 
_Tp
 
	gb
)

1558 {  
	gCom∂ex
<
	g_Tp
>–
	ga
.
	gª
 - 
	gb
,á.
	gim
 ); }

1560 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1561 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 + (
_Tp
 
	gb
, c⁄° Com∂ex<_Tp>& 
	ga
)

1562 {  
	gCom∂ex
<
	g_Tp
>–
	ga
.
	gª
 + 
	gb
,á.
	gim
 ); }

1564 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1565 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 - (
_Tp
 
	gb
, c⁄° Com∂ex<_Tp>& 
	ga
)

1566 {  
	gCom∂ex
<
	g_Tp
>–
	gb
 - 
	ga
.
	gª
, -a.
	gim
 ); }

1568 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1569 
	gCom∂ex
<
	g_Tp
>& 
	g›î©‹
 +(
Com∂ex
<
_Tp
>& 
a
, _T∞
	gb
)

1570 { 
	ga
.
	gª
 +
b
; á; }

1572 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1573 
	gCom∂ex
<
	g_Tp
>& 
	g›î©‹
 -(
Com∂ex
<
_Tp
>& 
a
, _T∞
	gb
)

1574 { 
	ga
.
	gª
 -
b
; á; }

1576 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1577 
	gCom∂ex
<
	g_Tp
>& 
	g›î©‹
 *(
Com∂ex
<
_Tp
>& 
a
, _T∞
	gb
)

1578 { 
	ga
.
	gª
 *
b
;á.
	gim
 *= b; á; }

1580 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1581 
abs
(c⁄° 
Com∂ex
<
_Tp
>& 
a
)

1582 {  
	g°d
::
sqπ
–()
a
.
ª
*a.ª + (Ô.
im
*a.im); }

1584 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1585 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 / (c⁄° Com∂ex<_Tp>& 
	ga
, c⁄° Com∂ex<_Tp>& 
	gb
)

1587 
	gt
 = 1./(()
b
.
ª
*b.ª + ()b.
im
*b.im);

1588  
	gCom∂ex
<
	g_Tp
>–(_Tp)((
	ga
.
ª
*
	gb
.
	gª
 +á.
im
*b.
	gim
)*
	gt
),

1589 (
	g_Tp
)((-
	ga
.
ª
*
	gb
.
	gim
 +á.
im
*b.
	gª
)*
	gt
) );

1592 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1593 
	gCom∂ex
<
	g_Tp
>& 
	g›î©‹
 /(
Com∂ex
<
_Tp
>& 
a
, c⁄° Com∂ex<_Tp>& 
	gb
)

1595  (
	ga
 = 
a
 / 
b
);

1598 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1599 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 / (c⁄° Com∂ex<_Tp>& 
	ga
, 
_Tp
 
	gb
)

1601 
_Tp
 
	gt
 = (_Tp)1/
b
;

1602  
	gCom∂ex
<
	g_Tp
>–
	ga
.
ª
*
	gt
,á.
im
*t );

1605 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1606 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 / (
_Tp
 
	gb
, c⁄° Com∂ex<_Tp>& 
	ga
)

1608  
	gCom∂ex
<
	g_Tp
>(
	gb
)/
	ga
;

1611 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


1612 
	gCom∂ex
<
	g_Tp
> 
	g›î©‹
 /(c⁄° 
Com∂ex
<
_Tp
>& 
a
, _T∞
	gb
)

1614 
_Tp
 
	gt
 = (_Tp)1/
b
;

1615 
	ga
.
	gª
 *
t
;á.
	gim
 *=Å; á;

1620 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>::
Poöt_
(Ë: 
x
(0), 
y
(0) {}

1621 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>::
Poöt_
(
_Tp
 
_x
, _T∞
_y
Ë: 
x
(_x), 
y
(_y) {}

1622 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>::
Poöt_
(c⁄° Poöt_& 
±
Ë: 
x
’t.x), 
y
(pt.y) {}

1623 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>::
Poöt_
(c⁄° 
CvPoöt
& 
±
Ë: 
x
((
_Tp
Ìt.x), 
y
((_Tp)pt.y) {}

1624 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>::
Poöt_
(c⁄° 
CvPoöt2D32f
& 
±
)

1625 : 
x
(
ßtuøã_ˇ°
<
_Tp
>(
±
.x)), 
y
(saturate_cast<_Tp>(pt.y)) {}

1626 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>::
Poöt_
(c⁄° 
Size_
<
_Tp
>& 
sz
Ë: 
x
(sz.
width
), 
y
(sz.
height
) {}

1627 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>::
Poöt_
(c⁄° 
Vec
<
_Tp
,2>& 
v
Ë: 
x
(v[0]), 
y
(v[1]) {}

1628 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>& Poöt_<_Tp>::
›î©‹
 = (c⁄° 
Poöt_
& 
±
)

1629 { 
x
 = 
±
.x; 
	gy
 =Öt.
y
;  *
	gthis
; }

1631 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<ty≥«mê
	g_Tp2
> 
ölöe
 
	gPoöt_
<_Tp>::
›î©‹
 
Poöt_
<
_Tp2
>() const

1632 {  
Poöt_
<
_Tp2
>(
ßtuøã_ˇ°
<_Tp2>(
x
), 
	gßtuøã_ˇ°
<
	g_Tp2
>(
	gy
)); }

1633 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>::
›î©‹
 
CvPoöt
() const

1634 {  
cvPoöt
(
ßtuøã_ˇ°
<>(
x
), s©uøã_ˇ°<>(
y
)); }

1635 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>::
›î©‹
 
CvPoöt2D32f
() const

1636 {  
cvPoöt2D32f
(()
x
, ()
y
); }

1637 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>::
›î©‹
 
Vec
<
_Tp
, 2>() const

1638 {  
	gVec
<
	g_Tp
, 2>(
	gx
, 
	gy
); }

1640 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
	gPoöt_
<_Tp>::
dŸ
(c⁄° 
Poöt_
& 
±
) const

1641 {  
ßtuøã_ˇ°
<
_Tp
>(
x
*
±
.x + 
y
*pt.y); }

1642 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>::
ddŸ
(c⁄° 
Poöt_
& 
±
) const

1643 {  ()
x
*
±
.x + ()
y
*pt.y; }

1645 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>::
¸oss
(c⁄° 
Poöt_
& 
±
) const

1646 {  ()
x
*
±
.
y
 - ()y*pt.x; }

1648 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>&

1649 
	g›î©‹
 +(
Poöt_
<
_Tp
>& 
a
, c⁄° 
	gPoöt_
<
	g_Tp
>& 
	gb
)

1651 
	ga
.
	gx
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
x
 + 
b
.x);

1652 
	ga
.
	gy
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
y
 + 
b
.y);

1653  
	ga
;

1656 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>&

1657 
	g›î©‹
 -(
Poöt_
<
_Tp
>& 
a
, c⁄° 
	gPoöt_
<
	g_Tp
>& 
	gb
)

1659 
	ga
.
	gx
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
x
 - 
b
.x);

1660 
	ga
.
	gy
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
y
 - 
b
.y);

1661  
	ga
;

1664 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>&

1665 
	g›î©‹
 *(
Poöt_
<
_Tp
>& 
a
, 
	gb
)

1667 
	ga
.
	gx
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
x
*
b
);

1668 
	ga
.
	gy
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
y
*
b
);

1669  
	ga
;

1672 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>&

1673 
	g›î©‹
 *(
Poöt_
<
_Tp
>& 
a
, 
	gb
)

1675 
	ga
.
	gx
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
x
*
b
);

1676 
	ga
.
	gy
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
y
*
b
);

1677  
	ga
;

1680 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp>&

1681 
	g›î©‹
 *(
Poöt_
<
_Tp
>& 
a
, 
	gb
)

1683 
	ga
.
	gx
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
x
*
b
);

1684 
	ga
.
	gy
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
y
*
b
);

1685  
	ga
;

1688 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
n‹m
(c⁄° 
Poöt_
<
_Tp
>& 
±
)

1689 {  
	g°d
::
sqπ
(()
±
.
x
*±.x + (Ìt.
y
*pt.y); }

1691 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
Poöt_
<
_Tp
>& 
a
, c⁄° 
	gPoöt_
<_Tp>& 
	gb
)

1692 {  
	ga
.
	gx
 =
b
.
x
 && 
a
.
y
 == b.y; }

1694 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
Poöt_
<
_Tp
>& 
a
, c⁄° 
	gPoöt_
<_Tp>& 
	gb
)

1695 {  
	ga
.
	gx
 !
b
.
x
 || 
a
.
y
 != b.y; }

1697 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp> 
	g›î©‹
 + (c⁄° Poöt_<_Tp>& 
	ga
, c⁄° Poöt_<_Tp>& 
	gb
)

1698 {  
	gPoöt_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	ga
.
	gx
 + 
	gb
.x), s©uøã_ˇ°<_Tp>◊.
	gy
 + b.y) ); }

1700 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp> 
	g›î©‹
 - (c⁄° Poöt_<_Tp>& 
	ga
, c⁄° Poöt_<_Tp>& 
	gb
)

1701 {  
	gPoöt_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	ga
.
	gx
 - 
	gb
.x), s©uøã_ˇ°<_Tp>◊.
	gy
 - b.y) ); }

1703 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp> 
	g›î©‹
 - (c⁄° Poöt_<_Tp>& 
	ga
)

1704 {  
	gPoöt_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(-
	ga
.
	gx
), s©uøã_ˇ°<_Tp>(-a.
	gy
) ); }

1706 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp> 
	g›î©‹
 * (c⁄° Poöt_<_Tp>& 
	ga
, 
	gb
)

1707 {  
	gPoöt_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	ga
.
x
*
	gb
), s©uøã_ˇ°<_Tp>◊.
y
*b) ); }

1709 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp> 
	g›î©‹
 * (
	ga
, c⁄° Poöt_<_Tp>& 
	gb
)

1710 {  
	gPoöt_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	gb
.
x
*
	ga
), s©uøã_ˇ°<_Tp>(b.
y
*a) ); }

1712 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp> 
	g›î©‹
 * (c⁄° Poöt_<_Tp>& 
	ga
, 
	gb
)

1713 {  
	gPoöt_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	ga
.
x
*
	gb
), s©uøã_ˇ°<_Tp>◊.
y
*b) ); }

1715 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp> 
	g›î©‹
 * (
	ga
, c⁄° Poöt_<_Tp>& 
	gb
)

1716 {  
	gPoöt_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	gb
.
x
*
	ga
), s©uøã_ˇ°<_Tp>(b.
y
*a) ); }

1718 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp> 
	g›î©‹
 * (c⁄° Poöt_<_Tp>& 
	ga
, 
	gb
)

1719 {  
	gPoöt_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	ga
.
x
*
	gb
), s©uøã_ˇ°<_Tp>◊.
y
*b) ); }

1721 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp> 
	g›î©‹
 * (
	ga
, c⁄° Poöt_<_Tp>& 
	gb
)

1722 {  
	gPoöt_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	gb
.
x
*
	ga
), s©uøã_ˇ°<_Tp>(b.
y
*a) ); }

1726 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>::
Poöt3_
(Ë: 
x
(0), 
y
(0), 
z
(0) {}

1727 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>::
Poöt3_
(
_Tp
 
_x
, _T∞
_y
, _T∞
_z
Ë: 
x
(_x), 
y
(_y), 
z
(_z) {}

1728 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>::
Poöt3_
(c⁄° Poöt3_& 
±
Ë: 
x
’t.x), 
y
’t.y), 
z
(pt.z) {}

1729 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>::
Poöt3_
(c⁄° 
Poöt_
<
_Tp
>& 
±
Ë: 
x
’t.x), 
y
’t.y), 
z
(_Tp()) {}

1730 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>::
Poöt3_
(c⁄° 
CvPoöt3D32f
& 
±
) :

1731 
x
(
ßtuøã_ˇ°
<
_Tp
>(
±
.x)), 
y
(ßtuøã_ˇ°<_Tp>’t.y)), 
z
(saturate_cast<_Tp>(pt.z)) {}

1732 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>::
Poöt3_
(c⁄° 
Vec
<
_Tp
, 3>& 
v
Ë: 
x
(v[0]), 
y
(v[1]), 
z
(v[2]) {}

1734 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<ty≥«mê
	g_Tp2
> 
ölöe
 
	gPoöt3_
<_Tp>::
›î©‹
 
Poöt3_
<
_Tp2
>() const

1735 {  
Poöt3_
<
_Tp2
>(
ßtuøã_ˇ°
<_Tp2>(
x
), 
	gßtuøã_ˇ°
<
	g_Tp2
>(
	gy
), s©uøã_ˇ°<_Tp2>(
	gz
)); }

1737 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>::
›î©‹
 
CvPoöt3D32f
() const

1738 {  
cvPoöt3D32f
(()
x
, ()
y
, ()
z
); }

1740 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>::
›î©‹
 
Vec
<
_Tp
, 3>() const

1741 {  
	gVec
<
	g_Tp
, 3>(
	gx
, 
	gy
, 
	gz
); }

1743 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>& Poöt3_<_Tp>::
›î©‹
 = (c⁄° 
Poöt3_
& 
±
)

1744 { 
x
 = 
±
.x; 
	gy
 =Öt.
y
; 
	gz
 =Öt.
z
;  *
	gthis
; }

1746 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
	gPoöt3_
<_Tp>::
dŸ
(c⁄° 
Poöt3_
& 
±
) const

1747 {  
ßtuøã_ˇ°
<
_Tp
>(
x
*
±
.x + 
y
*±.y + 
z
*pt.z); }

1748 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>::
ddŸ
(c⁄° 
Poöt3_
& 
±
) const

1749 {  ()
x
*
±
.x + ()
y
*±.y + ()
z
*pt.z; }

1751 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp> Poöt3_<_Tp>::
¸oss
(c⁄° 
Poöt3_
<
_Tp
>& 
±
) const

1753  
Poöt3_
<
_Tp
>(
y
*
±
.
z
 - z*±.y, z*
	g±
.
	gx
 - 
x
*±.
	gz
, x*±.
	gy
 - y*pt.x);

1756 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>&

1757 
	g›î©‹
 +(
Poöt3_
<
_Tp
>& 
a
, c⁄° 
	gPoöt3_
<
	g_Tp
>& 
	gb
)

1759 
	ga
.
	gx
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
x
 + 
b
.x);

1760 
	ga
.
	gy
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
y
 + 
b
.y);

1761 
	ga
.
	gz
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
z
 + 
b
.z);

1762  
	ga
;

1765 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>&

1766 
	g›î©‹
 -(
Poöt3_
<
_Tp
>& 
a
, c⁄° 
	gPoöt3_
<
	g_Tp
>& 
	gb
)

1768 
	ga
.
	gx
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
x
 - 
b
.x);

1769 
	ga
.
	gy
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
y
 - 
b
.y);

1770 
	ga
.
	gz
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
z
 - 
b
.z);

1771  
	ga
;

1774 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>&

1775 
	g›î©‹
 *(
Poöt3_
<
_Tp
>& 
a
, 
	gb
)

1777 
	ga
.
	gx
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
x
*
b
);

1778 
	ga
.
	gy
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
y
*
b
);

1779 
	ga
.
	gz
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
z
*
b
);

1780  
	ga
;

1783 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>&

1784 
	g›î©‹
 *(
Poöt3_
<
_Tp
>& 
a
, 
	gb
)

1786 
	ga
.
	gx
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
x
*
b
);

1787 
	ga
.
	gy
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
y
*
b
);

1788 
	ga
.
	gz
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
z
*
b
);

1789  
	ga
;

1792 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp>&

1793 
	g›î©‹
 *(
Poöt3_
<
_Tp
>& 
a
, 
	gb
)

1795 
	ga
.
	gx
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
x
*
b
);

1796 
	ga
.
	gy
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
y
*
b
);

1797 
	ga
.
	gz
 = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
z
*
b
);

1798  
	ga
;

1801 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
n‹m
(c⁄° 
Poöt3_
<
_Tp
>& 
±
)

1802 {  
	g°d
::
sqπ
(()
±
.
x
*±.x + (Ìt.
y
*±.y + (Ìt.
z
*pt.z); }

1804 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
Poöt3_
<
_Tp
>& 
a
, c⁄° 
	gPoöt3_
<_Tp>& 
	gb
)

1805 {  
	ga
.
	gx
 =
b
.
x
 && 
a
.
y
 =b.y &&á.
z
 == b.z; }

1807 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
Poöt3_
<
_Tp
>& 
a
, c⁄° 
	gPoöt3_
<_Tp>& 
	gb
)

1808 {  
	ga
.
	gx
 !
b
.
x
 || 
a
.
y
 !b.y ||á.
z
 != b.z; }

1810 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp> 
	g›î©‹
 + (c⁄° Poöt3_<_Tp>& 
	ga
, c⁄° Poöt3_<_Tp>& 
	gb
)

1811 {  
	gPoöt3_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	ga
.
	gx
 + 
	gb
.x),

1812 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gy
 + 
	gb
.y),

1813 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gz
 + 
	gb
.z)); }

1815 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp> 
	g›î©‹
 - (c⁄° Poöt3_<_Tp>& 
	ga
, c⁄° Poöt3_<_Tp>& 
	gb
)

1816 {  
	gPoöt3_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	ga
.
	gx
 - 
	gb
.x),

1817 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gy
 - 
	gb
.y),

1818 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gz
 - 
	gb
.z)); }

1820 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp> 
	g›î©‹
 - (c⁄° Poöt3_<_Tp>& 
	ga
)

1821 {  
	gPoöt3_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(-
	ga
.
	gx
),

1822 
	gßtuøã_ˇ°
<
	g_Tp
>(-
	ga
.
	gy
),

1823 
	gßtuøã_ˇ°
<
	g_Tp
>(-
	ga
.
	gz
) ); }

1825 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp> 
	g›î©‹
 * (c⁄° Poöt3_<_Tp>& 
	ga
, 
	gb
)

1826 {  
	gPoöt3_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	ga
.
x
*
	gb
),

1827 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
y
*
	gb
),

1828 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
z
*
	gb
) ); }

1830 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp> 
	g›î©‹
 * (
	ga
, c⁄° Poöt3_<_Tp>& 
	gb
)

1831 {  
	gPoöt3_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	gb
.
x
*
	ga
),

1832 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gb
.
y
*
	ga
),

1833 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gb
.
z
*
	ga
) ); }

1835 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp> 
	g›î©‹
 * (c⁄° Poöt3_<_Tp>& 
	ga
, 
	gb
)

1836 {  
	gPoöt3_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	ga
.
x
*
	gb
),

1837 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
y
*
	gb
),

1838 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
z
*
	gb
) ); }

1840 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp> 
	g›î©‹
 * (
	ga
, c⁄° Poöt3_<_Tp>& 
	gb
)

1841 {  
	gPoöt3_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	gb
.
x
*
	ga
),

1842 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gb
.
y
*
	ga
),

1843 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gb
.
z
*
	ga
) ); }

1845 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp> 
	g›î©‹
 * (c⁄° Poöt3_<_Tp>& 
	ga
, 
	gb
)

1846 {  
	gPoöt3_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	ga
.
x
*
	gb
),

1847 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
y
*
	gb
),

1848 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
z
*
	gb
) ); }

1850 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt3_
<_Tp> 
	g›î©‹
 * (
	ga
, c⁄° Poöt3_<_Tp>& 
	gb
)

1851 {  
	gPoöt3_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	gb
.
x
*
	ga
),

1852 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gb
.
y
*
	ga
),

1853 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gb
.
z
*
	ga
) ); }

1857 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp>::
Size_
()

1858 : 
width
(0), 
height
(0) {}

1859 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp>::
Size_
(
_Tp
 
_width
, _T∞
_height
)

1860 : 
width
(
_width
), 
height
(
_height
) {}

1861 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp>::
Size_
(c⁄° Size_& 
sz
)

1862 : 
width
(
sz
.width), 
height
(sz.height) {}

1863 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp>::
Size_
(c⁄° 
CvSize
& 
sz
)

1864 : 
width
(
ßtuøã_ˇ°
<
_Tp
>(
sz
.width)), 
height
(saturate_cast<_Tp>(sz.height)) {}

1865 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp>::
Size_
(c⁄° 
CvSize2D32f
& 
sz
)

1866 : 
width
(
ßtuøã_ˇ°
<
_Tp
>(
sz
.width)), 
height
(saturate_cast<_Tp>(sz.height)) {}

1867 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp>::
Size_
(c⁄° 
Poöt_
<
_Tp
>& 
±
Ë: 
width
’t.
x
), 
height
’t.
y
) {}

1869 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<ty≥«mê
	g_Tp2
> 
ölöe
 
	gSize_
<_Tp>::
›î©‹
 
Size_
<
_Tp2
>() const

1870 {  
Size_
<
_Tp2
>(
ßtuøã_ˇ°
<_Tp2>(
width
), 
	gßtuøã_ˇ°
<
	g_Tp2
>(
	gheight
)); }

1871 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp>::
›î©‹
 
CvSize
() const

1872 {  
cvSize
(
ßtuøã_ˇ°
<>(
width
), s©uøã_ˇ°<>(
height
)); }

1873 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp>::
›î©‹
 
CvSize2D32f
() const

1874 {  
cvSize2D32f
(()
width
, ()
height
); }

1876 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp>& Size_<_Tp>::
›î©‹
 = (c⁄° 
Size_
<
_Tp
>& 
sz
)

1877 { 
width
 = 
sz
.width; 
	gheight
 = sz.
height
;  *
	gthis
; }

1878 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp> 
	g›î©‹
 * (c⁄° Size_<_Tp>& 
	ga
, 
_Tp
 
	gb
)

1879 {  
	gSize_
<
	g_Tp
>(
	ga
.
width
 * 
	gb
,á.
height
 * b); }

1880 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp> 
	g›î©‹
 + (c⁄° Size_<_Tp>& 
	ga
, c⁄° Size_<_Tp>& 
	gb
)

1881 {  
	gSize_
<
	g_Tp
>(
	ga
.
	gwidth
 + 
	gb
.width,á.
	gheight
 + b.height); }

1882 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp> 
	g›î©‹
 - (c⁄° Size_<_Tp>& 
	ga
, c⁄° Size_<_Tp>& 
	gb
)

1883 {  
	gSize_
<
	g_Tp
>(
	ga
.
	gwidth
 - 
	gb
.width,á.
	gheight
 - b.height); }

1884 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
	gSize_
<_Tp>::
¨ó
(Ëc⁄° {  
width
*
height
; }

1886 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp>& 
	g›î©‹
 +(
Size_
<
_Tp
>& 
a
, c⁄° Size_<_Tp>& 
	gb
)

1887 { 
	ga
.
	gwidth
 +
b
.
width
;á.
	gheight
 +b.
height
; á; }

1888 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp>& 
	g›î©‹
 -(
Size_
<
_Tp
>& 
a
, c⁄° Size_<_Tp>& 
	gb
)

1889 { 
	ga
.
	gwidth
 -
b
.
width
;á.
	gheight
 -b.
height
; á; }

1891 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
Size_
<
_Tp
>& 
a
, c⁄° 
	gSize_
<_Tp>& 
	gb
)

1892 {  
	ga
.
	gwidth
 =
b
.
width
 && 
a
.
height
 == b.height; }

1893 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
Size_
<
_Tp
>& 
a
, c⁄° 
	gSize_
<_Tp>& 
	gb
)

1894 {  
	ga
.
	gwidth
 !
b
.
width
 || 
a
.
height
 != b.height; }

1899 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>::
Re˘_
(Ë: 
x
(0), 
y
(0), 
width
(0), 
height
(0) {}

1900 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>::
Re˘_
(
_Tp
 
_x
, _T∞
_y
, _T∞
_width
, _T∞
_height
Ë: 
x
(_x), 
y
(_y), 
width
(_width), 
height
(_height) {}

1901 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>::
Re˘_
(c⁄° Re˘_<
_Tp
>& 
r
Ë: 
x
‘.x), 
y
‘.y), 
width
‘.width), 
height
(r.height) {}

1902 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>::
Re˘_
(c⁄° 
CvRe˘
& 
r
Ë: 
x
((
_Tp
Ï.x), 
y
((_TpÏ.y), 
width
((_TpÏ.width), 
height
((_Tp)r.height) {}

1903 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>::
Re˘_
(c⁄° 
Poöt_
<
_Tp
>& 
‹g
, c⁄° 
Size_
<_Tp>& 
sz
) :

1904 
x
(
‹g
.x), 
y
(‹g.y), 
width
(
sz
.width), 
height
(sz.height) {}

1905 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>::
Re˘_
(c⁄° 
Poöt_
<
_Tp
>& 
±1
, c⁄° Poöt_<_Tp>& 
±2
)

1907 
	gx
 = 
°d
::
mö
(
±1
.
x
, 
±2
.x); 
	gy
 = std::mö’t1.
y
,Öt2.y);

1908 
	gwidth
 = 
°d
::
max
(
±1
.
x
, 
±2
.xË- 
	gx
; 
	gheight
 = std::max’t1.
y
,Öt2.yË- 
	gy
;

1910 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>& Re˘_<_Tp>::
›î©‹
 = ( c⁄° 
Re˘_
<
_Tp
>& 
r
 )

1911 { 
x
 = 
r
.x; 
	gy
 =Ñ.
y
; 
	gwidth
 =Ñ.
width
; 
	gheight
 =Ñ.
height
;  *
	gthis
; }

1913 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp> 
	gRe˘_
<_Tp>::
é
(Ëc⁄° {  
Poöt_
<
_Tp
>(
x
,
	gy
); }

1914 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPoöt_
<_Tp> 
	gRe˘_
<_Tp>::
br
(Ëc⁄° {  
Poöt_
<
_Tp
>(
x
+
width
, 
	gy
+
	gheight
); }

1916 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>& 
	g›î©‹
 +–
Re˘_
<
_Tp
>& 
a
, c⁄° 
	gPoöt_
<_Tp>& 
	gb
 )

1917 { 
	ga
.
	gx
 +
b
.
x
;á.
	gy
 +b.
y
; á; }

1918 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>& 
	g›î©‹
 -–
Re˘_
<
_Tp
>& 
a
, c⁄° 
	gPoöt_
<_Tp>& 
	gb
 )

1919 { 
	ga
.
	gx
 -
b
.
x
;á.
	gy
 -b.
y
; á; }

1921 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>& 
	g›î©‹
 +–
Re˘_
<
_Tp
>& 
a
, c⁄° 
	gSize_
<_Tp>& 
	gb
 )

1922 { 
	ga
.
	gwidth
 +
b
.
width
;á.
	gheight
 +b.
height
; á; }

1924 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>& 
	g›î©‹
 -–
Re˘_
<
_Tp
>& 
a
, c⁄° 
	gSize_
<_Tp>& 
	gb
 )

1925 { 
	ga
.
	gwidth
 -
b
.
width
;á.
	gheight
 -b.
height
; á; }

1927 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>& 
	g›î©‹
 &–
Re˘_
<
_Tp
>& 
a
, c⁄° Re˘_<_Tp>& 
	gb
 )

1929 
_Tp
 
	gx1
 = 
°d
::
max
(
a
.
x
, 
b
.x), 
	gy1
 = std::max◊.
y
, b.y);

1930 
	ga
.
	gwidth
 = 
°d
::
mö
(
a
.
x
 +á.
width
, 
b
.x + b.widthË- 
	gx1
;

1931 
	ga
.
	gheight
 = 
°d
::
mö
(
a
.
y
 +á.
height
, 
b
.y + b.heightË- 
	gy1
;

1932 
	ga
.
	gx
 = 
x1
;á.
	gy
 = 
y1
;

1933 if–
	ga
.
	gwidth
 <0 || 
a
.
height
 <= 0 )

1934 
a
 = 
Re˘
();

1935  
	ga
;

1938 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>& 
	g›î©‹
 |–
Re˘_
<
_Tp
>& 
a
, c⁄° Re˘_<_Tp>& 
	gb
 )

1940 
_Tp
 
	gx1
 = 
°d
::
mö
(
a
.
x
, 
b
.x), 
	gy1
 = std::mö◊.
y
, b.y);

1941 
	ga
.
	gwidth
 = 
°d
::
max
(
a
.
x
 +á.
width
, 
b
.x + b.widthË- 
	gx1
;

1942 
	ga
.
	gheight
 = 
°d
::
max
(
a
.
y
 +á.
height
, 
b
.y + b.heightË- 
	gy1
;

1943 
	ga
.
	gx
 = 
x1
;á.
	gy
 = 
y1
;

1944  
	ga
;

1947 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSize_
<_Tp> 
	gRe˘_
<_Tp>::
size
(Ëc⁄° {  
Size_
<
_Tp
>(
width
, 
	gheight
); }

1948 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
	gRe˘_
<_Tp>::
¨ó
(Ëc⁄° {  
width
*
height
; }

1950 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<ty≥«mê
	g_Tp2
> 
ölöe
 
	gRe˘_
<_Tp>::
›î©‹
 
Re˘_
<
_Tp2
>() const

1951 {  
Re˘_
<
_Tp2
>(
ßtuøã_ˇ°
<_Tp2>(
x
), 
	gßtuøã_ˇ°
<
	g_Tp2
>(
	gy
),

1952 
	gßtuøã_ˇ°
<
	g_Tp2
>(
	gwidth
), s©uøã_ˇ°<_Tp2>(
	gheight
)); }

1953 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp>::
›î©‹
 
CvRe˘
() const

1954 {  
cvRe˘
(
ßtuøã_ˇ°
<>(
x
), s©uøã_ˇ°<>(
y
),

1955 
ßtuøã_ˇ°
<>(
width
), s©uøã_ˇ°<>(
height
)); }

1957 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	gRe˘_
<_Tp>::
c⁄èös
(c⁄° 
Poöt_
<
_Tp
>& 
±
) const

1958 {  
x
 <
±
.x &&Öt.x < x + 
width
 && 
y
 <±.y &&Öt.y < y + 
height
; }

1960 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
Re˘_
<
_Tp
>& 
a
, c⁄° 
	gRe˘_
<_Tp>& 
	gb
)

1962  
	ga
.
	gx
 =
b
.
x
 && 
a
.
y
 =b.y &&á.
width
 =b.width &&á.
height
 == b.height;

1965 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
Re˘_
<
_Tp
>& 
a
, c⁄° 
	gRe˘_
<_Tp>& 
	gb
)

1967  
	ga
.
	gx
 !
b
.
x
 || 
a
.
y
 !b.y ||á.
width
 !b.width ||á.
height
 != b.height;

1970 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp> 
	g›î©‹
 + (c⁄° Re˘_<_Tp>& 
	ga
, c⁄° 
	gPoöt_
<_Tp>& 
	gb
)

1972  
	gRe˘_
<
	g_Tp
>–
	ga
.
	gx
 + 
	gb
.x,á.
	gy
 + b.y,á.
	gwidth
,á.
	gheight
 );

1975 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp> 
	g›î©‹
 - (c⁄° Re˘_<_Tp>& 
	ga
, c⁄° 
	gPoöt_
<_Tp>& 
	gb
)

1977  
	gRe˘_
<
	g_Tp
>–
	ga
.
	gx
 - 
	gb
.x,á.
	gy
 - b.y,á.
	gwidth
,á.
	gheight
 );

1980 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp> 
	g›î©‹
 + (c⁄° Re˘_<_Tp>& 
	ga
, c⁄° 
	gSize_
<_Tp>& 
	gb
)

1982  
	gRe˘_
<
	g_Tp
>–
	ga
.
	gx
,á.
	gy
,á.
	gwidth
 + 
	gb
.width,á.
	gheight
 + b.height );

1985 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp> 
	g›î©‹
 & (c⁄° Re˘_<_Tp>& 
	ga
, c⁄° Re˘_<_Tp>& 
	gb
)

1987 
	gRe˘_
<
	g_Tp
> 
	gc
 = 
a
;

1988  
	gc
 &
b
;

1991 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gRe˘_
<_Tp> 
	g›î©‹
 | (c⁄° Re˘_<_Tp>& 
	ga
, c⁄° Re˘_<_Tp>& 
	gb
)

1993 
	gRe˘_
<
	g_Tp
> 
	gc
 = 
a
;

1994  
	gc
 |
b
;

1997 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	gPoöt_
<_Tp>::
öside
–c⁄° 
Re˘_
<
_Tp
>& 
r
 ) const

1999  
r
.
c⁄èös
(*
this
);

2002 
ölöe
 
	gRŸ©edRe˘
::
RŸ©edRe˘
(Ë{ 
™gÀ
 = 0; }

2003 
ölöe
 
	gRŸ©edRe˘
::
RŸ©edRe˘
(c⁄° 
Poöt2f
& 
_˚¡î
, c⁄° 
Size2f
& 
_size
, 
_™gÀ
)

2004 : 
˚¡î
(
_˚¡î
), 
size
(
_size
), 
™gÀ
(
_™gÀ
) {}

2005 
ölöe
 
	gRŸ©edRe˘
::
RŸ©edRe˘
(c⁄° 
CvBox2D
& 
box
)

2006 : 
˚¡î
(
box
.˚¡î), 
size
(box.size), 
™gÀ
(box.angle) {}

2007 
ölöe
 
	gRŸ©edRe˘
::
›î©‹
 
CvBox2D
() const

2009 
CvBox2D
 
box
; 
	gbox
.
	g˚¡î
 = 
˚¡î
; box.
	gsize
 = 
size
; box.
	g™gÀ
 = 
™gÀ
;

2010  
	gbox
;

2015 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp>::
Sˇœr_
()

2016 { 
this
->
vÆ
[0] =Åhis->val[1] =Åhis->val[2] =Åhis->val[3] = 0; }

2018 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp>::
Sˇœr_
(
_Tp
 
v0
, _T∞
v1
, _T∞
v2
, _T∞
v3
)

2019 { 
	gthis
->
	gvÆ
[0] = 
v0
;Åhis->vÆ[1] = 
v1
;Åhis->vÆ[2] = 
v2
;Åhis->vÆ[3] = 
v3
; }

2021 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp>::
Sˇœr_
(c⁄° 
CvSˇœr
& 
s
)

2023 
this
->
vÆ
[0] = 
ßtuøã_ˇ°
<
_Tp
>(
s
.val[0]);

2024 
	gthis
->
	gvÆ
[1] = 
ßtuøã_ˇ°
<
_Tp
>(
s
.
vÆ
[1]);

2025 
	gthis
->
	gvÆ
[2] = 
ßtuøã_ˇ°
<
_Tp
>(
s
.
vÆ
[2]);

2026 
	gthis
->
	gvÆ
[3] = 
ßtuøã_ˇ°
<
_Tp
>(
s
.
vÆ
[3]);

2029 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp>::
Sˇœr_
(
_Tp
 
v0
)

2030 { 
this
->
vÆ
[0] = 
v0
; 
	gthis
->
	gvÆ
[1] =Åhis->val[2] =Åhis->val[3] = 0; }

2032 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp> Sˇœr_<_Tp>::
Æl
(
_Tp
 
v0
)

2033 {  
Sˇœr_
<
_Tp
>(
v0
, 
	gv0
, v0, v0); }

2034 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp>::
›î©‹
 
CvSˇœr
() const

2035 {  
cvSˇœr
(
this
->
vÆ
[0],Åhis->val[1],Åhis->val[2],Åhis->val[3]); }

2037 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<ty≥«mê
	gT2
> 
ölöe
 
	gSˇœr_
<_Tp>::
›î©‹
 
Sˇœr_
<
T2
>() const

2039  
Sˇœr_
<
T2
>(
ßtuøã_ˇ°
<T2>(
this
->
vÆ
[0]),

2040 
	gßtuøã_ˇ°
<
	gT2
>(
	gthis
->
	gvÆ
[1]),

2041 
	gßtuøã_ˇ°
<
	gT2
>(
	gthis
->
	gvÆ
[2]),

2042 
	gßtuøã_ˇ°
<
	gT2
>(
	gthis
->
	gvÆ
[3]));

2045 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp>& 
	g›î©‹
 +(
Sˇœr_
<
_Tp
>& 
a
, c⁄° Sˇœr_<_Tp>& 
	gb
)

2047 
	ga
.
	gvÆ
[0] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[0] + 
b
.val[0]);

2048 
	ga
.
	gvÆ
[1] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[1] + 
b
.val[1]);

2049 
	ga
.
	gvÆ
[2] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[2] + 
b
.val[2]);

2050 
	ga
.
	gvÆ
[3] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[3] + 
b
.val[3]);

2051  
	ga
;

2054 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp>& 
	g›î©‹
 -(
Sˇœr_
<
_Tp
>& 
a
, c⁄° Sˇœr_<_Tp>& 
	gb
)

2056 
	ga
.
	gvÆ
[0] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[0] - 
b
.val[0]);

2057 
	ga
.
	gvÆ
[1] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[1] - 
b
.val[1]);

2058 
	ga
.
	gvÆ
[2] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[2] - 
b
.val[2]);

2059 
	ga
.
	gvÆ
[3] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[3] - 
b
.val[3]);

2060  
	ga
;

2063 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp>& 
	g›î©‹
 *–
Sˇœr_
<
_Tp
>& 
a
, _T∞
	gv
 )

2065 
	ga
.
	gvÆ
[0] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[0] * 
v
);

2066 
	ga
.
	gvÆ
[1] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[1] * 
v
);

2067 
	ga
.
	gvÆ
[2] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[2] * 
v
);

2068 
	ga
.
	gvÆ
[3] = 
ßtuøã_ˇ°
<
_Tp
>(
a
.
vÆ
[3] * 
v
);

2069  
	ga
;

2072 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp> Sˇœr_<_Tp>::
mul
(c⁄° 
Sˇœr_
<
_Tp
>& 
t
, 
sˇÀ
 ) const

2074  
	gSˇœr_
<
	g_Tp
>–
	gßtuøã_ˇ°
<_Tp>(
	gthis
->
	gvÆ
[0]*
	gt
.vÆ[0]*
	gsˇÀ
),

2075 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gthis
->
	gvÆ
[1]*
	gt
.vÆ[1]*
	gsˇÀ
),

2076 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gthis
->
	gvÆ
[2]*
	gt
.vÆ[2]*
	gsˇÀ
),

2077 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gthis
->
	gvÆ
[3]*
	gt
.vÆ[3]*
	gsˇÀ
));

2080 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	g›î©‹
 =–c⁄° 
Sˇœr_
<
_Tp
>& 
a
, c⁄° 
	gSˇœr_
<_Tp>& 
	gb
 )

2082  
	ga
.
	gvÆ
[0] =
b
.
vÆ
[0] && 
a
.val[1] == b.val[1] &&

2083 
a
.
vÆ
[2] =
b
.val[2] &&á.val[3] == b.val[3];

2086 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	g›î©‹
 !–c⁄° 
Sˇœr_
<
_Tp
>& 
a
, c⁄° 
	gSˇœr_
<_Tp>& 
	gb
 )

2088  
	ga
.
	gvÆ
[0] !
b
.
vÆ
[0] || 
a
.val[1] != b.val[1] ||

2089 
a
.
vÆ
[2] !
b
.val[2] ||á.val[3] != b.val[3];

2092 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp> 
	g›î©‹
 + (c⁄° Sˇœr_<_Tp>& 
	ga
, c⁄° Sˇœr_<_Tp>& 
	gb
)

2094  
	gSˇœr_
<
	g_Tp
>(
	gßtuøã_ˇ°
<_Tp>(
	ga
.
	gvÆ
[0] + 
	gb
.val[0]),

2095 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gvÆ
[1] + 
	gb
.val[1]),

2096 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gvÆ
[2] + 
	gb
.val[2]),

2097 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gvÆ
[3] + 
	gb
.val[3]));

2100 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp> 
	g›î©‹
 - (c⁄° Sˇœr_<_Tp>& 
	ga
, c⁄° Sˇœr_<_Tp>& 
	gb
)

2102  
	gSˇœr_
<
	g_Tp
>(
	gßtuøã_ˇ°
<_Tp>(
	ga
.
	gvÆ
[0] - 
	gb
.val[0]),

2103 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gvÆ
[1] - 
	gb
.val[1]),

2104 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gvÆ
[2] - 
	gb
.val[2]),

2105 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gvÆ
[3] - 
	gb
.val[3]));

2108 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp> 
	g›î©‹
 * (c⁄° Sˇœr_<_Tp>& 
	ga
, 
_Tp
 
	gÆpha
)

2110  
	gSˇœr_
<
	g_Tp
>(
	gßtuøã_ˇ°
<_Tp>(
	ga
.
	gvÆ
[0] * 
	gÆpha
),

2111 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gvÆ
[1] * 
	gÆpha
),

2112 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gvÆ
[2] * 
	gÆpha
),

2113 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gvÆ
[3] * 
	gÆpha
));

2116 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp> 
	g›î©‹
 * (
_Tp
 
	gÆpha
, c⁄° Sˇœr_<_Tp>& 
	ga
)

2118  
a
*
	gÆpha
;

2121 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp> 
	g›î©‹
 - (c⁄° Sˇœr_<_Tp>& 
	ga
)

2123  
	gSˇœr_
<
	g_Tp
>(
	gßtuøã_ˇ°
<_Tp>(-
	ga
.
	gvÆ
[0]), saturate_cast<_Tp>(-a.val[1]),

2124 
	gßtuøã_ˇ°
<
	g_Tp
>(-
	ga
.
	gvÆ
[2]), saturate_cast<_Tp>(-a.val[3]));

2128 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp>

2129 
	g›î©‹
 * (c⁄° 
	gSˇœr_
<
	g_Tp
>& 
	ga
, c⁄° Sˇœr_<_Tp>& 
	gb
)

2131  
	gSˇœr_
<
	g_Tp
>(
	gßtuøã_ˇ°
<_Tp>(
	ga
[0]*
	gb
[0] -á[1]*b[1] -á[2]*b[2] -á[3]*b[3]),

2132 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
[0]*
	gb
[1] +á[1]*b[0] +á[2]*b[3] -á[3]*b[2]),

2133 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
[0]*
	gb
[2] -á[1]*b[3] +á[2]*b[0] +á[3]*b[1]),

2134 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
[0]*
	gb
[3] +á[1]*b[2] -á[2]*b[1] +á[3]*b[0]));

2137 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp>&

2138 
	g›î©‹
 *(
Sˇœr_
<
_Tp
>& 
a
, c⁄° 
	gSˇœr_
<
	g_Tp
>& 
	gb
)

2140 
	ga
 = 
a
*
b
;

2141  
	ga
;

2144 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSˇœr_
<_Tp> Sˇœr_<_Tp>::
c⁄j
() const

2146  
Sˇœr_
<
_Tp
>(
ßtuøã_ˇ°
<_Tp>(
this
->
vÆ
[0]),

2147 
	gßtuøã_ˇ°
<
	g_Tp
>(-
	gthis
->
	gvÆ
[1]),

2148 
	gßtuøã_ˇ°
<
	g_Tp
>(-
	gthis
->
	gvÆ
[2]),

2149 
	gßtuøã_ˇ°
<
	g_Tp
>(-
	gthis
->
	gvÆ
[3]));

2152 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	gSˇœr_
<_Tp>::
isRól
() const

2154  
this
->
vÆ
[1] == 0 &&Åhis->val[2] == 0 &&Åhis->val[3] == 0;

2157 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


2158 
	gSˇœr_
<
	g_Tp
> 
	g›î©‹
 / (c⁄° Sˇœr_<_Tp>& 
	ga
, 
_Tp
 
	gÆpha
)

2160  
	gSˇœr_
<
	g_Tp
>(
	gßtuøã_ˇ°
<_Tp>(
	ga
.
	gvÆ
[0] / 
	gÆpha
),

2161 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gvÆ
[1] / 
	gÆpha
),

2162 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gvÆ
[2] / 
	gÆpha
),

2163 
	gßtuøã_ˇ°
<
	g_Tp
>(
	ga
.
	gvÆ
[3] / 
	gÆpha
));

2166 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


2167 
	gSˇœr_
<> 
	g›î©‹
 / (c⁄° Sˇœr_<>& 
	ga
, 
	gÆpha
)

2169 
	gs
 = 1/
Æpha
;

2170  
	gSˇœr_
<>(
	ga
.
	gvÆ
[0]*
	gs
,á.val[1]*s,á.val[2]*s,á.val[3]*s);

2173 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


2174 
	gSˇœr_
<> 
	g›î©‹
 / (c⁄° Sˇœr_<>& 
	ga
, 
	gÆpha
)

2176 
	gs
 = 1/
Æpha
;

2177  
	gSˇœr_
<>(
	ga
.
	gvÆ
[0]*
	gs
,á.val[1]*s,á.val[2]*s,á.val[3]*s);

2180 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


2181 
	gSˇœr_
<
	g_Tp
>& 
	g›î©‹
 /(
Sˇœr_
<
_Tp
>& 
a
, _T∞
	gÆpha
)

2183 
	ga
 = 
a
/
Æpha
;

2184  
	ga
;

2187 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


2188 
	gSˇœr_
<
	g_Tp
> 
	g›î©‹
 / (
_Tp
 
	ga
, c⁄° Sˇœr_<_Tp>& 
	gb
)

2190 
_Tp
 
	gs
 = 
a
/(
b
[0]*b[0] + b[1]*b[1] + b[2]*b[2] + b[3]*b[3]);

2191  
	gb
.
c⁄j
()*
	gs
;

2194 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


2195 
	gSˇœr_
<
	g_Tp
> 
	g›î©‹
 / (c⁄° Sˇœr_<_Tp>& 
	ga
, c⁄° Sˇœr_<_Tp>& 
	gb
)

2197  
	ga
*((
	g_Tp
)1/
	gb
);

2200 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


2201 
	gSˇœr_
<
	g_Tp
>& 
	g›î©‹
 /(
Sˇœr_
<
_Tp
>& 
a
, c⁄° Sˇœr_<_Tp>& 
	gb
)

2203 
	ga
 = 
a
/
b
;

2204  
	ga
;

2209 
ölöe
 
	gR™ge
::
R™ge
(Ë: 
°¨t
(0), 
íd
(0) {}

2210 
ölöe
 
	gR™ge
::
R™ge
(
_°¨t
, 
_íd
Ë: 
°¨t
(_°¨t), 
íd
(_end) {}

2211 
ölöe
 
	gR™ge
::
R™ge
(c⁄° 
CvSli˚
& 
¶i˚
Ë: 
°¨t
(¶i˚.
°¨t_ödex
), 
íd
(¶i˚.
íd_ödex
)

2213 if–
	g°¨t
 =0 && 
íd
 =
CV_WHOLE_SEQ_END_INDEX
 )

2214 *
this
 = 
R™ge
::
Æl
();

2217 
ölöe
 
	gR™ge
::
size
(Ëc⁄° {  
íd
 - 
°¨t
; }

2218 
ölöe
 
boﬁ
 
	gR™ge
::
em±y
(Ëc⁄° {  
°¨t
 =
íd
; }

2219 
ölöe
 
R™ge
 
	gR™ge
::
Æl
(Ë{  R™ge(
INT_MIN
, 
INT_MAX
); }

2221 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
R™ge
& 
r1
, c⁄° 
	gR™ge
& 
	gr2
)

2222 {  
	gr1
.
	g°¨t
 =
r2
.
°¨t
 && 
r1
.
íd
 ==Ñ2.end; }

2224 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
R™ge
& 
r1
, c⁄° 
	gR™ge
& 
	gr2
)

2225 {  !(
	gr1
 =
r2
); }

2227 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
	gR™ge
& 
	gr
)

2228 {  
	gr
.
	g°¨t
 =
r
.
íd
; }

2230 
ölöe
 
R™ge
 
	g›î©‹
 & (c⁄° 
	gR™ge
& 
	gr1
, c⁄° R™ge& 
	gr2
)

2232 
R™ge
 
r
(
°d
::
max
(
r1
.
°¨t
, 
r2
.°¨t), std::
mö
‘1.
íd
,Ñ2.end));

2233 
	gr
.
	gíd
 = 
°d
::
max
(
r
.
íd
,Ñ.
°¨t
);

2234  
	gr
;

2237 
ölöe
 
	gR™ge
& 
	g›î©‹
 &(
R™ge
& 
r1
, c⁄° R™ge& 
	gr2
)

2239 
	gr1
 = 
r1
 & 
r2
;

2240  
	gr1
;

2243 
ölöe
 
R™ge
 
	g›î©‹
 + (c⁄° 
	gR™ge
& 
	gr1
, 
	gdñè
)

2245  
R™ge
(
r1
.
°¨t
 + 
dñè
,Ñ1.
íd
 + delta);

2248 
ölöe
 
R™ge
 
	g›î©‹
 + (
	gdñè
, c⁄° 
	gR™ge
& 
	gr1
)

2250  
R™ge
(
r1
.
°¨t
 + 
dñè
,Ñ1.
íd
 + delta);

2253 
ölöe
 
R™ge
 
	g›î©‹
 - (c⁄° 
	gR™ge
& 
	gr1
, 
	gdñè
)

2255  
	gr1
 + (-
	gdñè
);

2258 
ölöe
 
	gR™ge
::
›î©‹
 
CvSli˚
() const

2259 {  *
this
 !
R™ge
::
Æl
(Ë? 
cvSli˚
(
°¨t
, 
íd
Ë: 
CV_WHOLE_SEQ
; }

2270 
	gãm∂©e
 <
ty≥«me
 
	g_Tp
> cœs†
	cVe˘‹


2272 
	gpublic
:

2273 
_Tp
 
	tvÆue_ty≥
;

2274 
_Tp
* 
	tôî©‹
;

2275 c⁄° 
	t_Tp
* 
	tc⁄°_ôî©‹
;

2276 
	g_Tp
& 
	tª„ªn˚
;

2277 c⁄° 
	t_Tp
& 
	tc⁄°_ª„ªn˚
;

2279 
	sHdr


2281 
Hdr
(Ë: 
d©a
(0), 
d©a°¨t
(0), 
ªfcou¡
(0), 
size
(0), 
ˇ∑côy
(0) {};

2282 
_Tp
* 
	gd©a
;

2283 
_Tp
* 
	gd©a°¨t
;

2284 
_Atomic_w‹d
* 
	gªfcou¡
;

2285 
size_t
 
	gsize
;

2286 
size_t
 
	gˇ∑côy
;

2289 
Ve˘‹
() {}

2290 
Ve˘‹
(
size_t
 
_size
Ë{ 
ªsize
(_size); }

2291 
Ve˘‹
(
size_t
 
_size
, c⁄° 
_Tp
& 
vÆ
)

2293 
ªsize
(
_size
);

2294 
size_t
 
	gi
 = 0; i < 
	g_size
; i++)

2295 
	ghdr
.
	gd©a
[
i
] = 
vÆ
;

2297 
Ve˘‹
(
_Tp
* 
_d©a
, 
size_t
 
_size
, 
boﬁ
 
_c›yD©a
=
Ál£
)

2298 { 
£t
(
_d©a
, 
_size
, 
_c›yD©a
); }

2300 
	gãm∂©e
<
	gn
> 
Ve˘‹
(c⁄° 
Vec
<
_Tp
, 
n
>& 
vec
)

2301 { 
£t
((
_Tp
*)&
vec
.
vÆ
[0], 
n
, 
åue
); }

2303 
Ve˘‹
(c⁄° 
°d
::
ve˘‹
<
_Tp
>& 
vec
, 
boﬁ
 
_c›yD©a
=
Ál£
)

2304 { 
£t
(!
vec
.
em±y
(Ë? (
_Tp
*)&vec[0] : 0, vec.
size
(), 
_c›yD©a
); }

2306 
Ve˘‹
(c⁄° Ve˘‹& 
d
Ë{ *
	gthis
 = d; }

2308 
Ve˘‹
(c⁄° Ve˘‹& 
d
, c⁄° 
R™ge
& 
r_
)

2310 
R™ge
 
	gr
 = 
r_
 =R™ge::
Æl
(Ë? R™ge(0, 
d
.
size
()) :Ñ_;

2313 if–
	gr
.
size
(Ë> 0 &&Ñ.
	g°¨t
 >0 && 
r
.
íd
 <
d
.size() )

2315 if–
d
.
hdr
.
ªfcou¡
 )

2316 
CV_XADD
(
d
.
hdr
.
ªfcou¡
, 1);

2317 
	ghdr
.
	gªfcou¡
 = 
d
.
hdr
.
ªfcou¡
;

2318 
	ghdr
.
	gd©a°¨t
 = 
d
.
hdr
.
d©a°¨t
;

2319 
	ghdr
.
	gd©a
 = 
d
.
hdr
.
d©a
 + 
r
.
°¨t
;

2320 
	ghdr
.
	gˇ∑côy
 = 
hdr
.
size
 = 
r
.size();

2324 
	gVe˘‹
<
	g_Tp
>& 
	g›î©‹
 = (c⁄° 
Ve˘‹
& 
d
)

2326 if–
this
 !&
d
 )

2328 if–
d
.
hdr
.
ªfcou¡
 )

2329 
CV_XADD
(
d
.
hdr
.
ªfcou¡
, 1);

2330 
ªÀa£
();

2331 
	ghdr
 = 
d
.
hdr
;

2333  *
	gthis
;

2336 ~
Ve˘‹
(Ë{ 
ªÀa£
(); }

2338 
	gVe˘‹
<
	g_Tp
> 
˛⁄e
() const

2339 {  
	ghdr
.
	gd©a
 ? 
	gVe˘‹
<
	g_Tp
>(hdr.d©a, hdr.
	gsize
, 
	gåue
Ë: 
Ve˘‹
<
_Tp
>(); }

2341 
c›yTo
(
Ve˘‹
<
_Tp
>& 
vec
) const

2343 
size_t
 
	gi
, 
	gsz
 = 
size
();

2344 
	gvec
.
ªsize
(
sz
);

2345 c⁄° 
_Tp
* 
	g§c
 = 
hdr
.
d©a
;

2346 
_Tp
* 
	gd°
 = 
vec
.
hdr
.
d©a
;

2347  
	gi
 = 0; i < 
	gsz
; i++ )

2348 
	gd°
[
i
] = 
§c
[i];

2351 
c›yTo
(
°d
::
ve˘‹
<
_Tp
>& 
vec
) const

2353 
size_t
 
i
, 
	gsz
 = 
size
();

2354 
	gvec
.
ªsize
(
sz
);

2355 c⁄° 
_Tp
* 
	g§c
 = 
hdr
.
d©a
;

2356 
_Tp
* 
	gd°
 = 
sz
 ? &
vec
[0] : 0;

2357  
	gi
 = 0; i < 
	gsz
; i++ )

2358 
	gd°
[
i
] = 
§c
[i];

2361 
›î©‹
 
CvM©
() const

2362 {  
cvM©
(()
size
(), 1, 
ty≥
(), (*)
hdr
.
d©a
); }

2364 
	g_Tp
& 
	g›î©‹
 [] (
size_t
 
	gi
Ë{ 
CV_DbgAs£π
–
i
 < 
size
(Ë);  
	ghdr
.
	gd©a
[i]; }

2365 c⁄° 
	g_Tp
& 
	g›î©‹
 [] (
size_t
 
	gi
Ëc⁄° { 
CV_DbgAs£π
–
i
 < 
size
(Ë);  
	ghdr
.
	gd©a
[i]; }

2366 
Ve˘‹
 
›î©‹
(Ë(c⁄° 
	gR™ge
& 
	gr
Ëc⁄° {  Ve˘‹(*
this
, 
r
); }

2367 
	g_Tp
& 
back
(Ë{ 
CV_DbgAs£π
(!
em±y
());  
	ghdr
.
	gd©a
[
hdr
.
size
-1]; }

2368 c⁄° 
	g_Tp
& 
back
(Ëc⁄° { 
CV_DbgAs£π
(!
em±y
());  
	ghdr
.
	gd©a
[
hdr
.
size
-1]; }

2369 
	g_Tp
& 
‰⁄t
(Ë{ 
CV_DbgAs£π
(!
em±y
());  
	ghdr
.
	gd©a
[0]; }

2370 c⁄° 
	g_Tp
& 
‰⁄t
(Ëc⁄° { 
CV_DbgAs£π
(!
em±y
());  
	ghdr
.
	gd©a
[0]; }

2372 
_Tp
* 
begö
(Ë{  
	ghdr
.
	gd©a
; }

2373 
_Tp
* 
íd
(Ë{  
	ghdr
.
	gd©a
 + hdr.
	gsize
; }

2374 c⁄° 
_Tp
* 
begö
(Ëc⁄° {  
	ghdr
.
	gd©a
; }

2375 c⁄° 
_Tp
* 
íd
(Ëc⁄° {  
	ghdr
.
	gd©a
 + hdr.
	gsize
; }

2377 
addªf
(Ë{ if–
	ghdr
.
	gªfcou¡
 ) 
CV_XADD
(
hdr
.
ªfcou¡
, 1); }

2378 
ªÀa£
()

2380 if–
	ghdr
.
	gªfcou¡
 && 
CV_XADD
(
hdr
.
ªfcou¡
, -1) == 1 )

2382 
dñëe
[] 
hdr
.
d©a°¨t
;

2383 
dñëe
 
	ghdr
.
	gªfcou¡
;

2385 
	ghdr
 = 
Hdr
();

2388 
£t
(
_Tp
* 
_d©a
, 
size_t
 
_size
, 
boﬁ
 
_c›yD©a
=
Ál£
)

2390 if–!
_c›yD©a
 )

2392 
ªÀa£
();

2393 
	ghdr
.
	gd©a
 = 
hdr
.
d©a°¨t
 = 
_d©a
;

2394 
	ghdr
.
	gsize
 = 
hdr
.
ˇ∑côy
 = 
_size
;

2395 
	ghdr
.
	gªfcou¡
 = 0;

2399 
ª£rve
(
_size
);

2400  
size_t
 
	gi
 = 0; i < 
	g_size
; i++ )

2401 
	ghdr
.
	gd©a
[
i
] = 
_d©a
[i];

2402 
	ghdr
.
	gsize
 = 
_size
;

2406 
ª£rve
(
size_t
 
√wC≠acôy
)

2408 
_Tp
* 
	g√wD©a
;

2409 * 
	g√wRefcou¡
;

2410 
size_t
 
	gi
, 
	gﬁdSize
 = 
hdr
.
size
;

2411 if–(!
	ghdr
.
	gªfcou¡
 || *hdr.ªfcou¡ =1Ë&& 
hdr
.
ˇ∑côy
 >
√wC≠acôy
 )

2413 
	g√wC≠acôy
 = 
°d
::
max
(
√wC≠acôy
, 
ﬁdSize
);

2414 
	g√wD©a
 = 
√w
 
_Tp
[
√wC≠acôy
];

2415 
	g√wRefcou¡
 = 
√w
 (1);

2416  
	gi
 = 0; i < 
	gﬁdSize
; i++ )

2417 
	g√wD©a
[
i
] = 
hdr
.
d©a
[i];

2418 
ªÀa£
();

2419 
	ghdr
.
	gd©a
 = 
hdr
.
d©a°¨t
 = 
√wD©a
;

2420 
	ghdr
.
	gˇ∑côy
 = 
√wC≠acôy
;

2421 
	ghdr
.
	gsize
 = 
ﬁdSize
;

2422 
	ghdr
.
	gªfcou¡
 = 
√wRefcou¡
;

2425 
ªsize
(
size_t
 
√wSize
)

2427 
size_t
 
	gi
;

2428 
	g√wSize
 = 
°d
::
max
(
√wSize
, (
size_t
)0);

2429 if–(!
	ghdr
.
	gªfcou¡
 || *hdr.ªfcou¡ =1Ë&& 
hdr
.
size
 =
√wSize
 )

2431 if–
	g√wSize
 > 
	ghdr
.
	gˇ∑côy
 )

2432 
ª£rve
(
°d
::
max
(
√wSize
, std::max((
size_t
)4, 
hdr
.
ˇ∑côy
*2)));

2433  
	gi
 = 
hdr
.
size
; i < 
	g√wSize
; i++ )

2434 
	ghdr
.
	gd©a
[
i
] = 
_Tp
();

2435 
	ghdr
.
	gsize
 = 
√wSize
;

2438 
	gVe˘‹
<
	g_Tp
>& 
push_back
(c⁄° 
_Tp
& 
ñem
)

2440 if–
	ghdr
.
	gsize
 =
hdr
.
ˇ∑côy
 )

2441 
ª£rve
–
°d
::
max
((
size_t
)4, 
hdr
.
ˇ∑côy
*2) );

2442 
	ghdr
.
	gd©a
[
hdr
.
size
++] = 
ñem
;

2443  *
	gthis
;

2446 
	gVe˘‹
<
	g_Tp
>& 
p›_back
()

2448 if–
	ghdr
.
	gsize
 > 0 )

2449 --
	ghdr
.
	gsize
;

2450  *
	gthis
;

2453 
size_t
 
size
(Ëc⁄° {  
	ghdr
.
	gsize
; }

2454 
size_t
 
ˇ∑côy
(Ëc⁄° {  
	ghdr
.
	gˇ∑côy
; }

2455 
boﬁ
 
em±y
(Ëc⁄° {  
	ghdr
.
	gsize
 == 0; }

2456 
˛ór
(Ë{ 
ªsize
(0); }

2457 
ty≥
(Ëc⁄° {  
	gD©aTy≥
<
	g_Tp
>::type; }

2459 
	g¥Ÿe˘ed
:

2460 
Hdr
 
hdr
;

2464 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
Åy≥«mê
	gD©aTy≥
<_Tp>::
w‹k_ty≥


2465 
dŸ
(c⁄° 
Ve˘‹
<
_Tp
>& 
v1
, c⁄° Ve˘‹<_Tp>& 
v2
)

2467 
ty≥«me
 
	tD©aTy≥
<
	t_Tp
>::
	tw‹k_ty≥
 
	t_Tw
;

2468 
size_t
 
	gi
 = 0, 
	gn
 = 
v1
.
size
();

2469 
as£π
(
v1
.
size
(Ë=
v2
.size());

2471 
_Tw
 
	gs
 = 0;

2472 c⁄° 
_Tp
 *
	g±r1
 = &
v1
[0], *
	g±r2
 = &
v2
[0];

2473  ; 
	gi
 < 
	gn
; i++ )

2474 
	gs
 +(
_Tw
)
±r1
[
i
]*
±r2
[i];

2476  
	gs
;

2480 
ölöe
 
	gRNG
::
	$RNG
(Ë{ 
°©e
 = 0xffffffff; 
	}
}

2481 
ölöe
 
	gRNG
::
	$RNG
(
uöt64
 
_°©e
Ë{ 
°©e
 = _°©ê? _°©ê: 0xffffffff; 
	}
}

2482 
ölöe
 
	gRNG
::
	$√xt
()

2484 
°©e
 = (
uöt64
)()°©e*
CV_RNG_COEFF
 + ()(state >> 32);

2485  ()
°©e
;

2486 
	}
}

2488 
ölöe
 
	gRNG
::
›î©‹
 
	$uch¨
(Ë{  (
uch¨
)
	`√xt
(); 
	}
}

2489 
ölöe
 
	gRNG
::
›î©‹
 
	$sch¨
(Ë{  (
sch¨
)
	`√xt
(); 
	}
}

2490 
ölöe
 
	gRNG
::
›î©‹
 
	$ush‹t
(Ë{  (
ush‹t
)
	`√xt
(); 
	}
}

2491 
ölöe
 
	gRNG
::
›î©‹
 (Ë{  ()
	`√xt
(); 
	}
}

2492 
ölöe
 
	gRNG
::
›î©‹
 (Ë{  
	`√xt
(); 
	}
}

2493 
ölöe
 
	gRNG
::
	$›î©‹
 ()(
N
Ë{ ()
	`unif‹m
(0,N);
	}
}

2494 
ölöe
 
	gRNG
::
	$›î©‹
 ()(Ë{ 
	`√xt
();
	}
}

2495 
ölöe
 
	gRNG
::
›î©‹
 (Ë{  ()
	`√xt
(); 
	}
}

2497 
ölöe
 
	gRNG
::
›î©‹
 (Ë{  
	`√xt
()*2.3283064365386962890625e-10f; 
	}
}

2498 
ölöe
 
	gRNG
::
›î©‹
 ()

2500 
t
 = 
	`√xt
();

2501  (((
uöt64
)
t
 << 32Ë| 
	`√xt
())*5.4210108624275221700372640043497e-20;

2502 
	}
}

2503 
ölöe
 
	gRNG
::
	$unif‹m
(
a
, 
b
Ë{ á =b ?á : ()(
	`√xt
()%(b -áË+á); 
	}
}

2504 
ölöe
 
	gRNG
::
	$unif‹m
(
a
, 
b
Ë{  (()*
this
)*(b -áË+á; 
	}
}

2505 
ölöe
 
	gRNG
::
	$unif‹m
(
a
, 
b
Ë{  (()*
this
)*(b -áË+á; 
	}
}

2507 
ölöe
 
	gTîmCrôîü
::
	$TîmCrôîü
(Ë: 
	`ty≥
(0), 
	`maxCou¡
(0), 
	$ïsû⁄
(0Ë{
	}
}

2508 
ölöe
 
	gTîmCrôîü
::
	$TîmCrôîü
(
_ty≥
, 
_maxCou¡
, 
_ïsû⁄
)

2509 : 
	`ty≥
(
_ty≥
), 
	`maxCou¡
(
_maxCou¡
), 
	$ïsû⁄
(
_ïsû⁄
Ë{
	}
}

2510 
ölöe
 
	gTîmCrôîü
::
	$TîmCrôîü
(c⁄° 
CvTîmCrôîü
& 
¸ôîü
)

2511 : 
	`ty≥
(
¸ôîü
.
ty≥
), 
	`maxCou¡
(¸ôîü.
max_ôî
), 
	$ïsû⁄
(
¸ôîü
.
ïsû⁄
Ë{
	}
}

2512 
ölöe
 
	gTîmCrôîü
::
›î©‹
 
	$CvTîmCrôîü
() const

2513 {  
	`cvTîmCrôîü
(
ty≥
, 
maxCou¡
, 
ïsû⁄
); 
	}
}

2515 
ölöe
 
uch¨
* 
	gLöeIãøt‹
::
›î©‹
 *(Ë{  
±r
; }

2516 
ölöe
 
	gLöeIãøt‹
& LöeIãøt‹::
›î©‹
 ++()

2518 
mask
 = 
îr
 < 0 ? -1 : 0;

2519 
	gîr
 +
möusDñè
 + (
∂usDñè
 & 
mask
);

2520 
	g±r
 +
möusSãp
 + (
∂usSãp
 & 
mask
);

2521  *
	gthis
;

2523 
ölöe
 
LöeIãøt‹
 
	gLöeIãøt‹
::
›î©‹
 ++()

2525 
LöeIãøt‹
 
ô
 = *
this
;

2526 ++(*
	gthis
);

2527  
	gô
;

2529 
ölöe
 
Poöt
 
	gLöeIãøt‹
::
	$pos
() const

2531 
Poöt
 
p
;

2532 
p
.
y
 = ()((
±r
 - 
±r0
)/
°ï
);

2533 
p
.
x
 = ()(((
±r
 - 
±r0
Ë-Ö.
y
*
°ï
)/
ñemSize
);

2534  
p
;

2535 
	}
}

2539 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
size_t
 
	gfixed_size
> 
ölöe
 
	gAutoBuf„r
<_Tp, fixed_size>::
	$AutoBuf„r
()

2541 
±r
 = 
buf
;

2542 
size
 = 
fixed_size
;

2543 
	}
}

2545 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
size_t
 
	gfixed_size
> 
ölöe
 
	gAutoBuf„r
<_Tp, fixed_size>::
	$AutoBuf„r
(
size_t
 
_size
)

2547 
±r
 = 
buf
;

2548 
size
 = 
fixed_size
;

2549 
	`Æloˇã
(
_size
);

2550 
	}
}

2552 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
size_t
 
	gfixed_size
> 
ölöe
 
	gAutoBuf„r
<_Tp, fixed_size>::~
	$AutoBuf„r
()

2553 { 
	`dóŒoˇã
(); 
	}
}

2555 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
size_t
 
	gfixed_size
> 
ölöe
 
	gAutoBuf„r
<_Tp, fixed_size>::
	$Æloˇã
(
size_t
 
_size
)

2557 if(
_size
 <
size
)

2559 
	`dóŒoˇã
();

2560 if(
_size
 > 
fixed_size
)

2562 
±r
 = 
cv
::
Æloˇã
<
_Tp
>(
_size
);

2563 
size
 = 
_size
;

2565 
	}
}

2567 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
size_t
 
	gfixed_size
> 
ölöe
 
	gAutoBuf„r
<_Tp, fixed_size>::
	$dóŒoˇã
()

2569 if–
±r
 !
buf
 )

2571 
cv
::
dóŒoˇã
<
_Tp
>(
±r
, 
size
);

2572 
±r
 = 
buf
;

2573 
size
 = 
fixed_size
;

2575 
	}
}

2577 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
size_t
 
	gfixed_size
> 
ölöe
 
	gAutoBuf„r
<_Tp, fixed_size>::
›î©‹
 
_Tp
* ()

2578 {  
±r
; }

2580 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
size_t
 
	gfixed_size
> 
ölöe
 
	gAutoBuf„r
<_Tp, fixed_size>::
›î©‹
 c⁄° 
_Tp
* () const

2581 {  
±r
; }

2586 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPå
<_Tp>::
	$På
(Ë: 
	`obj
(0), 
	$ªfcou¡
(0Ë{
	}
}

2587 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPå
<_Tp>::
	$På
(
_Tp
* 
_obj
Ë: 
	$obj
(
_obj
)

2589 if(
obj
)

2591 
ªfcou¡
 = (
_Atomic_w‹d
*)
	`Á°MÆloc
((*refcount));

2592 *
ªfcou¡
 = 1;

2595 
ªfcou¡
 = 0;

2596 
	}
}

2598 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPå
<_Tp>::
	$addªf
()

2599 { if–
ªfcou¡
 ) 
	`CV_XADD
‘efcou¡, 1); 
	}
}

2601 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPå
<_Tp>::
	$ªÀa£
()

2603 if–
ªfcou¡
 && 
	`CV_XADD
(refcount, -1) == 1 )

2605 
	`dñëe_obj
();

2606 
	`Á°Fªe
(
ªfcou¡
);

2608 
ªfcou¡
 = 0;

2609 
obj
 = 0;

2610 
	}
}

2612 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPå
<_Tp>::
	$dñëe_obj
()

2614 if–
obj
 ) 
dñëe
 obj;

2615 
	}
}

2617 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPå
<_Tp>::~
	$På
(Ë{ 
	`ªÀa£
(); 
	}
}

2619 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPå
<_Tp>::
På
(c⁄° På<
_Tp
>& 
_±r
)

2621 
obj
 = 
_±r
.obj;

2622 
	gªfcou¡
 = 
_±r
.
ªfcou¡
;

2623 
addªf
();

2626 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPå
<_Tp>& På<_Tp>::
›î©‹
 = (c⁄° 
På
<
_Tp
>& 
_±r
)

2628 
_Atomic_w‹d
* 
_ªfcou¡
 = 
_±r
.
ªfcou¡
;

2629 if–
	g_ªfcou¡
 )

2630 
CV_XADD
(
_ªfcou¡
, 1);

2631 
ªÀa£
();

2632 
	gobj
 = 
_±r
.
obj
;

2633 
	gªfcou¡
 = 
_ªfcou¡
;

2634  *
	gthis
;

2637 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
* 
	gPå
<_Tp>::
›î©‹
 -> (Ë{  
obj
; }

2638 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° 
_Tp
* 
	gPå
<_Tp>::
›î©‹
 -> (Ëc⁄° {  
obj
; }

2640 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPå
<_Tp>::
›î©‹
 
_Tp
* (Ë{  
obj
; }

2641 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPå
<_Tp>::
›î©‹
 c⁄° 
_Tp
*(Ëc⁄° {  
obj
; }

2643 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	gPå
<_Tp>::
	$em±y
(Ëc⁄° {  
obj
 =0; 
	}
}

2645 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<ty≥«mê
	g_Tp2
> 
	gPå
<_Tp>::
På
(c⁄° På<
_Tp2
>& 
p
)

2646 : 
obj
(0), 
	$ªfcou¡
(0)

2648 i‡(
p
.
	`em±y
())

2651 
_Tp
* 
p_ˇ°ed
 = 
dy«mic_ˇ°
<_Tp*>(
p
.
obj
);

2652 i‡(!
p_ˇ°ed
)

2655 
obj
 = 
p_ˇ°ed
;

2656 
ªfcou¡
 = 
p
.refcount;

2657 
	`addªf
();

2658 
	}
}

2660 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<ty≥«mê
	g_Tp2
> 
ölöe
 
	gPå
<_Tp2> På<_Tp>::
	$±r
()

2662 
På
<
_Tp2
> 
p
;

2663 if–!
obj
 )

2664  
p
;

2666 
_Tp2
* 
obj_ˇ°ed
 = 
dy«mic_ˇ°
<_Tp2*>(
obj
);

2667 i‡(!
obj_ˇ°ed
)

2668  
p
;

2670 if–
ªfcou¡
 )

2671 
	`CV_XADD
(
ªfcou¡
, 1);

2673 
p
.
obj
 = 
obj_ˇ°ed
;

2674 
p
.
ªfcou¡
 =Ñefcount;

2675  
p
;

2676 
	}
}

2678 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>Åem∂©e<ty≥«mê
	g_Tp2
> 
ölöe
 c⁄° 
	gPå
<_Tp2> På<_Tp>::
	$±r
() const

2680 
På
<
_Tp2
> 
p
;

2681 if–!
obj
 )

2682  
p
;

2684 
_Tp2
* 
obj_ˇ°ed
 = 
dy«mic_ˇ°
<_Tp2*>(
obj
);

2685 i‡(!
obj_ˇ°ed
)

2686  
p
;

2688 if–
ªfcou¡
 )

2689 
	`CV_XADD
(
ªfcou¡
, 1);

2691 
p
.
obj
 = 
obj_ˇ°ed
;

2692 
p
.
ªfcou¡
 =Ñefcount;

2693  
p
;

2694 
	}
}

2698 
	gãm∂©e
<> 
CV_EXPORTS
 
	gPå
<
	gCvM©
>::
dñëe_obj
();

2699 
	gãm∂©e
<> 
CV_EXPORTS
 
	gPå
<
	gI∂Image
>::
dñëe_obj
();

2700 
	gãm∂©e
<> 
CV_EXPORTS
 
	gPå
<
	gCvM©ND
>::
dñëe_obj
();

2701 
	gãm∂©e
<> 
CV_EXPORTS
 
	gPå
<
	gCvS∑r£M©
>::
dñëe_obj
();

2702 
	gãm∂©e
<> 
CV_EXPORTS
 
	gPå
<
	gCvMemSt‹age
>::
dñëe_obj
();

2703 
	gãm∂©e
<> 
CV_EXPORTS
 
	gPå
<
	gCvFûeSt‹age
>::
dñëe_obj
();

2707 
CV_EXPORTS_W
 
wrôe
–
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, 
vÆue
 );

2708 
CV_EXPORTS_W
 
wrôe
–
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, 
vÆue
 );

2709 
CV_EXPORTS_W
 
wrôe
–
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, 
vÆue
 );

2710 
CV_EXPORTS_W
 
wrôe
–
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, c⁄° såög& 
vÆue
 );

2712 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	$wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
_Tp
& 
vÆue
)

2713 { 
	`wrôe
(
fs
, 
	`°rög
(), 
vÆue
); 
	}
}

2715 
CV_EXPORTS
 
wrôeSˇœr
–
FûeSt‹age
& 
fs
, 
vÆue
 );

2716 
CV_EXPORTS
 
wrôeSˇœr
–
FûeSt‹age
& 
fs
, 
vÆue
 );

2717 
CV_EXPORTS
 
wrôeSˇœr
–
FûeSt‹age
& 
fs
, 
vÆue
 );

2718 
CV_EXPORTS
 
wrôeSˇœr
–
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
vÆue
 );

2720 
	gãm∂©e
<> 
ölöe
 
	$wrôe
–
FûeSt‹age
& 
fs
, c⁄° & 
vÆue
 )

2722 
	`wrôeSˇœr
(
fs
, 
vÆue
);

2723 
	}
}

2725 
	gãm∂©e
<> 
ölöe
 
	$wrôe
–
FûeSt‹age
& 
fs
, c⁄° & 
vÆue
 )

2727 
	`wrôeSˇœr
(
fs
, 
vÆue
);

2728 
	}
}

2730 
	gãm∂©e
<> 
ölöe
 
	$wrôe
–
FûeSt‹age
& 
fs
, c⁄° & 
vÆue
 )

2732 
	`wrôeSˇœr
(
fs
, 
vÆue
);

2733 
	}
}

2735 
	gãm∂©e
<> 
ölöe
 
	$wrôe
–
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
vÆue
 )

2737 
	`wrôeSˇœr
(
fs
, 
vÆue
);

2738 
	}
}

2740 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
Poöt_
<
_Tp
>& 
±
 )

2742 
wrôe
(
fs
, 
±
.
x
);

2743 
wrôe
(
fs
, 
±
.
y
);

2746 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
Poöt3_
<
_Tp
>& 
±
 )

2748 
wrôe
(
fs
, 
±
.
x
);

2749 
wrôe
(
fs
, 
±
.
y
);

2750 
wrôe
(
fs
, 
±
.
z
);

2753 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
Size_
<
_Tp
>& 
sz
 )

2755 
wrôe
(
fs
, 
sz
.
width
);

2756 
wrôe
(
fs
, 
sz
.
height
);

2759 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
Com∂ex
<
_Tp
>& 
c
 )

2761 
wrôe
(
fs
, 
c
.
ª
);

2762 
wrôe
(
fs
, 
c
.
im
);

2765 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
Re˘_
<
_Tp
>& 
r
 )

2767 
wrôe
(
fs
, 
r
.
x
);

2768 
wrôe
(
fs
, 
r
.
y
);

2769 
wrôe
(
fs
, 
r
.
width
);

2770 
wrôe
(
fs
, 
r
.
height
);

2773 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
Vec
<
_Tp
, 
˙
>& 
v
 )

2775 
	gi
 = 0; i < 
	g˙
; i++)

2776 
wrôe
(
fs
, 
v
.
vÆ
[
i
]);

2779 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
Sˇœr_
<
_Tp
>& 
s
 )

2781 
wrôe
(
fs
, 
s
.
vÆ
[0]);

2782 
wrôe
(
fs
, 
s
.
vÆ
[1]);

2783 
wrôe
(
fs
, 
s
.
vÆ
[2]);

2784 
wrôe
(
fs
, 
s
.
vÆ
[3]);

2787 
ölöe
 
	$wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
R™ge
& 
r
 )

2789 
	`wrôe
(
fs
, 
r
.
°¨t
);

2790 
	`wrôe
(
fs
, 
r
.
íd
);

2791 
	}
}

2793 ˛as†
	cCV_EXPORTS
 
	gWrôeSåu˘C⁄ãxt


2795 
	gpublic
:

2796 
WrôeSåu˘C⁄ãxt
(
FûeSt‹age
& 
_fs
, c⁄° 
°rög
& 
«me
,

2797 
Êags
, c⁄° 
°rög
& 
ty≥Name
=string());

2798 ~
WrôeSåu˘C⁄ãxt
();

2799 
FûeSt‹age
* 
	gfs
;

2802 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, c⁄° 
Poöt_
<
_Tp
>& 
±
 )

2804 
WrôeSåu˘C⁄ãxt
 
ws
(
fs
, 
«me
, 
CV_NODE_SEQ
+
CV_NODE_FLOW
);

2805 
wrôe
(
fs
, 
±
.
x
);

2806 
wrôe
(
fs
, 
±
.
y
);

2809 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, c⁄° 
Poöt3_
<
_Tp
>& 
±
 )

2811 
WrôeSåu˘C⁄ãxt
 
ws
(
fs
, 
«me
, 
CV_NODE_SEQ
+
CV_NODE_FLOW
);

2812 
wrôe
(
fs
, 
±
.
x
);

2813 
wrôe
(
fs
, 
±
.
y
);

2814 
wrôe
(
fs
, 
±
.
z
);

2817 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, c⁄° 
Size_
<
_Tp
>& 
sz
 )

2819 
WrôeSåu˘C⁄ãxt
 
ws
(
fs
, 
«me
, 
CV_NODE_SEQ
+
CV_NODE_FLOW
);

2820 
wrôe
(
fs
, 
sz
.
width
);

2821 
wrôe
(
fs
, 
sz
.
height
);

2824 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, c⁄° 
Com∂ex
<
_Tp
>& 
c
 )

2826 
WrôeSåu˘C⁄ãxt
 
ws
(
fs
, 
«me
, 
CV_NODE_SEQ
+
CV_NODE_FLOW
);

2827 
wrôe
(
fs
, 
c
.
ª
);

2828 
wrôe
(
fs
, 
c
.
im
);

2831 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, c⁄° 
Re˘_
<
_Tp
>& 
r
 )

2833 
WrôeSåu˘C⁄ãxt
 
ws
(
fs
, 
«me
, 
CV_NODE_SEQ
+
CV_NODE_FLOW
);

2834 
wrôe
(
fs
, 
r
.
x
);

2835 
wrôe
(
fs
, 
r
.
y
);

2836 
wrôe
(
fs
, 
r
.
width
);

2837 
wrôe
(
fs
, 
r
.
height
);

2840 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, c⁄° 
Vec
<
_Tp
, 
˙
>& 
v
 )

2842 
WrôeSåu˘C⁄ãxt
 
ws
(
fs
, 
«me
, 
CV_NODE_SEQ
+
CV_NODE_FLOW
);

2843 
	gi
 = 0; i < 
	g˙
; i++)

2844 
wrôe
(
fs
, 
v
.
vÆ
[
i
]);

2847 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, c⁄° 
Sˇœr_
<
_Tp
>& 
s
 )

2849 
WrôeSåu˘C⁄ãxt
 
ws
(
fs
, 
«me
, 
CV_NODE_SEQ
+
CV_NODE_FLOW
);

2850 
wrôe
(
fs
, 
s
.
vÆ
[0]);

2851 
wrôe
(
fs
, 
s
.
vÆ
[1]);

2852 
wrôe
(
fs
, 
s
.
vÆ
[2]);

2853 
wrôe
(
fs
, 
s
.
vÆ
[3]);

2856 
ölöe
 
	$wrôe
(
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, c⁄° 
R™ge
& 
r
 )

2858 
WrôeSåu˘C⁄ãxt
 
	`ws
(
fs
, 
«me
, 
CV_NODE_SEQ
+
CV_NODE_FLOW
);

2859 
	`wrôe
(
fs
, 
r
.
°¨t
);

2860 
	`wrôe
(
fs
, 
r
.
íd
);

2861 
	}
}

2863 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gnumÊag
> cœs†
	cVecWrôîProxy


2865 
	gpublic
:

2866 
VecWrôîProxy
–
FûeSt‹age
* 
_fs
 ) : 
fs
(_fs) {}

2867 
›î©‹
()(c⁄° 
ve˘‹
<
_Tp
>& 
vec
) const

2869 
size_t
 
i
, 
	gcou¡
 = 
vec
.
size
();

2870  
	gi
 = 0; i < 
	gcou¡
; i++ )

2871 
wrôe
–*
fs
, 
vec
[
i
] );

2873 
FûeSt‹age
* 
	gfs
;

2876 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gVecWrôîProxy
<_Tp,1>

2878 
	gpublic
:

2879 
VecWrôîProxy
–
FûeSt‹age
* 
_fs
 ) : 
fs
(_fs) {}

2880 
›î©‹
()(c⁄° 
ve˘‹
<
_Tp
>& 
vec
) const

2882 
_fmt
 = 
D©aTy≥
<
_Tp
>::
fmt
;

2883 
	gfmt
[] = { ()((
_fmt
>>8)+'1'), ()_fmt, '\0' };

2884 
	gfs
->
wrôeRaw
–
°rög
(
fmt
), !
vec
.
em±y
(Ë? (
uch¨
*)&vec[0] : 0, vec.
size
()*(
_Tp
) );

2886 
FûeSt‹age
* 
	gfs
;

2889 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
–
FûeSt‹age
& 
fs
, c⁄° 
ve˘‹
<
_Tp
>& 
vec
 )

2891 
	gVecWrôîProxy
<
	g_Tp
, 
	gD©aTy≥
<_Tp>::
fmt
 !0> 
w
(&
fs
);

2892 
w
(
vec
);

2895 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
wrôe
–
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
,

2896 c⁄° 
ve˘‹
<
_Tp
>& 
vec
 )

2898 
WrôeSåu˘C⁄ãxt
 
ws
(
fs
, 
«me
, 
CV_NODE_SEQ
+(
D©aTy≥
<
_Tp
>::
fmt
 !0 ? 
CV_NODE_FLOW
 : 0));

2899 
wrôe
(
fs
, 
vec
);

2902 
CV_EXPORTS_W
 
wrôe
–
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, c⁄° 
M©
& 
vÆue
 );

2903 
CV_EXPORTS
 
wrôe
–
FûeSt‹age
& 
fs
, c⁄° 
°rög
& 
«me
, c⁄° 
S∑r£M©
& 
vÆue
 );

2905 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gFûeSt‹age
& 
	g›î©‹
 << (FûeSt‹age& 
	gfs
, c⁄° _Tp& 
	gvÆue
)

2907 if–!
	gfs
.
isO≥√d
() )

2908  
	gfs
;

2909 if–
	gfs
.
	g°©e
 =
FûeSt‹age
::
NAME_EXPECTED
 + FûeSt‹age::
INSIDE_MAP
 )

2910 
CV_Eº‹
–
CV_StsEº‹
, "NoÉlementÇame has been given" );

2911 
wrôe
–
fs
, fs.
ñ«me
, 
vÆue
 );

2912 if–
	gfs
.
	g°©e
 & 
	gFûeSt‹age
::
INSIDE_MAP
 )

2913 
fs
.
°©e
 = 
FûeSt‹age
::
NAME_EXPECTED
 + FûeSt‹age::
INSIDE_MAP
;

2914  
	gfs
;

2917 
CV_EXPORTS
 
	gFûeSt‹age
& 
	g›î©‹
 << (FûeSt‹age& 
	gfs
, c⁄° 
	g°rög
& 
	g°r
);

2919 
ölöe
 
	gFûeSt‹age
& 
	g›î©‹
 << (FûeSt‹age& 
	gfs
, c⁄° * 
	g°r
)

2920 {  (
	gfs
 << 
°rög
(
°r
)); }

2922 
ölöe
 
	gFûeSt‹age
& 
	g›î©‹
 << (FûeSt‹age& 
	gfs
, * 
	gvÆue
)

2923 {  (
	gfs
 << 
°rög
(
vÆue
)); }

2925 
ölöe
 
	gFûeNode
::
	$FûeNode
(Ë: 
	`fs
(0), 
	$node
(0Ë{
	}
}

2926 
ölöe
 
	gFûeNode
::
	$FûeNode
(c⁄° 
CvFûeSt‹age
* 
_fs
, c⁄° 
CvFûeNode
* 
_node
)

2927 : 
	`fs
(
_fs
), 
	$node
(
_node
Ë{
	}
}

2929 
ölöe
 
	gFûeNode
::
	$FûeNode
(c⁄° 
FûeNode
& 
_node
Ë: 
	`fs
(_node.
fs
), 
	$node
(
_node
.
node
Ë{
	}
}

2931 
ölöe
 
	gFûeNode
::
	$ty≥
(Ëc⁄° {  !
node
 ? 
NONE
 : (node->
èg
 & 
TYPE_MASK
); 
	}
}

2932 
ölöe
 
boﬁ
 
	gFûeNode
::
	$em±y
(Ëc⁄° {  
node
 =0; 
	}
}

2933 
ölöe
 
boﬁ
 
	gFûeNode
::
	$isN⁄e
(Ëc⁄° {  
	`ty≥
(Ë=
NONE
; 
	}
}

2934 
ölöe
 
boﬁ
 
	gFûeNode
::
	$isSeq
(Ëc⁄° {  
	`ty≥
(Ë=
SEQ
; 
	}
}

2935 
ölöe
 
boﬁ
 
	gFûeNode
::
	$isM≠
(Ëc⁄° {  
	`ty≥
(Ë=
MAP
; 
	}
}

2936 
ölöe
 
boﬁ
 
	gFûeNode
::
	$isI¡
(Ëc⁄° {  
	`ty≥
(Ë=
INT
; 
	}
}

2937 
ölöe
 
boﬁ
 
	gFûeNode
::
	$isRól
(Ëc⁄° {  
	`ty≥
(Ë=
REAL
; 
	}
}

2938 
ölöe
 
boﬁ
 
	gFûeNode
::
	$isSåög
(Ëc⁄° {  
	`ty≥
(Ë=
STR
; 
	}
}

2939 
ölöe
 
boﬁ
 
	gFûeNode
::
	$isNamed
(Ëc⁄° {  !
node
 ? 
Ál£
 : (node->
èg
 & 
NAMED
Ë!0; 
	}
}

2940 
ölöe
 
size_t
 
	gFûeNode
::
	$size
() const

2942 
t
 = 
	`ty≥
();

2943  
t
 =
MAP
 ? (
size_t
)((
CvSë
*)
node
->
d©a
.
m≠
)->
a˘ive_cou¡
 :

2944 
t
 =
SEQ
 ? (
size_t
)
node
->
d©a
.
£q
->
tŸÆ
 : (size_t)!
	`isN⁄e
();

2945 
	}
}

2947 
ölöe
 
CvFûeNode
* 
	gFûeNode
::
›î©‹
 *(Ë{  (CvFûeNode*)
node
; }

2948 
ölöe
 c⁄° 
CvFûeNode
* 
	gFûeNode
::
›î©‹
* (Ëc⁄° {  
node
; }

2950 
ölöe
 
	$ªad
(c⁄° 
FûeNode
& 
node
, & 
vÆue
, 
deÁu…_vÆue
)

2952 
vÆue
 = !
node
.nodê? 
deÁu…_vÆue
 :

2953 
	`CV_NODE_IS_INT
(
node
.node->
èg
Ë?Çode.node->
d©a
.
i
 :

2954 
	`CV_NODE_IS_REAL
(
node
.node->
èg
Ë? 
	`cvRound
“ode.node->
d©a
.
f
) : 0x7fffffff;

2955 
	}
}

2957 
ölöe
 
	$ªad
(c⁄° 
FûeNode
& 
node
, 
boﬁ
& 
vÆue
, boﬁ 
deÁu…_vÆue
)

2959 
ãmp
; 
	`ªad
(
node
,Åemp, ()
deÁu…_vÆue
);

2960 
vÆue
 = 
ãmp
 != 0;

2961 
	}
}

2963 
ölöe
 
	$ªad
(c⁄° 
FûeNode
& 
node
, 
uch¨
& 
vÆue
, uch¨ 
deÁu…_vÆue
)

2965 
ãmp
; 
	`ªad
(
node
,Åemp, ()
deÁu…_vÆue
);

2966 
vÆue
 = 
ßtuøã_ˇ°
<
uch¨
>(
ãmp
);

2967 
	}
}

2969 
ölöe
 
	$ªad
(c⁄° 
FûeNode
& 
node
, 
sch¨
& 
vÆue
, sch¨ 
deÁu…_vÆue
)

2971 
ãmp
; 
	`ªad
(
node
,Åemp, ()
deÁu…_vÆue
);

2972 
vÆue
 = 
ßtuøã_ˇ°
<
sch¨
>(
ãmp
);

2973 
	}
}

2975 
ölöe
 
	$ªad
(c⁄° 
FûeNode
& 
node
, 
ush‹t
& 
vÆue
, ush‹à
deÁu…_vÆue
)

2977 
ãmp
; 
	`ªad
(
node
,Åemp, ()
deÁu…_vÆue
);

2978 
vÆue
 = 
ßtuøã_ˇ°
<
ush‹t
>(
ãmp
);

2979 
	}
}

2981 
ölöe
 
	$ªad
(c⁄° 
FûeNode
& 
node
, & 
vÆue
, 
deÁu…_vÆue
)

2983 
ãmp
; 
	`ªad
(
node
,Åemp, ()
deÁu…_vÆue
);

2984 
vÆue
 = 
ßtuøã_ˇ°
<>(
ãmp
);

2985 
	}
}

2987 
ölöe
 
	$ªad
(c⁄° 
FûeNode
& 
node
, & 
vÆue
, 
deÁu…_vÆue
)

2989 
vÆue
 = !
node
.nodê? 
deÁu…_vÆue
 :

2990 
	`CV_NODE_IS_INT
(
node
.node->
èg
Ë? (Íode.node->
d©a
.
i
 :

2991 
	`CV_NODE_IS_REAL
(
node
.node->
èg
Ë? (Íode.node->
d©a
.
f
 : 1e30f;

2992 
	}
}

2994 
ölöe
 
	$ªad
(c⁄° 
FûeNode
& 
node
, & 
vÆue
, 
deÁu…_vÆue
)

2996 
vÆue
 = !
node
.nodê? 
deÁu…_vÆue
 :

2997 
	`CV_NODE_IS_INT
(
node
.node->
èg
Ë? (Íode.node->
d©a
.
i
 :

2998 
	`CV_NODE_IS_REAL
(
node
.node->
èg
Ë?Çode.node->
d©a
.
f
 : 1e300;

2999 
	}
}

3001 
ölöe
 
	$ªad
(c⁄° 
FûeNode
& 
node
, 
°rög
& 
vÆue
, c⁄° såög& 
deÁu…_vÆue
)

3003 
vÆue
 = !
node
.nodê? 
deÁu…_vÆue
 : 
	`CV_NODE_IS_STRING
“ode.node->
èg
Ë? 
	`°rög
“ode.node->
d©a
.
°r
.
±r
) : string("");

3004 
	}
}

3006 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
ªad
(c⁄° 
FûeNode
& 
node
, 
Poöt_
<
_Tp
>& 
vÆue
, c⁄° Poöt_<_Tp>& 
deÁu…_vÆue
)

3008 
	gve˘‹
<
	g_Tp
> 
	gãmp
; 
FûeNodeIãøt‹
 
	gô
 = 
node
.
begö
(); it >>Åemp;

3009 
	gvÆue
 = 
ãmp
.
size
(Ë!2 ? 
deÁu…_vÆue
 : 
Poöt_
<
_Tp
>(
ßtuøã_ˇ°
<_Tp>—emp[0]), 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gãmp
[1]));

3012 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
ªad
(c⁄° 
FûeNode
& 
node
, 
Poöt3_
<
_Tp
>& 
vÆue
, c⁄° Poöt3_<_Tp>& 
deÁu…_vÆue
)

3014 
	gve˘‹
<
	g_Tp
> 
	gãmp
; 
FûeNodeIãøt‹
 
	gô
 = 
node
.
begö
(); it >>Åemp;

3015 
	gvÆue
 = 
ãmp
.
size
(Ë!3 ? 
deÁu…_vÆue
 : 
Poöt3_
<
_Tp
>(
ßtuøã_ˇ°
<_Tp>—emp[0]), 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gãmp
[1]),

3016 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gãmp
[2]));

3019 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
ªad
(c⁄° 
FûeNode
& 
node
, 
Size_
<
_Tp
>& 
vÆue
, c⁄° Size_<_Tp>& 
deÁu…_vÆue
)

3021 
	gve˘‹
<
	g_Tp
> 
	gãmp
; 
FûeNodeIãøt‹
 
	gô
 = 
node
.
begö
(); it >>Åemp;

3022 
	gvÆue
 = 
ãmp
.
size
(Ë!2 ? 
deÁu…_vÆue
 : 
Size_
<
_Tp
>(
ßtuøã_ˇ°
<_Tp>—emp[0]), 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gãmp
[1]));

3025 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
ªad
(c⁄° 
FûeNode
& 
node
, 
Com∂ex
<
_Tp
>& 
vÆue
, c⁄° Com∂ex<_Tp>& 
deÁu…_vÆue
)

3027 
	gve˘‹
<
	g_Tp
> 
	gãmp
; 
FûeNodeIãøt‹
 
	gô
 = 
node
.
begö
(); it >>Åemp;

3028 
	gvÆue
 = 
ãmp
.
size
(Ë!2 ? 
deÁu…_vÆue
 : 
Com∂ex
<
_Tp
>(
ßtuøã_ˇ°
<_Tp>—emp[0]), 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gãmp
[1]));

3031 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
ªad
(c⁄° 
FûeNode
& 
node
, 
Re˘_
<
_Tp
>& 
vÆue
, c⁄° Re˘_<_Tp>& 
deÁu…_vÆue
)

3033 
	gve˘‹
<
	g_Tp
> 
	gãmp
; 
FûeNodeIãøt‹
 
	gô
 = 
node
.
begö
(); it >>Åemp;

3034 
	gvÆue
 = 
ãmp
.
size
(Ë!4 ? 
deÁu…_vÆue
 : 
Re˘_
<
_Tp
>(
ßtuøã_ˇ°
<_Tp>—emp[0]), 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gãmp
[1]),

3035 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gãmp
[2]), saturate_cast<_Tp>(temp[3]));

3038 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	g˙
> 
ölöe
 
ªad
(c⁄° 
FûeNode
& 
node
, 
Vec
<
_Tp
, 
˙
>& 
vÆue
, c⁄° Vec<_Tp, cn>& 
deÁu…_vÆue
)

3040 
	gve˘‹
<
	g_Tp
> 
	gãmp
; 
FûeNodeIãøt‹
 
	gô
 = 
node
.
begö
(); it >>Åemp;

3041 
	gvÆue
 = 
ãmp
.
size
(Ë!
˙
 ? 
deÁu…_vÆue
 : 
Vec
<
_Tp
, 
	g˙
>(&
	gãmp
[0]);

3044 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
ªad
(c⁄° 
FûeNode
& 
node
, 
Sˇœr_
<
_Tp
>& 
vÆue
, c⁄° Sˇœr_<_Tp>& 
deÁu…_vÆue
)

3046 
	gve˘‹
<
	g_Tp
> 
	gãmp
; 
FûeNodeIãøt‹
 
	gô
 = 
node
.
begö
(); it >>Åemp;

3047 
	gvÆue
 = 
ãmp
.
size
(Ë!4 ? 
deÁu…_vÆue
 : 
Sˇœr_
<
_Tp
>(
ßtuøã_ˇ°
<_Tp>—emp[0]), 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gãmp
[1]),

3048 
	gßtuøã_ˇ°
<
	g_Tp
>(
	gãmp
[2]), saturate_cast<_Tp>(temp[3]));

3051 
ölöe
 
	$ªad
(c⁄° 
FûeNode
& 
node
, 
R™ge
& 
vÆue
, c⁄° R™ge& 
deÁu…_vÆue
)

3053 
Poöt2i
 
	`ãmp
(
vÆue
.
°¨t
, vÆue.
íd
); c⁄° Poöt2ò
deÁu…_ãmp
 = 
	`Poöt2i
(
deÁu…_vÆue
.start, default_value.end);

3054 
	`ªad
(
node
, 
ãmp
, 
deÁu…_ãmp
);

3055 
vÆue
.
°¨t
 = 
ãmp
.
x
; vÆue.
íd
 =Åemp.
y
;

3056 
	}
}

3058 
CV_EXPORTS_W
 
ªad
(c⁄° 
FûeNode
& 
node
, 
M©
& 
m©
, c⁄° M©& 
deÁu…_m©
=Mat() );

3059 
CV_EXPORTS
 
ªad
(c⁄° 
FûeNode
& 
node
, 
S∑r£M©
& 
m©
, c⁄° S∑r£M©& 
deÁu…_m©
=SparseMat() );

3061 
ölöe
 
	gFûeNode
::
›î©‹
 () const

3063 
vÆue
;

3064 
	`ªad
(*
this
, 
vÆue
, 0);

3065  
vÆue
;

3066 
	}
}

3067 
ölöe
 
	gFûeNode
::
›î©‹
 () const

3069 
vÆue
;

3070 
	`ªad
(*
this
, 
vÆue
, 0.f);

3071  
vÆue
;

3072 
	}
}

3073 
ölöe
 
	gFûeNode
::
›î©‹
 () const

3075 
vÆue
;

3076 
	`ªad
(*
this
, 
vÆue
, 0.);

3077  
vÆue
;

3078 
	}
}

3079 
ölöe
 
	gFûeNode
::
›î©‹
 
	$°rög
() const

3081 
°rög
 
vÆue
;

3082 
	`ªad
(*
this
, 
vÆue
, value);

3083  
vÆue
;

3084 
	}
}

3086 
ölöe
 
	gFûeNode
::
	$ªadRaw
–c⁄° 
°rög
& 
fmt
, 
uch¨
* 
vec
, 
size_t
 
Àn
 ) const

3088 
	`begö
().
	`ªadRaw
–
fmt
, 
vec
, 
Àn
 );

3089 
	}
}

3091 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gnumÊag
> cœs†
	cVecRódîProxy


3093 
	gpublic
:

3094 
VecRódîProxy
–
FûeNodeIãøt‹
* 
_ô
 ) : 
ô
(_it) {}

3095 
›î©‹
()(
ve˘‹
<
_Tp
>& 
vec
, 
size_t
 
	gcou¡
) const

3097 
	gcou¡
 = 
°d
::
mö
(
cou¡
, 
ô
->
ªmaöög
);

3098 
	gvec
.
ªsize
(
cou¡
);

3099  
size_t
 
	gi
 = 0; i < 
	gcou¡
; i++, ++(*
	gô
) )

3100 
ªad
(**
ô
, 
vec
[
i
], 
_Tp
());

3102 
FûeNodeIãøt‹
* 
	gô
;

3105 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
˛ass
 
	gVecRódîProxy
<_Tp,1>

3107 
	gpublic
:

3108 
VecRódîProxy
–
FûeNodeIãøt‹
* 
_ô
 ) : 
ô
(_it) {}

3109 
›î©‹
()(
ve˘‹
<
_Tp
>& 
vec
, 
size_t
 
	gcou¡
) const

3111 
size_t
 
	gªmaöög
 = 
ô
->
ªmaöög
, 
	g˙
 = 
D©aTy≥
<
_Tp
>::
ch™√ls
;

3112 
	g_fmt
 = 
D©aTy≥
<
_Tp
>::
fmt
;

3113 
	gfmt
[] = { ()((
_fmt
>>8)+'1'), ()_fmt, '\0' };

3114 
size_t
 
	gªmaöög1
 = 
ªmaöög
/
˙
;

3115 
	gcou¡
 = 
cou¡
 < 
ªmaöög1
 ? count :Ñemaining1;

3116 
	gvec
.
ªsize
(
cou¡
);

3117 
	gô
->
ªadRaw
–
°rög
(
fmt
), !
vec
.
em±y
(Ë? (
uch¨
*)&vec[0] : 0, 
cou¡
*(
_Tp
) );

3119 
FûeNodeIãøt‹
* 
	gô
;

3122 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 

3123 
ªad
–
FûeNodeIãøt‹
& 
ô
, 
ve˘‹
<
_Tp
>& 
vec
, 
size_t
 
maxCou¡
=(size_t)
INT_MAX
 )

3125 
VecRódîProxy
<
_Tp
, 
D©aTy≥
<_Tp>::
fmt
 !0> 
r
(&
ô
);

3126 
r
(
vec
, 
maxCou¡
);

3129 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 

3130 
ªad
–c⁄° 
FûeNode
& 
node
, 
ve˘‹
<
_Tp
>& 
vec
, c⁄° ve˘‹<_Tp>& 
deÁu…_vÆue
=vector<_Tp>() )

3132 if(!
node
.node)

3133 
vec
 = 
deÁu…_vÆue
;

3136 
FûeNodeIãøt‹
 
	gô
 = 
node
.
begö
();

3137 
ªad
–
ô
, 
vec
 );

3141 
ölöe
 
FûeNodeIãøt‹
 
	gFûeNode
::
	$begö
() const

3143  
	`FûeNodeIãøt‹
(
fs
, 
node
);

3144 
	}
}

3146 
ölöe
 
FûeNodeIãøt‹
 
	gFûeNode
::
	$íd
() const

3148  
	`FûeNodeIãøt‹
(
fs
, 
node
, 
	`size
());

3149 
	}
}

3151 
ölöe
 
FûeNode
 
	gFûeNodeIãøt‹
::
›î©‹
 *() const

3152 {  
FûeNode
(
fs
, (c⁄° 
CvFûeNode
*)(*)
ªadî
.
±r
); }

3154 
ölöe
 
FûeNode
 
	gFûeNodeIãøt‹
::
›î©‹
 ->() const

3155 {  
FûeNode
(
fs
, (c⁄° 
CvFûeNode
*)(*)
ªadî
.
±r
); }

3157 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gFûeNodeIãøt‹
& 
	g›î©‹
 >> (FûeNodeIãøt‹& 
	gô
, _Tp& 
	gvÆue
)

3158 { 
ªad
–*
ô
, 
vÆue
, 
_Tp
());  ++
	gô
; }

3160 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe


3161 
	gFûeNodeIãøt‹
& 
	g›î©‹
 >> (FûeNodeIãøt‹& 
	gô
, 
	gve˘‹
<
	g_Tp
>& 
	gvec
)

3163 
	gVecRódîProxy
<
	g_Tp
, 
	gD©aTy≥
<_Tp>::
fmt
 !0> 
r
(&
ô
);

3164 
r
(
vec
, (
size_t
)
INT_MAX
);

3165  
	gô
;

3168 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g›î©‹
 >> (c⁄° 
	gFûeNode
& 
	gn
, _Tp& 
	gvÆue
)

3169 { 
ªad
–
n
, 
vÆue
, 
_Tp
()); }

3171 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g›î©‹
 >> (c⁄° 
	gFûeNode
& 
	gn
, 
	gve˘‹
<_Tp>& 
	gvec
)

3172 { 
FûeNodeIãøt‹
 
	gô
 = 
n
.
begö
(); ià>> 
	gvec
; }

3174 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
FûeNodeIãøt‹
& 
ô1
, c⁄° 
	gFûeNodeIãøt‹
& 
	gô2
)

3176  
	gô1
.
	gfs
 =
ô2
.
fs
 && 
ô1
.
c⁄èöî
 == it2.container &&

3177 
ô1
.
ªadî
.
±r
 =
ô2
.ªadî.±∏&& it1.
ªmaöög
 == it2.remaining;

3180 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
FûeNodeIãøt‹
& 
ô1
, c⁄° 
	gFûeNodeIãøt‹
& 
	gô2
)

3182  !(
	gô1
 =
ô2
);

3185 
ölöe
 
±rdiff_t
 
	g›î©‹
 - (c⁄° 
	gFûeNodeIãøt‹
& 
	gô1
, c⁄° FûeNodeIãøt‹& 
	gô2
)

3187  
	gô2
.
	gªmaöög
 - 
	gô1
.remaining;

3190 
ölöe
 
boﬁ
 
	g›î©‹
 < (c⁄° 
	gFûeNodeIãøt‹
& 
	gô1
, c⁄° FûeNodeIãøt‹& 
	gô2
)

3192  
	gô1
.
	gªmaöög
 > 
	gô2
.remaining;

3195 
ölöe
 
FûeNode
 
	gFûeSt‹age
::
	$gëFú°T›LevñNode
() const

3197 
FûeNode
 
r
 = 
	`roŸ
();

3198 
FûeNodeIãøt‹
 
ô
 = 
r
.
	`begö
();

3199  
ô
 !
r
.
	`íd
(Ë? *ô : 
	`FûeNode
();

3200 
	}
}

3204 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
_Tp
 
	$gcd
(
_Tp
 
a
, _T∞
b
)

3206 if–
a
 < 
b
 )

3207 
°d
::
	`sw≠
(
a
, 
b
);

3208  
b
 > 0 )

3210 
_Tp
 
r
 = 
a
 % 
b
;

3211 
a
 = 
b
;

3212 
b
 = 
r
;

3214  
a
;

3215 
	}
}

3257 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
˛ass
 
	g_LT
> 
s‹t
–
ve˘‹
<
_Tp
>& 
vec
, 
_LT
 
LT
=
	$_LT
() )

3259 
is‹t_thªsh
 = 7;

3260 
•
 = 0;

3264 
_Tp
 *
lb
;

3265 
_Tp
 *
ub
;

3266 } 
°ack
[48];

3268 
size_t
 
tŸÆ
 = 
vec
.
	`size
();

3270 if–
tŸÆ
 <= 1 )

3273 
_Tp
* 
¨r
 = &
vec
[0];

3274 
°ack
[0].
lb
 = 
¨r
;

3275 
°ack
[0].
ub
 = 
¨r
 + (
tŸÆ
 - 1);

3277  
•
 >= 0 )

3279 
_Tp
* 
À·
 = 
°ack
[
•
].
lb
;

3280 
_Tp
* 
right
 = 
°ack
[
•
--].
ub
;

3284 
i
, 
n
 = ()(
right
 - 
À·
Ë+ 1, 
m
;

3285 
_Tp
* 
±r
;

3286 
_Tp
* 
±r2
;

3288 if–
n
 <
is‹t_thªsh
 )

3290 
ö£π_s‹t
:

3291  
±r
 = 
À·
 + 1;Öå <
right
;Ötr++ )

3293  
±r2
 = 
±r
;Öå2 > 
À·
 && 
	`LT
(ptr2[0],ptr2[-1]);Ötr2--)

3294 
°d
::
	`sw≠
–
±r2
[0],Ötr2[-1] );

3300 
_Tp
* 
À·0
;

3301 
_Tp
* 
À·1
;

3302 
_Tp
* 
right0
;

3303 
_Tp
* 
right1
;

3304 
_Tp
* 
pivŸ
;

3305 
_Tp
* 
a
;

3306 
_Tp
* 
b
;

3307 
_Tp
* 
c
;

3308 
sw≠_˙t
 = 0;

3310 
À·0
 = 
À·
;

3311 
right0
 = 
right
;

3312 
pivŸ
 = 
À·
 + (
n
/2);

3314 if–
n
 > 40 )

3316 
d
 = 
n
 / 8;

3317 
a
 = 
À·
, 
b
 =Üe· + 
d
, 
c
 =Üeft + 2*d;

3318 
À·
 = 
	`LT
(*
a
, *
b
Ë? (LT(*b, *
c
) ? b : (LT(*a, *c) ? c :á))

3319 : (
	`LT
(*
c
, *
b
Ë? b : (LT(*
a
, *c) ?á : c));

3321 
a
 = 
pivŸ
 - 
d
, 
b
 =ÖivŸ, 
c
 =Öivot + d;

3322 
pivŸ
 = 
	`LT
(*
a
, *
b
Ë? (LT(*b, *
c
) ? b : (LT(*a, *c) ? c :á))

3323 : (
	`LT
(*
c
, *
b
Ë? b : (LT(*
a
, *c) ?á : c));

3325 
a
 = 
right
 - 2*
d
, 
b
 =Ñighà- d, 
c
 =Ñight;

3326 
right
 = 
	`LT
(*
a
, *
b
Ë? (LT(*b, *
c
) ? b : (LT(*a, *c) ? c :á))

3327 : (
	`LT
(*
c
, *
b
Ë? b : (LT(*
a
, *c) ?á : c));

3330 
a
 = 
À·
, 
b
 = 
pivŸ
, 
c
 = 
right
;

3331 
pivŸ
 = 
	`LT
(*
a
, *
b
Ë? (LT(*b, *
c
) ? b : (LT(*a, *c) ? c :á))

3332 : (
	`LT
(*
c
, *
b
Ë? b : (LT(*
a
, *c) ?á : c));

3333 if–
pivŸ
 !
À·0
 )

3335 
°d
::
	`sw≠
–*
pivŸ
, *
À·0
 );

3336 
pivŸ
 = 
À·0
;

3338 
À·
 = 
À·1
 = 
À·0
 + 1;

3339 
right
 = 
right1
 = 
right0
;

3343  
À·
 <
right
 && !
	`LT
(*
pivŸ
, *left) )

3345 if–!
	`LT
(*
À·
, *
pivŸ
) )

3347 if–
À·
 > 
À·1
 )

3348 
°d
::
	`sw≠
–*
À·1
, *
À·
 );

3349 
sw≠_˙t
 = 1;

3350 
À·1
++;

3352 
À·
++;

3355  
À·
 <
right
 && !
	`LT
(*right, *
pivŸ
) )

3357 if–!
	`LT
(*
pivŸ
, *
right
) )

3359 if–
right
 < 
right1
 )

3360 
°d
::
	`sw≠
–*
right1
, *
right
 );

3361 
sw≠_˙t
 = 1;

3362 
right1
--;

3364 
right
--;

3367 if–
À·
 > 
right
 )

3369 
°d
::
	`sw≠
–*
À·
, *
right
 );

3370 
sw≠_˙t
 = 1;

3371 
À·
++;

3372 
right
--;

3375 if–
sw≠_˙t
 == 0 )

3377 
À·
 = 
À·0
, 
right
 = 
right0
;

3378 
ö£π_s‹t
;

3381 
n
 = 
°d
::
	`mö
–()(
À·1
 - 
À·0
), ()(
À·
 -Üeft1) );

3382  
i
 = 0; i < 
n
; i++ )

3383 
°d
::
	`sw≠
–
À·0
[
i
], 
À·
[i-
n
] );

3385 
n
 = 
°d
::
	`mö
–()(
right0
 - 
right1
), ()‘ight1 - 
right
) );

3386  
i
 = 0; i < 
n
; i++ )

3387 
°d
::
	`sw≠
–
À·
[
i
], 
right0
[i-
n
+1] );

3388 
n
 = ()(
À·
 - 
À·1
);

3389 
m
 = ()(
right1
 - 
right
);

3390 if–
n
 > 1 )

3392 if–
m
 > 1 )

3394 if–
n
 > 
m
 )

3396 
°ack
[++
•
].
lb
 = 
À·0
;

3397 
°ack
[
•
].
ub
 = 
À·0
 + 
n
 - 1;

3398 
À·
 = 
right0
 - 
m
 + 1, 
right
 =Ñight0;

3402 
°ack
[++
•
].
lb
 = 
right0
 - 
m
 + 1;

3403 
°ack
[
•
].
ub
 = 
right0
;

3404 
À·
 = 
À·0
, 
right
 =Üe·0 + 
n
 - 1;

3408 
À·
 = 
À·0
, 
right
 =Üe·0 + 
n
 - 1;

3410 if–
m
 > 1 )

3411 
À·
 = 
right0
 - 
m
 + 1, 
right
 =Ñight0;

3417 
	}
}

3419 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cLessTh™


3421 
	gpublic
:

3422 
boﬁ
 
›î©‹
()(c⁄° 
_Tp
& 
a
, c⁄° 
	g_Tp
& 
	gb
Ëc⁄° {  
	ga
 < b; }

3425 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cGª©îEq


3427 
	gpublic
:

3428 
boﬁ
 
›î©‹
()(c⁄° 
_Tp
& 
a
, c⁄° 
	g_Tp
& 
	gb
Ëc⁄° {  
	ga
 >
b
; }

3431 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cLessTh™Idx


3433 
	gpublic
:

3434 
LessTh™Idx
–c⁄° 
_Tp
* 
_¨r
 ) : 
¨r
(_arr) {}

3435 
boﬁ
 
›î©‹
()(
a
, 
	gb
Ëc⁄° {  
	g¨r
[a] <áº[
b
]; }

3436 c⁄° 
_Tp
* 
	g¨r
;

3439 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> cœs†
	cGª©îEqIdx


3441 
	gpublic
:

3442 
Gª©îEqIdx
–c⁄° 
_Tp
* 
_¨r
 ) : 
¨r
(_arr) {}

3443 
boﬁ
 
›î©‹
()(
a
, 
	gb
Ëc⁄° {  
	g¨r
[a] >
¨r
[
b
]; }

3444 c⁄° 
_Tp
* 
	g¨r
;

3454 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
˛ass
 
	g_EqPªdiˇã
> 

3455 
∑πôi⁄
–c⁄° 
ve˘‹
<
_Tp
>& 
_vec
, ve˘‹<>& 
œbñs
,

3456 
_EqPªdiˇã
 
¥ediˇã
=
	$_EqPªdiˇã
())

3458 
i
, 
j
, 
N
 = ()
_vec
.
	`size
();

3459 c⁄° 
_Tp
* 
vec
 = &
_vec
[0];

3461 c⁄° 
PARENT
=0;

3462 c⁄° 
RANK
=1;

3464 
ve˘‹
<> 
	`_nodes
(
N
*2);

3465 (*
nodes
)[2] = ((*)[2])&
_nodes
[0];

3468 
i
 = 0; i < 
N
; i++)

3470 
nodes
[
i
][
PARENT
]=-1;

3471 
nodes
[
i
][
RANK
] = 0;

3475  
i
 = 0; i < 
N
; i++ )

3477 
roŸ
 = 
i
;

3480  
nodes
[
roŸ
][
PARENT
] >= 0 )

3481 
roŸ
 = 
nodes
[roŸ][
PARENT
];

3483  
j
 = 0; j < 
N
; j++ )

3485 if–
i
 =
j
 || !
	`¥ediˇã
(
vec
[i], vec[j]))

3487 
roŸ2
 = 
j
;

3489  
nodes
[
roŸ2
][
PARENT
] >= 0 )

3490 
roŸ2
 = 
nodes
[roŸ2][
PARENT
];

3492 if–
roŸ2
 !
roŸ
 )

3495 
ønk
 = 
nodes
[
roŸ
][
RANK
], 
ønk2
 =Çodes[
roŸ2
][RANK];

3496 if–
ønk
 > 
ønk2
 )

3497 
nodes
[
roŸ2
][
PARENT
] = 
roŸ
;

3500 
nodes
[
roŸ
][
PARENT
] = 
roŸ2
;

3501 
nodes
[
roŸ2
][
RANK
] +
ønk
 =
ønk2
;

3502 
roŸ
 = 
roŸ2
;

3504 
	`as£π
–
nodes
[
roŸ
][
PARENT
] < 0 );

3506 
k
 = 
j
, 
∑ª¡
;

3509  (
∑ª¡
 = 
nodes
[
k
][
PARENT
]) >= 0 )

3511 
nodes
[
k
][
PARENT
] = 
roŸ
;

3512 
k
 = 
∑ª¡
;

3516 
k
 = 
i
;

3517  (
∑ª¡
 = 
nodes
[
k
][
PARENT
]) >= 0 )

3519 
nodes
[
k
][
PARENT
] = 
roŸ
;

3520 
k
 = 
∑ª¡
;

3527 
œbñs
.
	`ªsize
(
N
);

3528 
n˛as£s
 = 0;

3530  
i
 = 0; i < 
N
; i++ )

3532 
roŸ
 = 
i
;

3533  
nodes
[
roŸ
][
PARENT
] >= 0 )

3534 
roŸ
 = 
nodes
[roŸ][
PARENT
];

3536 if–
nodes
[
roŸ
][
RANK
] >= 0 )

3537 
nodes
[
roŸ
][
RANK
] = ~
n˛as£s
++;

3538 
œbñs
[
i
] = ~
nodes
[
roŸ
][
RANK
];

3541  
n˛as£s
;

3542 
	}
}

3548 
CV_EXPORTS
 
sch¨
* 
£qPush
–
CvSeq
* 
£q
, c⁄° * 
ñemít
=0);

3549 
CV_EXPORTS
 
sch¨
* 
£qPushFr⁄t
–
CvSeq
* 
£q
, c⁄° * 
ñemít
=0);

3550 
CV_EXPORTS
 
£qP›
–
CvSeq
* 
£q
, * 
ñemít
=0);

3551 
CV_EXPORTS
 
£qP›Fr⁄t
–
CvSeq
* 
£q
, * 
ñemít
=0);

3552 
CV_EXPORTS
 
£qP›Mu…i
–
CvSeq
* 
£q
, * 
ñemíts
,

3553 
cou¡
, 
ö_‰⁄t
=0 );

3554 
CV_EXPORTS
 
£qRemove
–
CvSeq
* 
£q
, 
ödex
 );

3555 
CV_EXPORTS
 
˛órSeq
–
CvSeq
* 
£q
 );

3556 
CV_EXPORTS
 
sch¨
* 
gëSeqEÀm
–c⁄° 
CvSeq
* 
£q
, 
ödex
 );

3557 
CV_EXPORTS
 
£qRemoveSli˚
–
CvSeq
* 
£q
, 
CvSli˚
 
¶i˚
 );

3558 
CV_EXPORTS
 
£qIn£πSli˚
–
CvSeq
* 
£q
, 
bef‹e_ödex
, c⁄° 
CvAº
* 
‰om_¨r
 );

3560 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$Seq
(Ë: 
	$£q
(0Ë{
	}
}

3561 
ãm∂©e
<
ty≥«me
 
_Tp
> 
ölöe
 
Seq
<_Tp>::
	$Seq
–c⁄° 
CvSeq
* 
_£q
 ) : 
	`£q
((CvSeq*)_seq)

3563 
	`CV_As£π
(!
_£q
 || _£q->
ñem_size
 =(
_Tp
));

3564 
	}
}

3566 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$Seq
–
MemSt‹age
& 
°‹age
,

3567 
hódîSize
 )

3569 
	`CV_As£π
(
hódîSize
 >()(
CvSeq
));

3570 
£q
 = 
	`cvCª©eSeq
(
D©aTy≥
<
_Tp
>::
ty≥
, 
hódîSize
, (_Tp), 
°‹age
);

3571 
	}
}

3573 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gSeq
<_Tp>::
›î©‹
 [](
idx
)

3574 {  *(
_Tp
*)
gëSeqEÀm
(
£q
, 
idx
); }

3576 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gSeq
<_Tp>::
›î©‹
 [](
idx
) const

3577 {  *(
_Tp
*)
gëSeqEÀm
(
£q
, 
idx
); }

3579 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeqIãøt‹
<_Tp> 
	gSeq
<_Tp>::
	$begö
() const

3580 {  
SeqIãøt‹
<
_Tp
>(*
this
); 
	}
}

3582 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeqIãøt‹
<_Tp> 
	gSeq
<_Tp>::
	$íd
() const

3583 {  
SeqIãøt‹
<
_Tp
>(*
this
, 
åue
); 
	}
}

3585 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
size_t
 
	gSeq
<_Tp>::
	$size
() const

3586 {  
£q
 ? seq->
tŸÆ
 : 0; 
	}
}

3588 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$ty≥
() const

3589 {  
£q
 ? 
	`CV_MAT_TYPE
(£q->
Êags
Ë: 0; 
	}
}

3591 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$dïth
() const

3592 {  
£q
 ? 
	`CV_MAT_DEPTH
(£q->
Êags
Ë: 0; 
	}
}

3594 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$ch™√ls
() const

3595 {  
£q
 ? 
	`CV_MAT_CN
(£q->
Êags
Ë: 0; 
	}
}

3597 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
size_t
 
	gSeq
<_Tp>::
	$ñemSize
() const

3598 {  
£q
 ? seq->
ñem_size
 : 0; 
	}
}

3600 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
size_t
 
	gSeq
<_Tp>::
	$ödex
(c⁄° 
_Tp
& 
ñem
) const

3601 {  
	`cvSeqEÀmIdx
(
£q
, &
ñem
); 
	}
}

3603 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$push_back
(c⁄° 
_Tp
& 
ñem
)

3604 { 
	`cvSeqPush
(
£q
, &
ñem
); 
	}
}

3606 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$push_‰⁄t
(c⁄° 
_Tp
& 
ñem
)

3607 { 
	`cvSeqPushFr⁄t
(
£q
, &
ñem
); 
	}
}

3609 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$push_back
(c⁄° 
_Tp
* 
ñem
, 
size_t
 
cou¡
)

3610 { 
	`cvSeqPushMu…i
(
£q
, 
ñem
, ()
cou¡
, 0); 
	}
}

3612 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$push_‰⁄t
(c⁄° 
_Tp
* 
ñem
, 
size_t
 
cou¡
)

3613 { 
	`cvSeqPushMu…i
(
£q
, 
ñem
, ()
cou¡
, 1); 
	}
}

3615 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gSeq
<_Tp>::
	$back
()

3616 {  *(
_Tp
*)
	`gëSeqEÀm
(
£q
, -1); 
	}
}

3618 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gSeq
<_Tp>::
	$back
() const

3619 {  *(c⁄° 
_Tp
*)
	`gëSeqEÀm
(
£q
, -1); 
	}
}

3621 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gSeq
<_Tp>::
	$‰⁄t
()

3622 {  *(
_Tp
*)
	`gëSeqEÀm
(
£q
, 0); 
	}
}

3624 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gSeq
<_Tp>::
	$‰⁄t
() const

3625 {  *(c⁄° 
_Tp
*)
	`gëSeqEÀm
(
£q
, 0); 
	}
}

3627 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	gSeq
<_Tp>::
	$em±y
() const

3628 {  !
£q
 || seq->
tŸÆ
 =0; 
	}
}

3630 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$˛ór
()

3631 { if(
£q
Ë
	`˛órSeq
(£q); 
	}
}

3633 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$p›_back
()

3634 { 
	`£qP›
(
£q
); 
	}
}

3636 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$p›_‰⁄t
()

3637 { 
	`£qP›Fr⁄t
(
£q
); 
	}
}

3639 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$p›_back
(
_Tp
* 
ñem
, 
size_t
 
cou¡
)

3640 { 
	`£qP›Mu…i
(
£q
, 
ñem
, ()
cou¡
, 0); 
	}
}

3642 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$p›_‰⁄t
(
_Tp
* 
ñem
, 
size_t
 
cou¡
)

3643 { 
	`£qP›Mu…i
(
£q
, 
ñem
, ()
cou¡
, 1); 
	}
}

3645 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$ö£π
(
idx
, c⁄° 
_Tp
& 
ñem
)

3646 { 
	`£qIn£π
(
£q
, 
idx
, &
ñem
); 
	}
}

3648 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$ö£π
(
idx
, c⁄° 
_Tp
* 
ñems
, 
size_t
 
cou¡
)

3650 
CvM©
 
m
 = 
	`cvM©
(1, 
cou¡
, 
D©aTy≥
<
_Tp
>::
ty≥
, 
ñems
);

3651 
	`£qIn£πSli˚
(
£q
, 
idx
, &
m
);

3652 
	}
}

3654 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$ªmove
(
idx
)

3655 { 
	`£qRemove
(
£q
, 
idx
); 
	}
}

3657 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
	$ªmove
(c⁄° 
R™ge
& 
r
)

3658 { 
	`£qRemoveSli˚
(
£q
, 
r
); 
	}
}

3660 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
c›yTo
(
ve˘‹
<
_Tp
>& 
vec
, c⁄° 
R™ge
& 
ønge
) const

3662 
size_t
 
	gÀn
 = !
£q
 ? 0 : 
ønge
 =
R™ge
::
Æl
(Ë? seq->
tŸÆ
 :Ñ™ge.
íd
 -Ñ™ge.
°¨t
;

3663 
	gvec
.
ªsize
(
Àn
);

3664 if–
	g£q
 && 
	gÀn
 )

3665 
cvCvtSeqToAºay
(
£q
, &
vec
[0], 
ønge
);

3668 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeq
<_Tp>::
›î©‹
 
ve˘‹
<
_Tp
>() const

3670 
ve˘‹
<
_Tp
> 
vec
;

3671 
c›yTo
(
vec
);

3672  
	gvec
;

3675 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeqIãøt‹
<_Tp>::
	$SeqIãøt‹
()

3676 { 
	`mem£t
(
this
, 0, (*this)); 
	}
}

3678 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeqIãøt‹
<_Tp>::
SeqIãøt‹
(c⁄° 
Seq
<
_Tp
>& 
_£q
, 
boﬁ
 
£ekEnd
)

3680 
cvSèπRódSeq
(
_£q
.
£q
, 
this
);

3681 
	gödex
 = 
£ekEnd
 ? 
_£q
.
£q
->
tŸÆ
 : 0;

3684 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeqIãøt‹
<_Tp>::
	$£ek
(
size_t
 
pos
)

3686 
	`cvSëSeqRódîPos
(
this
, ()
pos
, 
Ál£
);

3687 
ödex
 = 
pos
;

3688 
	}
}

3690 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
size_t
 
	gSeqIãøt‹
<_Tp>::
	$ãŒ
() const

3691 {  
ödex
; 
	}
}

3693 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 _Tp& 
	gSeqIãøt‹
<_Tp>::
›î©‹
 *()

3694 {  *(
_Tp
*)
±r
; }

3696 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 c⁄° _Tp& 
	gSeqIãøt‹
<_Tp>::
›î©‹
 *() const

3697 {  *(c⁄° 
_Tp
*)
±r
; }

3699 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeqIãøt‹
<_Tp>& SeqIãøt‹<_Tp>::
›î©‹
 ++()

3701 
CV_NEXT_SEQ_ELEM
((
_Tp
), *
this
);

3702 if–++
	gödex
 >
£q
->
tŸÆ
*2 )

3703 
ödex
 = 0;

3704  *
	gthis
;

3707 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeqIãøt‹
<_Tp> SeqIãøt‹<_Tp>::
›î©‹
 ++() const

3709 
SeqIãøt‹
<
_Tp
> 
ô
 = *
this
;

3710 ++*
	gthis
;

3711  
	gô
;

3714 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeqIãøt‹
<_Tp>& SeqIãøt‹<_Tp>::
›î©‹
 --()

3716 
CV_PREV_SEQ_ELEM
((
_Tp
), *
this
);

3717 if–--
	gödex
 < 0 )

3718 
	gödex
 = 
£q
->
tŸÆ
*2-1;

3719  *
	gthis
;

3722 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeqIãøt‹
<_Tp> SeqIãøt‹<_Tp>::
›î©‹
 --() const

3724 
SeqIãøt‹
<
_Tp
> 
ô
 = *
this
;

3725 --*
	gthis
;

3726  
	gô
;

3729 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeqIãøt‹
<_Tp>& SeqIãøt‹<_Tp>::
›î©‹
 +=(
dñè
)

3731 
cvSëSeqRódîPos
(
this
, 
dñè
, 1);

3732 
	gödex
 +
dñè
;

3733 
	gn
 = 
£q
->
tŸÆ
*2;

3734 if–
	gödex
 < 0 )

3735 
	gödex
 +
n
;

3736 if–
	gödex
 >
n
 )

3737 
ödex
 -
n
;

3738  *
	gthis
;

3741 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gSeqIãøt‹
<_Tp>& SeqIãøt‹<_Tp>::
›î©‹
 -=(
dñè
)

3743  (*
this
 +-
dñè
);

3746 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
±rdiff_t
 
	g›î©‹
 - (c⁄° 
	gSeqIãøt‹
<_Tp>& 
	ga
,

3747 c⁄° 
	gSeqIãøt‹
<
	g_Tp
>& 
	gb
)

3749 
±rdiff_t
 
	gdñè
 = 
a
.
ödex
 - 
b
.ödex, 
	gn
 =á.
£q
->
tŸÆ
;

3750 if–
	g°d
::
abs
(
°©ic_ˇ°
<>(
dñè
)Ë> 
n
 )

3751 
dñè
 +dñè < 0 ? 
n
 : -n;

3752  
	gdñè
;

3755 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	g›î©‹
 =(c⁄° 
SeqIãøt‹
<
_Tp
>& 
a
,

3756 c⁄° 
	gSeqIãøt‹
<
	g_Tp
>& 
	gb
)

3758  
	ga
.
	g£q
 =
b
.
£q
 && 
a
.
ödex
 == b.index;

3761 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
boﬁ
 
	g›î©‹
 !(c⁄° 
SeqIãøt‹
<
_Tp
>& 
a
,

3762 c⁄° 
	gSeqIãøt‹
<
	g_Tp
>& 
	gb
)

3764  !(
	ga
 =
b
);

3768 
	gãm∂©e
<
ty≥«me
 
	g_ClsName
> 
	sRTTIIm∂


3770 
	gpublic
:

3771 
isIn°™˚
(c⁄° * 
±r
)

3773 
_ClsName
 
dummy
;

3774 * 
	gdummyp
 = &
dummy
;

3777 c⁄° * 
	gp
;

3778 c⁄° ** 
	gµ
;

3779 } 
	ga
, 
	gb
;

3780 
	ga
.
	gp
 = 
dummyp
;

3781 
	gb
.
	gp
 = 
±r
;

3782  *
	ga
.
	gµ
 =*
b
.
µ
;

3784 
ªÀa£
(** 
db±r
)

3786 if(
	gdb±r
 && *dbptr)

3788 
dñëe
 (
_ClsName
*)*
	gdb±r
;

3789 *
	gdb±r
 = 0;

3792 * 
ªad
(
CvFûeSt‹age
* 
fs
, 
CvFûeNode
* 
n
)

3794 
FûeNode
 
‚
(
fs
, 
n
);

3795 
_ClsName
* 
	gobj
 = 
√w
 _ClsName;

3796 if(
	gobj
->
ªad
(
‚
))

3797  
	gobj
;

3798 
dñëe
 
	gobj
;

3802 
wrôe
(
CvFûeSt‹age
* 
_fs
, c⁄° * 
«me
, c⁄° * 
±r
, 
CvAârLi°
)

3804 if(
	g±r
 && 
	g_fs
)

3806 
FûeSt‹age
 
fs
(
_fs
);

3807 
	gfs
.fs.
addªf
();

3808 ((c⁄° 
	g_ClsName
*)
	g±r
)->
wrôe
(
fs
, 
°rög
(
«me
));

3812 * 
˛⁄e
(c⁄° * 
±r
)

3814 if(!
	g±r
)

3816  
√w
 
_ClsName
(*(c⁄° _ClsName*)
±r
);

3821 ˛as†
	cCV_EXPORTS
 
	gF‹m©ãr


3823 
	gpublic
:

3824 
vútuÆ
 ~
F‹m©ãr
() {}

3825 
vútuÆ
 
wrôe
(
°d
::
o°ªam
& 
out
, c⁄° 
M©
& 
m
, c⁄° * 
∑øms
=0, 
≈¨ams
=0) const = 0;

3826 
vútuÆ
 
wrôe
(
°d
::
o°ªam
& 
out
, c⁄° * 
d©a
, 
√Àms
, 
ty≥
,

3827 c⁄° * 
∑øms
=0, 
≈¨ams
=0) const = 0;

3828 c⁄° 
F‹m©ãr
* 
gë
(c⁄° * 
fmt
="");

3829 c⁄° 
F‹m©ãr
* 
£tDeÁu…
(c⁄° F‹m©ãr* 
fmt
);

3833 
CV_EXPORTS
 
	gF‹m©ãd


3835 
F‹m©ãd
(c⁄° 
M©
& 
m
, c⁄° 
F‹m©ãr
* 
fmt
,

3836 c⁄° 
ve˘‹
<>& 
∑øms
);

3837 
F‹m©ãd
(c⁄° 
M©
& 
m
, c⁄° 
F‹m©ãr
* 
fmt
,

3838 c⁄° * 
∑øms
=0);

3839 
M©
 
	gmtx
;

3840 c⁄° 
F‹m©ãr
* 
	gfmt
;

3841 
	gve˘‹
<> 
	g∑øms
;

3844 
ölöe
 
F‹m©ãd
 
f‹m©
(c⁄° 
M©
& 
mtx
, c⁄° * 
fmt
,

3845 c⁄° 
ve˘‹
<>& 
∑øms
=vector<>())

3847  
F‹m©ãd
(
mtx
, 
F‹m©ãr
::
gë
(
fmt
), 
∑øms
);

3850 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
F‹m©ãd
 
f‹m©
(c⁄° 
ve˘‹
<
Poöt_
<
_Tp
> >& 
vec
,

3851 c⁄° * 
fmt
, c⁄° 
ve˘‹
<>& 
∑øms
=vector<>())

3853  
F‹m©ãd
(
M©
(
vec
), 
F‹m©ãr
::
gë
(
fmt
), 
∑øms
);

3856 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
F‹m©ãd
 
f‹m©
(c⁄° 
ve˘‹
<
Poöt3_
<
_Tp
> >& 
vec
,

3857 c⁄° * 
fmt
, c⁄° 
ve˘‹
<>& 
∑øms
=vector<>())

3859  
F‹m©ãd
(
M©
(
vec
), 
F‹m©ãr
::
gë
(
fmt
), 
∑øms
);

3869 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
 << (
°d
::o°ªam& 
out
, c⁄° 
	gM©
& 
	gmtx
)

3871 
	gF‹m©ãr
::
gë
()->
wrôe
(
out
, 
mtx
);

3872  
	gout
;

3882 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
 << (
°d
::o°ªam& 
out
, c⁄° 
	gF‹m©ãd
& 
	gfmtd
)

3884 
	gfmtd
.
	gfmt
->
wrôe
(
out
, 
fmtd
.
mtx
);

3885  
	gout
;

3889 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
 << (
°d
::o°ªam& 
out
,

3890 c⁄° 
	gve˘‹
<
	gPoöt_
<
	g_Tp
> >& 
	gvec
)

3892 
	gF‹m©ãr
::
gë
()->
wrôe
(
out
, 
M©
(
vec
));

3893  
	gout
;

3897 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
 << (
°d
::o°ªam& 
out
,

3898 c⁄° 
	gve˘‹
<
	gPoöt3_
<
	g_Tp
> >& 
	gvec
)

3900 
	gF‹m©ãr
::
gë
()->
wrôe
(
out
, 
M©
(
vec
));

3901  
	gout
;

3907 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gm
, 
	gn
> 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
out
, c⁄° 
	gM©x
<_Tp, m,Ç>& 
	gm©x
)

3909 
	gout
 << 
	gcv
::
M©
(
m©x
);

3910  
	gout
;

3915 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
out
, c⁄° 
	gPoöt_
<_Tp>& 
	gp
)

3917 
	gout
 << "[" << 
	gp
.
	gx
 << ", " <<Ö.
	gy
 << "]";

3918  
	gout
;

3923 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
out
, c⁄° 
	gPoöt3_
<_Tp>& 
	gp
)

3925 
	gout
 << "[" << 
	gp
.
	gx
 << ", " <<Ö.
	gy
 << ", " <<Ö.
	gz
 << "]";

3926  
	gout
;

3931 
	gãm∂©e
<
ty≥«me
 
	g_Tp
, 
	gn
> 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
out
, c⁄° 
	gVec
<_Tp,Ç>& 
	gvec
)

3933 
	gout
 << "[";

3935 if(
	gVec
<
	g_Tp
, 
	gn
>::
dïth
 < 
CV_32F
)

3937 
i
 = 0; 
	gi
 < 
	gn
 - 1; ++i) {

3938 
	gout
 << ()
	gvec
[
i
] << ", ";

3940 
	gout
 << ()
	gvec
[
n
-1] << "]";

3944 
	gi
 = 0; i < 
	gn
 - 1; ++i) {

3945 
	gout
 << 
	gvec
[
i
] << ", ";

3947 
	gout
 << 
	gvec
[
n
-1] << "]";

3950  
	gout
;

3955 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
out
, c⁄° 
	gSize_
<_Tp>& 
	gsize
)

3957 
	gout
 << "[" << 
	gsize
.
	gwidth
 << " x " << size.
	gheight
 << "]";

3958  
	gout
;

3963 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
out
, c⁄° 
	gRe˘_
<_Tp>& 
	gª˘
)

3965 
	gout
 << "[" << 
	gª˘
.
	gwidth
 << " x " <<Ñe˘.
	gheight
 << " from (" <<Ñe˘.
	gx
 << ", " <<Ñe˘.
	gy
 << ")]";

3966  
	gout
;

3970 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gPå
<_Tp> 
	gAlg‹ôhm
::
	$¸óã
(c⁄° 
°rög
& 
«me
)

3972  
	`_¸óã
(
«me
).
±r
<
_Tp
>();

3973 
	}
}

3975 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>

3976 
ölöe
 
	gAlg‹ôhm
::
£t
(c⁄° * 
_«me
, c⁄° 
På
<
_Tp
>& 
vÆue
)

3978 
	gPå
<
	gAlg‹ôhm
> 
	gÆgo_±r
 = 
vÆue
. 
ãm∂©e
 
±r
<
cv
::
Alg‹ôhm
>();

3979 i‡(
	gÆgo_±r
.
em±y
()) {

3980 
CV_Eº‹
–
CV_StsUnsuµ‹ãdF‹m©
, "unknown/unsupported PtrÅype ofÅhe secondÖarameter ofÅhe method Algorithm::set");

3982 
öfo
()->
£t
(
this
, 
_«me
, 
P¨amTy≥
<
Alg‹ôhm
>::
ty≥
, &
Ægo_±r
);

3985 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>

3986 
ölöe
 
	gAlg‹ôhm
::
£t
(c⁄° 
°rög
& 
_«me
, c⁄° 
På
<
_Tp
>& 
vÆue
)

3988 
	gthis
->
	g£t
<
	g_Tp
>(
	g_«me
.
c_°r
(), 
	gvÆue
);

3991 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>

3992 
ölöe
 
	gAlg‹ôhm
::
£tAlg‹ôhm
(c⁄° * 
_«me
, c⁄° 
På
<
_Tp
>& 
vÆue
)

3994 
	gPå
<
	gAlg‹ôhm
> 
	gÆgo_±r
 = 
vÆue
. 
ãm∂©e
 
±r
<
cv
::
Alg‹ôhm
>();

3995 i‡(
	gÆgo_±r
.
em±y
()) {

3996 
CV_Eº‹
–
CV_StsUnsuµ‹ãdF‹m©
, "unknown/unsupported PtrÅype ofÅhe secondÖarameter ofÅhe method Algorithm::set");

3998 
öfo
()->
£t
(
this
, 
_«me
, 
P¨amTy≥
<
Alg‹ôhm
>::
ty≥
, &
Ægo_±r
);

4001 
	gãm∂©e
<
ty≥«me
 
	g_Tp
>

4002 
ölöe
 
	gAlg‹ôhm
::
£tAlg‹ôhm
(c⁄° 
°rög
& 
_«me
, c⁄° 
På
<
_Tp
>& 
vÆue
)

4004 
	gthis
->
	g£t
<
	g_Tp
>(
	g_«me
.
c_°r
(), 
	gvÆue
);

4007 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
Åy≥«mê
	gP¨amTy≥
<_Tp>::
membî_ty≥
 
Alg‹ôhm
::
	$gë
(c⁄° 
°rög
& 
_«me
) const

4009 
ty≥«me
 
P¨amTy≥
<
_Tp
>::
membî_ty≥
 
vÆue
;

4010 
	`öfo
()->
	`gë
(
this
, 
_«me
.
	`c_°r
(), 
P¨amTy≥
<
_Tp
>::
ty≥
, &
vÆue
);

4011  
vÆue
;

4012 
	}
}

4014 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
Åy≥«mê
	gP¨amTy≥
<_Tp>::
membî_ty≥
 
Alg‹ôhm
::
	$gë
(c⁄° * 
_«me
) const

4016 
ty≥«me
 
P¨amTy≥
<
_Tp
>::
membî_ty≥
 
vÆue
;

4017 
	`öfo
()->
	`gë
(
this
, 
_«me
, 
P¨amTy≥
<
_Tp
>::
ty≥
, &
vÆue
);

4018  
vÆue
;

4019 
	}
}

4021 
	gãm∂©e
<
ty≥«me
 
	g_Tp
,Åy≥«mê
	g_Ba£
> 
ölöe
 
	gAlg‹ôhmInfo
::
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
∑ømëî
,

4022 
På
<
_Tp
>& 
vÆue
, 
boﬁ
 
ªadO∆y
, På<_Tp> (
Alg‹ôhm
::*
gëãr
)(), (Alg‹ôhm::*
£âî
)(const Ptr<_Tp>&),

4023 c⁄° 
°rög
& 
hñp
)

4026 
	`addP¨am_
(
Ægo
, 
∑ømëî
, 
P¨amTy≥
<
_Ba£
>::
ty≥
, &
vÆue
, 
ªadO∆y
,

4027 (
Alg‹ôhm
::
Gëãr
)
gëãr
, (Alg‹ôhm::
Sëãr
)
£âî
, 
hñp
);

4028 
	}
}

4030 
	gãm∂©e
<
ty≥«me
 
	g_Tp
> 
ölöe
 
	gAlg‹ôhmInfo
::
addP¨am
(
Alg‹ôhm
& 
Ægo
, c⁄° * 
∑ømëî
,

4031 
På
<
_Tp
>& 
vÆue
, 
boﬁ
 
ªadO∆y
, På<_Tp> (
Alg‹ôhm
::*
gëãr
)(), (Alg‹ôhm::*
£âî
)(const Ptr<_Tp>&),

4032 c⁄° 
°rög
& 
hñp
)

4035 
	`addP¨am_
(
Ægo
, 
∑ømëî
, 
P¨amTy≥
<
Alg‹ôhm
>::
ty≥
, &
vÆue
, 
ªadO∆y
,

4036 (
Alg‹ôhm
::
Gëãr
)
gëãr
, (Alg‹ôhm::
Sëãr
)
£âî
, 
hñp
);

4037 
	}
}

4041 #ifde‡
_MSC_VER


4042 #¥agm®
w¨nög
(
p›
)

	@/usr/include/opencv2/core/types_c.h

43 #i‚de‡
__OPENCV_CORE_TYPES_H__


44 
	#__OPENCV_CORE_TYPES_H__


	)

46 #i‡!
deföed
 
_CRT_SECURE_NO_DEPRECATE
 && deföed 
_MSC_VER


47 #i‡
_MSC_VER
 > 1300

48 
	#_CRT_SECURE_NO_DEPRECATE


	)

53 #i‚de‡
SKIP_INCLUDES


55 
	~<as£π.h
>

56 
	~<°dlib.h
>

57 
	~<°rög.h
>

58 
	~<Êﬂt.h
>

60 #i‡!
deföed
 
_MSC_VER
 && !deföed 
__BORLANDC__


61 
	~<°döt.h
>

64 #i‡
deföed
 
__ICL


65 
	#CV_ICC
 
__ICL


	)

66 #ñi‡
deföed
 
__ICC


67 
	#CV_ICC
 
__ICC


	)

68 #ñi‡
deföed
 
__ECL


69 
	#CV_ICC
 
__ECL


	)

70 #ñi‡
deföed
 
__ECC


71 
	#CV_ICC
 
__ECC


	)

72 #ñi‡
deföed
 
__INTEL_COMPILER


73 
	#CV_ICC
 
__INTEL_COMPILER


	)

76 #i‡
deföed
 
CV_ICC
 && !deföed 
CV_ENABLE_UNROLLED


77 
	#CV_ENABLE_UNROLLED
 0

	)

79 
	#CV_ENABLE_UNROLLED
 1

	)

82 #i‡(
deföed
 
_M_X64
 && deföed 
_MSC_VER
 && _MSC_VER >1400Ë|| (
__GNUC__
 >4 && deföed 
__x86_64__
)

83 #i‡
deföed
 
WIN32


84 
	~<öåö.h
>

86 #i‡
deföed
 
__SSE2__
 || !deföed 
__GNUC__


87 
	~<emmöåö.h
>

91 #i‡
deföed
 
__BORLANDC__


92 
	~<Á°m©h.h
>

94 
	~<m©h.h
>

97 #ifde‡
HAVE_IPL


98 #i‚de‡
__IPL_H__


99 #i‡
deföed
 
WIN32
 || deföed 
_WIN32


100 
	~<ùl.h
>

102 
	~<ùl/ùl.h
>

105 #ñi‡
deföed
 
__IPL_H__


106 
	#HAVE_IPL


	)

111 #i‡
deföed
 
WIN32
 || deföed 
_WIN32


112 
	#CV_CDECL
 
__cde˛


	)

113 
	#CV_STDCALL
 
__°dˇŒ


	)

115 
	#CV_CDECL


	)

116 
	#CV_STDCALL


	)

119 #i‚de‡
CV_EXTERN_C


120 #ifde‡
__˝lu•lus


121 
	#CV_EXTERN_C
 "C"

	)

122 
	#CV_DEFAULT
(
vÆ
Ë
	)
val

124 
	#CV_EXTERN_C


	)

125 
	#CV_DEFAULT
(
vÆ
)

	)

129 #i‚de‡
CV_EXTERN_C_FUNCPTR


130 #ifde‡
__˝lu•lus


131 
	#CV_EXTERN_C_FUNCPTR
(
x
Ë"C" { x; }

	)

133 
	#CV_EXTERN_C_FUNCPTR
(
x
Ë
	)
x

137 #i‚de‡
	tCV_INLINE


138 #i‡
	tdeföed
 
	t__˝lu•lus


139 
	tCV_INLINE
 
	tölöe


	)

140 #ñi‡
	tdeföed
 
	t_MSC_VER


141 
	tCV_INLINE
 
	t__ölöe


	)

143 
	tCV_INLINE
 

	)

147 #i‡(
	tdeföed
 
	tWIN32
 || deföed 
	t_WIN32
 || deföed 
	tWINCE
Ë&& deföed 
	tCVAPI_EXPORTS


148 
	tCV_EXPORTS
 
	t__de˛•ec
(
	tdŒexp‹t
)

	)

150 
	tCV_EXPORTS


	)

153 #i‚de‡
	tCVAPI


154 
	tCVAPI
(
	tªây≥
Ë
	tCV_EXTERN_C
 
	tCV_EXPORTS
Ñëty≥ 
	tCV_CDECL


	)

157 #i‡
	tdeföed
 
	t_MSC_VER
 || deföed 
	t__BORLANDC__


158 
__öt64
 
	töt64
;

159 
	t__öt64
 
	tuöt64
;

160 
	#CV_BIG_INT
(
n
Ën##
I64


	)

161 
	#CV_BIG_UINT
(
n
Ën##
UI64


	)

163 
öt64_t
 
	töt64
;

164 
uöt64_t
 
	tuöt64
;

165 
	#CV_BIG_INT
(
n
Ën##
LL


	)

166 
	#CV_BIG_UINT
(
n
Ën##
ULL


	)

169 #i‚de‡
HAVE_IPL


170 
	tuch¨
;

171 
	tush‹t
;

174 sig√d 
	tsch¨
;

177 
	#CV_CARRAY
(
cou¡î
)

	)

178 
	#CV_CUSTOM_CARRAY
(
¨gs
)

	)

179 
	#CV_EXPORTS_W
 
CV_EXPORTS


	)

180 
	#CV_EXPORTS_W_SIMPLE
 
CV_EXPORTS


	)

181 
	#CV_EXPORTS_AS
(
syn⁄ym
Ë
CV_EXPORTS


	)

182 
	#CV_EXPORTS_W_MAP
 
CV_EXPORTS


	)

183 
	#CV_IN_OUT


	)

184 
	#CV_OUT


	)

185 
	#CV_PROP


	)

186 
	#CV_PROP_RW


	)

187 
	#CV_WRAP


	)

188 
	#CV_WRAP_AS
(
syn⁄ym
)

	)

189 
	#CV_WRAP_DEFAULT
(
vÆue
)

	)

196 
	tCvAº
;

198 
	uCv32suf


200 
	mi
;

201 
	mu
;

202 
	mf
;

204 
	tCv32suf
;

206 
	uCv64suf


208 
öt64
 
	mi
;

209 
uöt64
 
	mu
;

210 
	mf
;

212 
	tCv64suf
;

214 
	tCVSètus
;

217 
	mCV_StsOk
= 0,

218 
	mCV_StsBackTø˚
= -1,

219 
	mCV_StsEº‹
= -2,

220 
	mCV_StsI¡î«l
= -3,

221 
	mCV_StsNoMem
= -4,

222 
	mCV_StsBadArg
= -5,

223 
	mCV_StsBadFunc
= -6,

224 
	mCV_StsNoC⁄v
= -7,

225 
	mCV_StsAutoTø˚
= -8,

226 
	mCV_HódîIsNuŒ
= -9,

227 
	mCV_BadImageSize
= -10,

228 
	mCV_BadOff£t
= -11,

229 
	mCV_BadD©aPå
= -12,

230 
	mCV_BadSãp
= -13,

231 
	mCV_BadModñOrChSeq
= -14,

232 
	mCV_BadNumCh™√ls
= -15,

233 
	mCV_BadNumCh™√l1U
= -16,

234 
	mCV_BadDïth
= -17,

235 
	mCV_BadAÕhaCh™√l
= -18,

236 
	mCV_BadOrdî
= -19,

237 
	mCV_BadOrigö
= -20,

238 
	mCV_BadAlign
= -21,

239 
	mCV_BadCÆlBack
= -22,

240 
	mCV_BadTûeSize
= -23,

241 
	mCV_BadCOI
= -24,

242 
	mCV_BadROISize
= -25,

243 
	mCV_MaskIsTûed
= -26,

244 
	mCV_StsNuŒPå
= -27,

245 
	mCV_StsVecLígthEº
= -28,

246 
	mCV_StsFûãrSåu˘C⁄ã¡Eº
= -29,

247 
	mCV_StsKî√lSåu˘C⁄ã¡Eº
= -30,

248 
	mCV_StsFûãrOff£tEº
= -31,

249 
	mCV_StsBadSize
= -201,

250 
	mCV_StsDivByZîo
= -202,

251 
	mCV_StsI≈œ˚NŸSuµ‹ãd
= -203,

252 
	mCV_StsObje˘NŸFound
= -204,

253 
	mCV_StsUnm©chedF‹m©s
= -205,

254 
	mCV_StsBadFœg
= -206,

255 
	mCV_StsBadPoöt
= -207,

256 
	mCV_StsBadMask
= -208,

257 
	mCV_StsUnm©chedSizes
= -209,

258 
	mCV_StsUnsuµ‹ãdF‹m©
= -210,

259 
	mCV_StsOutOfR™ge
= -211,

260 
	mCV_StsP¨£Eº‹
= -212,

261 
	mCV_StsNŸIm∂emíãd
= -213,

262 
	mCV_StsBadMemBlock
= -214,

263 
	mCV_StsAs£π
= -215,

264 
	mCV_GpuNŸSuµ‹ãd
= -216,

265 
	mCV_GpuApiCÆlEº‹
= -217,

266 
	mCV_O≥nGlNŸSuµ‹ãd
= -218,

267 
	mCV_O≥nGlApiCÆlEº‹
= -219,

268 
	mCV_O≥nCLDoubÀNŸSuµ‹ãd
= -220,

269 
	mCV_O≥nCLInôEº‹
= -221,

270 
	mCV_O≥nCLNoAMDBœsF·
= -222

277 #ifde‡
HAVE_TEGRA_OPTIMIZATION


278 
	~"ãgø_round.hµ
"

281 
	#CV_PI
 3.1415926535897932384626433832795

	)

282 
	#CV_LOG2
 0.69314718055994530941723212145818

	)

284 
	#CV_SWAP
(
a
,
b
,
t
Ë(—Ë◊), (aË(b), (bË—))

	)

286 #i‚de‡
MIN


287 
	#MIN
(
a
,
b
Ë(◊Ë> (bË? (bË: (a))

	)

290 #i‚de‡
MAX


291 
	#MAX
(
a
,
b
Ë(◊Ë< (bË? (bË: (a))

	)

295 
	#CV_IMIN
(
a
, 
b
Ë(◊Ë^ ((◊)^(b)Ë& ((◊Ë< (b)Ë- 1)))

	)

297 
	#CV_IMAX
(
a
, 
b
Ë(◊Ë^ ((◊)^(b)Ë& ((◊Ë> (b)Ë- 1)))

	)

300 #i‚de‡
__˝lu•lus


301 
	#CV_IABS
(
a
Ë((◊Ë^ (◊Ë< 0 ? -1 : 0)Ë- (◊Ë< 0 ? -1 : 0))

	)

303 
	#CV_IABS
(
a
Ë
	`abs
◊)

	)

305 
	#CV_CMP
(
a
,
b
Ë((◊Ë> (b)Ë- (◊Ë< (b)))

	)

306 
	#CV_SIGN
(
a
Ë
	`CV_CMP
(◊),0)

	)

308 
CV_INLINE
 
	$cvRound
–
vÆue
 )

310 #i‡(
deföed
 
_MSC_VER
 && deföed 
_M_X64
Ë|| (deföed 
__GNUC__
 && deföed 
__x86_64__
 && deföed 
__SSE2__
 && !deföed 
__APPLE__
)

311 
__m128d
 
t
 = 
	`_mm_£t_sd
–
vÆue
 );

312  
	`_mm_cvtsd_si32
(
t
);

313 #ñi‡
deföed
 
_MSC_VER
 && deföed 
_M_IX86


314 
t
;

315 
__asm


317 
Êd
 
vÆue
;

318 
fi°p
 
t
;

320  
t
;

321 #ñi‡
deföed
 
_MSC_VER
 && deföed 
_M_ARM
 && deföed 
HAVE_TEGRA_OPTIMIZATION


322 
	`TEGRA_ROUND
(
vÆue
);

323 #ñi‡
deföed
 
CV_ICC
 || deföed 
__GNUC__


324 #ifde‡
HAVE_TEGRA_OPTIMIZATION


325 
	`TEGRA_ROUND
(
vÆue
);

327  ()
	`Ãöt
(
vÆue
);

330 
öç¨t
, 
‰a˘∑π
;

331 
‰a˘∑π
 = 
	`modf
(
vÆue
, &
öç¨t
);

332 i‡((
	`Ábs
(
‰a˘∑π
Ë!0.5Ë|| (((()
öç¨t
) % 2) != 0))

333  ()(
vÆue
 + (value >= 0 ? 0.5 : -0.5));

335  ()
öç¨t
;

337 
	}
}

339 #i‡
deföed
 
__SSE2__
 || (deföed 
_M_IX86_FP
 && 2 == _M_IX86_FP)

340 
	~"emmöåö.h
"

343 
CV_INLINE
 
	$cvFlo‹
–
vÆue
 )

345 #i‡
deföed
 
_MSC_VER
 && deföed 
_M_X64
 || (deföed 
__GNUC__
 && deföed 
__SSE2__
 && !deföed 
__APPLE__
)

346 
__m128d
 
t
 = 
	`_mm_£t_sd
–
vÆue
 );

347 
i
 = 
	`_mm_cvtsd_si32
(
t
);

348  
i
 - 
	`_mm_movemask_pd
(
	`_mm_cm∂t_sd
(
t
, 
	`_mm_cvtsi32_sd
(t,i)));

349 #ñi‡
deföed
 
__GNUC__


350 
i
 = ()
vÆue
;

351  
i
 - (ò> 
vÆue
);

353 
i
 = 
	`cvRound
(
vÆue
);

354 
diff
 = ()(
vÆue
 - 
i
);

355  
i
 - (
diff
 < 0);

357 
	}
}

360 
CV_INLINE
 
	$cvCeû
–
vÆue
 )

362 #i‡
deföed
 
_MSC_VER
 && deföed 
_M_X64
 || (deföed 
__GNUC__
 && deföed 
__SSE2__
&& !deföed 
__APPLE__
)

363 
__m128d
 
t
 = 
	`_mm_£t_sd
–
vÆue
 );

364 
i
 = 
	`_mm_cvtsd_si32
(
t
);

365  
i
 + 
	`_mm_movemask_pd
(
	`_mm_cm∂t_sd
(
	`_mm_cvtsi32_sd
(
t
,i),Å));

366 #ñi‡
deföed
 
__GNUC__


367 
i
 = ()
vÆue
;

368  
i
 + (ò< 
vÆue
);

370 
i
 = 
	`cvRound
(
vÆue
);

371 
diff
 = ()(
i
 - 
vÆue
);

372  
i
 + (
diff
 < 0);

374 
	}
}

376 
	#cvInvSqπ
(
vÆue
Ë(()(1./
	`sqπ
(vÆue)))

	)

377 
	#cvSqπ
(
vÆue
Ë(()
	`sqπ
(vÆue))

	)

379 
CV_INLINE
 
	$cvIsNaN
–
vÆue
 )

381 
Cv64suf
 
õì754
;

382 
õì754
.
f
 = 
vÆue
;

383  (()(
õì754
.
u
 >> 32) & 0x7fffffff) +

384 (()
õì754
.
u
 != 0) > 0x7ff00000;

385 
	}
}

388 
CV_INLINE
 
	$cvIsInf
–
vÆue
 )

390 
Cv64suf
 
õì754
;

391 
õì754
.
f
 = 
vÆue
;

392  (()(
õì754
.
u
 >> 32) & 0x7fffffff) == 0x7ff00000 &&

393 ()
õì754
.
u
 == 0;

394 
	}
}

399 
uöt64
 
	tCvRNG
;

401 
	#CV_RNG_COEFF
 4164903690U

	)

403 
CV_INLINE
 
CvRNG
 
cvRNG
–
öt64
 
£ed
 
CV_DEFAULT
(-1))

405 
CvRNG
 
	g∫g
 = 
£ed
 ? (
uöt64
)£ed : (uöt64)(
öt64
)-1;

406  
	g∫g
;

410 
CV_INLINE
 
	$cvR™dI¡
–
CvRNG
* 
∫g
 )

412 
uöt64
 
ãmp
 = *
∫g
;

413 
ãmp
 = (
uöt64
)(Èemp*
CV_RNG_COEFF
 + (temp >> 32);

414 *
∫g
 = 
ãmp
;

415  ()
ãmp
;

416 
	}
}

419 
CV_INLINE
 
	$cvR™dRól
–
CvRNG
* 
∫g
 )

421  
	`cvR™dI¡
(
∫g
)*2.3283064365386962890625e-10 ;

422 
	}
}

428 #i‚de‡
HAVE_IPL


435 
	#IPL_DEPTH_SIGN
 0x80000000

	)

437 
	#IPL_DEPTH_1U
 1

	)

438 
	#IPL_DEPTH_8U
 8

	)

439 
	#IPL_DEPTH_16U
 16

	)

440 
	#IPL_DEPTH_32F
 32

	)

442 
	#IPL_DEPTH_8S
 (
IPL_DEPTH_SIGN
| 8)

	)

443 
	#IPL_DEPTH_16S
 (
IPL_DEPTH_SIGN
|16)

	)

444 
	#IPL_DEPTH_32S
 (
IPL_DEPTH_SIGN
|32)

	)

446 
	#IPL_DATA_ORDER_PIXEL
 0

	)

447 
	#IPL_DATA_ORDER_PLANE
 1

	)

449 
	#IPL_ORIGIN_TL
 0

	)

450 
	#IPL_ORIGIN_BL
 1

	)

452 
	#IPL_ALIGN_4BYTES
 4

	)

453 
	#IPL_ALIGN_8BYTES
 8

	)

454 
	#IPL_ALIGN_16BYTES
 16

	)

455 
	#IPL_ALIGN_32BYTES
 32

	)

457 
	#IPL_ALIGN_DWORD
 
IPL_ALIGN_4BYTES


	)

458 
	#IPL_ALIGN_QWORD
 
IPL_ALIGN_8BYTES


	)

460 
	#IPL_BORDER_CONSTANT
 0

	)

461 
	#IPL_BORDER_REPLICATE
 1

	)

462 
	#IPL_BORDER_REFLECT
 2

	)

463 
	#IPL_BORDER_WRAP
 3

	)

465 
	s_I∂Image


467 
	mnSize
;

468 
	mID
;

469 
	mnCh™√ls
;

470 
	mÆphaCh™√l
;

471 
	mdïth
;

473 
	mcﬁ‹Modñ
[4];

474 
	mch™√lSeq
[4];

475 
	md©aOrdî
;

477 
	m‹igö
;

479 
	mÆign
;

481 
	mwidth
;

482 
	mheight
;

483 
_I∂ROI
 *
	mroi
;

484 
_I∂Image
 *
	mmaskROI
;

485 *
	mimageId
;

486 
_I∂TûeInfo
 *
	mtûeInfo
;

487 
	mimageSize
;

490 *
	mimageD©a
;

491 
	mwidthSãp
;

492 
	mB‹dîMode
[4];

493 
	mB‹dîC⁄°
[4];

494 *
	mimageD©aOrigö
;

498 
	tI∂Image
;

500 
_I∂TûeInfo
 
	tI∂TûeInfo
;

502 
	s_I∂ROI


504 
	mcoi
;

505 
	mxOff£t
;

506 
	myOff£t
;

507 
	mwidth
;

508 
	mheight
;

510 
	tI∂ROI
;

512 
	s_I∂C⁄vKî√l


514 
	mnCﬁs
;

515 
	mnRows
;

516 
	m™ch‹X
;

517 
	m™ch‹Y
;

518 *
	mvÆues
;

519 
	mnShi·R
;

521 
	tI∂C⁄vKî√l
;

523 
	s_I∂C⁄vKî√lFP


525 
	mnCﬁs
;

526 
	mnRows
;

527 
	m™ch‹X
;

528 
	m™ch‹Y
;

529 *
	mvÆues
;

531 
	tI∂C⁄vKî√lFP
;

533 
	#IPL_IMAGE_HEADER
 1

	)

534 
	#IPL_IMAGE_DATA
 2

	)

535 
	#IPL_IMAGE_ROI
 4

	)

540 
	#IPL_BORDER_REFLECT_101
 4

	)

541 
	#IPL_BORDER_TRANSPARENT
 5

	)

543 
	#IPL_IMAGE_MAGIC_VAL
 (()(
I∂Image
))

	)

544 
	#CV_TYPE_NAME_IMAGE
 "›ícv-image"

	)

546 
	#CV_IS_IMAGE_HDR
(
img
) \

547 ((
img
Ë!
NULL
 && ((c⁄° 
I∂Image
*)(img))->
nSize
 =(I∂Image))

	)

549 
	#CV_IS_IMAGE
(
img
) \

550 (
	`CV_IS_IMAGE_HDR
(
img
Ë&& ((
I∂Image
*)img)->
imageD©a
 !
NULL
)

	)

554 
	#IPL_DEPTH_64F
 64

	)

558 
	#CV_IMAGE_ELEM
–
image
, 
ñemty≥
, 
row
, 
cﬁ
 ) \

559 (((
ñemty≥
*)((
image
)->
imageD©a
 + (image)->
widthSãp
*(
row
)))[(
cﬁ
)])

	)

565 
	#CV_CN_MAX
 512

	)

566 
	#CV_CN_SHIFT
 3

	)

567 
	#CV_DEPTH_MAX
 (1 << 
CV_CN_SHIFT
)

	)

569 
	#CV_8U
 0

	)

570 
	#CV_8S
 1

	)

571 
	#CV_16U
 2

	)

572 
	#CV_16S
 3

	)

573 
	#CV_32S
 4

	)

574 
	#CV_32F
 5

	)

575 
	#CV_64F
 6

	)

576 
	#CV_USRTYPE1
 7

	)

578 
	#CV_MAT_DEPTH_MASK
 (
CV_DEPTH_MAX
 - 1)

	)

579 
	#CV_MAT_DEPTH
(
Êags
Ë((ÊagsË& 
CV_MAT_DEPTH_MASK
)

	)

581 
	#CV_MAKETYPE
(
dïth
,
˙
Ë(
	`CV_MAT_DEPTH
(dïthË+ (((˙)-1Ë<< 
CV_CN_SHIFT
))

	)

582 
	#CV_MAKE_TYPE
 
CV_MAKETYPE


	)

584 
	#CV_8UC1
 
	`CV_MAKETYPE
(
CV_8U
,1)

	)

585 
	#CV_8UC2
 
	`CV_MAKETYPE
(
CV_8U
,2)

	)

586 
	#CV_8UC3
 
	`CV_MAKETYPE
(
CV_8U
,3)

	)

587 
	#CV_8UC4
 
	`CV_MAKETYPE
(
CV_8U
,4)

	)

588 
	#CV_8UC
(
n
Ë
	`CV_MAKETYPE
(
CV_8U
,“))

	)

590 
	#CV_8SC1
 
	`CV_MAKETYPE
(
CV_8S
,1)

	)

591 
	#CV_8SC2
 
	`CV_MAKETYPE
(
CV_8S
,2)

	)

592 
	#CV_8SC3
 
	`CV_MAKETYPE
(
CV_8S
,3)

	)

593 
	#CV_8SC4
 
	`CV_MAKETYPE
(
CV_8S
,4)

	)

594 
	#CV_8SC
(
n
Ë
	`CV_MAKETYPE
(
CV_8S
,“))

	)

596 
	#CV_16UC1
 
	`CV_MAKETYPE
(
CV_16U
,1)

	)

597 
	#CV_16UC2
 
	`CV_MAKETYPE
(
CV_16U
,2)

	)

598 
	#CV_16UC3
 
	`CV_MAKETYPE
(
CV_16U
,3)

	)

599 
	#CV_16UC4
 
	`CV_MAKETYPE
(
CV_16U
,4)

	)

600 
	#CV_16UC
(
n
Ë
	`CV_MAKETYPE
(
CV_16U
,“))

	)

602 
	#CV_16SC1
 
	`CV_MAKETYPE
(
CV_16S
,1)

	)

603 
	#CV_16SC2
 
	`CV_MAKETYPE
(
CV_16S
,2)

	)

604 
	#CV_16SC3
 
	`CV_MAKETYPE
(
CV_16S
,3)

	)

605 
	#CV_16SC4
 
	`CV_MAKETYPE
(
CV_16S
,4)

	)

606 
	#CV_16SC
(
n
Ë
	`CV_MAKETYPE
(
CV_16S
,“))

	)

608 
	#CV_32SC1
 
	`CV_MAKETYPE
(
CV_32S
,1)

	)

609 
	#CV_32SC2
 
	`CV_MAKETYPE
(
CV_32S
,2)

	)

610 
	#CV_32SC3
 
	`CV_MAKETYPE
(
CV_32S
,3)

	)

611 
	#CV_32SC4
 
	`CV_MAKETYPE
(
CV_32S
,4)

	)

612 
	#CV_32SC
(
n
Ë
	`CV_MAKETYPE
(
CV_32S
,“))

	)

614 
	#CV_32FC1
 
	`CV_MAKETYPE
(
CV_32F
,1)

	)

615 
	#CV_32FC2
 
	`CV_MAKETYPE
(
CV_32F
,2)

	)

616 
	#CV_32FC3
 
	`CV_MAKETYPE
(
CV_32F
,3)

	)

617 
	#CV_32FC4
 
	`CV_MAKETYPE
(
CV_32F
,4)

	)

618 
	#CV_32FC
(
n
Ë
	`CV_MAKETYPE
(
CV_32F
,“))

	)

620 
	#CV_64FC1
 
	`CV_MAKETYPE
(
CV_64F
,1)

	)

621 
	#CV_64FC2
 
	`CV_MAKETYPE
(
CV_64F
,2)

	)

622 
	#CV_64FC3
 
	`CV_MAKETYPE
(
CV_64F
,3)

	)

623 
	#CV_64FC4
 
	`CV_MAKETYPE
(
CV_64F
,4)

	)

624 
	#CV_64FC
(
n
Ë
	`CV_MAKETYPE
(
CV_64F
,“))

	)

626 
	#CV_AUTO_STEP
 0x7fffffff

	)

627 
	#CV_WHOLE_ARR
 
	`cvSli˚
–0, 0x3ffffff‡)

	)

629 
	#CV_MAT_CN_MASK
 ((
CV_CN_MAX
 - 1Ë<< 
CV_CN_SHIFT
)

	)

630 
	#CV_MAT_CN
(
Êags
Ë((((ÊagsË& 
CV_MAT_CN_MASK
Ë>> 
CV_CN_SHIFT
Ë+ 1)

	)

631 
	#CV_MAT_TYPE_MASK
 (
CV_DEPTH_MAX
*
CV_CN_MAX
 - 1)

	)

632 
	#CV_MAT_TYPE
(
Êags
Ë((ÊagsË& 
CV_MAT_TYPE_MASK
)

	)

633 
	#CV_MAT_CONT_FLAG_SHIFT
 14

	)

634 
	#CV_MAT_CONT_FLAG
 (1 << 
CV_MAT_CONT_FLAG_SHIFT
)

	)

635 
	#CV_IS_MAT_CONT
(
Êags
Ë((ÊagsË& 
CV_MAT_CONT_FLAG
)

	)

636 
	#CV_IS_CONT_MAT
 
CV_IS_MAT_CONT


	)

637 
	#CV_SUBMAT_FLAG_SHIFT
 15

	)

638 
	#CV_SUBMAT_FLAG
 (1 << 
CV_SUBMAT_FLAG_SHIFT
)

	)

639 
	#CV_IS_SUBMAT
(
Êags
Ë((ÊagsË& 
CV_MAT_SUBMAT_FLAG
)

	)

641 
	#CV_MAGIC_MASK
 0xFFFF0000

	)

642 
	#CV_MAT_MAGIC_VAL
 0x42420000

	)

643 
	#CV_TYPE_NAME_MAT
 "›ícv-m©rix"

	)

645 
	sCvM©


647 
	mty≥
;

648 
	m°ï
;

651 * 
	mªfcou¡
;

652 
	mhdr_ªfcou¡
;

656 
uch¨
* 
	m±r
;

657 * 
	ms
;

658 * 
	mi
;

659 * 
	mÊ
;

660 * 
	mdb
;

661 } 
	md©a
;

663 #ifde‡
__˝lu•lus


666 
	mrows
;

667 
	mheight
;

672 
	mcﬁs
;

673 
	mwidth
;

676 
	mrows
;

677 
	mcﬁs
;

681 
	tCvM©
;

684 
	#CV_IS_MAT_HDR
(
m©
) \

685 ((
m©
Ë!
NULL
 && \

686 (((c⁄° 
CvM©
*)(
m©
))->
ty≥
 & 
CV_MAGIC_MASK
Ë=
CV_MAT_MAGIC_VAL
 && \

687 ((c⁄° 
CvM©
*)(
m©
))->
cﬁs
 > 0 && ((c⁄° CvM©*)(m©))->
rows
 > 0)

	)

689 
	#CV_IS_MAT_HDR_Z
(
m©
) \

690 ((
m©
Ë!
NULL
 && \

691 (((c⁄° 
CvM©
*)(
m©
))->
ty≥
 & 
CV_MAGIC_MASK
Ë=
CV_MAT_MAGIC_VAL
 && \

692 ((c⁄° 
CvM©
*)(
m©
))->
cﬁs
 >0 && ((c⁄° CvM©*)(m©))->
rows
 >0)

	)

694 
	#CV_IS_MAT
(
m©
) \

695 (
	`CV_IS_MAT_HDR
(
m©
Ë&& ((c⁄° 
CvM©
*)(m©))->
d©a
.
±r
 !
NULL
)

	)

697 
	#CV_IS_MASK_ARR
(
m©
) \

698 (((
m©
)->
ty≥
 & (
CV_MAT_TYPE_MASK
 & ~
CV_8SC1
)Ë=0)

	)

700 
	#CV_ARE_TYPES_EQ
(
m©1
, 
m©2
) \

701 ((((
m©1
)->
ty≥
 ^ (
m©2
)->ty≥Ë& 
CV_MAT_TYPE_MASK
Ë=0)

	)

703 
	#CV_ARE_CNS_EQ
(
m©1
, 
m©2
) \

704 ((((
m©1
)->
ty≥
 ^ (
m©2
)->ty≥Ë& 
CV_MAT_CN_MASK
Ë=0)

	)

706 
	#CV_ARE_DEPTHS_EQ
(
m©1
, 
m©2
) \

707 ((((
m©1
)->
ty≥
 ^ (
m©2
)->ty≥Ë& 
CV_MAT_DEPTH_MASK
Ë=0)

	)

709 
	#CV_ARE_SIZES_EQ
(
m©1
, 
m©2
) \

710 ((
m©1
)->
rows
 =(
m©2
)->row†&& (m©1)->
cﬁs
 =(m©2)->cﬁs)

	)

712 
	#CV_IS_MAT_CONST
(
m©
) \

713 (((
m©
)->
rows
|(m©)->
cﬁs
Ë=1)

	)

717 
	#CV_ELEM_SIZE1
(
ty≥
) \

718 (((((
size_t
)<<28)|0x8442211Ë>> 
	`CV_MAT_DEPTH
(
ty≥
)*4Ë& 15)

	)

721 
	#CV_ELEM_SIZE
(
ty≥
) \

722 (
	`CV_MAT_CN
(
ty≥
Ë<< (((((
size_t
)/4+1)*16384|0x3a50Ë>> 
	`CV_MAT_DEPTH
—y≥)*2Ë& 3))

	)

724 
	#IPL2CV_DEPTH
(
dïth
) \

725 ((((
CV_8U
)+(
CV_16U
<<4)+(
CV_32F
<<8)+(
CV_64F
<<16)+(
CV_8S
<<20)+ \

726 (
CV_16S
<<24)+(
CV_32S
<<28)Ë>> ((((
dïth
) & 0xF0) >> 2) + \

727 (((
dïth
Ë& 
IPL_DEPTH_SIGN
Ë? 20 : 0))Ë& 15)

	)

733 
CV_INLINE
 
CvM©
 
cvM©
–
rows
, 
cﬁs
, 
ty≥
, * 
d©a
 
	$CV_DEFAULT
(
NULL
))

735 
CvM©
 
m
;

737 
	`as£π
–()
	`CV_MAT_DEPTH
(
ty≥
Ë<
CV_64F
 );

738 
ty≥
 = 
	`CV_MAT_TYPE
(type);

739 
m
.
ty≥
 = 
CV_MAT_MAGIC_VAL
 | 
CV_MAT_CONT_FLAG
 |Åype;

740 
m
.
cﬁs
 = cols;

741 
m
.
rows
 =Ñows;

742 
m
.
°ï
 = m.
cﬁs
*
	`CV_ELEM_SIZE
(
ty≥
);

743 
m
.
d©a
.
±r
 = (
uch¨
*)data;

744 
m
.
ªfcou¡
 = 
NULL
;

745 
m
.
hdr_ªfcou¡
 = 0;

747  
m
;

748 
	}
}

751 
	#CV_MAT_ELEM_PTR_FAST
–
m©
, 
row
, 
cﬁ
, 
pix_size
 ) \

752 (
	`as£π
–()(
row
Ë< ()(
m©
).
rows
 && \

753 ()(
cﬁ
Ë< ()(
m©
).
cﬁs
 ), \

754 (
m©
).
d©a
.
±r
 + (
size_t
)(m©).
°ï
*(
row
Ë+ (
pix_size
)*(
cﬁ
))

	)

756 
	#CV_MAT_ELEM_PTR
–
m©
, 
row
, 
cﬁ
 ) \

757 
	`CV_MAT_ELEM_PTR_FAST
–
m©
, 
row
, 
cﬁ
, 
	`CV_ELEM_SIZE
((m©).
ty≥
Ë)

	)

759 
	#CV_MAT_ELEM
–
m©
, 
ñemty≥
, 
row
, 
cﬁ
 ) \

760 (*(
ñemty≥
*)
	`CV_MAT_ELEM_PTR_FAST
–
m©
, 
row
, 
cﬁ
, ”Àmty≥)))

	)

763 
CV_INLINE
 
	$cvmGë
–c⁄° 
CvM©
* 
m©
, 
row
, 
cﬁ
 )

765 
ty≥
;

767 
ty≥
 = 
	`CV_MAT_TYPE
(
m©
->type);

768 
	`as£π
–()
row
 < ()
m©
->
rows
 &&

769 ()
cﬁ
 < ()
m©
->
cﬁs
 );

771 if–
ty≥
 =
CV_32FC1
 )

772  ((*)(*)(
m©
->
d©a
.
±r
 + (
size_t
)m©->
°ï
*
row
))[
cﬁ
];

775 
	`as£π
–
ty≥
 =
CV_64FC1
 );

776  ((*)(*)(
m©
->
d©a
.
±r
 + (
size_t
)m©->
°ï
*
row
))[
cﬁ
];

778 
	}
}

781 
CV_INLINE
 
	$cvmSë
–
CvM©
* 
m©
, 
row
, 
cﬁ
, 
vÆue
 )

783 
ty≥
;

784 
ty≥
 = 
	`CV_MAT_TYPE
(
m©
->type);

785 
	`as£π
–()
row
 < ()
m©
->
rows
 &&

786 ()
cﬁ
 < ()
m©
->
cﬁs
 );

788 if–
ty≥
 =
CV_32FC1
 )

789 ((*)(*)(
m©
->
d©a
.
±r
 + (
size_t
)m©->
°ï
*
row
))[
cﬁ
] = ()
vÆue
;

792 
	`as£π
–
ty≥
 =
CV_64FC1
 );

793 ((*)(*)(
m©
->
d©a
.
±r
 + (
size_t
)m©->
°ï
*
row
))[
cﬁ
] = ()
vÆue
;

795 
	}
}

798 
CV_INLINE
 
	$cvI∂Dïth
–
ty≥
 )

800 
dïth
 = 
	`CV_MAT_DEPTH
(
ty≥
);

801  
	`CV_ELEM_SIZE1
(
dïth
)*8 | (dïth =
CV_8S
 || dïth =
CV_16S
 ||

802 
dïth
 =
CV_32S
 ? 
IPL_DEPTH_SIGN
 : 0);

803 
	}
}

810 
	#CV_MATND_MAGIC_VAL
 0x42430000

	)

811 
	#CV_TYPE_NAME_MATND
 "›ícv-nd-m©rix"

	)

813 
	#CV_MAX_DIM
 32

	)

814 
	#CV_MAX_DIM_HEAP
 1024

	)

816 
	sCvM©ND


818 
	mty≥
;

819 
	mdims
;

821 * 
	mªfcou¡
;

822 
	mhdr_ªfcou¡
;

826 
uch¨
* 
	m±r
;

827 * 
	mÊ
;

828 * 
	mdb
;

829 * 
	mi
;

830 * 
	ms
;

831 } 
	md©a
;

835 
	msize
;

836 
	m°ï
;

838 
	mdim
[
CV_MAX_DIM
];

840 
	tCvM©ND
;

842 
	#CV_IS_MATND_HDR
(
m©
) \

843 ((
m©
Ë!
NULL
 && (((c⁄° 
CvM©ND
*)(m©))->
ty≥
 & 
CV_MAGIC_MASK
Ë=
CV_MATND_MAGIC_VAL
)

	)

845 
	#CV_IS_MATND
(
m©
) \

846 (
	`CV_IS_MATND_HDR
(
m©
Ë&& ((c⁄° 
CvM©ND
*)(m©))->
d©a
.
±r
 !
NULL
)

	)

853 
	#CV_SPARSE_MAT_MAGIC_VAL
 0x42440000

	)

854 
	#CV_TYPE_NAME_SPARSE_MAT
 "›ícv-•¨£-m©rix"

	)

856 
	gCvSë
;

858 
	sCvS∑r£M©


860 
	mty≥
;

861 
	mdims
;

862 * 
	mªfcou¡
;

863 
	mhdr_ªfcou¡
;

865 
CvSë
* 
	mhóp
;

866 ** 
	mhashèbÀ
;

867 
	mhashsize
;

868 
	mvÆoff£t
;

869 
	midxoff£t
;

870 
	msize
[
CV_MAX_DIM
];

872 
	tCvS∑r£M©
;

874 
	#CV_IS_SPARSE_MAT_HDR
(
m©
) \

875 ((
m©
Ë!
NULL
 && \

876 (((c⁄° 
CvS∑r£M©
*)(
m©
))->
ty≥
 & 
CV_MAGIC_MASK
Ë=
CV_SPARSE_MAT_MAGIC_VAL
)

	)

878 
	#CV_IS_SPARSE_MAT
(
m©
) \

879 
	`CV_IS_SPARSE_MAT_HDR
(
m©
)

	)

883 
	sCvS∑r£Node


885 
	mhashvÆ
;

886 
CvS∑r£Node
* 
	m√xt
;

888 
	tCvS∑r£Node
;

890 
	sCvS∑r£M©Iãøt‹


892 
CvS∑r£M©
* 
	mm©
;

893 
CvS∑r£Node
* 
	mnode
;

894 
	mcuridx
;

896 
	tCvS∑r£M©Iãøt‹
;

898 
	#CV_NODE_VAL
(
m©
,
node
Ë((*)((
uch¨
*)“odeË+ (m©)->
vÆoff£t
))

	)

899 
	#CV_NODE_IDX
(
m©
,
node
Ë((*)((
uch¨
*)“odeË+ (m©)->
idxoff£t
))

	)

905 
	tCvHi°Ty≥
;

907 
	#CV_HIST_MAGIC_VAL
 0x42450000

	)

908 
	#CV_HIST_UNIFORM_FLAG
 (1 << 10)

	)

911 
	#CV_HIST_RANGES_FLAG
 (1 << 11)

	)

913 
	#CV_HIST_ARRAY
 0

	)

914 
	#CV_HIST_SPARSE
 1

	)

915 
	#CV_HIST_TREE
 
CV_HIST_SPARSE


	)

919 
	#CV_HIST_UNIFORM
 1

	)

921 
	sCvHi°ogøm


923 
	mty≥
;

924 
CvAº
* 
	mbös
;

925 
	mthªsh
[
CV_MAX_DIM
][2];

926 ** 
	mthªsh2
;

927 
CvM©ND
 
	mm©
;

929 
	tCvHi°ogøm
;

931 
	#CV_IS_HIST
–
hi°
 ) \

932 ((
hi°
Ë!
NULL
 && \

933 (((
CvHi°ogøm
*)(
hi°
))->
ty≥
 & 
CV_MAGIC_MASK
Ë=
CV_HIST_MAGIC_VAL
 && \

934 (
hi°
)->
bös
 !
NULL
)

	)

936 
	#CV_IS_UNIFORM_HIST
–
hi°
 ) \

937 (((
hi°
)->
ty≥
 & 
CV_HIST_UNIFORM_FLAG
Ë!0)

	)

939 
	#CV_IS_SPARSE_HIST
–
hi°
 ) \

940 
	`CV_IS_SPARSE_MAT
((
hi°
)->
bös
)

	)

942 
	#CV_HIST_HAS_RANGES
–
hi°
 ) \

943 (((
hi°
)->
ty≥
 & 
CV_HIST_RANGES_FLAG
Ë!0)

	)

951 
	sCvRe˘


953 
	mx
;

954 
	my
;

955 
	mwidth
;

956 
	mheight
;

958 
	tCvRe˘
;

960 
CV_INLINE
 
CvRe˘
 
	$cvRe˘
–
x
, 
y
, 
width
, 
height
 )

962 
CvRe˘
 
r
;

964 
r
.
x
 = x;

965 
r
.
y
 = y;

966 
r
.
width
 = width;

967 
r
.
height
 = height;

969  
r
;

970 
	}
}

973 
CV_INLINE
 
I∂ROI
 
	$cvRe˘ToROI
–
CvRe˘
 
ª˘
, 
coi
 )

975 
I∂ROI
 
roi
;

976 
roi
.
xOff£t
 = 
ª˘
.
x
;

977 
roi
.
yOff£t
 = 
ª˘
.
y
;

978 
roi
.
width
 = 
ª˘
.width;

979 
roi
.
height
 = 
ª˘
.height;

980 
roi
.
coi
 = coi;

982  
roi
;

983 
	}
}

986 
CV_INLINE
 
CvRe˘
 
	$cvROIToRe˘
–
I∂ROI
 
roi
 )

988  
	`cvRe˘
–
roi
.
xOff£t
,Ñoi.
yOff£t
,Ñoi.
width
,Ñoi.
height
 );

989 
	}
}

993 
	#CV_TERMCRIT_ITER
 1

	)

994 
	#CV_TERMCRIT_NUMBER
 
CV_TERMCRIT_ITER


	)

995 
	#CV_TERMCRIT_EPS
 2

	)

997 
	sCvTîmCrôîü


999 
	mty≥
;

1002 
	mmax_ôî
;

1003 
	mïsû⁄
;

1005 
	tCvTîmCrôîü
;

1007 
CV_INLINE
 
CvTîmCrôîü
 
	$cvTîmCrôîü
–
ty≥
, 
max_ôî
, 
ïsû⁄
 )

1009 
CvTîmCrôîü
 
t
;

1011 
t
.
ty≥
 =Åype;

1012 
t
.
max_ôî
 = max_iter;

1013 
t
.
ïsû⁄
 = ()epsilon;

1015  
t
;

1016 
	}
}

1021 
	sCvPoöt


1023 
	mx
;

1024 
	my
;

1026 
	tCvPoöt
;

1029 
CV_INLINE
 
CvPoöt
 
	$cvPoöt
–
x
, 
y
 )

1031 
CvPoöt
 
p
;

1033 
p
.
x
 = x;

1034 
p
.
y
 = y;

1036  
p
;

1037 
	}
}

1040 
	sCvPoöt2D32f


1042 
	mx
;

1043 
	my
;

1045 
	tCvPoöt2D32f
;

1048 
CV_INLINE
 
CvPoöt2D32f
 
	$cvPoöt2D32f
–
x
, 
y
 )

1050 
CvPoöt2D32f
 
p
;

1052 
p
.
x
 = ()x;

1053 
p
.
y
 = ()y;

1055  
p
;

1056 
	}
}

1059 
CV_INLINE
 
CvPoöt2D32f
 
	$cvPoötTo32f
–
CvPoöt
 
poöt
 )

1061  
	`cvPoöt2D32f
–()
poöt
.
x
, (Ìoöt.
y
 );

1062 
	}
}

1065 
CV_INLINE
 
CvPoöt
 
	$cvPoötFrom32f
–
CvPoöt2D32f
 
poöt
 )

1067 
CvPoöt
 
ùt
;

1068 
ùt
.
x
 = 
	`cvRound
(
poöt
.x);

1069 
ùt
.
y
 = 
	`cvRound
(
poöt
.y);

1071  
ùt
;

1072 
	}
}

1075 
	sCvPoöt3D32f


1077 
	mx
;

1078 
	my
;

1079 
	mz
;

1081 
	tCvPoöt3D32f
;

1084 
CV_INLINE
 
CvPoöt3D32f
 
	$cvPoöt3D32f
–
x
, 
y
, 
z
 )

1086 
CvPoöt3D32f
 
p
;

1088 
p
.
x
 = ()x;

1089 
p
.
y
 = ()y;

1090 
p
.
z
 = ()z;

1092  
p
;

1093 
	}
}

1096 
	sCvPoöt2D64f


1098 
	mx
;

1099 
	my
;

1101 
	tCvPoöt2D64f
;

1104 
CV_INLINE
 
CvPoöt2D64f
 
	$cvPoöt2D64f
–
x
, 
y
 )

1106 
CvPoöt2D64f
 
p
;

1108 
p
.
x
 = x;

1109 
p
.
y
 = y;

1111  
p
;

1112 
	}
}

1115 
	sCvPoöt3D64f


1117 
	mx
;

1118 
	my
;

1119 
	mz
;

1121 
	tCvPoöt3D64f
;

1124 
CV_INLINE
 
CvPoöt3D64f
 
	$cvPoöt3D64f
–
x
, 
y
, 
z
 )

1126 
CvPoöt3D64f
 
p
;

1128 
p
.
x
 = x;

1129 
p
.
y
 = y;

1130 
p
.
z
 = z;

1132  
p
;

1133 
	}
}

1138 
	sCvSize


1140 
	mwidth
;

1141 
	mheight
;

1143 
	tCvSize
;

1145 
CV_INLINE
 
CvSize
 
	$cvSize
–
width
, 
height
 )

1147 
CvSize
 
s
;

1149 
s
.
width
 = width;

1150 
s
.
height
 = height;

1152  
s
;

1153 
	}
}

1155 
	sCvSize2D32f


1157 
	mwidth
;

1158 
	mheight
;

1160 
	tCvSize2D32f
;

1163 
CV_INLINE
 
CvSize2D32f
 
	$cvSize2D32f
–
width
, 
height
 )

1165 
CvSize2D32f
 
s
;

1167 
s
.
width
 = ()width;

1168 
s
.
height
 = ()height;

1170  
s
;

1171 
	}
}

1173 
	sCvBox2D


1175 
CvPoöt2D32f
 
	m˚¡î
;

1176 
CvSize2D32f
 
	msize
;

1177 
	m™gÀ
;

1180 
	tCvBox2D
;

1184 
	sCvLöeIãøt‹


1187 
uch¨
* 
	m±r
;

1190 
	mîr
;

1191 
	m∂us_dñè
;

1192 
	mmöus_dñè
;

1193 
	m∂us_°ï
;

1194 
	mmöus_°ï
;

1196 
	tCvLöeIãøt‹
;

1202 
	sCvSli˚


1204 
	m°¨t_ödex
, 
	míd_ödex
;

1206 
	tCvSli˚
;

1208 
CV_INLINE
 
CvSli˚
 
	$cvSli˚
–
°¨t
, 
íd
 )

1210 
CvSli˚
 
¶i˚
;

1211 
¶i˚
.
°¨t_ödex
 = 
°¨t
;

1212 
¶i˚
.
íd_ödex
 = 
íd
;

1214  
¶i˚
;

1215 
	}
}

1217 
	#CV_WHOLE_SEQ_END_INDEX
 0x3fffffff

	)

1218 
	#CV_WHOLE_SEQ
 
	`cvSli˚
(0, 
CV_WHOLE_SEQ_END_INDEX
)

	)

1223 
	sCvSˇœr


1225 
	mvÆ
[4];

1227 
	tCvSˇœr
;

1229 
CV_INLINE
 
CvSˇœr
 
cvSˇœr
–
vÆ0
, 
vÆ1
 
CV_DEFAULT
(0),

1230 
vÆ2
 
CV_DEFAULT
(0), 
vÆ3
 
	$CV_DEFAULT
(0))

1232 
CvSˇœr
 
sˇœr
;

1233 
sˇœr
.
vÆ
[0] = 
vÆ0
; sˇœr.vÆ[1] = 
vÆ1
;

1234 
sˇœr
.
vÆ
[2] = 
vÆ2
; sˇœr.vÆ[3] = 
vÆ3
;

1235  
sˇœr
;

1236 
	}
}

1239 
CV_INLINE
 
CvSˇœr
 
	$cvRólSˇœr
–
vÆ0
 )

1241 
CvSˇœr
 
sˇœr
;

1242 
sˇœr
.
vÆ
[0] = 
vÆ0
;

1243 
sˇœr
.
vÆ
[1] = scalar.val[2] = scalar.val[3] = 0;

1244  
sˇœr
;

1245 
	}
}

1247 
CV_INLINE
 
CvSˇœr
 
	$cvSˇœrAŒ
–
vÆ0123
 )

1249 
CvSˇœr
 
sˇœr
;

1250 
sˇœr
.
vÆ
[0] = 
vÆ0123
;

1251 
sˇœr
.
vÆ
[1] = 
vÆ0123
;

1252 
sˇœr
.
vÆ
[2] = 
vÆ0123
;

1253 
sˇœr
.
vÆ
[3] = 
vÆ0123
;

1254  
sˇœr
;

1255 
	}
}

1263 
	sCvMemBlock


1265 
CvMemBlock
* 
	m¥ev
;

1266 
CvMemBlock
* 
	m√xt
;

1268 
	tCvMemBlock
;

1270 
	#CV_STORAGE_MAGIC_VAL
 0x42890000

	)

1272 
	sCvMemSt‹age


1274 
	msig«tuª
;

1275 
CvMemBlock
* 
	mbŸtom
;

1276 
CvMemBlock
* 
	mt›
;

1277 
CvMemSt‹age
* 
	m∑ª¡
;

1278 
	mblock_size
;

1279 
	m‰ì_•a˚
;

1281 
	tCvMemSt‹age
;

1283 
	#CV_IS_STORAGE
(
°‹age
) \

1284 ((
°‹age
Ë!
NULL
 && \

1285 (((
CvMemSt‹age
*)(
°‹age
))->
sig«tuª
 & 
CV_MAGIC_MASK
Ë=
CV_STORAGE_MAGIC_VAL
)

	)

1288 
	sCvMemSt‹agePos


1290 
CvMemBlock
* 
	mt›
;

1291 
	m‰ì_•a˚
;

1293 
	tCvMemSt‹agePos
;

1298 
	sCvSeqBlock


1300 
CvSeqBlock
* 
	m¥ev
;

1301 
CvSeqBlock
* 
	m√xt
;

1302 
	m°¨t_ödex
;

1304 
	mcou¡
;

1305 
sch¨
* 
	md©a
;

1307 
	tCvSeqBlock
;

1310 
	#CV_TREE_NODE_FIELDS
(
node_ty≥
) \

1311 
Êags
; \

1312 
hódî_size
; \

1313 
node_ty≥
* 
h_¥ev
; \

1314 
node_ty≥
* 
h_√xt
; \

1315 
node_ty≥
* 
v_¥ev
; \

1316 
node_ty≥
* 
v_√xt


	)

1322 
	#CV_SEQUENCE_FIELDS
() \

1323 
	`CV_TREE_NODE_FIELDS
(
CvSeq
); \

1324 
tŸÆ
; \

1325 
ñem_size
; \

1326 
sch¨
* 
block_max
; \

1327 
sch¨
* 
±r
; \

1328 
dñè_ñems
; \

1329 
CvMemSt‹age
* 
°‹age
; \

1330 
CvSeqBlock
* 
‰ì_blocks
; \

1331 
CvSeqBlock
* 
fú°
;

	)

1333 
	sCvSeq


1335 
CV_SEQUENCE_FIELDS
()

1337 
	tCvSeq
;

1339 
	#CV_TYPE_NAME_SEQ
 "›ícv-£quí˚"

	)

1340 
	#CV_TYPE_NAME_SEQ_TREE
 "›ícv-£quí˚-åì"

	)

1349 
	#CV_SET_ELEM_FIELDS
(
ñem_ty≥
) \

1350 
Êags
; \

1351 
ñem_ty≥
* 
√xt_‰ì
;

	)

1353 
	sCvSëEÀm


1355 
CV_SET_ELEM_FIELDS
(
CvSëEÀm
)

1357 
	tCvSëEÀm
;

1359 
	#CV_SET_FIELDS
() \

1360 
	`CV_SEQUENCE_FIELDS
() \

1361 
CvSëEÀm
* 
‰ì_ñems
; \

1362 
a˘ive_cou¡
;

	)

1364 
	sCvSë


1366 
CV_SET_FIELDS
()

1368 
	tCvSë
;

1371 
	#CV_SET_ELEM_IDX_MASK
 ((1 << 26Ë- 1)

	)

1372 
	#CV_SET_ELEM_FREE_FLAG
 (1 << (()*8-1))

	)

1375 
	#CV_IS_SET_ELEM
–
±r
 ) (((
CvSëEÀm
*)’å))->
Êags
 >0)

	)

1397 
	#CV_GRAPH_EDGE_FIELDS
() \

1398 
Êags
; \

1399 
weight
; \

1400 
CvGøphEdge
* 
√xt
[2]; \

1401 
CvGøphVtx
* 
vtx
[2];

	)

1404 
	#CV_GRAPH_VERTEX_FIELDS
() \

1405 
Êags
; \

1406 
CvGøphEdge
* 
fú°
;

	)

1409 
	sCvGøphEdge


1411 
CV_GRAPH_EDGE_FIELDS
()

1413 
	tCvGøphEdge
;

1415 
	sCvGøphVtx


1417 
CV_GRAPH_VERTEX_FIELDS
()

1419 
	tCvGøphVtx
;

1421 
	sCvGøphVtx2D


1423 
CV_GRAPH_VERTEX_FIELDS
()

1424 
CvPoöt2D32f
* 
	m±r
;

1426 
	tCvGøphVtx2D
;

1432 
	#CV_GRAPH_FIELDS
() \

1433 
	`CV_SET_FIELDS
() \

1434 
CvSë
* 
edges
;

	)

1436 
	sCvGøph


1438 
CV_GRAPH_FIELDS
()

1440 
	tCvGøph
;

1442 
	#CV_TYPE_NAME_GRAPH
 "›ícv-gøph"

	)

1446 
	sCvChaö


1448 
CV_SEQUENCE_FIELDS
()

1449 
CvPoöt
 
	m‹igö
;

1451 
	tCvChaö
;

1453 
	#CV_CONTOUR_FIELDS
() \

1454 
	`CV_SEQUENCE_FIELDS
() \

1455 
CvRe˘
 
ª˘
; \

1456 
cﬁ‹
; \

1457 
ª£rved
[3];

	)

1459 
	sCvC⁄tour


1461 
CV_CONTOUR_FIELDS
()

1463 
	tCvC⁄tour
;

1465 
CvC⁄tour
 
	tCvPoöt2DSeq
;

1471 
	#CV_SEQ_MAGIC_VAL
 0x42990000

	)

1473 
	#CV_IS_SEQ
(
£q
) \

1474 ((
£q
Ë!
NULL
 && (((
CvSeq
*)(£q))->
Êags
 & 
CV_MAGIC_MASK
Ë=
CV_SEQ_MAGIC_VAL
)

	)

1476 
	#CV_SET_MAGIC_VAL
 0x42980000

	)

1477 
	#CV_IS_SET
(
£t
) \

1478 ((
£t
Ë!
NULL
 && (((
CvSeq
*)(£t))->
Êags
 & 
CV_MAGIC_MASK
Ë=
CV_SET_MAGIC_VAL
)

	)

1480 
	#CV_SEQ_ELTYPE_BITS
 12

	)

1481 
	#CV_SEQ_ELTYPE_MASK
 ((1 << 
CV_SEQ_ELTYPE_BITS
Ë- 1)

	)

1483 
	#CV_SEQ_ELTYPE_POINT
 
CV_32SC2


	)

1484 
	#CV_SEQ_ELTYPE_CODE
 
CV_8UC1


	)

1485 
	#CV_SEQ_ELTYPE_GENERIC
 0

	)

1486 
	#CV_SEQ_ELTYPE_PTR
 
CV_USRTYPE1


	)

1487 
	#CV_SEQ_ELTYPE_PPOINT
 
CV_SEQ_ELTYPE_PTR


	)

1488 
	#CV_SEQ_ELTYPE_INDEX
 
CV_32SC1


	)

1489 
	#CV_SEQ_ELTYPE_GRAPH_EDGE
 0

	)

1490 
	#CV_SEQ_ELTYPE_GRAPH_VERTEX
 0

	)

1491 
	#CV_SEQ_ELTYPE_TRIAN_ATR
 0

	)

1492 
	#CV_SEQ_ELTYPE_CONNECTED_COMP
 0

	)

1493 
	#CV_SEQ_ELTYPE_POINT3D
 
CV_32FC3


	)

1495 
	#CV_SEQ_KIND_BITS
 2

	)

1496 
	#CV_SEQ_KIND_MASK
 (((1 << 
CV_SEQ_KIND_BITS
Ë- 1)<<
CV_SEQ_ELTYPE_BITS
)

	)

1499 
	#CV_SEQ_KIND_GENERIC
 (0 << 
CV_SEQ_ELTYPE_BITS
)

	)

1500 
	#CV_SEQ_KIND_CURVE
 (1 << 
CV_SEQ_ELTYPE_BITS
)

	)

1501 
	#CV_SEQ_KIND_BIN_TREE
 (2 << 
CV_SEQ_ELTYPE_BITS
)

	)

1504 
	#CV_SEQ_KIND_GRAPH
 (1 << 
CV_SEQ_ELTYPE_BITS
)

	)

1505 
	#CV_SEQ_KIND_SUBDIV2D
 (2 << 
CV_SEQ_ELTYPE_BITS
)

	)

1507 
	#CV_SEQ_FLAG_SHIFT
 (
CV_SEQ_KIND_BITS
 + 
CV_SEQ_ELTYPE_BITS
)

	)

1510 
	#CV_SEQ_FLAG_CLOSED
 (1 << 
CV_SEQ_FLAG_SHIFT
)

	)

1511 
	#CV_SEQ_FLAG_SIMPLE
 (0 << 
CV_SEQ_FLAG_SHIFT
)

	)

1512 
	#CV_SEQ_FLAG_CONVEX
 (0 << 
CV_SEQ_FLAG_SHIFT
)

	)

1513 
	#CV_SEQ_FLAG_HOLE
 (2 << 
CV_SEQ_FLAG_SHIFT
)

	)

1516 
	#CV_GRAPH_FLAG_ORIENTED
 (1 << 
CV_SEQ_FLAG_SHIFT
)

	)

1518 
	#CV_GRAPH
 
CV_SEQ_KIND_GRAPH


	)

1519 
	#CV_ORIENTED_GRAPH
 (
CV_SEQ_KIND_GRAPH
|
CV_GRAPH_FLAG_ORIENTED
)

	)

1522 
	#CV_SEQ_POINT_SET
 (
CV_SEQ_KIND_GENERIC
| 
CV_SEQ_ELTYPE_POINT
)

	)

1523 
	#CV_SEQ_POINT3D_SET
 (
CV_SEQ_KIND_GENERIC
| 
CV_SEQ_ELTYPE_POINT3D
)

	)

1524 
	#CV_SEQ_POLYLINE
 (
CV_SEQ_KIND_CURVE
 | 
CV_SEQ_ELTYPE_POINT
)

	)

1525 
	#CV_SEQ_POLYGON
 (
CV_SEQ_FLAG_CLOSED
 | 
CV_SEQ_POLYLINE
 )

	)

1526 
	#CV_SEQ_CONTOUR
 
CV_SEQ_POLYGON


	)

1527 
	#CV_SEQ_SIMPLE_POLYGON
 (
CV_SEQ_FLAG_SIMPLE
 | 
CV_SEQ_POLYGON
 )

	)

1530 
	#CV_SEQ_CHAIN
 (
CV_SEQ_KIND_CURVE
 | 
CV_SEQ_ELTYPE_CODE
)

	)

1531 
	#CV_SEQ_CHAIN_CONTOUR
 (
CV_SEQ_FLAG_CLOSED
 | 
CV_SEQ_CHAIN
)

	)

1534 
	#CV_SEQ_POLYGON_TREE
 (
CV_SEQ_KIND_BIN_TREE
 | 
CV_SEQ_ELTYPE_TRIAN_ATR
)

	)

1537 
	#CV_SEQ_CONNECTED_COMP
 (
CV_SEQ_KIND_GENERIC
 | 
CV_SEQ_ELTYPE_CONNECTED_COMP
)

	)

1540 
	#CV_SEQ_INDEX
 (
CV_SEQ_KIND_GENERIC
 | 
CV_SEQ_ELTYPE_INDEX
)

	)

1542 
	#CV_SEQ_ELTYPE
–
£q
 ) ((£q)->
Êags
 & 
CV_SEQ_ELTYPE_MASK
)

	)

1543 
	#CV_SEQ_KIND
–
£q
 ) ((£q)->
Êags
 & 
CV_SEQ_KIND_MASK
 )

	)

1546 
	#CV_IS_SEQ_INDEX
–
£q
 ) ((
	`CV_SEQ_ELTYPE
(£qË=
CV_SEQ_ELTYPE_INDEX
) && \

1547 (
	`CV_SEQ_KIND
(
£q
Ë=
CV_SEQ_KIND_GENERIC
))

	)

1549 
	#CV_IS_SEQ_CURVE
–
£q
 ) (
	`CV_SEQ_KIND
(£qË=
CV_SEQ_KIND_CURVE
)

	)

1550 
	#CV_IS_SEQ_CLOSED
–
£q
 ) (((£q)->
Êags
 & 
CV_SEQ_FLAG_CLOSED
Ë!0)

	)

1551 
	#CV_IS_SEQ_CONVEX
–
£q
 ) 0

	)

1552 
	#CV_IS_SEQ_HOLE
–
£q
 ) (((£q)->
Êags
 & 
CV_SEQ_FLAG_HOLE
Ë!0)

	)

1553 
	#CV_IS_SEQ_SIMPLE
–
£q
 ) 1

	)

1556 
	#CV_IS_SEQ_POINT_SET
–
£q
 ) \

1557 ((
	`CV_SEQ_ELTYPE
(
£q
Ë=
CV_32SC2
 || CV_SEQ_ELTYPE(£qË=
CV_32FC2
))

	)

1559 
	#CV_IS_SEQ_POINT_SUBSET
–
£q
 ) \

1560 (
	`CV_IS_SEQ_INDEX
–
£q
 ) || 
	`CV_SEQ_ELTYPE
(£qË=
CV_SEQ_ELTYPE_PPOINT
)

	)

1562 
	#CV_IS_SEQ_POLYLINE
–
£q
 ) \

1563 (
	`CV_SEQ_KIND
(
£q
Ë=
CV_SEQ_KIND_CURVE
 && 
	`CV_IS_SEQ_POINT_SET
(£q))

	)

1565 
	#CV_IS_SEQ_POLYGON
–
£q
 ) \

1566 (
	`CV_IS_SEQ_POLYLINE
(
£q
Ë&& 
	`CV_IS_SEQ_CLOSED
(£q))

	)

1568 
	#CV_IS_SEQ_CHAIN
–
£q
 ) \

1569 (
	`CV_SEQ_KIND
(
£q
Ë=
CV_SEQ_KIND_CURVE
 && (£q)->
ñem_size
 =1)

	)

1571 
	#CV_IS_SEQ_CONTOUR
–
£q
 ) \

1572 (
	`CV_IS_SEQ_CLOSED
(
£q
Ë&& (
	`CV_IS_SEQ_POLYLINE
(£qË|| 
	`CV_IS_SEQ_CHAIN
(£q)))

	)

1574 
	#CV_IS_SEQ_CHAIN_CONTOUR
–
£q
 ) \

1575 (
	`CV_IS_SEQ_CHAIN
–
£q
 ) && 
	`CV_IS_SEQ_CLOSED
–£q ))

	)

1577 
	#CV_IS_SEQ_POLYGON_TREE
–
£q
 ) \

1578 (
	`CV_SEQ_ELTYPE
 (
£q
Ë=
CV_SEQ_ELTYPE_TRIAN_ATR
 && \

1579 
	`CV_SEQ_KIND
–
£q
 ) =
CV_SEQ_KIND_BIN_TREE
 )

	)

1581 
	#CV_IS_GRAPH
–
£q
 ) \

1582 (
	`CV_IS_SET
(
£q
Ë&& 
	`CV_SEQ_KIND
((
CvSë
*)(£q)Ë=
CV_SEQ_KIND_GRAPH
)

	)

1584 
	#CV_IS_GRAPH_ORIENTED
–
£q
 ) \

1585 (((
£q
)->
Êags
 & 
CV_GRAPH_FLAG_ORIENTED
Ë!0)

	)

1587 
	#CV_IS_SUBDIV2D
–
£q
 ) \

1588 (
	`CV_IS_SET
(
£q
Ë&& 
	`CV_SEQ_KIND
((
CvSë
*)(£q)Ë=
CV_SEQ_KIND_SUBDIV2D
)

	)

1594 
	#CV_SEQ_WRITER_FIELDS
() \

1595 
hódî_size
; \

1596 
CvSeq
* 
£q
; \

1597 
CvSeqBlock
* 
block
; \

1598 
sch¨
* 
±r
; \

1599 
sch¨
* 
block_mö
; \

1600 
sch¨
* 
block_max
;

	)

1602 
	sCvSeqWrôî


1604 
CV_SEQ_WRITER_FIELDS
()

1606 
	tCvSeqWrôî
;

1609 
	#CV_SEQ_READER_FIELDS
() \

1610 
hódî_size
; \

1611 
CvSeq
* 
£q
; \

1612 
CvSeqBlock
* 
block
; \

1613 
sch¨
* 
±r
; \

1614 
sch¨
* 
block_mö
; \

1615 
sch¨
* 
block_max
; \

1616 
dñè_ödex
; \

1617 
sch¨
* 
¥ev_ñem
;

	)

1620 
	sCvSeqRódî


1622 
CV_SEQ_READER_FIELDS
()

1624 
	tCvSeqRódî
;

1630 
	#CV_SEQ_ELEM
–
£q
, 
ñem_ty≥
, 
ödex
 ) \

1632 –
	`as£π
(((
£q
)->
fú°
[0]Ë=(
CvSeqBlock
) && \

1633 (
£q
)->
ñem_size
 =(
ñem_ty≥
)), \

1634 (
ñem_ty≥
*)((
£q
)->
fú°
 && ()
ödex
 < \

1635 ()((
£q
)->
fú°
->
cou¡
) ? \

1636 (
£q
)->
fú°
->
d©a
 + (
ödex
Ë* (
ñem_ty≥
) : \

1637 
	`cvGëSeqEÀm
–(
CvSeq
*)(
£q
), (
ödex
Ë)))

	)

1638 
	#CV_GET_SEQ_ELEM
–
ñem_ty≥
, 
£q
, 
ödex
 ) 
	`CV_SEQ_ELEM
–(£q),ÉÀm_ty≥, (ödexË)

	)

1641 
	#CV_WRITE_SEQ_ELEM_VAR
–
ñem_±r
, 
wrôî
 ) \

1643 if–(
wrôî
).
±r
 >(wrôî).
block_max
 ) \

1645 
	`cvCª©eSeqBlock
–&
wrôî
); \

1647 
	`mem˝y
((
wrôî
).
±r
, 
ñem_±r
, (wrôî).
£q
->
ñem_size
);\

1648 (
wrôî
).
±r
 +(wrôî).
£q
->
ñem_size
; \

1649 }

	)

1651 
	#CV_WRITE_SEQ_ELEM
–
ñem
, 
wrôî
 ) \

1653 
	`as£π
–(
wrôî
).
£q
->
ñem_size
 =(
ñem
)); \

1654 if–(
wrôî
).
±r
 >(wrôî).
block_max
 ) \

1656 
	`cvCª©eSeqBlock
–&
wrôî
); \

1658 
	`as£π
–(
wrôî
).
±r
 <(wrôî).
block_max
 - (
ñem
));\

1659 
	`mem˝y
((
wrôî
).
±r
, &(
ñem
), (elem)); \

1660 (
wrôî
).
±r
 +(
ñem
); \

1661 }

	)

1665 
	#CV_NEXT_SEQ_ELEM
–
ñem_size
, 
ªadî
 ) \

1667 if–((
ªadî
).
±r
 +(
ñem_size
)Ë>‘ódî).
block_max
 ) \

1669 
	`cvCh™geSeqBlock
–&(
ªadî
), 1 ); \

1671 }

	)

1675 
	#CV_PREV_SEQ_ELEM
–
ñem_size
, 
ªadî
 ) \

1677 if–((
ªadî
).
±r
 -(
ñem_size
)Ë< (ªadî).
block_mö
 ) \

1679 
	`cvCh™geSeqBlock
–&(
ªadî
), -1 ); \

1681 }

	)

1684 
	#CV_READ_SEQ_ELEM
–
ñem
, 
ªadî
 ) \

1686 
	`as£π
–(
ªadî
).
£q
->
ñem_size
 =(
ñem
)); \

1687 
	`mem˝y
–&(
ñem
), (
ªadî
).
±r
, ((elem))); \

1688 
	`CV_NEXT_SEQ_ELEM
–(
ñem
), 
ªadî
 ) \

1689 }

	)

1692 
	#CV_REV_READ_SEQ_ELEM
–
ñem
, 
ªadî
 ) \

1694 
	`as£π
–(
ªadî
).
£q
->
ñem_size
 =(
ñem
)); \

1695 
	`mem˝y
(&(
ñem
), (
ªadî
).
±r
, ((elem))); \

1696 
	`CV_PREV_SEQ_ELEM
–(
ñem
), 
ªadî
 ) \

1697 }

	)

1700 
	#CV_READ_CHAIN_POINT
–
_±
, 
ªadî
 ) \

1702 (
_±
Ë(
ªadî
).
±
; \

1703 if–(
ªadî
).
±r
 ) \

1705 
	`CV_READ_SEQ_ELEM
–(
ªadî
).
code
, (reader)); \

1706 
	`as£π
–((
ªadî
).
code
 & ~7) == 0 ); \

1707 (
ªadî
).
±
.
x
 +‘ódî).
dñès
[()‘ódî).
code
][0]; \

1708 (
ªadî
).
±
.
y
 +‘ódî).
dñès
[()‘ódî).
code
][1]; \

1710 }

	)

1712 
	#CV_CURRENT_POINT
–
ªadî
 ) (*((
CvPoöt
*)(‘ódî).
±r
)))

	)

1713 
	#CV_PREV_POINT
–
ªadî
 ) (*((
CvPoöt
*)(‘ódî).
¥ev_ñem
)))

	)

1715 
	#CV_READ_EDGE
–
±1
, 
±2
, 
ªadî
 ) \

1717 
	`as£π
–(
±1
Ë=(
CvPoöt
) && \

1718 (
±2
Ë=(
CvPoöt
) && \

1719 
ªadî
.
£q
->
ñem_size
 =(
CvPoöt
)); \

1720 (
±1
Ë
	`CV_PREV_POINT
–
ªadî
 ); \

1721 (
±2
Ë
	`CV_CURRENT_POINT
–
ªadî
 ); \

1722 (
ªadî
).
¥ev_ñem
 = (ªadî).
±r
; \

1723 
	`CV_NEXT_SEQ_ELEM
–(
CvPoöt
), (
ªadî
)); \

1724 }

	)

1729 
	#CV_NEXT_GRAPH_EDGE
–
edge
, 
vîãx
 ) \

1730 (
	`as£π
((
edge
)->
vtx
[0] =(
vîãx
) || (edge)->vtx[1] == (vertex)), \

1731 (
edge
)->
√xt
[”dge)->
vtx
[1] =(
vîãx
)])

	)

1740 
CvFûeSt‹age
 
	tCvFûeSt‹age
;

1743 
	#CV_STORAGE_READ
 0

	)

1744 
	#CV_STORAGE_WRITE
 1

	)

1745 
	#CV_STORAGE_WRITE_TEXT
 
CV_STORAGE_WRITE


	)

1746 
	#CV_STORAGE_WRITE_BINARY
 
CV_STORAGE_WRITE


	)

1747 
	#CV_STORAGE_APPEND
 2

	)

1748 
	#CV_STORAGE_MEMORY
 4

	)

1749 
	#CV_STORAGE_FORMAT_MASK
 (7<<3)

	)

1750 
	#CV_STORAGE_FORMAT_AUTO
 0

	)

1751 
	#CV_STORAGE_FORMAT_XML
 8

	)

1752 
	#CV_STORAGE_FORMAT_YAML
 16

	)

1755 
	sCvAârLi°


1757 c⁄° ** 
	m©å
;

1758 
CvAârLi°
* 
	m√xt
;

1760 
	tCvAârLi°
;

1762 
CV_INLINE
 
CvAârLi°
 
cvAârLi°
–c⁄° ** 
©å
 
CV_DEFAULT
(
NULL
),

1763 
CvAârLi°
* 
√xt
 
	$CV_DEFAULT
(
NULL
) )

1765 
CvAârLi°
 
l
;

1766 
l
.
©å
 =áttr;

1767 
l
.
√xt
 =Çext;

1769  
l
;

1770 
	}
}

1772 
	gCvTy≥Info
;

1774 
	#CV_NODE_NONE
 0

	)

1775 
	#CV_NODE_INT
 1

	)

1776 
	#CV_NODE_INTEGER
 
CV_NODE_INT


	)

1777 
	#CV_NODE_REAL
 2

	)

1778 
	#CV_NODE_FLOAT
 
CV_NODE_REAL


	)

1779 
	#CV_NODE_STR
 3

	)

1780 
	#CV_NODE_STRING
 
CV_NODE_STR


	)

1781 
	#CV_NODE_REF
 4

	)

1782 
	#CV_NODE_SEQ
 5

	)

1783 
	#CV_NODE_MAP
 6

	)

1784 
	#CV_NODE_TYPE_MASK
 7

	)

1786 
	#CV_NODE_TYPE
(
Êags
Ë((ÊagsË& 
CV_NODE_TYPE_MASK
)

	)

1789 
	#CV_NODE_FLOW
 8

	)

1790 
	#CV_NODE_USER
 16

	)

1791 
	#CV_NODE_EMPTY
 32

	)

1792 
	#CV_NODE_NAMED
 64

	)

1794 
	#CV_NODE_IS_INT
(
Êags
Ë(
	`CV_NODE_TYPE
(ÊagsË=
CV_NODE_INT
)

	)

1795 
	#CV_NODE_IS_REAL
(
Êags
Ë(
	`CV_NODE_TYPE
(ÊagsË=
CV_NODE_REAL
)

	)

1796 
	#CV_NODE_IS_STRING
(
Êags
Ë(
	`CV_NODE_TYPE
(ÊagsË=
CV_NODE_STRING
)

	)

1797 
	#CV_NODE_IS_SEQ
(
Êags
Ë(
	`CV_NODE_TYPE
(ÊagsË=
CV_NODE_SEQ
)

	)

1798 
	#CV_NODE_IS_MAP
(
Êags
Ë(
	`CV_NODE_TYPE
(ÊagsË=
CV_NODE_MAP
)

	)

1799 
	#CV_NODE_IS_COLLECTION
(
Êags
Ë(
	`CV_NODE_TYPE
(ÊagsË>
CV_NODE_SEQ
)

	)

1800 
	#CV_NODE_IS_FLOW
(
Êags
Ë(((ÊagsË& 
CV_NODE_FLOW
Ë!0)

	)

1801 
	#CV_NODE_IS_EMPTY
(
Êags
Ë(((ÊagsË& 
CV_NODE_EMPTY
Ë!0)

	)

1802 
	#CV_NODE_IS_USER
(
Êags
Ë(((ÊagsË& 
CV_NODE_USER
Ë!0)

	)

1803 
	#CV_NODE_HAS_NAME
(
Êags
Ë(((ÊagsË& 
CV_NODE_NAMED
Ë!0)

	)

1805 
	#CV_NODE_SEQ_SIMPLE
 256

	)

1806 
	#CV_NODE_SEQ_IS_SIMPLE
(
£q
Ë(((£q)->
Êags
 & 
CV_NODE_SEQ_SIMPLE
Ë!0)

	)

1808 
	sCvSåög


1810 
	mÀn
;

1811 * 
	m±r
;

1813 
	tCvSåög
;

1817 
	sCvSåögHashNode


1819 
	mhashvÆ
;

1820 
CvSåög
 
	m°r
;

1821 
CvSåögHashNode
* 
	m√xt
;

1823 
	tCvSåögHashNode
;

1825 
CvGíîicHash
 
	tCvFûeNodeHash
;

1828 
	sCvFûeNode


1830 
	mèg
;

1831 
CvTy≥Info
* 
	möfo
;

1835 
	mf
;

1836 
	mi
;

1837 
CvSåög
 
	m°r
;

1838 
CvSeq
* 
	m£q
;

1839 
CvFûeNodeHash
* 
	mm≠
;

1840 } 
	md©a
;

1842 
	tCvFûeNode
;

1844 #ifde‡
__˝lu•lus


1847 (
CV_CDECL
 *
	tCvIsIn°™˚Func
)–c⁄° * 
	t°ru˘_±r
 );

1848 (
CV_CDECL
 *
	tCvRñó£Func
)–** 
	t°ru˘_dbÕå
 );

1849 * (
	tCV_CDECL
 *
	tCvRódFunc
)–
	tCvFûeSt‹age
* 
	t°‹age
, 
	tCvFûeNode
* 
	tnode
 );

1850 (
CV_CDECL
 *
	tCvWrôeFunc
)–
	tCvFûeSt‹age
* 
	t°‹age
, c⁄° * 
	t«me
,

1851 c⁄° * 
	t°ru˘_±r
, 
	tCvAârLi°
 
	t©åibuãs
 );

1852 * (
	tCV_CDECL
 *
	tCvCl⁄eFunc
)–c⁄° * 
	t°ru˘_±r
 );

1853 #ifde‡
__˝lu•lus


1857 
	sCvTy≥Info


1859 
Êags
;

1860 
hódî_size
;

1861 
CvTy≥Info
* 
¥ev
;

1862 
CvTy≥Info
* 
√xt
;

1863 c⁄° * 
ty≥_«me
;

1864 
CvIsIn°™˚Func
 
is_ö°™˚
;

1865 
CvRñó£Func
 
ªÀa£
;

1866 
CvRódFunc
 
ªad
;

1867 
CvWrôeFunc
 
wrôe
;

1868 
CvCl⁄eFunc
 
˛⁄e
;

1870 
	tCvTy≥Info
;

1875 
	sCvPlugöFuncInfo


1877 ** 
	mfunc_addr
;

1878 * 
	mdeÁu…_func_addr
;

1879 c⁄° * 
	mfunc_«mes
;

1880 
	m£¨ch_moduÀs
;

1881 
	mlﬂded_‰om
;

1883 
	tCvPlugöFuncInfo
;

1885 
	sCvModuÀInfo


1887 
CvModuÀInfo
* 
	m√xt
;

1888 c⁄° * 
	m«me
;

1889 c⁄° * 
	mvîsi⁄
;

1890 
CvPlugöFuncInfo
* 
	mfunc_èb
;

1892 
	tCvModuÀInfo
;

	@/usr/include/opencv2/core/version.hpp

47 #i‚de‡
__OPENCV_VERSION_HPP__


48 
	#__OPENCV_VERSION_HPP__


	)

50 
	#CV_VERSION_EPOCH
 2

	)

51 
	#CV_VERSION_MAJOR
 4

	)

52 
	#CV_VERSION_MINOR
 9

	)

53 
	#CV_VERSION_REVISION
 1

	)

55 
	#CVAUX_STR_EXP
(
__A
Ë#__A

	)

56 
	#CVAUX_STR
(
__A
Ë
	`CVAUX_STR_EXP
(__A)

	)

58 
	#CVAUX_STRW_EXP
(
__A
Ë
L
#__A

	)

59 
	#CVAUX_STRW
(
__A
Ë
	`CVAUX_STRW_EXP
(__A)

	)

61 #i‡
CV_VERSION_REVISION


62 
	#CV_VERSION
 
	`CVAUX_STR
(
CV_VERSION_EPOCH
Ë"." CVAUX_STR(
CV_VERSION_MAJOR
Ë"." CVAUX_STR(
CV_VERSION_MINOR
Ë"." CVAUX_STR(
CV_VERSION_REVISION
)

	)

64 
	#CV_VERSION
 
	`CVAUX_STR
(
CV_VERSION_EPOCH
Ë"." CVAUX_STR(
CV_VERSION_MAJOR
Ë"." CVAUX_STR(
CV_VERSION_MINOR
)

	)

68 
	#CV_MAJOR_VERSION
 
CV_VERSION_EPOCH


	)

69 
	#CV_MINOR_VERSION
 
CV_VERSION_MAJOR


	)

70 
	#CV_SUBMINOR_VERSION
 
CV_VERSION_MINOR


	)

	@/usr/include/opencv2/highgui/highgui_c.h

42 #i‚de‡
__OPENCV_HIGHGUI_H__


43 
	#__OPENCV_HIGHGUI_H__


	)

45 
	~"›ícv2/c‹e/c‹e_c.h
"

47 #ifde‡
__˝lu•lus


57 íum { 
CV_FONT_LIGHT
 = 25,

58 
CV_FONT_NORMAL
 = 50,

59 
CV_FONT_DEMIBOLD
 = 63,

60 
CV_FONT_BOLD
 = 75,

61 
CV_FONT_BLACK
 = 87

64 íum { 
CV_STYLE_NORMAL
 = 0,

65 
CV_STYLE_ITALIC
 = 1,

66 
CV_STYLE_OBLIQUE
 = 2

72 
CVAPI
(
CvF⁄t
Ë
cvF⁄tQt
(c⁄° * 
«meF⁄t
, 
poötSize
 
CV_DEFAULT
(-1), 
CvSˇœr
 
cﬁ‹
 CV_DEFAULT(
cvSˇœrAŒ
(0)), 
weight
 CV_DEFAULT(
CV_FONT_NORMAL
), 
°yÀ
 CV_DEFAULT(
CV_STYLE_NORMAL
), 
•acög
 CV_DEFAULT(0));

74 
CVAPI
(Ë
cvAddText
(c⁄° 
CvAº
* 
img
, c⁄° * 
ãxt
, 
CvPoöt
 
‹g
, 
CvF⁄t
 *
¨g2
);

76 
CVAPI
(Ë
cvDi•œyOvîœy
(c⁄° * 
«me
, c⁄° * 
ãxt
, 
dñayms
 
CV_DEFAULT
(0));

77 
CVAPI
(Ë
cvDi•œySètusB¨
(c⁄° * 
«me
, c⁄° * 
ãxt
, 
dñayms
 
CV_DEFAULT
(0));

79 
CVAPI
(Ë
cvSaveWödowP¨amëîs
(c⁄° * 
«me
);

80 
CVAPI
(Ë
cvLﬂdWödowP¨amëîs
(c⁄° * 
«me
);

81 
CVAPI
(Ë
cvSèπLo›
((*
±2Func
)(
¨gc
, *
¨gv
[]), argc, *árgv[]);

82 
CVAPI
(Ë
cvSt›Lo›
( );

84 (
CV_CDECL
 *
	tCvBuâ⁄CÆlback
)(
	t°©e
, * 
	tu£rd©a
);

85 íum {
CV_PUSH_BUTTON
 = 0, 
CV_CHECKBOX
 = 1, 
CV_RADIOBOX
 = 2};

86 
CVAPI
(Ë
cvCª©eBuâ⁄
–c⁄° * 
buâ⁄_«me
 
CV_DEFAULT
(
NULL
),
CvBuâ⁄CÆlback
 
⁄_ch™ge
 CV_DEFAULT(NULL), * 
u£rd©a
 CV_DEFAULT(NULLË, 
buâ⁄_ty≥
 CV_DEFAULT(
CV_PUSH_BUTTON
), 
öôül_buâ⁄_°©e
 CV_DEFAULT(0));

91 
CVAPI
(Ë
cvInôSy°em
–
¨gc
, ** 
¨gv
 );

93 
CVAPI
(Ë
cvSèπWödowThªad
( );

99 
CV_WND_PROP_FULLSCREEN
 = 0,

100 
CV_WND_PROP_AUTOSIZE
 = 1,

101 
CV_WND_PROP_ASPECTRATIO
= 2,

102 
CV_WND_PROP_OPENGL
 = 3,

105 
CV_WINDOW_NORMAL
 = 0x00000000,

106 
CV_WINDOW_AUTOSIZE
 = 0x00000001,

107 
CV_WINDOW_OPENGL
 = 0x00001000,

110 
CV_GUI_EXPANDED
 = 0x00000000,

111 
CV_GUI_NORMAL
 = 0x00000010,

114 
CV_WINDOW_FULLSCREEN
 = 1,

115 
CV_WINDOW_FREERATIO
 = 0x00000100,

116 
CV_WINDOW_KEEPRATIO
 = 0x00000000

120 
CVAPI
(Ë
cvNamedWödow
–c⁄° * 
«me
, 
Êags
 
CV_DEFAULT
(
CV_WINDOW_AUTOSIZE
) );

123 
CVAPI
(Ë
cvSëWödowPr›îty
(c⁄° * 
«me
, 
¥›_id
, 
¥›_vÆue
);

124 
CVAPI
(Ë
cvGëWödowPr›îty
(c⁄° * 
«me
, 
¥›_id
);

127 
CVAPI
(Ë
cvShowImage
–c⁄° * 
«me
, c⁄° 
CvAº
* 
image
 );

130 
CVAPI
(Ë
cvResizeWödow
–c⁄° * 
«me
, 
width
, 
height
 );

131 
CVAPI
(Ë
cvMoveWödow
–c⁄° * 
«me
, 
x
, 
y
 );

135 
CVAPI
(Ë
cvDe°royWödow
–c⁄° * 
«me
 );

137 
CVAPI
(Ë
cvDe°royAŒWödows
();

140 
CVAPI
(*Ë
cvGëWödowH™dÀ
–c⁄° * 
«me
 );

143 
CVAPI
(c⁄° *Ë
cvGëWödowName
–* 
wödow_h™dÀ
 );

146 (
CV_CDECL
 *
	tCvTøckb¨CÆlback
)(
	tpos
);

149 
CVAPI
(Ë
cvCª©eTøckb¨
–c⁄° * 
åackb¨_«me
, c⁄° * 
wödow_«me
,

150 * 
vÆue
, 
cou¡
, 
CvTøckb¨CÆlback
 
⁄_ch™ge
 
CV_DEFAULT
(
NULL
));

152 (
CV_CDECL
 *
	tCvTøckb¨CÆlback2
)(
	tpos
, * 
	tu£rd©a
);

154 
CVAPI
(Ë
cvCª©eTøckb¨2
–c⁄° * 
åackb¨_«me
, c⁄° * 
wödow_«me
,

155 * 
vÆue
, 
cou¡
, 
CvTøckb¨CÆlback2
 
⁄_ch™ge
,

156 * 
u£rd©a
 
CV_DEFAULT
(0));

159 
CVAPI
(Ë
cvGëTøckb¨Pos
–c⁄° * 
åackb¨_«me
, c⁄° * 
wödow_«me
 );

160 
CVAPI
(Ë
cvSëTøckb¨Pos
–c⁄° * 
åackb¨_«me
, c⁄° * 
wödow_«me
, 
pos
 );

164 
CV_EVENT_MOUSEMOVE
 =0,

165 
CV_EVENT_LBUTTONDOWN
 =1,

166 
CV_EVENT_RBUTTONDOWN
 =2,

167 
CV_EVENT_MBUTTONDOWN
 =3,

168 
CV_EVENT_LBUTTONUP
 =4,

169 
CV_EVENT_RBUTTONUP
 =5,

170 
CV_EVENT_MBUTTONUP
 =6,

171 
CV_EVENT_LBUTTONDBLCLK
 =7,

172 
CV_EVENT_RBUTTONDBLCLK
 =8,

173 
CV_EVENT_MBUTTONDBLCLK
 =9

178 
CV_EVENT_FLAG_LBUTTON
 =1,

179 
CV_EVENT_FLAG_RBUTTON
 =2,

180 
CV_EVENT_FLAG_MBUTTON
 =4,

181 
CV_EVENT_FLAG_CTRLKEY
 =8,

182 
CV_EVENT_FLAG_SHIFTKEY
 =16,

183 
CV_EVENT_FLAG_ALTKEY
 =32

186 (
CV_CDECL
 *
	tCvMou£CÆlback
 )(
	tevít
, 
	tx
, 
	ty
, 
	tÊags
, * 
	t∑øm
);

189 
CVAPI
(Ë
cvSëMou£CÆlback
–c⁄° * 
wödow_«me
, 
CvMou£CÆlback
 
⁄_mou£
,

190 * 
∑øm
 
CV_DEFAULT
(
NULL
));

195 
CV_LOAD_IMAGE_UNCHANGED
 =-1,

197 
CV_LOAD_IMAGE_GRAYSCALE
 =0,

199 
CV_LOAD_IMAGE_COLOR
 =1,

201 
CV_LOAD_IMAGE_ANYDEPTH
 =2,

203 
CV_LOAD_IMAGE_ANYCOLOR
 =4

212 
CVAPI
(
I∂Image
*Ë
cvLﬂdImage
–c⁄° * 
fûíame
, 
iscﬁ‹
 
CV_DEFAULT
(
CV_LOAD_IMAGE_COLOR
));

213 
CVAPI
(
CvM©
*Ë
cvLﬂdImageM
–c⁄° * 
fûíame
, 
iscﬁ‹
 
CV_DEFAULT
(
CV_LOAD_IMAGE_COLOR
));

217 
CV_IMWRITE_JPEG_QUALITY
 =1,

218 
CV_IMWRITE_PNG_COMPRESSION
 =16,

219 
CV_IMWRITE_PNG_STRATEGY
 =17,

220 
CV_IMWRITE_PNG_BILEVEL
 =18,

221 
CV_IMWRITE_PNG_STRATEGY_DEFAULT
 =0,

222 
CV_IMWRITE_PNG_STRATEGY_FILTERED
 =1,

223 
CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY
 =2,

224 
CV_IMWRITE_PNG_STRATEGY_RLE
 =3,

225 
CV_IMWRITE_PNG_STRATEGY_FIXED
 =4,

226 
CV_IMWRITE_PXM_BINARY
 =32

230 
CVAPI
(Ë
cvSaveImage
–c⁄° * 
fûíame
, c⁄° 
CvAº
* 
image
,

231 c⁄° * 
∑øms
 
CV_DEFAULT
(0) );

234 
CVAPI
(
I∂Image
*Ë
cvDecodeImage
–c⁄° 
CvM©
* 
buf
, 
iscﬁ‹
 
CV_DEFAULT
(
CV_LOAD_IMAGE_COLOR
));

235 
CVAPI
(
CvM©
*Ë
cvDecodeImageM
–c⁄° CvM©* 
buf
, 
iscﬁ‹
 
CV_DEFAULT
(
CV_LOAD_IMAGE_COLOR
));

238 
CVAPI
(
CvM©
*Ë
cvEncodeImage
–c⁄° * 
ext
, c⁄° 
CvAº
* 
image
,

239 c⁄° * 
∑øms
 
CV_DEFAULT
(0) );

243 
CV_CVTIMG_FLIP
 =1,

244 
CV_CVTIMG_SWAP_RB
 =2

248 
CVAPI
(Ë
cvC⁄vîtImage
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
, 
Êags
 
CV_DEFAULT
(0));

251 
CVAPI
(Ë
cvWaôKey
(
dñay
 
CV_DEFAULT
(0));

255 (
CV_CDECL
 *
	tCvO≥nGlDøwCÆlback
)(* 
	tu£rd©a
);

256 
CVAPI
(Ë
cvSëO≥nGlDøwCÆlback
(c⁄° * 
wödow_«me
, 
CvO≥nGlDøwCÆlback
 
ˇŒback
, * 
u£rd©a
 
CV_DEFAULT
(
NULL
));

258 
CVAPI
(Ë
cvSëO≥nGlC⁄ãxt
(c⁄° * 
wödow_«me
);

259 
CVAPI
(Ë
cvUpd©eWödow
(c⁄° * 
wödow_«me
);

267 
CvC≠tuª
 
	tCvC≠tuª
;

270 
CVAPI
(
CvC≠tuª
*Ë
cvCª©eFûeC≠tuª
–c⁄° * 
fûíame
 );

274 
CV_CAP_ANY
 =0,

276 
CV_CAP_MIL
 =100,

278 
CV_CAP_VFW
 =200,

279 
CV_CAP_V4L
 =200,

280 
CV_CAP_V4L2
 =200,

282 
CV_CAP_FIREWARE
 =300,

283 
CV_CAP_FIREWIRE
 =300,

284 
CV_CAP_IEEE1394
 =300,

285 
CV_CAP_DC1394
 =300,

286 
CV_CAP_CMU1394
 =300,

288 
CV_CAP_STEREO
 =400,

289 
CV_CAP_TYZX
 =400,

290 
CV_TYZX_LEFT
 =400,

291 
CV_TYZX_RIGHT
 =401,

292 
CV_TYZX_COLOR
 =402,

293 
CV_TYZX_Z
 =403,

295 
CV_CAP_QT
 =500,

297 
CV_CAP_UNICAP
 =600,

299 
CV_CAP_DSHOW
 =700,

300 
CV_CAP_MSMF
 =1400,

302 
CV_CAP_PVAPI
 =800,

304 
CV_CAP_OPENNI
 =900,

305 
CV_CAP_OPENNI_ASUS
 =910,

307 
CV_CAP_ANDROID
 =1000,

308 
CV_CAP_ANDROID_BACK
 =
CV_CAP_ANDROID
+99,

309 
CV_CAP_ANDROID_FRONT
 =
CV_CAP_ANDROID
+98,

311 
CV_CAP_XIAPI
 =1100,

313 
CV_CAP_AVFOUNDATION
 = 1200,

315 
CV_CAP_GIGANETIX
 = 1300,

317 
CV_CAP_INTELPERC
 = 1500

321 
CVAPI
(
CvC≠tuª
*Ë
cvCª©eCamîaC≠tuª
–
ödex
 );

325 
CVAPI
(Ë
cvGøbFøme
–
CvC≠tuª
* 
ˇ±uª
 );

331 
CVAPI
(
I∂Image
*Ë
cvRërõveFøme
–
CvC≠tuª
* 
ˇ±uª
, 
°ªamIdx
 
CV_DEFAULT
(0) );

335 
CVAPI
(
I∂Image
*Ë
cvQuîyFøme
–
CvC≠tuª
* 
ˇ±uª
 );

338 
CVAPI
(Ë
cvRñó£C≠tuª
–
CvC≠tuª
** 
ˇ±uª
 );

344 
CV_CAP_PROP_DC1394_OFF
 = -4,

345 
CV_CAP_PROP_DC1394_MODE_MANUAL
 = -3,

346 
CV_CAP_PROP_DC1394_MODE_AUTO
 = -2,

347 
CV_CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO
 = -1,

348 
CV_CAP_PROP_POS_MSEC
 =0,

349 
CV_CAP_PROP_POS_FRAMES
 =1,

350 
CV_CAP_PROP_POS_AVI_RATIO
 =2,

351 
CV_CAP_PROP_FRAME_WIDTH
 =3,

352 
CV_CAP_PROP_FRAME_HEIGHT
 =4,

353 
CV_CAP_PROP_FPS
 =5,

354 
CV_CAP_PROP_FOURCC
 =6,

355 
CV_CAP_PROP_FRAME_COUNT
 =7,

356 
CV_CAP_PROP_FORMAT
 =8,

357 
CV_CAP_PROP_MODE
 =9,

358 
CV_CAP_PROP_BRIGHTNESS
 =10,

359 
CV_CAP_PROP_CONTRAST
 =11,

360 
CV_CAP_PROP_SATURATION
 =12,

361 
CV_CAP_PROP_HUE
 =13,

362 
CV_CAP_PROP_GAIN
 =14,

363 
CV_CAP_PROP_EXPOSURE
 =15,

364 
CV_CAP_PROP_CONVERT_RGB
 =16,

365 
CV_CAP_PROP_WHITE_BALANCE_BLUE_U
 =17,

366 
CV_CAP_PROP_RECTIFICATION
 =18,

367 
CV_CAP_PROP_MONOCROME
 =19,

368 
CV_CAP_PROP_SHARPNESS
 =20,

369 
CV_CAP_PROP_AUTO_EXPOSURE
 =21,

372 
CV_CAP_PROP_GAMMA
 =22,

373 
CV_CAP_PROP_TEMPERATURE
 =23,

374 
CV_CAP_PROP_TRIGGER
 =24,

375 
CV_CAP_PROP_TRIGGER_DELAY
 =25,

376 
CV_CAP_PROP_WHITE_BALANCE_RED_V
 =26,

377 
CV_CAP_PROP_ZOOM
 =27,

378 
CV_CAP_PROP_FOCUS
 =28,

379 
CV_CAP_PROP_GUID
 =29,

380 
CV_CAP_PROP_ISO_SPEED
 =30,

381 
CV_CAP_PROP_MAX_DC1394
 =31,

382 
CV_CAP_PROP_BACKLIGHT
 =32,

383 
CV_CAP_PROP_PAN
 =33,

384 
CV_CAP_PROP_TILT
 =34,

385 
CV_CAP_PROP_ROLL
 =35,

386 
CV_CAP_PROP_IRIS
 =36,

387 
CV_CAP_PROP_SETTINGS
 =37,

389 
CV_CAP_PROP_AUTOGRAB
 =1024,

390 
CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING
=1025,

391 
CV_CAP_PROP_PREVIEW_FORMAT
=1026,

394 
CV_CAP_OPENNI_DEPTH_GENERATOR
 = 1 << 31,

395 
CV_CAP_OPENNI_IMAGE_GENERATOR
 = 1 << 30,

396 
CV_CAP_OPENNI_GENERATORS_MASK
 = 
CV_CAP_OPENNI_DEPTH_GENERATOR
 + 
CV_CAP_OPENNI_IMAGE_GENERATOR
,

399 
CV_CAP_PROP_OPENNI_OUTPUT_MODE
 = 100,

400 
CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH
 = 101,

401 
CV_CAP_PROP_OPENNI_BASELINE
 = 102,

402 
CV_CAP_PROP_OPENNI_FOCAL_LENGTH
 = 103,

403 
CV_CAP_PROP_OPENNI_REGISTRATION
 = 104,

404 
CV_CAP_PROP_OPENNI_REGISTRATION_ON
 = 
CV_CAP_PROP_OPENNI_REGISTRATION
,

407 
CV_CAP_PROP_OPENNI_APPROX_FRAME_SYNC
 = 105,

408 
CV_CAP_PROP_OPENNI_MAX_BUFFER_SIZE
 = 106,

409 
CV_CAP_PROP_OPENNI_CIRCLE_BUFFER
 = 107,

410 
CV_CAP_PROP_OPENNI_MAX_TIME_DURATION
 = 108,

412 
CV_CAP_PROP_OPENNI_GENERATOR_PRESENT
 = 109,

414 
CV_CAP_OPENNI_IMAGE_GENERATOR_PRESENT
 = 
CV_CAP_OPENNI_IMAGE_GENERATOR
 + 
CV_CAP_PROP_OPENNI_GENERATOR_PRESENT
,

415 
CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE
 = 
CV_CAP_OPENNI_IMAGE_GENERATOR
 + 
CV_CAP_PROP_OPENNI_OUTPUT_MODE
,

416 
CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE
 = 
CV_CAP_OPENNI_DEPTH_GENERATOR
 + 
CV_CAP_PROP_OPENNI_BASELINE
,

417 
CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH
 = 
CV_CAP_OPENNI_DEPTH_GENERATOR
 + 
CV_CAP_PROP_OPENNI_FOCAL_LENGTH
,

418 
CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION
 = 
CV_CAP_OPENNI_DEPTH_GENERATOR
 + 
CV_CAP_PROP_OPENNI_REGISTRATION
,

419 
CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON
 = 
CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION
,

422 
CV_CAP_GSTREAMER_QUEUE_LENGTH
 = 200,

423 
CV_CAP_PROP_PVAPI_MULTICASTIP
 = 300,

426 
CV_CAP_PROP_XI_DOWNSAMPLING
 = 400,

427 
CV_CAP_PROP_XI_DATA_FORMAT
 = 401,

428 
CV_CAP_PROP_XI_OFFSET_X
 = 402,

429 
CV_CAP_PROP_XI_OFFSET_Y
 = 403,

430 
CV_CAP_PROP_XI_TRG_SOURCE
 = 404,

431 
CV_CAP_PROP_XI_TRG_SOFTWARE
 = 405,

432 
CV_CAP_PROP_XI_GPI_SELECTOR
 = 406,

433 
CV_CAP_PROP_XI_GPI_MODE
 = 407,

434 
CV_CAP_PROP_XI_GPI_LEVEL
 = 408,

435 
CV_CAP_PROP_XI_GPO_SELECTOR
 = 409,

436 
CV_CAP_PROP_XI_GPO_MODE
 = 410,

437 
CV_CAP_PROP_XI_LED_SELECTOR
 = 411,

438 
CV_CAP_PROP_XI_LED_MODE
 = 412,

439 
CV_CAP_PROP_XI_MANUAL_WB
 = 413,

440 
CV_CAP_PROP_XI_AUTO_WB
 = 414,

441 
CV_CAP_PROP_XI_AEAG
 = 415,

442 
CV_CAP_PROP_XI_EXP_PRIORITY
 = 416,

443 
CV_CAP_PROP_XI_AE_MAX_LIMIT
 = 417,

444 
CV_CAP_PROP_XI_AG_MAX_LIMIT
 = 418,

445 
CV_CAP_PROP_XI_AEAG_LEVEL
 = 419,

446 
CV_CAP_PROP_XI_TIMEOUT
 = 420,

449 
CV_CAP_PROP_ANDROID_FLASH_MODE
 = 8001,

450 
CV_CAP_PROP_ANDROID_FOCUS_MODE
 = 8002,

451 
CV_CAP_PROP_ANDROID_WHITE_BALANCE
 = 8003,

452 
CV_CAP_PROP_ANDROID_ANTIBANDING
 = 8004,

453 
CV_CAP_PROP_ANDROID_FOCAL_LENGTH
 = 8005,

454 
CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_NEAR
 = 8006,

455 
CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_OPTIMAL
 = 8007,

456 
CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_FAR
 = 8008,

457 
CV_CAP_PROP_ANDROID_EXPOSE_LOCK
 = 8009,

458 
CV_CAP_PROP_ANDROID_WHITEBALANCE_LOCK
 = 8010,

461 
CV_CAP_PROP_IOS_DEVICE_FOCUS
 = 9001,

462 
CV_CAP_PROP_IOS_DEVICE_EXPOSURE
 = 9002,

463 
CV_CAP_PROP_IOS_DEVICE_FLASH
 = 9003,

464 
CV_CAP_PROP_IOS_DEVICE_WHITEBALANCE
 = 9004,

465 
CV_CAP_PROP_IOS_DEVICE_TORCH
 = 9005,

469 
CV_CAP_PROP_GIGA_FRAME_OFFSET_X
 = 10001,

470 
CV_CAP_PROP_GIGA_FRAME_OFFSET_Y
 = 10002,

471 
CV_CAP_PROP_GIGA_FRAME_WIDTH_MAX
 = 10003,

472 
CV_CAP_PROP_GIGA_FRAME_HEIGH_MAX
 = 10004,

473 
CV_CAP_PROP_GIGA_FRAME_SENS_WIDTH
 = 10005,

474 
CV_CAP_PROP_GIGA_FRAME_SENS_HEIGH
 = 10006,

476 
CV_CAP_PROP_INTELPERC_PROFILE_COUNT
 = 11001,

477 
CV_CAP_PROP_INTELPERC_PROFILE_IDX
 = 11002,

478 
CV_CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE
 = 11003,

479 
CV_CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE
 = 11004,

480 
CV_CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD
 = 11005,

481 
CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ
 = 11006,

482 
CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT
 = 11007,

485 
CV_CAP_INTELPERC_DEPTH_GENERATOR
 = 1 << 29,

486 
CV_CAP_INTELPERC_IMAGE_GENERATOR
 = 1 << 28,

487 
CV_CAP_INTELPERC_GENERATORS_MASK
 = 
CV_CAP_INTELPERC_DEPTH_GENERATOR
 + 
CV_CAP_INTELPERC_IMAGE_GENERATOR


493 
CV_CAP_OPENNI_DEPTH_MAP
 = 0,

494 
CV_CAP_OPENNI_POINT_CLOUD_MAP
 = 1,

495 
CV_CAP_OPENNI_DISPARITY_MAP
 = 2,

496 
CV_CAP_OPENNI_DISPARITY_MAP_32F
 = 3,

497 
CV_CAP_OPENNI_VALID_DEPTH_MASK
 = 4,

500 
CV_CAP_OPENNI_BGR_IMAGE
 = 5,

501 
CV_CAP_OPENNI_GRAY_IMAGE
 = 6

507 
CV_CAP_OPENNI_VGA_30HZ
 = 0,

508 
CV_CAP_OPENNI_SXGA_15HZ
 = 1,

509 
CV_CAP_OPENNI_SXGA_30HZ
 = 2,

510 
CV_CAP_OPENNI_QVGA_30HZ
 = 3,

511 
CV_CAP_OPENNI_QVGA_60HZ
 = 4

517 
CV_CAP_ANDROID_COLOR_FRAME_BGR
 = 0,

518 
CV_CAP_ANDROID_COLOR_FRAME
 = 
CV_CAP_ANDROID_COLOR_FRAME_BGR
,

519 
CV_CAP_ANDROID_GREY_FRAME
 = 1,

520 
CV_CAP_ANDROID_COLOR_FRAME_RGB
 = 2,

521 
CV_CAP_ANDROID_COLOR_FRAME_BGRA
 = 3,

522 
CV_CAP_ANDROID_COLOR_FRAME_RGBA
 = 4

528 
CV_CAP_ANDROID_FLASH_MODE_AUTO
 = 0,

529 
CV_CAP_ANDROID_FLASH_MODE_OFF
,

530 
CV_CAP_ANDROID_FLASH_MODE_ON
,

531 
CV_CAP_ANDROID_FLASH_MODE_RED_EYE
,

532 
CV_CAP_ANDROID_FLASH_MODE_TORCH


538 
CV_CAP_ANDROID_FOCUS_MODE_AUTO
 = 0,

539 
CV_CAP_ANDROID_FOCUS_MODE_CONTINUOUS_PICTURE
,

540 
CV_CAP_ANDROID_FOCUS_MODE_CONTINUOUS_VIDEO
,

541 
CV_CAP_ANDROID_FOCUS_MODE_EDOF
,

542 
CV_CAP_ANDROID_FOCUS_MODE_FIXED
,

543 
CV_CAP_ANDROID_FOCUS_MODE_INFINITY
,

544 
CV_CAP_ANDROID_FOCUS_MODE_MACRO


550 
CV_CAP_ANDROID_WHITE_BALANCE_AUTO
 = 0,

551 
CV_CAP_ANDROID_WHITE_BALANCE_CLOUDY_DAYLIGHT
,

552 
CV_CAP_ANDROID_WHITE_BALANCE_DAYLIGHT
,

553 
CV_CAP_ANDROID_WHITE_BALANCE_FLUORESCENT
,

554 
CV_CAP_ANDROID_WHITE_BALANCE_INCANDESCENT
,

555 
CV_CAP_ANDROID_WHITE_BALANCE_SHADE
,

556 
CV_CAP_ANDROID_WHITE_BALANCE_TWILIGHT
,

557 
CV_CAP_ANDROID_WHITE_BALANCE_WARM_FLUORESCENT


563 
CV_CAP_ANDROID_ANTIBANDING_50HZ
 = 0,

564 
CV_CAP_ANDROID_ANTIBANDING_60HZ
,

565 
CV_CAP_ANDROID_ANTIBANDING_AUTO
,

566 
CV_CAP_ANDROID_ANTIBANDING_OFF


571 
CV_CAP_INTELPERC_DEPTH_MAP
 = 0,

572 
CV_CAP_INTELPERC_UVDEPTH_MAP
 = 1,

573 
CV_CAP_INTELPERC_IR_MAP
 = 2,

574 
CV_CAP_INTELPERC_IMAGE
 = 3

578 
CVAPI
(Ë
cvGëC≠tuªPr›îty
–
CvC≠tuª
* 
ˇ±uª
, 
¥›îty_id
 );

579 
CVAPI
(Ë
cvSëC≠tuªPr›îty
–
CvC≠tuª
* 
ˇ±uª
, 
¥›îty_id
, 
vÆue
 );

582 
CVAPI
(Ë
cvGëC≠tuªDomaö
–
CvC≠tuª
* 
ˇ±uª
);

585 
CvVideoWrôî
 
	tCvVideoWrôî
;

587 
	#CV_FOURCC_MACRO
(
c1
, 
c2
, 
c3
, 
c4
Ë(((c1Ë& 255Ë+ (((c2Ë& 255Ë<< 8Ë+ (((c3Ë& 255Ë<< 16Ë+ (((c4Ë& 255Ë<< 24))

	)

589 
CV_INLINE
 
CV_FOURCC
(
c1
, 
c2
, 
c3
, 
c4
)

591  
CV_FOURCC_MACRO
(
c1
, 
c2
, 
c3
, 
c4
);

594 
	#CV_FOURCC_PROMPT
 -1

	)

595 
	#CV_FOURCC_DEFAULT
 
	`CV_FOURCC
('I', 'Y', 'U', 'V'Ë

	)

598 
CVAPI
(
CvVideoWrôî
*Ë
cvCª©eVideoWrôî
–c⁄° * 
fûíame
, 
fourcc
,

599 
Âs
, 
CvSize
 
‰ame_size
,

600 
is_cﬁ‹
 
CV_DEFAULT
(1));

606 
CVAPI
(Ë
cvWrôeFøme
–
CvVideoWrôî
* 
wrôî
, c⁄° 
I∂Image
* 
image
 );

609 
CVAPI
(Ë
cvRñó£VideoWrôî
–
CvVideoWrôî
** 
wrôî
 );

615 
	#cvC≠tuªFromFûe
 
cvCª©eFûeC≠tuª


	)

616 
	#cvC≠tuªFromCAM
 
cvCª©eCamîaC≠tuª


	)

617 
	#cvC≠tuªFromAVI
 
cvC≠tuªFromFûe


	)

618 
	#cvCª©eAVIWrôî
 
cvCª©eVideoWrôî


	)

619 
	#cvWrôeToAVI
 
cvWrôeFøme


	)

620 
	#cvAddSórchP©h
(
∑th
)

	)

621 
	#cvvInôSy°em
 
cvInôSy°em


	)

622 
	#cvvNamedWödow
 
cvNamedWödow


	)

623 
	#cvvShowImage
 
cvShowImage


	)

624 
	#cvvResizeWödow
 
cvResizeWödow


	)

625 
	#cvvDe°royWödow
 
cvDe°royWödow


	)

626 
	#cvvCª©eTøckb¨
 
cvCª©eTøckb¨


	)

627 
	#cvvLﬂdImage
(
«me
Ë
	`cvLﬂdImage
(“ame),1)

	)

628 
	#cvvSaveImage
 
cvSaveImage


	)

629 
	#cvvAddSórchP©h
 
cvAddSórchP©h


	)

630 
	#cvvWaôKey
(
«me
Ë
	`cvWaôKey
(0)

	)

631 
	#cvvWaôKeyEx
(
«me
,
dñay
Ë
	`cvWaôKey
(dñay)

	)

632 
	#cvvC⁄vîtImage
 
cvC⁄vîtImage


	)

633 
	#HG_AUTOSIZE
 
CV_WINDOW_AUTOSIZE


	)

634 
	#£t_¥ïro˚ss_func
 
cvSëPª¥o˚ssFuncWö32


	)

635 
	#£t_po°¥o˚ss_func
 
cvSëPo°¥o˚ssFuncWö32


	)

637 #i‡
deföed
 
WIN32
 || deföed 
_WIN32


639 
CVAPI
(Ë
cvSëPª¥o˚ssFuncWö32_
(c⁄° * 
ˇŒback
);

640 
CVAPI
(Ë
cvSëPo°¥o˚ssFuncWö32_
(c⁄° * 
ˇŒback
);

641 
	#cvSëPª¥o˚ssFuncWö32
(
ˇŒback
Ë
	`cvSëPª¥o˚ssFuncWö32_
((c⁄° *)(ˇŒback))

	)

642 
	#cvSëPo°¥o˚ssFuncWö32
(
ˇŒback
Ë
	`cvSëPo°¥o˚ssFuncWö32_
((c⁄° *)(ˇŒback))

	)

646 #ifde‡
__˝lu•lus


	@/usr/include/opencv2/imgproc/types_c.h

43 #i‚de‡
__OPENCV_IMGPROC_TYPES_C_H__


44 
	#__OPENCV_IMGPROC_TYPES_C_H__


	)

46 
	~"›ícv2/c‹e/c‹e_c.h
"

48 #ifde‡
__˝lu•lus


53 
	sCvC⁄√˘edComp


55 
¨ó
;

56 
CvSˇœr
 
vÆue
;

57 
CvRe˘
 
ª˘
;

58 
CvSeq
* 
c⁄tour
;

61 
	tCvC⁄√˘edComp
;

66 
CV_BLUR_NO_SCALE
 =0,

67 
CV_BLUR
 =1,

68 
CV_GAUSSIAN
 =2,

69 
CV_MEDIAN
 =3,

70 
CV_BILATERAL
 =4

76 
CV_GAUSSIAN_5x5
 = 7

82 
CV_SCHARR
 =-1,

83 
CV_MAX_SOBEL_KSIZE
 =7

89 
CV_BGR2BGRA
 =0,

90 
CV_RGB2RGBA
 =
CV_BGR2BGRA
,

92 
CV_BGRA2BGR
 =1,

93 
CV_RGBA2RGB
 =
CV_BGRA2BGR
,

95 
CV_BGR2RGBA
 =2,

96 
CV_RGB2BGRA
 =
CV_BGR2RGBA
,

98 
CV_RGBA2BGR
 =3,

99 
CV_BGRA2RGB
 =
CV_RGBA2BGR
,

101 
CV_BGR2RGB
 =4,

102 
CV_RGB2BGR
 =
CV_BGR2RGB
,

104 
CV_BGRA2RGBA
 =5,

105 
CV_RGBA2BGRA
 =
CV_BGRA2RGBA
,

107 
CV_BGR2GRAY
 =6,

108 
CV_RGB2GRAY
 =7,

109 
CV_GRAY2BGR
 =8,

110 
CV_GRAY2RGB
 =
CV_GRAY2BGR
,

111 
CV_GRAY2BGRA
 =9,

112 
CV_GRAY2RGBA
 =
CV_GRAY2BGRA
,

113 
CV_BGRA2GRAY
 =10,

114 
CV_RGBA2GRAY
 =11,

116 
CV_BGR2BGR565
 =12,

117 
CV_RGB2BGR565
 =13,

118 
CV_BGR5652BGR
 =14,

119 
CV_BGR5652RGB
 =15,

120 
CV_BGRA2BGR565
 =16,

121 
CV_RGBA2BGR565
 =17,

122 
CV_BGR5652BGRA
 =18,

123 
CV_BGR5652RGBA
 =19,

125 
CV_GRAY2BGR565
 =20,

126 
CV_BGR5652GRAY
 =21,

128 
CV_BGR2BGR555
 =22,

129 
CV_RGB2BGR555
 =23,

130 
CV_BGR5552BGR
 =24,

131 
CV_BGR5552RGB
 =25,

132 
CV_BGRA2BGR555
 =26,

133 
CV_RGBA2BGR555
 =27,

134 
CV_BGR5552BGRA
 =28,

135 
CV_BGR5552RGBA
 =29,

137 
CV_GRAY2BGR555
 =30,

138 
CV_BGR5552GRAY
 =31,

140 
CV_BGR2XYZ
 =32,

141 
CV_RGB2XYZ
 =33,

142 
CV_XYZ2BGR
 =34,

143 
CV_XYZ2RGB
 =35,

145 
CV_BGR2YCrCb
 =36,

146 
CV_RGB2YCrCb
 =37,

147 
CV_YCrCb2BGR
 =38,

148 
CV_YCrCb2RGB
 =39,

150 
CV_BGR2HSV
 =40,

151 
CV_RGB2HSV
 =41,

153 
CV_BGR2Lab
 =44,

154 
CV_RGB2Lab
 =45,

156 
CV_BayîBG2BGR
 =46,

157 
CV_BayîGB2BGR
 =47,

158 
CV_BayîRG2BGR
 =48,

159 
CV_BayîGR2BGR
 =49,

161 
CV_BayîBG2RGB
 =
CV_BayîRG2BGR
,

162 
CV_BayîGB2RGB
 =
CV_BayîGR2BGR
,

163 
CV_BayîRG2RGB
 =
CV_BayîBG2BGR
,

164 
CV_BayîGR2RGB
 =
CV_BayîGB2BGR
,

166 
CV_BGR2Luv
 =50,

167 
CV_RGB2Luv
 =51,

168 
CV_BGR2HLS
 =52,

169 
CV_RGB2HLS
 =53,

171 
CV_HSV2BGR
 =54,

172 
CV_HSV2RGB
 =55,

174 
CV_Lab2BGR
 =56,

175 
CV_Lab2RGB
 =57,

176 
CV_Luv2BGR
 =58,

177 
CV_Luv2RGB
 =59,

178 
CV_HLS2BGR
 =60,

179 
CV_HLS2RGB
 =61,

181 
CV_BayîBG2BGR_VNG
 =62,

182 
CV_BayîGB2BGR_VNG
 =63,

183 
CV_BayîRG2BGR_VNG
 =64,

184 
CV_BayîGR2BGR_VNG
 =65,

186 
CV_BayîBG2RGB_VNG
 =
CV_BayîRG2BGR_VNG
,

187 
CV_BayîGB2RGB_VNG
 =
CV_BayîGR2BGR_VNG
,

188 
CV_BayîRG2RGB_VNG
 =
CV_BayîBG2BGR_VNG
,

189 
CV_BayîGR2RGB_VNG
 =
CV_BayîGB2BGR_VNG
,

191 
CV_BGR2HSV_FULL
 = 66,

192 
CV_RGB2HSV_FULL
 = 67,

193 
CV_BGR2HLS_FULL
 = 68,

194 
CV_RGB2HLS_FULL
 = 69,

196 
CV_HSV2BGR_FULL
 = 70,

197 
CV_HSV2RGB_FULL
 = 71,

198 
CV_HLS2BGR_FULL
 = 72,

199 
CV_HLS2RGB_FULL
 = 73,

201 
CV_LBGR2Lab
 = 74,

202 
CV_LRGB2Lab
 = 75,

203 
CV_LBGR2Luv
 = 76,

204 
CV_LRGB2Luv
 = 77,

206 
CV_Lab2LBGR
 = 78,

207 
CV_Lab2LRGB
 = 79,

208 
CV_Luv2LBGR
 = 80,

209 
CV_Luv2LRGB
 = 81,

211 
CV_BGR2YUV
 = 82,

212 
CV_RGB2YUV
 = 83,

213 
CV_YUV2BGR
 = 84,

214 
CV_YUV2RGB
 = 85,

216 
CV_BayîBG2GRAY
 = 86,

217 
CV_BayîGB2GRAY
 = 87,

218 
CV_BayîRG2GRAY
 = 88,

219 
CV_BayîGR2GRAY
 = 89,

222 
CV_YUV2RGB_NV12
 = 90,

223 
CV_YUV2BGR_NV12
 = 91,

224 
CV_YUV2RGB_NV21
 = 92,

225 
CV_YUV2BGR_NV21
 = 93,

226 
CV_YUV420•2RGB
 = 
CV_YUV2RGB_NV21
,

227 
CV_YUV420•2BGR
 = 
CV_YUV2BGR_NV21
,

229 
CV_YUV2RGBA_NV12
 = 94,

230 
CV_YUV2BGRA_NV12
 = 95,

231 
CV_YUV2RGBA_NV21
 = 96,

232 
CV_YUV2BGRA_NV21
 = 97,

233 
CV_YUV420•2RGBA
 = 
CV_YUV2RGBA_NV21
,

234 
CV_YUV420•2BGRA
 = 
CV_YUV2BGRA_NV21
,

236 
CV_YUV2RGB_YV12
 = 98,

237 
CV_YUV2BGR_YV12
 = 99,

238 
CV_YUV2RGB_IYUV
 = 100,

239 
CV_YUV2BGR_IYUV
 = 101,

240 
CV_YUV2RGB_I420
 = 
CV_YUV2RGB_IYUV
,

241 
CV_YUV2BGR_I420
 = 
CV_YUV2BGR_IYUV
,

242 
CV_YUV420p2RGB
 = 
CV_YUV2RGB_YV12
,

243 
CV_YUV420p2BGR
 = 
CV_YUV2BGR_YV12
,

245 
CV_YUV2RGBA_YV12
 = 102,

246 
CV_YUV2BGRA_YV12
 = 103,

247 
CV_YUV2RGBA_IYUV
 = 104,

248 
CV_YUV2BGRA_IYUV
 = 105,

249 
CV_YUV2RGBA_I420
 = 
CV_YUV2RGBA_IYUV
,

250 
CV_YUV2BGRA_I420
 = 
CV_YUV2BGRA_IYUV
,

251 
CV_YUV420p2RGBA
 = 
CV_YUV2RGBA_YV12
,

252 
CV_YUV420p2BGRA
 = 
CV_YUV2BGRA_YV12
,

254 
CV_YUV2GRAY_420
 = 106,

255 
CV_YUV2GRAY_NV21
 = 
CV_YUV2GRAY_420
,

256 
CV_YUV2GRAY_NV12
 = 
CV_YUV2GRAY_420
,

257 
CV_YUV2GRAY_YV12
 = 
CV_YUV2GRAY_420
,

258 
CV_YUV2GRAY_IYUV
 = 
CV_YUV2GRAY_420
,

259 
CV_YUV2GRAY_I420
 = 
CV_YUV2GRAY_420
,

260 
CV_YUV420•2GRAY
 = 
CV_YUV2GRAY_420
,

261 
CV_YUV420p2GRAY
 = 
CV_YUV2GRAY_420
,

264 
CV_YUV2RGB_UYVY
 = 107,

265 
CV_YUV2BGR_UYVY
 = 108,

268 
CV_YUV2RGB_Y422
 = 
CV_YUV2RGB_UYVY
,

269 
CV_YUV2BGR_Y422
 = 
CV_YUV2BGR_UYVY
,

270 
CV_YUV2RGB_UYNV
 = 
CV_YUV2RGB_UYVY
,

271 
CV_YUV2BGR_UYNV
 = 
CV_YUV2BGR_UYVY
,

273 
CV_YUV2RGBA_UYVY
 = 111,

274 
CV_YUV2BGRA_UYVY
 = 112,

277 
CV_YUV2RGBA_Y422
 = 
CV_YUV2RGBA_UYVY
,

278 
CV_YUV2BGRA_Y422
 = 
CV_YUV2BGRA_UYVY
,

279 
CV_YUV2RGBA_UYNV
 = 
CV_YUV2RGBA_UYVY
,

280 
CV_YUV2BGRA_UYNV
 = 
CV_YUV2BGRA_UYVY
,

282 
CV_YUV2RGB_YUY2
 = 115,

283 
CV_YUV2BGR_YUY2
 = 116,

284 
CV_YUV2RGB_YVYU
 = 117,

285 
CV_YUV2BGR_YVYU
 = 118,

286 
CV_YUV2RGB_YUYV
 = 
CV_YUV2RGB_YUY2
,

287 
CV_YUV2BGR_YUYV
 = 
CV_YUV2BGR_YUY2
,

288 
CV_YUV2RGB_YUNV
 = 
CV_YUV2RGB_YUY2
,

289 
CV_YUV2BGR_YUNV
 = 
CV_YUV2BGR_YUY2
,

291 
CV_YUV2RGBA_YUY2
 = 119,

292 
CV_YUV2BGRA_YUY2
 = 120,

293 
CV_YUV2RGBA_YVYU
 = 121,

294 
CV_YUV2BGRA_YVYU
 = 122,

295 
CV_YUV2RGBA_YUYV
 = 
CV_YUV2RGBA_YUY2
,

296 
CV_YUV2BGRA_YUYV
 = 
CV_YUV2BGRA_YUY2
,

297 
CV_YUV2RGBA_YUNV
 = 
CV_YUV2RGBA_YUY2
,

298 
CV_YUV2BGRA_YUNV
 = 
CV_YUV2BGRA_YUY2
,

300 
CV_YUV2GRAY_UYVY
 = 123,

301 
CV_YUV2GRAY_YUY2
 = 124,

303 
CV_YUV2GRAY_Y422
 = 
CV_YUV2GRAY_UYVY
,

304 
CV_YUV2GRAY_UYNV
 = 
CV_YUV2GRAY_UYVY
,

305 
CV_YUV2GRAY_YVYU
 = 
CV_YUV2GRAY_YUY2
,

306 
CV_YUV2GRAY_YUYV
 = 
CV_YUV2GRAY_YUY2
,

307 
CV_YUV2GRAY_YUNV
 = 
CV_YUV2GRAY_YUY2
,

310 
CV_RGBA2mRGBA
 = 125,

311 
CV_mRGBA2RGBA
 = 126,

313 
CV_RGB2YUV_I420
 = 127,

314 
CV_BGR2YUV_I420
 = 128,

315 
CV_RGB2YUV_IYUV
 = 
CV_RGB2YUV_I420
,

316 
CV_BGR2YUV_IYUV
 = 
CV_BGR2YUV_I420
,

318 
CV_RGBA2YUV_I420
 = 129,

319 
CV_BGRA2YUV_I420
 = 130,

320 
CV_RGBA2YUV_IYUV
 = 
CV_RGBA2YUV_I420
,

321 
CV_BGRA2YUV_IYUV
 = 
CV_BGRA2YUV_I420
,

322 
CV_RGB2YUV_YV12
 = 131,

323 
CV_BGR2YUV_YV12
 = 132,

324 
CV_RGBA2YUV_YV12
 = 133,

325 
CV_BGRA2YUV_YV12
 = 134,

327 
CV_COLORCVT_MAX
 = 135

334 
CV_INTER_NN
 =0,

335 
CV_INTER_LINEAR
 =1,

336 
CV_INTER_CUBIC
 =2,

337 
CV_INTER_AREA
 =3,

338 
CV_INTER_LANCZOS4
 =4

344 
CV_WARP_FILL_OUTLIERS
 =8,

345 
CV_WARP_INVERSE_MAP
 =16

351 
CV_SHAPE_RECT
 =0,

352 
CV_SHAPE_CROSS
 =1,

353 
CV_SHAPE_ELLIPSE
 =2,

354 
CV_SHAPE_CUSTOM
 =100

360 
CV_MOP_ERODE
 =0,

361 
CV_MOP_DILATE
 =1,

362 
CV_MOP_OPEN
 =2,

363 
CV_MOP_CLOSE
 =3,

364 
CV_MOP_GRADIENT
 =4,

365 
CV_MOP_TOPHAT
 =5,

366 
CV_MOP_BLACKHAT
 =6

370 
	sCvMomíts


372 
m00
, 
m10
, 
m01
, 
m20
, 
m11
, 
m02
, 
m30
, 
m21
, 
m12
, 
m03
;

373 
mu20
, 
mu11
, 
mu02
, 
mu30
, 
mu21
, 
mu12
, 
mu03
;

374 
öv_sqπ_m00
;

376 
	tCvMomíts
;

379 
	sCvHuMomíts


381 
hu1
, 
hu2
, 
hu3
, 
hu4
, 
hu5
, 
hu6
, 
hu7
;

383 
	tCvHuMomíts
;

388 
CV_TM_SQDIFF
 =0,

389 
CV_TM_SQDIFF_NORMED
 =1,

390 
CV_TM_CCORR
 =2,

391 
CV_TM_CCORR_NORMED
 =3,

392 
CV_TM_CCOEFF
 =4,

393 
CV_TM_CCOEFF_NORMED
 =5

396 (
CV_CDECL
 * 
	tCvDi°™˚Fun˘i⁄
)–c⁄° * 
	ta
, c⁄° * 
	tb
, * 
	tu£r_∑øm
 );

401 
CV_RETR_EXTERNAL
=0,

402 
CV_RETR_LIST
=1,

403 
CV_RETR_CCOMP
=2,

404 
CV_RETR_TREE
=3,

405 
CV_RETR_FLOODFILL
=4

411 
CV_CHAIN_CODE
=0,

412 
CV_CHAIN_APPROX_NONE
=1,

413 
CV_CHAIN_APPROX_SIMPLE
=2,

414 
CV_CHAIN_APPROX_TC89_L1
=3,

415 
CV_CHAIN_APPROX_TC89_KCOS
=4,

416 
CV_LINK_RUNS
=5

423 
_CvC⁄tourSˇ¬î
* 
	tCvC⁄tourSˇ¬î
;

426 
	sCvChaöPtRódî


428 
CV_SEQ_READER_FIELDS
()

429 
code
;

430 
CvPoöt
 
±
;

431 
sch¨
 
dñès
[8][2];

433 
	tCvChaöPtRódî
;

436 
	#CV_INIT_3X3_DELTAS
–
dñès
, 
°ï
, 
nch
 ) \

437 ((
dñès
)[0] = (
nch
), (dñès)[1] = -(
°ï
) + (nch), \

438 (
dñès
)[2] = -(
°ï
), (dñès)[3] = -(°ïË- (
nch
), \

439 (
dñès
)[4] = -(
nch
), (dñès)[5] = (
°ï
) - (nch), \

440 (
dñès
)[6] = (
°ï
), (dñès)[7] = (°ïË+ (
nch
))

	)

447 
size_t
 
	tCvSubdiv2DEdge
;

449 
	#CV_QUADEDGE2D_FIELDS
() \

450 
Êags
; \

451 
CvSubdiv2DPoöt
* 
±
[4]; \

452 
CvSubdiv2DEdge
 
√xt
[4];

	)

454 
	#CV_SUBDIV2D_POINT_FIELDS
()\

455 
Êags
; \

456 
CvSubdiv2DEdge
 
fú°
; \

457 
CvPoöt2D32f
 
±
; \

458 
id
;

	)

460 
	#CV_SUBDIV2D_VIRTUAL_POINT_FLAG
 (1 << 30)

	)

462 
	sCvQuadEdge2D


464 
CV_QUADEDGE2D_FIELDS
()

466 
	tCvQuadEdge2D
;

468 
	sCvSubdiv2DPoöt


470 
CV_SUBDIV2D_POINT_FIELDS
()

472 
	tCvSubdiv2DPoöt
;

474 
	#CV_SUBDIV2D_FIELDS
() \

475 
	`CV_GRAPH_FIELDS
() \

476 
quad_edges
; \

477 
is_geomëry_vÆid
; \

478 
CvSubdiv2DEdge
 
ª˚¡_edge
; \

479 
CvPoöt2D32f
 
t›À·
; \

480 
CvPoöt2D32f
 
bŸtomright
;

	)

482 
	sCvSubdiv2D


484 
CV_SUBDIV2D_FIELDS
()

486 
	tCvSubdiv2D
;

489 
	eCvSubdiv2DPoötLoˇti⁄


491 
CV_PTLOC_ERROR
 = -2,

492 
CV_PTLOC_OUTSIDE_RECT
 = -1,

493 
CV_PTLOC_INSIDE
 = 0,

494 
CV_PTLOC_VERTEX
 = 1,

495 
CV_PTLOC_ON_EDGE
 = 2

497 
	tCvSubdiv2DPoötLoˇti⁄
;

499 
	eCvNextEdgeTy≥


501 
CV_NEXT_AROUND_ORG
 = 0x00,

502 
CV_NEXT_AROUND_DST
 = 0x22,

503 
CV_PREV_AROUND_ORG
 = 0x11,

504 
CV_PREV_AROUND_DST
 = 0x33,

505 
CV_NEXT_AROUND_LEFT
 = 0x13,

506 
CV_NEXT_AROUND_RIGHT
 = 0x31,

507 
CV_PREV_AROUND_LEFT
 = 0x20,

508 
CV_PREV_AROUND_RIGHT
 = 0x02

510 
	tCvNextEdgeTy≥
;

513 
	#CV_SUBDIV2D_NEXT_EDGE
–
edge
 ) (((
CvQuadEdge2D
*)(”dgeË& ~3))->
√xt
[”dge)&3])

	)

519 
CV_POLY_APPROX_DP
 = 0

525 
CV_CONTOURS_MATCH_I1
 =1,

526 
CV_CONTOURS_MATCH_I2
 =2,

527 
CV_CONTOURS_MATCH_I3
 =3

533 
CV_CLOCKWISE
 =1,

534 
CV_COUNTER_CLOCKWISE
 =2

539 
	sCvC⁄vexôyDe„˘


541 
CvPoöt
* 
°¨t
;

542 
CvPoöt
* 
íd
;

543 
CvPoöt
* 
dïth_poöt
;

544 
dïth
;

545 } 
	tCvC⁄vexôyDe„˘
;

551 
CV_COMP_CORREL
 =0,

552 
CV_COMP_CHISQR
 =1,

553 
CV_COMP_INTERSECT
 =2,

554 
CV_COMP_BHATTACHARYYA
 =3,

555 
CV_COMP_HELLINGER
 =
CV_COMP_BHATTACHARYYA


561 
CV_DIST_MASK_3
 =3,

562 
CV_DIST_MASK_5
 =5,

563 
CV_DIST_MASK_PRECISE
 =0

569 
CV_DIST_LABEL_CCOMP
 = 0,

570 
CV_DIST_LABEL_PIXEL
 = 1

576 
CV_DIST_USER
 =-1,

577 
CV_DIST_L1
 =1,

578 
CV_DIST_L2
 =2,

579 
CV_DIST_C
 =3,

580 
CV_DIST_L12
 =4,

581 
CV_DIST_FAIR
 =5,

582 
CV_DIST_WELSCH
 =6,

583 
CV_DIST_HUBER
 =7

590 
CV_THRESH_BINARY
 =0,

591 
CV_THRESH_BINARY_INV
 =1,

592 
CV_THRESH_TRUNC
 =2,

593 
CV_THRESH_TOZERO
 =3,

594 
CV_THRESH_TOZERO_INV
 =4,

595 
CV_THRESH_MASK
 =7,

596 
CV_THRESH_OTSU
 =8

603 
CV_ADAPTIVE_THRESH_MEAN_C
 =0,

604 
CV_ADAPTIVE_THRESH_GAUSSIAN_C
 =1

610 
CV_FLOODFILL_FIXED_RANGE
 =(1 << 16),

611 
CV_FLOODFILL_MASK_ONLY
 =(1 << 17)

618 
CV_CANNY_L2_GRADIENT
 =(1 << 31)

624 
CV_HOUGH_STANDARD
 =0,

625 
CV_HOUGH_PROBABILISTIC
 =1,

626 
CV_HOUGH_MULTI_SCALE
 =2,

627 
CV_HOUGH_GRADIENT
 =3

632 
CvFótuªTªe
;

633 
CvLSH
;

634 
CvLSHO≥øti⁄s
;

636 #ifde‡
__˝lu•lus


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/opencv2/core/core_c.h

44 #i‚de‡
__OPENCV_CORE_C_H__


45 
	#__OPENCV_CORE_C_H__


	)

47 
	~"›ícv2/c‹e/ty≥s_c.h
"

49 #ifde‡
__˝lu•lus


61 
CVAPI
(*Ë
cvAŒoc
–
size_t
 
size
 );

69 
CVAPI
(Ë
cvFªe_
–* 
±r
 );

70 
	#cvFªe
(
±r
Ë(
	`cvFªe_
(*’å)), *’å)=0)

	)

73 
CVAPI
(
I∂Image
*Ë
cvCª©eImageHódî
–
CvSize
 
size
, 
dïth
, 
ch™√ls
 );

76 
CVAPI
(
I∂Image
*Ë
cvInôImageHódî
–I∂Image* 
image
, 
CvSize
 
size
, 
dïth
,

77 
ch™√ls
, 
‹igö
 
CV_DEFAULT
(0),

78 
Æign
 
CV_DEFAULT
(4));

81 
CVAPI
(
I∂Image
*Ë
cvCª©eImage
–
CvSize
 
size
, 
dïth
, 
ch™√ls
 );

84 
CVAPI
(Ë
cvRñó£ImageHódî
–
I∂Image
** 
image
 );

87 
CVAPI
(Ë
cvRñó£Image
–
I∂Image
** 
image
 );

90 
CVAPI
(
I∂Image
*Ë
cvCl⁄eImage
–c⁄° I∂Image* 
image
 );

94 
CVAPI
(Ë
cvSëImageCOI
–
I∂Image
* 
image
, 
coi
 );

97 
CVAPI
(Ë
cvGëImageCOI
–c⁄° 
I∂Image
* 
image
 );

100 
CVAPI
(Ë
cvSëImageROI
–
I∂Image
* 
image
, 
CvRe˘
 
ª˘
 );

103 
CVAPI
(Ë
cvRe£tImageROI
–
I∂Image
* 
image
 );

106 
CVAPI
(
CvRe˘
Ë
cvGëImageROI
–c⁄° 
I∂Image
* 
image
 );

109 
CVAPI
(
CvM©
*Ë
cvCª©eM©Hódî
–
rows
, 
cﬁs
, 
ty≥
 );

111 
	#CV_AUTOSTEP
 0x7fffffff

	)

114 
CVAPI
(
CvM©
*Ë
cvInôM©Hódî
–CvM©* 
m©
, 
rows
, 
cﬁs
,

115 
ty≥
, * 
d©a
 
CV_DEFAULT
(
NULL
),

116 
°ï
 
CV_DEFAULT
(
CV_AUTOSTEP
) );

119 
CVAPI
(
CvM©
*Ë
cvCª©eM©
–
rows
, 
cﬁs
, 
ty≥
 );

123 
CVAPI
(Ë
cvRñó£M©
–
CvM©
** 
m©
 );

127 
CV_INLINE
 
cvDecRefD©a
–
CvAº
* 
¨r
 )

129 if–
CV_IS_MAT
–
¨r
 ))

131 
CvM©
* 
m©
 = (CvM©*)
¨r
;

132 
m©
->
d©a
.
±r
 = 
NULL
;

133 if–
m©
->
ªfcou¡
 !
NULL
 && --*mat->refcount == 0 )

134 
cvFªe
–&
m©
->
ªfcou¡
 );

135 
m©
->
ªfcou¡
 = 
NULL
;

137 if–
CV_IS_MATND
–
¨r
 ))

139 
CvM©ND
* 
m©
 = (CvM©ND*)
¨r
;

140 
m©
->
d©a
.
±r
 = 
NULL
;

141 if–
m©
->
ªfcou¡
 !
NULL
 && --*mat->refcount == 0 )

142 
cvFªe
–&
m©
->
ªfcou¡
 );

143 
m©
->
ªfcou¡
 = 
NULL
;

148 
CV_INLINE
 
cvIncRefD©a
–
CvAº
* 
¨r
 )

150 
ªfcou¡
 = 0;

151 if–
CV_IS_MAT
–
¨r
 ))

153 
CvM©
* 
m©
 = (CvM©*)
¨r
;

154 if–
m©
->
ªfcou¡
 !
NULL
 )

155 
ªfcou¡
 = ++*
m©
->refcount;

157 if–
CV_IS_MATND
–
¨r
 ))

159 
CvM©ND
* 
m©
 = (CvM©ND*)
¨r
;

160 if–
m©
->
ªfcou¡
 !
NULL
 )

161 
ªfcou¡
 = ++*
m©
->refcount;

163  
ªfcou¡
;

168 
CVAPI
(
CvM©
*Ë
cvCl⁄eM©
–c⁄° CvM©* 
m©
 );

173 
CVAPI
(
CvM©
*Ë
cvGëSubRe˘
–c⁄° 
CvAº
* 
¨r
, CvM©* 
subm©
, 
CvRe˘
 
ª˘
 );

174 
	#cvGëSubAº
 
cvGëSubRe˘


	)

178 
CVAPI
(
CvM©
*Ë
cvGëRows
–c⁄° 
CvAº
* 
¨r
, CvM©* 
subm©
,

179 
°¨t_row
, 
íd_row
,

180 
dñè_row
 
CV_DEFAULT
(1));

182 
CV_INLINE
 
CvM©
* 
cvGëRow
–c⁄° 
CvAº
* 
¨r
, CvM©* 
subm©
, 
row
 )

184  
cvGëRows
–
¨r
, 
subm©
, 
row
,Ñow + 1, 1 );

190 
CVAPI
(
CvM©
*Ë
cvGëCﬁs
–c⁄° 
CvAº
* 
¨r
, CvM©* 
subm©
,

191 
°¨t_cﬁ
, 
íd_cﬁ
 );

193 
CV_INLINE
 
CvM©
* 
cvGëCﬁ
–c⁄° 
CvAº
* 
¨r
, CvM©* 
subm©
, 
cﬁ
 )

195  
cvGëCﬁs
–
¨r
, 
subm©
, 
cﬁ
, col + 1 );

202 
CVAPI
(
CvM©
*Ë
cvGëDüg
–c⁄° 
CvAº
* 
¨r
, CvM©* 
subm©
,

203 
düg
 
CV_DEFAULT
(0));

206 
CVAPI
(Ë
cvSˇœrToRawD©a
–c⁄° 
CvSˇœr
* 
sˇœr
, * 
d©a
, 
ty≥
,

207 
exãnd_to_12
 
CV_DEFAULT
(0) );

209 
CVAPI
(Ë
cvRawD©aToSˇœr
–c⁄° * 
d©a
, 
ty≥
, 
CvSˇœr
* 
sˇœr
 );

212 
CVAPI
(
CvM©ND
*Ë
cvCª©eM©NDHódî
–
dims
, c⁄° * 
sizes
, 
ty≥
 );

215 
CVAPI
(
CvM©ND
*Ë
cvCª©eM©ND
–
dims
, c⁄° * 
sizes
, 
ty≥
 );

218 
CVAPI
(
CvM©ND
*Ë
cvInôM©NDHódî
–CvM©ND* 
m©
, 
dims
, c⁄° * 
sizes
,

219 
ty≥
, * 
d©a
 
CV_DEFAULT
(
NULL
) );

222 
CV_INLINE
 
cvRñó£M©ND
–
CvM©ND
** 
m©
 )

224 
cvRñó£M©
–(
CvM©
**)
m©
 );

228 
CVAPI
(
CvM©ND
*Ë
cvCl⁄eM©ND
–c⁄° CvM©ND* 
m©
 );

231 
CVAPI
(
CvS∑r£M©
*Ë
cvCª©eS∑r£M©
–
dims
, c⁄° * 
sizes
, 
ty≥
 );

234 
CVAPI
(Ë
cvRñó£S∑r£M©
–
CvS∑r£M©
** 
m©
 );

237 
CVAPI
(
CvS∑r£M©
*Ë
cvCl⁄eS∑r£M©
–c⁄° CvS∑r£M©* 
m©
 );

241 
CVAPI
(
CvS∑r£Node
*Ë
cvInôS∑r£M©Iãøt‹
–c⁄° 
CvS∑r£M©
* 
m©
,

242 
CvS∑r£M©Iãøt‹
* 
m©_ôî©‹
 );

245 
CV_INLINE
 
CvS∑r£Node
* 
cvGëNextS∑r£Node
–
CvS∑r£M©Iãøt‹
* 
m©_ôî©‹
 )

247 if–
m©_ôî©‹
->
node
->
√xt
 )

248  
m©_ôî©‹
->
node
 = m©_ôî©‹->node->
√xt
;

251 
idx
;

252  
idx
 = ++
m©_ôî©‹
->
curidx
; idx < m©_ôî©‹->
m©
->
hashsize
; idx++ )

254 
CvS∑r£Node
* 
node
 = (CvS∑r£Node*)
m©_ôî©‹
->
m©
->
hashèbÀ
[
idx
];

255 if–
node
 )

257 
m©_ôî©‹
->
curidx
 = 
idx
;

258  
m©_ôî©‹
->
node
 =Çode;

261  
NULL
;

267 
	#CV_MAX_ARR
 10

	)

269 
	sCvNAºayIãøt‹


271 
cou¡
;

272 
dims
;

273 
CvSize
 
size
;

274 
uch¨
* 
±r
[
CV_MAX_ARR
];

275 
°ack
[
CV_MAX_DIM
];

276 
CvM©ND
* 
hdr
[
CV_MAX_ARR
];

279 
	tCvNAºayIãøt‹
;

281 
	#CV_NO_DEPTH_CHECK
 1

	)

282 
	#CV_NO_CN_CHECK
 2

	)

283 
	#CV_NO_SIZE_CHECK
 4

	)

288 
CVAPI
(Ë
cvInôNAºayIãøt‹
–
cou¡
, 
CvAº
** 
¨rs
,

289 c⁄° 
CvAº
* 
mask
, 
CvM©ND
* 
°ubs
,

290 
CvNAºayIãøt‹
* 
¨øy_ôî©‹
,

291 
Êags
 
CV_DEFAULT
(0) );

294 
CVAPI
(Ë
cvNextNAºaySli˚
–
CvNAºayIãøt‹
* 
¨øy_ôî©‹
 );

299 
CVAPI
(Ë
cvGëEÀmTy≥
–c⁄° 
CvAº
* 
¨r
 );

303 
CVAPI
(Ë
cvGëDims
–c⁄° 
CvAº
* 
¨r
, * 
sizes
 
CV_DEFAULT
(
NULL
) );

309 
CVAPI
(Ë
cvGëDimSize
–c⁄° 
CvAº
* 
¨r
, 
ödex
 );

314 
CVAPI
(
uch¨
*Ë
cvPå1D
–c⁄° 
CvAº
* 
¨r
, 
idx0
, * 
ty≥
 
CV_DEFAULT
(
NULL
));

315 
CVAPI
(
uch¨
*Ë
cvPå2D
–c⁄° 
CvAº
* 
¨r
, 
idx0
, 
idx1
, * 
ty≥
 
CV_DEFAULT
(
NULL
) );

316 
CVAPI
(
uch¨
*Ë
cvPå3D
–c⁄° 
CvAº
* 
¨r
, 
idx0
, 
idx1
, 
idx2
,

317 * 
ty≥
 
CV_DEFAULT
(
NULL
));

323 
CVAPI
(
uch¨
*Ë
cvPåND
–c⁄° 
CvAº
* 
¨r
, c⁄° * 
idx
, * 
ty≥
 
CV_DEFAULT
(
NULL
),

324 
¸óã_node
 
CV_DEFAULT
(1),

325 * 
¥eˇlc_hashvÆ
 
CV_DEFAULT
(
NULL
));

328 
CVAPI
(
CvSˇœr
Ë
cvGë1D
–c⁄° 
CvAº
* 
¨r
, 
idx0
 );

329 
CVAPI
(
CvSˇœr
Ë
cvGë2D
–c⁄° 
CvAº
* 
¨r
, 
idx0
, 
idx1
 );

330 
CVAPI
(
CvSˇœr
Ë
cvGë3D
–c⁄° 
CvAº
* 
¨r
, 
idx0
, 
idx1
, 
idx2
 );

331 
CVAPI
(
CvSˇœr
Ë
cvGëND
–c⁄° 
CvAº
* 
¨r
, c⁄° * 
idx
 );

334 
CVAPI
(Ë
cvGëRól1D
–c⁄° 
CvAº
* 
¨r
, 
idx0
 );

335 
CVAPI
(Ë
cvGëRól2D
–c⁄° 
CvAº
* 
¨r
, 
idx0
, 
idx1
 );

336 
CVAPI
(Ë
cvGëRól3D
–c⁄° 
CvAº
* 
¨r
, 
idx0
, 
idx1
, 
idx2
 );

337 
CVAPI
(Ë
cvGëRólND
–c⁄° 
CvAº
* 
¨r
, c⁄° * 
idx
 );

340 
CVAPI
(Ë
cvSë1D
–
CvAº
* 
¨r
, 
idx0
, 
CvSˇœr
 
vÆue
 );

341 
CVAPI
(Ë
cvSë2D
–
CvAº
* 
¨r
, 
idx0
, 
idx1
, 
CvSˇœr
 
vÆue
 );

342 
CVAPI
(Ë
cvSë3D
–
CvAº
* 
¨r
, 
idx0
, 
idx1
, 
idx2
, 
CvSˇœr
 
vÆue
 );

343 
CVAPI
(Ë
cvSëND
–
CvAº
* 
¨r
, c⁄° * 
idx
, 
CvSˇœr
 
vÆue
 );

346 
CVAPI
(Ë
cvSëRól1D
–
CvAº
* 
¨r
, 
idx0
, 
vÆue
 );

347 
CVAPI
(Ë
cvSëRól2D
–
CvAº
* 
¨r
, 
idx0
, 
idx1
, 
vÆue
 );

348 
CVAPI
(Ë
cvSëRól3D
–
CvAº
* 
¨r
, 
idx0
,

349 
idx1
, 
idx2
, 
vÆue
 );

350 
CVAPI
(Ë
cvSëRólND
–
CvAº
* 
¨r
, c⁄° * 
idx
, 
vÆue
 );

354 
CVAPI
(Ë
cvCÀ¨ND
–
CvAº
* 
¨r
, c⁄° * 
idx
 );

361 
CVAPI
(
CvM©
*Ë
cvGëM©
–c⁄° 
CvAº
* 
¨r
, CvM©* 
hódî
,

362 * 
coi
 
CV_DEFAULT
(
NULL
),

363 
ÆlowND
 
CV_DEFAULT
(0));

366 
CVAPI
(
I∂Image
*Ë
cvGëImage
–c⁄° 
CvAº
* 
¨r
, I∂Image* 
image_hódî
 );

379 
CVAPI
(
CvAº
*Ë
cvResh≠eM©ND
–c⁄° CvAº* 
¨r
,

380 
sizeof_hódî
, 
CvAº
* 
hódî
,

381 
√w_˙
, 
√w_dims
, * 
√w_sizes
 );

383 
	#cvResh≠eND
–
¨r
, 
hódî
, 
√w_˙
, 
√w_dims
, 
√w_sizes
 ) \

384 
	`cvResh≠eM©ND
–(
¨r
), (*(
hódî
)), (header), \

385 (
√w_˙
), (
√w_dims
), (
√w_sizes
))

	)

387 
CVAPI
(
CvM©
*Ë
cvResh≠e
–c⁄° 
CvAº
* 
¨r
, CvM©* 
hódî
,

388 
√w_˙
, 
√w_rows
 
CV_DEFAULT
(0) );

392 
CVAPI
(Ë
cvRïót
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
 );

395 
CVAPI
(Ë
cvCª©eD©a
–
CvAº
* 
¨r
 );

398 
CVAPI
(Ë
cvRñó£D©a
–
CvAº
* 
¨r
 );

403 
CVAPI
(Ë
cvSëD©a
–
CvAº
* 
¨r
, * 
d©a
, 
°ï
 );

408 
CVAPI
(Ë
cvGëRawD©a
–c⁄° 
CvAº
* 
¨r
, 
uch¨
** 
d©a
,

409 * 
°ï
 
CV_DEFAULT
(
NULL
),

410 
CvSize
* 
roi_size
 
CV_DEFAULT
(
NULL
));

413 
CVAPI
(
CvSize
Ë
cvGëSize
–c⁄° 
CvAº
* 
¨r
 );

416 
CVAPI
(Ë
cvC›y
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
,

417 c⁄° 
CvAº
* 
mask
 
CV_DEFAULT
(
NULL
) );

421 
CVAPI
(Ë
cvSë
–
CvAº
* 
¨r
, 
CvSˇœr
 
vÆue
,

422 c⁄° 
CvAº
* 
mask
 
CV_DEFAULT
(
NULL
) );

425 
CVAPI
(Ë
cvSëZîo
–
CvAº
* 
¨r
 );

426 
	#cvZîo
 
cvSëZîo


	)

431 
CVAPI
(Ë
cvS∂ô
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°0
, CvAº* 
d°1
,

432 
CvAº
* 
d°2
, CvAº* 
d°3
 );

436 
CVAPI
(Ë
cvMîge
–c⁄° 
CvAº
* 
§c0
, c⁄° CvAº* 
§c1
,

437 c⁄° 
CvAº
* 
§c2
, c⁄° CvAº* 
§c3
,

438 
CvAº
* 
d°
 );

442 
CVAPI
(Ë
cvMixCh™√ls
–c⁄° 
CvAº
** 
§c
, 
§c_cou¡
,

443 
CvAº
** 
d°
, 
d°_cou¡
,

444 c⁄° * 
‰om_to
, 
∑ú_cou¡
 );

451 
CVAPI
(Ë
cvC⁄vîtSˇÀ
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
,

452 
sˇÀ
 
CV_DEFAULT
(1),

453 
shi·
 
CV_DEFAULT
(0) );

454 
	#cvCvtSˇÀ
 
cvC⁄vîtSˇÀ


	)

455 
	#cvSˇÀ
 
cvC⁄vîtSˇÀ


	)

456 
	#cvC⁄vît
–
§c
, 
d°
 ) 
	`cvC⁄vîtSˇÀ
–(§c), (d°), 1, 0 )

	)

464 
CVAPI
(Ë
cvC⁄vîtSˇÀAbs
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
,

465 
sˇÀ
 
CV_DEFAULT
(1),

466 
shi·
 
CV_DEFAULT
(0) );

467 
	#cvCvtSˇÀAbs
 
cvC⁄vîtSˇÀAbs


	)

474 
CVAPI
(
CvTîmCrôîü
Ë
cvCheckTîmCrôîü
–CvTîmCrôîü 
¸ôîü
,

475 
deÁu…_ïs
,

476 
deÁu…_max_ôîs
 );

483 
CVAPI
(Ë
cvAdd
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
, CvAº* 
d°
,

484 c⁄° 
CvAº
* 
mask
 
CV_DEFAULT
(
NULL
));

487 
CVAPI
(Ë
cvAddS
–c⁄° 
CvAº
* 
§c
, 
CvSˇœr
 
vÆue
, CvAº* 
d°
,

488 c⁄° 
CvAº
* 
mask
 
CV_DEFAULT
(
NULL
));

491 
CVAPI
(Ë
cvSub
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
, CvAº* 
d°
,

492 c⁄° 
CvAº
* 
mask
 
CV_DEFAULT
(
NULL
));

495 
CV_INLINE
 
cvSubS
–c⁄° 
CvAº
* 
§c
, 
CvSˇœr
 
vÆue
, CvAº* 
d°
,

496 c⁄° 
CvAº
* 
mask
 
CV_DEFAULT
(
NULL
))

498 
cvAddS
–
§c
, 
cvSˇœr
–-
vÆue
.
vÆ
[0], -value.val[1], -value.val[2], -value.val[3]),

499 
d°
, 
mask
 );

503 
CVAPI
(Ë
cvSubRS
–c⁄° 
CvAº
* 
§c
, 
CvSˇœr
 
vÆue
, CvAº* 
d°
,

504 c⁄° 
CvAº
* 
mask
 
CV_DEFAULT
(
NULL
));

508 
CVAPI
(Ë
cvMul
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
,

509 
CvAº
* 
d°
, 
sˇÀ
 
CV_DEFAULT
(1) );

514 
CVAPI
(Ë
cvDiv
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
,

515 
CvAº
* 
d°
, 
sˇÀ
 
CV_DEFAULT
(1));

518 
CVAPI
(Ë
cvSˇÀAdd
–c⁄° 
CvAº
* 
§c1
, 
CvSˇœr
 
sˇÀ
,

519 c⁄° 
CvAº
* 
§c2
, CvAº* 
d°
 );

520 
	#cvAXPY
–
A
, 
ªÆ_sˇœr
, 
B
, 
C
 ) 
	`cvSˇÀAdd
(A, 
	`cvRólSˇœr
‘ól_sˇœr), B, C)

	)

523 
CVAPI
(Ë
cvAddWeighãd
–c⁄° 
CvAº
* 
§c1
, 
Æpha
,

524 c⁄° 
CvAº
* 
§c2
, 
bëa
,

525 
gamma
, 
CvAº
* 
d°
 );

528 
CVAPI
(Ë
cvDŸProdu˘
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
 );

531 
CVAPI
(Ë
cvAnd
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
,

532 
CvAº
* 
d°
, c⁄° CvAº* 
mask
 
CV_DEFAULT
(
NULL
));

535 
CVAPI
(Ë
cvAndS
–c⁄° 
CvAº
* 
§c
, 
CvSˇœr
 
vÆue
,

536 
CvAº
* 
d°
, c⁄° CvAº* 
mask
 
CV_DEFAULT
(
NULL
));

539 
CVAPI
(Ë
cvOr
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
,

540 
CvAº
* 
d°
, c⁄° CvAº* 
mask
 
CV_DEFAULT
(
NULL
));

543 
CVAPI
(Ë
cvOrS
–c⁄° 
CvAº
* 
§c
, 
CvSˇœr
 
vÆue
,

544 
CvAº
* 
d°
, c⁄° CvAº* 
mask
 
CV_DEFAULT
(
NULL
));

547 
CVAPI
(Ë
cvX‹
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
,

548 
CvAº
* 
d°
, c⁄° CvAº* 
mask
 
CV_DEFAULT
(
NULL
));

551 
CVAPI
(Ë
cvX‹S
–c⁄° 
CvAº
* 
§c
, 
CvSˇœr
 
vÆue
,

552 
CvAº
* 
d°
, c⁄° CvAº* 
mask
 
CV_DEFAULT
(
NULL
));

555 
CVAPI
(Ë
cvNŸ
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
 );

558 
CVAPI
(Ë
cvInR™ge
–c⁄° 
CvAº
* 
§c
, c⁄° CvAº* 
lowî
,

559 c⁄° 
CvAº
* 
uµî
, CvAº* 
d°
 );

562 
CVAPI
(Ë
cvInR™geS
–c⁄° 
CvAº
* 
§c
, 
CvSˇœr
 
lowî
,

563 
CvSˇœr
 
uµî
, 
CvAº
* 
d°
 );

565 
	#CV_CMP_EQ
 0

	)

566 
	#CV_CMP_GT
 1

	)

567 
	#CV_CMP_GE
 2

	)

568 
	#CV_CMP_LT
 3

	)

569 
	#CV_CMP_LE
 4

	)

570 
	#CV_CMP_NE
 5

	)

576 
CVAPI
(Ë
cvCmp
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
, CvAº* 
d°
, 
cmp_›
 );

579 
CVAPI
(Ë
cvCmpS
–c⁄° 
CvAº
* 
§c
, 
vÆue
, CvAº* 
d°
, 
cmp_›
 );

582 
CVAPI
(Ë
cvMö
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
, CvAº* 
d°
 );

585 
CVAPI
(Ë
cvMax
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
, CvAº* 
d°
 );

588 
CVAPI
(Ë
cvMöS
–c⁄° 
CvAº
* 
§c
, 
vÆue
, CvAº* 
d°
 );

591 
CVAPI
(Ë
cvMaxS
–c⁄° 
CvAº
* 
§c
, 
vÆue
, CvAº* 
d°
 );

594 
CVAPI
(Ë
cvAbsDiff
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
, CvAº* 
d°
 );

597 
CVAPI
(Ë
cvAbsDiffS
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
, 
CvSˇœr
 
vÆue
 );

598 
	#cvAbs
–
§c
, 
d°
 ) 
	`cvAbsDiffS
–(§c), (d°), 
	`cvSˇœrAŒ
(0))

	)

606 
CVAPI
(Ë
cvC¨tToPﬁ¨
–c⁄° 
CvAº
* 
x
, c⁄° CvAº* 
y
,

607 
CvAº
* 
magnôude
, CvAº* 
™gÀ
 
CV_DEFAULT
(
NULL
),

608 
™gÀ_ö_degªes
 
CV_DEFAULT
(0));

613 
CVAPI
(Ë
cvPﬁ¨ToC¨t
–c⁄° 
CvAº
* 
magnôude
, c⁄° CvAº* 
™gÀ
,

614 
CvAº
* 
x
, CvAº* 
y
,

615 
™gÀ_ö_degªes
 
CV_DEFAULT
(0));

618 
CVAPI
(Ë
cvPow
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
, 
powî
 );

623 
CVAPI
(Ë
cvExp
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
 );

629 
CVAPI
(Ë
cvLog
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
 );

632 
CVAPI
(Ë
cvFa°Ar˘™
–
y
, 
x
 );

635 
CVAPI
(Ë
cvCbπ
–
vÆue
 );

641 
	#CV_CHECK_RANGE
 1

	)

642 
	#CV_CHECK_QUIET
 2

	)

643 
CVAPI
(Ë
cvCheckAº
–c⁄° 
CvAº
* 
¨r
, 
Êags
 
CV_DEFAULT
(0),

644 
mö_vÆ
 
CV_DEFAULT
(0), 
max_vÆ
 CV_DEFAULT(0));

645 
	#cvCheckAºay
 
cvCheckAº


	)

647 
	#CV_RAND_UNI
 0

	)

648 
	#CV_RAND_NORMAL
 1

	)

649 
CVAPI
(Ë
cvR™dAº
–
CvRNG
* 
∫g
, 
CvAº
* 
¨r
, 
di°_ty≥
,

650 
CvSˇœr
 
∑øm1
, CvSˇœ∏
∑øm2
 );

652 
CVAPI
(Ë
cvR™dShufÊe
–
CvAº
* 
m©
, 
CvRNG
* 
∫g
,

653 
ôî_Á˘‹
 
CV_DEFAULT
(1.));

655 
	#CV_SORT_EVERY_ROW
 0

	)

656 
	#CV_SORT_EVERY_COLUMN
 1

	)

657 
	#CV_SORT_ASCENDING
 0

	)

658 
	#CV_SORT_DESCENDING
 16

	)

660 
CVAPI
(Ë
cvS‹t
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
 
CV_DEFAULT
(
NULL
),

661 
CvAº
* 
idxm©
 
CV_DEFAULT
(
NULL
),

662 
Êags
 
CV_DEFAULT
(0));

665 
CVAPI
(Ë
cvSﬁveCubic
–c⁄° 
CvM©
* 
c€ffs
, CvM©* 
roŸs
 );

668 
CVAPI
(Ë
cvSﬁvePﬁy
(c⁄° 
CvM©
* 
c€ffs
, CvM© *
roŸs2
,

669 
maxôî
 
CV_DEFAULT
(20), 
fig
 CV_DEFAULT(100));

676 
CVAPI
(Ë
cvCrossProdu˘
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
, CvAº* 
d°
 );

679 
	#cvM©MulAdd
–
§c1
, 
§c2
, 
§c3
, 
d°
 ) 
	`cvGEMM
–(§c1), (§c2), 1., (§c3), 1., (d°), 0 )

	)

680 
	#cvM©Mul
–
§c1
, 
§c2
, 
d°
 ) 
	`cvM©MulAdd
–(§c1), (§c2), 
NULL
, (d°))

	)

682 
	#CV_GEMM_A_T
 1

	)

683 
	#CV_GEMM_B_T
 2

	)

684 
	#CV_GEMM_C_T
 4

	)

687 
CVAPI
(Ë
cvGEMM
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
, 
Æpha
,

688 c⁄° 
CvAº
* 
§c3
, 
bëa
, CvAº* 
d°
,

689 
tABC
 
CV_DEFAULT
(0));

690 
	#cvM©MulAddEx
 
cvGEMM


	)

694 
CVAPI
(Ë
cvTønsf‹m
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
,

695 c⁄° 
CvM©
* 
å™sm©
,

696 c⁄° 
CvM©
* 
shi·vec
 
CV_DEFAULT
(
NULL
));

697 
	#cvM©MulAddS
 
cvTønsf‹m


	)

700 
CVAPI
(Ë
cvPî•e˘iveTønsf‹m
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
,

701 c⁄° 
CvM©
* 
m©
 );

704 
CVAPI
(Ë
cvMulTøn•o£d
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
, 
‹dî
,

705 c⁄° 
CvAº
* 
dñè
 
CV_DEFAULT
(
NULL
),

706 
sˇÀ
 
CV_DEFAULT
(1.) );

709 
CVAPI
(Ë
cvTøn•o£
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
 );

710 
	#cvT
 
cvTøn•o£


	)

713 
CVAPI
(Ë
cvCom∂ëeSymm
–
CvM©
* 
m©rix
, 
LtoR
 
CV_DEFAULT
(0) );

718 
CVAPI
(Ë
cvFlù
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
 
CV_DEFAULT
(
NULL
),

719 
Êù_mode
 
CV_DEFAULT
(0));

720 
	#cvMúr‹
 
cvFlù


	)

723 
	#CV_SVD_MODIFY_A
 1

	)

724 
	#CV_SVD_U_T
 2

	)

725 
	#CV_SVD_V_T
 4

	)

728 
CVAPI
(Ë
cvSVD
–
CvAº
* 
A
, CvAº* 
W
, CvAº* 
U
 
CV_DEFAULT
(
NULL
),

729 
CvAº
* 
V
 
CV_DEFAULT
(
NULL
), 
Êags
 CV_DEFAULT(0));

733 
CVAPI
(Ë
cvSVBkSb
–c⁄° 
CvAº
* 
W
, c⁄° CvAº* 
U
,

734 c⁄° 
CvAº
* 
V
, c⁄° CvAº* 
B
,

735 
CvAº
* 
X
, 
Êags
 );

737 
	#CV_LU
 0

	)

738 
	#CV_SVD
 1

	)

739 
	#CV_SVD_SYM
 2

	)

740 
	#CV_CHOLESKY
 3

	)

741 
	#CV_QR
 4

	)

742 
	#CV_NORMAL
 16

	)

745 
CVAPI
(Ë
cvInvît
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
,

746 
mëhod
 
CV_DEFAULT
(
CV_LU
));

747 
	#cvInv
 
cvInvît


	)

751 
CVAPI
(Ë
cvSﬁve
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
, CvAº* 
d°
,

752 
mëhod
 
CV_DEFAULT
(
CV_LU
));

755 
CVAPI
(Ë
cvDë
–c⁄° 
CvAº
* 
m©
 );

758 
CVAPI
(
CvSˇœr
Ë
cvTø˚
–c⁄° 
CvAº
* 
m©
 );

761 
CVAPI
(Ë
cvEigíVV
–
CvAº
* 
m©
, CvAº* 
eve˘s
, CvAº* 
evÆs
,

762 
ïs
 
CV_DEFAULT
(0),

763 
lowödex
 
CV_DEFAULT
(-1),

764 
highödex
 
CV_DEFAULT
(-1));

771 
CVAPI
(Ë
cvSëIdítôy
–
CvAº
* 
m©
, 
CvSˇœr
 
vÆue
 
CV_DEFAULT
(
cvRólSˇœr
(1)) );

774 
CVAPI
(
CvAº
*Ë
cvR™ge
–CvAº* 
m©
, 
°¨t
, 
íd
 );

778 
	#CV_COVAR_SCRAMBLED
 0

	)

781 
	#CV_COVAR_NORMAL
 1

	)

785 
	#CV_COVAR_USE_AVG
 2

	)

788 
	#CV_COVAR_SCALE
 4

	)

791 
	#CV_COVAR_ROWS
 8

	)

794 
	#CV_COVAR_COLS
 16

	)

796 
CVAPI
(Ë
cvCÆcCov¨M©rix
–c⁄° 
CvAº
** 
ve˘s
, 
cou¡
,

797 
CvAº
* 
cov_m©
, CvAº* 
avg
, 
Êags
 );

799 
	#CV_PCA_DATA_AS_ROW
 0

	)

800 
	#CV_PCA_DATA_AS_COL
 1

	)

801 
	#CV_PCA_USE_AVG
 2

	)

802 
CVAPI
(Ë
cvCÆcPCA
–c⁄° 
CvAº
* 
d©a
, CvAº* 
món
,

803 
CvAº
* 
eigívÆs
, CvAº* 
eigíve˘s
, 
Êags
 );

805 
CVAPI
(Ë
cvProje˘PCA
–c⁄° 
CvAº
* 
d©a
, c⁄° CvAº* 
món
,

806 c⁄° 
CvAº
* 
eigíve˘s
, CvAº* 
ªsu…
 );

808 
CVAPI
(Ë
cvBackProje˘PCA
–c⁄° 
CvAº
* 
¥oj
, c⁄° CvAº* 
món
,

809 c⁄° 
CvAº
* 
eigíve˘s
, CvAº* 
ªsu…
 );

812 
CVAPI
(Ë
cvMahÆ™obis
–c⁄° 
CvAº
* 
vec1
, c⁄° CvAº* 
vec2
, c⁄° CvAº* 
m©
 );

813 
	#cvMahÆ⁄obis
 
cvMahÆ™obis


	)

820 
CVAPI
(
CvSˇœr
Ë
cvSum
–c⁄° 
CvAº
* 
¨r
 );

823 
CVAPI
(Ë
cvCou¡N⁄Zîo
–c⁄° 
CvAº
* 
¨r
 );

826 
CVAPI
(
CvSˇœr
Ë
cvAvg
–c⁄° 
CvAº
* 
¨r
, c⁄° CvAº* 
mask
 
CV_DEFAULT
(
NULL
) );

829 
CVAPI
(Ë
cvAvgSdv
–c⁄° 
CvAº
* 
¨r
, 
CvSˇœr
* 
món
, CvSˇœr* 
°d_dev
,

830 c⁄° 
CvAº
* 
mask
 
CV_DEFAULT
(
NULL
) );

833 
CVAPI
(Ë
cvMöMaxLoc
–c⁄° 
CvAº
* 
¨r
, * 
mö_vÆ
, * 
max_vÆ
,

834 
CvPoöt
* 
mö_loc
 
CV_DEFAULT
(
NULL
),

835 
CvPoöt
* 
max_loc
 
CV_DEFAULT
(
NULL
),

836 c⁄° 
CvAº
* 
mask
 
CV_DEFAULT
(
NULL
) );

839 
	#CV_C
 1

	)

840 
	#CV_L1
 2

	)

841 
	#CV_L2
 4

	)

842 
	#CV_NORM_MASK
 7

	)

843 
	#CV_RELATIVE
 8

	)

844 
	#CV_DIFF
 16

	)

845 
	#CV_MINMAX
 32

	)

847 
	#CV_DIFF_C
 (
CV_DIFF
 | 
CV_C
)

	)

848 
	#CV_DIFF_L1
 (
CV_DIFF
 | 
CV_L1
)

	)

849 
	#CV_DIFF_L2
 (
CV_DIFF
 | 
CV_L2
)

	)

850 
	#CV_RELATIVE_C
 (
CV_RELATIVE
 | 
CV_C
)

	)

851 
	#CV_RELATIVE_L1
 (
CV_RELATIVE
 | 
CV_L1
)

	)

852 
	#CV_RELATIVE_L2
 (
CV_RELATIVE
 | 
CV_L2
)

	)

855 
CVAPI
(Ë
cvN‹m
–c⁄° 
CvAº
* 
¨r1
, c⁄° CvAº* 
¨r2
 
CV_DEFAULT
(
NULL
),

856 
n‹m_ty≥
 
CV_DEFAULT
(
CV_L2
),

857 c⁄° 
CvAº
* 
mask
 
CV_DEFAULT
(
NULL
) );

859 
CVAPI
(Ë
cvN‹mÆize
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
,

860 
a
 
CV_DEFAULT
(1.), 
b
 CV_DEFAULT(0.),

861 
n‹m_ty≥
 
CV_DEFAULT
(
CV_L2
),

862 c⁄° 
CvAº
* 
mask
 
CV_DEFAULT
(
NULL
) );

865 
	#CV_REDUCE_SUM
 0

	)

866 
	#CV_REDUCE_AVG
 1

	)

867 
	#CV_REDUCE_MAX
 2

	)

868 
	#CV_REDUCE_MIN
 3

	)

870 
CVAPI
(Ë
cvRedu˚
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
, 
dim
 
CV_DEFAULT
(-1),

871 
›
 
CV_DEFAULT
(
CV_REDUCE_SUM
) );

877 
	#CV_DXT_FORWARD
 0

	)

878 
	#CV_DXT_INVERSE
 1

	)

879 
	#CV_DXT_SCALE
 2

	)

880 
	#CV_DXT_INV_SCALE
 (
CV_DXT_INVERSE
 + 
CV_DXT_SCALE
)

	)

881 
	#CV_DXT_INVERSE_SCALE
 
CV_DXT_INV_SCALE


	)

882 
	#CV_DXT_ROWS
 4

	)

883 
	#CV_DXT_MUL_CONJ
 8

	)

889 
CVAPI
(Ë
cvDFT
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
, 
Êags
,

890 
n⁄zîo_rows
 
CV_DEFAULT
(0) );

891 
	#cvFFT
 
cvDFT


	)

894 
CVAPI
(Ë
cvMulS≥˘rums
–c⁄° 
CvAº
* 
§c1
, c⁄° CvAº* 
§c2
,

895 
CvAº
* 
d°
, 
Êags
 );

898 
CVAPI
(Ë
cvGëO±imÆDFTSize
–
size0
 );

901 
CVAPI
(Ë
cvDCT
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
, 
Êags
 );

908 
CVAPI
(Ë
cvSli˚Lígth
–
CvSli˚
 
¶i˚
, c⁄° 
CvSeq
* 
£q
 );

914 
CVAPI
(
CvMemSt‹age
*Ë
cvCª©eMemSt‹age
–
block_size
 
CV_DEFAULT
(0));

918 
CVAPI
(
CvMemSt‹age
*Ë
cvCª©eChûdMemSt‹age
–CvMemSt‹age* 
∑ª¡
 );

923 
CVAPI
(Ë
cvRñó£MemSt‹age
–
CvMemSt‹age
** 
°‹age
 );

930 
CVAPI
(Ë
cvCÀ¨MemSt‹age
–
CvMemSt‹age
* 
°‹age
 );

933 
CVAPI
(Ë
cvSaveMemSt‹agePos
–c⁄° 
CvMemSt‹age
* 
°‹age
, 
CvMemSt‹agePos
* 
pos
 );

936 
CVAPI
(Ë
cvRe°‹eMemSt‹agePos
–
CvMemSt‹age
* 
°‹age
, 
CvMemSt‹agePos
* 
pos
 );

939 
CVAPI
(*Ë
cvMemSt‹ageAŒoc
–
CvMemSt‹age
* 
°‹age
, 
size_t
 
size
 );

942 
CVAPI
(
CvSåög
Ë
cvMemSt‹ageAŒocSåög
–
CvMemSt‹age
* 
°‹age
, c⁄° * 
±r
,

943 
Àn
 
CV_DEFAULT
(-1) );

946 
CVAPI
(
CvSeq
*Ë
cvCª©eSeq
–
£q_Êags
, 
size_t
 
hódî_size
,

947 
size_t
 
ñem_size
, 
CvMemSt‹age
* 
°‹age
 );

951 
CVAPI
(Ë
cvSëSeqBlockSize
–
CvSeq
* 
£q
, 
dñè_ñems
 );

955 
CVAPI
(
sch¨
*Ë
cvSeqPush
–
CvSeq
* 
£q
, c⁄° * 
ñemít
 
CV_DEFAULT
(
NULL
));

959 
CVAPI
(
sch¨
*Ë
cvSeqPushFr⁄t
–
CvSeq
* 
£q
, c⁄° * 
ñemít
 
CV_DEFAULT
(
NULL
));

963 
CVAPI
(Ë
cvSeqP›
–
CvSeq
* 
£q
, * 
ñemít
 
CV_DEFAULT
(
NULL
));

967 
CVAPI
(Ë
cvSeqP›Fr⁄t
–
CvSeq
* 
£q
, * 
ñemít
 
CV_DEFAULT
(
NULL
));

970 
	#CV_FRONT
 1

	)

971 
	#CV_BACK
 0

	)

973 
CVAPI
(Ë
cvSeqPushMu…i
–
CvSeq
* 
£q
, c⁄° * 
ñemíts
,

974 
cou¡
, 
ö_‰⁄t
 
CV_DEFAULT
(0) );

977 
CVAPI
(Ë
cvSeqP›Mu…i
–
CvSeq
* 
£q
, * 
ñemíts
,

978 
cou¡
, 
ö_‰⁄t
 
CV_DEFAULT
(0) );

982 
CVAPI
(
sch¨
*Ë
cvSeqIn£π
–
CvSeq
* 
£q
, 
bef‹e_ödex
,

983 c⁄° * 
ñemít
 
CV_DEFAULT
(
NULL
));

986 
CVAPI
(Ë
cvSeqRemove
–
CvSeq
* 
£q
, 
ödex
 );

992 
CVAPI
(Ë
cvCÀ¨Seq
–
CvSeq
* 
£q
 );

998 
CVAPI
(
sch¨
*Ë
cvGëSeqEÀm
–c⁄° 
CvSeq
* 
£q
, 
ödex
 );

1002 
CVAPI
(Ë
cvSeqEÀmIdx
–c⁄° 
CvSeq
* 
£q
, c⁄° * 
ñemít
,

1003 
CvSeqBlock
** 
block
 
CV_DEFAULT
(
NULL
) );

1006 
CVAPI
(Ë
cvSèπAµídToSeq
–
CvSeq
* 
£q
, 
CvSeqWrôî
* 
wrôî
 );

1010 
CVAPI
(Ë
cvSèπWrôeSeq
–
£q_Êags
, 
hódî_size
,

1011 
ñem_size
, 
CvMemSt‹age
* 
°‹age
,

1012 
CvSeqWrôî
* 
wrôî
 );

1018 
CVAPI
(
CvSeq
*Ë
cvEndWrôeSeq
–
CvSeqWrôî
* 
wrôî
 );

1023 
CVAPI
(Ë
cvFlushSeqWrôî
–
CvSeqWrôî
* 
wrôî
 );

1028 
CVAPI
(Ë
cvSèπRódSeq
–c⁄° 
CvSeq
* 
£q
, 
CvSeqRódî
* 
ªadî
,

1029 
ªvî£
 
CV_DEFAULT
(0) );

1033 
CVAPI
(Ë
cvGëSeqRódîPos
–
CvSeqRódî
* 
ªadî
 );

1038 
CVAPI
(Ë
cvSëSeqRódîPos
–
CvSeqRódî
* 
ªadî
, 
ödex
,

1039 
is_ªœtive
 
CV_DEFAULT
(0));

1042 
CVAPI
(*Ë
cvCvtSeqToAºay
–c⁄° 
CvSeq
* 
£q
, * 
ñemíts
,

1043 
CvSli˚
 
¶i˚
 
CV_DEFAULT
(
CV_WHOLE_SEQ
) );

1048 
CVAPI
(
CvSeq
*Ë
cvMakeSeqHódîF‹Aºay
–
£q_ty≥
, 
hódî_size
,

1049 
ñem_size
, * 
ñemíts
, 
tŸÆ
,

1050 
CvSeq
* 
£q
, 
CvSeqBlock
* 
block
 );

1053 
CVAPI
(
CvSeq
*Ë
cvSeqSli˚
–c⁄° CvSeq* 
£q
, 
CvSli˚
 
¶i˚
,

1054 
CvMemSt‹age
* 
°‹age
 
CV_DEFAULT
(
NULL
),

1055 
c›y_d©a
 
CV_DEFAULT
(0));

1057 
CV_INLINE
 
CvSeq
* 
cvCl⁄eSeq
–c⁄° CvSeq* 
£q
, 
CvMemSt‹age
* 
°‹age
 
CV_DEFAULT
(
NULL
))

1059  
cvSeqSli˚
–
£q
, 
CV_WHOLE_SEQ
, 
°‹age
, 1 );

1063 
CVAPI
(Ë
cvSeqRemoveSli˚
–
CvSeq
* 
£q
, 
CvSli˚
 
¶i˚
 );

1066 
CVAPI
(Ë
cvSeqIn£πSli˚
–
CvSeq
* 
£q
, 
bef‹e_ödex
, c⁄° 
CvAº
* 
‰om_¨r
 );

1069 (
CV_CDECL
* 
	tCvCmpFunc
)(c⁄° * 
	ta
, c⁄° * 
	tb
, * 
	tu£rd©a
 );

1072 
CVAPI
(Ë
cvSeqS‹t
–
CvSeq
* 
£q
, 
CvCmpFunc
 
func
, * 
u£rd©a
 
CV_DEFAULT
(
NULL
) );

1075 
CVAPI
(
sch¨
*Ë
cvSeqSórch
–
CvSeq
* 
£q
, c⁄° * 
ñem
, 
CvCmpFunc
 
func
,

1076 
is_s‹ãd
, * 
ñem_idx
,

1077 * 
u£rd©a
 
CV_DEFAULT
(
NULL
) );

1080 
CVAPI
(Ë
cvSeqInvît
–
CvSeq
* 
£q
 );

1083 
CVAPI
(Ë
cvSeqP¨tôi⁄
–c⁄° 
CvSeq
* 
£q
, 
CvMemSt‹age
* 
°‹age
,

1084 
CvSeq
** 
œbñs
, 
CvCmpFunc
 
is_equÆ
, * 
u£rd©a
 );

1087 
CVAPI
(Ë
cvCh™geSeqBlock
–* 
ªadî
, 
dúe˘i⁄
 );

1088 
CVAPI
(Ë
cvCª©eSeqBlock
–
CvSeqWrôî
* 
wrôî
 );

1092 
CVAPI
(
CvSë
*Ë
cvCª©eSë
–
£t_Êags
, 
hódî_size
,

1093 
ñem_size
, 
CvMemSt‹age
* 
°‹age
 );

1096 
CVAPI
(Ë
cvSëAdd
–
CvSë
* 
£t_hódî
, 
CvSëEÀm
* 
ñem
 
CV_DEFAULT
(
NULL
),

1097 
CvSëEÀm
** 
ö£πed_ñem
 
CV_DEFAULT
(
NULL
) );

1100 
CV_INLINE
 
CvSëEÀm
* 
cvSëNew
–
CvSë
* 
£t_hódî
 )

1102 
CvSëEÀm
* 
ñem
 = 
£t_hódî
->
‰ì_ñems
;

1103 if–
ñem
 )

1105 
£t_hódî
->
‰ì_ñems
 = 
ñem
->
√xt_‰ì
;

1106 
ñem
->
Êags
 =ÉÀm->Êag†& 
CV_SET_ELEM_IDX_MASK
;

1107 
£t_hódî
->
a˘ive_cou¡
++;

1110 
cvSëAdd
–
£t_hódî
, 
NULL
, (
CvSëEÀm
**)&
ñem
 );

1111  
ñem
;

1115 
CV_INLINE
 
cvSëRemoveByPå
–
CvSë
* 
£t_hódî
, * 
ñem
 )

1117 
CvSëEÀm
* 
_ñem
 = (CvSëEÀm*)
ñem
;

1118 
as£π
–
_ñem
->
Êags
 >= 0 );

1119 
_ñem
->
√xt_‰ì
 = 
£t_hódî
->
‰ì_ñems
;

1120 
_ñem
->
Êags
 = (_ñem->Êag†& 
CV_SET_ELEM_IDX_MASK
Ë| 
CV_SET_ELEM_FREE_FLAG
;

1121 
£t_hódî
->
‰ì_ñems
 = 
_ñem
;

1122 
£t_hódî
->
a˘ive_cou¡
--;

1126 
CVAPI
(Ë
cvSëRemove
–
CvSë
* 
£t_hódî
, 
ödex
 );

1130 
CV_INLINE
 
CvSëEÀm
* 
cvGëSëEÀm
–c⁄° 
CvSë
* 
£t_hódî
, 
idx
 )

1132 
CvSëEÀm
* 
ñem
 = (CvSëEÀm*)(*)
cvGëSeqEÀm
–(
CvSeq
*)
£t_hódî
, 
idx
 );

1133  
ñem
 && 
CV_IS_SET_ELEM
(Élem ) ?Élem : 0;

1137 
CVAPI
(Ë
cvCÀ¨Së
–
CvSë
* 
£t_hódî
 );

1140 
CVAPI
(
CvGøph
*Ë
cvCª©eGøph
–
gøph_Êags
, 
hódî_size
,

1141 
vtx_size
, 
edge_size
,

1142 
CvMemSt‹age
* 
°‹age
 );

1145 
CVAPI
(Ë
cvGøphAddVtx
–
CvGøph
* 
gøph
, c⁄° 
CvGøphVtx
* 
vtx
 
CV_DEFAULT
(
NULL
),

1146 
CvGøphVtx
** 
ö£πed_vtx
 
CV_DEFAULT
(
NULL
) );

1150 
CVAPI
(Ë
cvGøphRemoveVtx
–
CvGøph
* 
gøph
, 
ödex
 );

1151 
CVAPI
(Ë
cvGøphRemoveVtxByPå
–
CvGøph
* 
gøph
, 
CvGøphVtx
* 
vtx
 );

1158 
CVAPI
(Ë
cvGøphAddEdge
–
CvGøph
* 
gøph
,

1159 
°¨t_idx
, 
íd_idx
,

1160 c⁄° 
CvGøphEdge
* 
edge
 
CV_DEFAULT
(
NULL
),

1161 
CvGøphEdge
** 
ö£πed_edge
 
CV_DEFAULT
(
NULL
) );

1163 
CVAPI
(Ë
cvGøphAddEdgeByPå
–
CvGøph
* 
gøph
,

1164 
CvGøphVtx
* 
°¨t_vtx
, CvGøphVtx* 
íd_vtx
,

1165 c⁄° 
CvGøphEdge
* 
edge
 
CV_DEFAULT
(
NULL
),

1166 
CvGøphEdge
** 
ö£πed_edge
 
CV_DEFAULT
(
NULL
) );

1169 
CVAPI
(Ë
cvGøphRemoveEdge
–
CvGøph
* 
gøph
, 
°¨t_idx
, 
íd_idx
 );

1170 
CVAPI
(Ë
cvGøphRemoveEdgeByPå
–
CvGøph
* 
gøph
, 
CvGøphVtx
* 
°¨t_vtx
,

1171 
CvGøphVtx
* 
íd_vtx
 );

1174 
CVAPI
(
CvGøphEdge
*Ë
cvFödGøphEdge
–c⁄° 
CvGøph
* 
gøph
, 
°¨t_idx
, 
íd_idx
 );

1175 
CVAPI
(
CvGøphEdge
*Ë
cvFödGøphEdgeByPå
–c⁄° 
CvGøph
* 
gøph
,

1176 c⁄° 
CvGøphVtx
* 
°¨t_vtx
,

1177 c⁄° 
CvGøphVtx
* 
íd_vtx
 );

1178 
	#cvGøphFödEdge
 
cvFödGøphEdge


	)

1179 
	#cvGøphFödEdgeByPå
 
cvFödGøphEdgeByPå


	)

1182 
CVAPI
(Ë
cvCÀ¨Gøph
–
CvGøph
* 
gøph
 );

1186 
CVAPI
(Ë
cvGøphVtxDegªe
–c⁄° 
CvGøph
* 
gøph
, 
vtx_idx
 );

1187 
CVAPI
(Ë
cvGøphVtxDegªeByPå
–c⁄° 
CvGøph
* 
gøph
, c⁄° 
CvGøphVtx
* 
vtx
 );

1191 
	#cvGëGøphVtx
–
gøph
, 
idx
 ) (
CvGøphVtx
*)
	`cvGëSëEÀm
((
CvSë
*)(gøph), (idx))

	)

1194 
	#cvGøphVtxIdx
–
gøph
, 
vtx
 ) ((vtx)->
Êags
 & 
CV_SET_ELEM_IDX_MASK
)

	)

1197 
	#cvGøphEdgeIdx
–
gøph
, 
edge
 ) (”dge)->
Êags
 & 
CV_SET_ELEM_IDX_MASK
)

	)

1199 
	#cvGøphGëVtxCou¡
–
gøph
 ) ((gøph)->
a˘ive_cou¡
)

	)

1200 
	#cvGøphGëEdgeCou¡
–
gøph
 ) ((gøph)->
edges
->
a˘ive_cou¡
)

	)

1202 
	#CV_GRAPH_VERTEX
 1

	)

1203 
	#CV_GRAPH_TREE_EDGE
 2

	)

1204 
	#CV_GRAPH_BACK_EDGE
 4

	)

1205 
	#CV_GRAPH_FORWARD_EDGE
 8

	)

1206 
	#CV_GRAPH_CROSS_EDGE
 16

	)

1207 
	#CV_GRAPH_ANY_EDGE
 30

	)

1208 
	#CV_GRAPH_NEW_TREE
 32

	)

1209 
	#CV_GRAPH_BACKTRACKING
 64

	)

1210 
	#CV_GRAPH_OVER
 -1

	)

1212 
	#CV_GRAPH_ALL_ITEMS
 -1

	)

1215 
	#CV_GRAPH_ITEM_VISITED_FLAG
 (1 << 30)

	)

1216 
	#CV_IS_GRAPH_VERTEX_VISITED
(
vtx
) \

1217 (((
CvGøphVtx
*)(
vtx
))->
Êags
 & 
CV_GRAPH_ITEM_VISITED_FLAG
)

	)

1218 
	#CV_IS_GRAPH_EDGE_VISITED
(
edge
) \

1219 (((
CvGøphEdge
*)(
edge
))->
Êags
 & 
CV_GRAPH_ITEM_VISITED_FLAG
)

	)

1220 
	#CV_GRAPH_SEARCH_TREE_NODE_FLAG
 (1 << 29)

	)

1221 
	#CV_GRAPH_FORWARD_EDGE_FLAG
 (1 << 28)

	)

1223 
	sCvGøphSˇ¬î


1225 
CvGøphVtx
* 
vtx
;

1226 
CvGøphVtx
* 
d°
;

1227 
CvGøphEdge
* 
edge
;

1229 
CvGøph
* 
gøph
;

1230 
CvSeq
* 
°ack
;

1231 
ödex
;

1232 
mask
;

1234 
	tCvGøphSˇ¬î
;

1237 
CVAPI
(
CvGøphSˇ¬î
*Ë
cvCª©eGøphSˇ¬î
–
CvGøph
* 
gøph
,

1238 
CvGøphVtx
* 
vtx
 
CV_DEFAULT
(
NULL
),

1239 
mask
 
CV_DEFAULT
(
CV_GRAPH_ALL_ITEMS
));

1242 
CVAPI
(Ë
cvRñó£GøphSˇ¬î
–
CvGøphSˇ¬î
** 
sˇ¬î
 );

1245 
CVAPI
(Ë
cvNextGøphIãm
–
CvGøphSˇ¬î
* 
sˇ¬î
 );

1248 
CVAPI
(
CvGøph
*Ë
cvCl⁄eGøph
–c⁄° CvGøph* 
gøph
, 
CvMemSt‹age
* 
°‹age
 );

1264 
	#CV_RGB
–
r
, 
g
, 
b
 ) 
	`cvSˇœr
–(b), (g), (r), 0 )

	)

1265 
	#CV_FILLED
 -1

	)

1267 
	#CV_AA
 16

	)

1270 
CVAPI
(Ë
cvLöe
–
CvAº
* 
img
, 
CvPoöt
 
±1
, CvPoöà
±2
,

1271 
CvSˇœr
 
cﬁ‹
, 
thick√ss
 
CV_DEFAULT
(1),

1272 
löe_ty≥
 
CV_DEFAULT
(8), 
shi·
 CV_DEFAULT(0) );

1276 
CVAPI
(Ë
cvRe˘™gÀ
–
CvAº
* 
img
, 
CvPoöt
 
±1
, CvPoöà
±2
,

1277 
CvSˇœr
 
cﬁ‹
, 
thick√ss
 
CV_DEFAULT
(1),

1278 
löe_ty≥
 
CV_DEFAULT
(8),

1279 
shi·
 
CV_DEFAULT
(0));

1282 
CVAPI
(Ë
cvRe˘™gÀR
–
CvAº
* 
img
, 
CvRe˘
 
r
,

1283 
CvSˇœr
 
cﬁ‹
, 
thick√ss
 
CV_DEFAULT
(1),

1284 
löe_ty≥
 
CV_DEFAULT
(8),

1285 
shi·
 
CV_DEFAULT
(0));

1290 
CVAPI
(Ë
cvCú˛e
–
CvAº
* 
img
, 
CvPoöt
 
˚¡î
, 
ødius
,

1291 
CvSˇœr
 
cﬁ‹
, 
thick√ss
 
CV_DEFAULT
(1),

1292 
löe_ty≥
 
CV_DEFAULT
(8), 
shi·
 CV_DEFAULT(0));

1297 
CVAPI
(Ë
cvEŒù£
–
CvAº
* 
img
, 
CvPoöt
 
˚¡î
, 
CvSize
 
axes
,

1298 
™gÀ
, 
°¨t_™gÀ
, 
íd_™gÀ
,

1299 
CvSˇœr
 
cﬁ‹
, 
thick√ss
 
CV_DEFAULT
(1),

1300 
löe_ty≥
 
CV_DEFAULT
(8), 
shi·
 CV_DEFAULT(0));

1302 
CV_INLINE
 
cvEŒù£Box
–
CvAº
* 
img
, 
CvBox2D
 
box
, 
CvSˇœr
 
cﬁ‹
,

1303 
thick√ss
 
CV_DEFAULT
(1),

1304 
löe_ty≥
 
CV_DEFAULT
(8), 
shi·
 CV_DEFAULT(0) )

1306 
CvSize
 
axes
;

1307 
axes
.
width
 = 
cvRound
(
box
.
size
.width*0.5);

1308 
axes
.
height
 = 
cvRound
(
box
.
size
.height*0.5);

1310 
cvEŒù£
–
img
, 
cvPoötFrom32f
–
box
.
˚¡î
 ), 
axes
, box.
™gÀ
,

1311 0, 360, 
cﬁ‹
, 
thick√ss
, 
löe_ty≥
, 
shi·
 );

1315 
CVAPI
(Ë
cvFûlC⁄vexPﬁy
–
CvAº
* 
img
, c⁄° 
CvPoöt
* 
±s
, 
≈ts
, 
CvSˇœr
 
cﬁ‹
,

1316 
löe_ty≥
 
CV_DEFAULT
(8), 
shi·
 CV_DEFAULT(0));

1319 
CVAPI
(Ë
cvFûlPﬁy
–
CvAº
* 
img
, 
CvPoöt
** 
±s
, c⁄° * 
≈ts
,

1320 
c⁄tours
, 
CvSˇœr
 
cﬁ‹
,

1321 
löe_ty≥
 
CV_DEFAULT
(8), 
shi·
 CV_DEFAULT(0) );

1324 
CVAPI
(Ë
cvPﬁyLöe
–
CvAº
* 
img
, 
CvPoöt
** 
±s
, c⁄° * 
≈ts
, 
c⁄tours
,

1325 
is_˛o£d
, 
CvSˇœr
 
cﬁ‹
, 
thick√ss
 
CV_DEFAULT
(1),

1326 
löe_ty≥
 
CV_DEFAULT
(8), 
shi·
 CV_DEFAULT(0) );

1328 
	#cvDøwRe˘
 
cvRe˘™gÀ


	)

1329 
	#cvDøwLöe
 
cvLöe


	)

1330 
	#cvDøwCú˛e
 
cvCú˛e


	)

1331 
	#cvDøwEŒù£
 
cvEŒù£


	)

1332 
	#cvDøwPﬁyLöe
 
cvPﬁyLöe


	)

1337 
CVAPI
(Ë
cvClùLöe
–
CvSize
 
img_size
, 
CvPoöt
* 
±1
, CvPoöt* 
±2
 );

1342 
CVAPI
(Ë
cvInôLöeIãøt‹
–c⁄° 
CvAº
* 
image
, 
CvPoöt
 
±1
, CvPoöà
±2
,

1343 
CvLöeIãøt‹
* 
löe_ôî©‹
,

1344 
c⁄√˘ivôy
 
CV_DEFAULT
(8),

1345 
À·_to_right
 
CV_DEFAULT
(0));

1348 
	#CV_NEXT_LINE_POINT
–
löe_ôî©‹
 ) \

1350 
_löe_ôî©‹_mask
 = (
löe_ôî©‹
).
îr
 < 0 ? -1 : 0; \

1351 (
löe_ôî©‹
).
îr
 +÷öe_ôî©‹).
möus_dñè
 + \

1352 ((
löe_ôî©‹
).
∂us_dñè
 & 
_löe_ôî©‹_mask
); \

1353 (
löe_ôî©‹
).
±r
 +÷öe_ôî©‹).
möus_°ï
 + \

1354 ((
löe_ôî©‹
).
∂us_°ï
 & 
_löe_ôî©‹_mask
); \

1355 }

	)

1359 
	#CV_FONT_HERSHEY_SIMPLEX
 0

	)

1360 
	#CV_FONT_HERSHEY_PLAIN
 1

	)

1361 
	#CV_FONT_HERSHEY_DUPLEX
 2

	)

1362 
	#CV_FONT_HERSHEY_COMPLEX
 3

	)

1363 
	#CV_FONT_HERSHEY_TRIPLEX
 4

	)

1364 
	#CV_FONT_HERSHEY_COMPLEX_SMALL
 5

	)

1365 
	#CV_FONT_HERSHEY_SCRIPT_SIMPLEX
 6

	)

1366 
	#CV_FONT_HERSHEY_SCRIPT_COMPLEX
 7

	)

1369 
	#CV_FONT_ITALIC
 16

	)

1371 
	#CV_FONT_VECTOR0
 
CV_FONT_HERSHEY_SIMPLEX


	)

1375 
	sCvF⁄t


1377 c⁄° * 
«meF⁄t
;

1378 
CvSˇœr
 
cﬁ‹
;

1379 
f⁄t_Á˚
;

1380 c⁄° * 
ascii
;

1381 c⁄° * 
gªek
;

1382 c⁄° * 
cyrûlic
;

1383 
hsˇÀ
, 
vsˇÀ
;

1384 
shór
;

1385 
thick√ss
;

1386 
dx
;

1387 
löe_ty≥
;

1389 
	tCvF⁄t
;

1392 
CVAPI
(Ë
cvInôF⁄t
–
CvF⁄t
* 
f⁄t
, 
f⁄t_Á˚
,

1393 
hsˇÀ
, 
vsˇÀ
,

1394 
shór
 
CV_DEFAULT
(0),

1395 
thick√ss
 
CV_DEFAULT
(1),

1396 
löe_ty≥
 
CV_DEFAULT
(8));

1398 
CV_INLINE
 
CvF⁄t
 
cvF⁄t
–
sˇÀ
, 
thick√ss
 
CV_DEFAULT
(1) )

1400 
CvF⁄t
 
f⁄t
;

1401 
cvInôF⁄t
–&
f⁄t
, 
CV_FONT_HERSHEY_PLAIN
, 
sˇÀ
, sˇÀ, 0, 
thick√ss
, 
CV_AA
 );

1402  
f⁄t
;

1407 
CVAPI
(Ë
cvPutText
–
CvAº
* 
img
, c⁄° * 
ãxt
, 
CvPoöt
 
‹g
,

1408 c⁄° 
CvF⁄t
* 
f⁄t
, 
CvSˇœr
 
cﬁ‹
 );

1411 
CVAPI
(Ë
cvGëTextSize
–c⁄° * 
ãxt_°rög
, c⁄° 
CvF⁄t
* 
f⁄t
,

1412 
CvSize
* 
ãxt_size
, * 
ba£löe
 );

1419 
CVAPI
(
CvSˇœr
Ë
cvCﬁ‹ToSˇœr
–
∑cked_cﬁ‹
, 
¨πy≥
 );

1427 
CVAPI
(Ë
cvEŒù£2Pﬁy
–
CvPoöt
 
˚¡î
, 
CvSize
 
axes
,

1428 
™gÀ
, 
¨c_°¨t
, 
¨c_íd
, 
CvPoöt
 * 
±s
, 
dñè
 );

1431 
CVAPI
(Ë
cvDøwC⁄tours
–
CvAº
 *
img
, 
CvSeq
* 
c⁄tour
,

1432 
CvSˇœr
 
exã∫Æ_cﬁ‹
, CvSˇœ∏
hﬁe_cﬁ‹
,

1433 
max_Àvñ
, 
thick√ss
 
CV_DEFAULT
(1),

1434 
löe_ty≥
 
CV_DEFAULT
(8),

1435 
CvPoöt
 
off£t
 
CV_DEFAULT
(
cvPoöt
(0,0)));

1439 
CVAPI
(Ë
cvLUT
–c⁄° 
CvAº
* 
§c
, CvAº* 
d°
, c⁄° CvAº* 
lut
 );

1443 
	sCvTªeNodeIãøt‹


1445 c⁄° * 
node
;

1446 
Àvñ
;

1447 
max_Àvñ
;

1449 
	tCvTªeNodeIãøt‹
;

1451 
CVAPI
(Ë
cvInôTªeNodeIãøt‹
–
CvTªeNodeIãøt‹
* 
åì_ôî©‹
,

1452 c⁄° * 
fú°
, 
max_Àvñ
 );

1453 
CVAPI
(*Ë
cvNextTªeNode
–
CvTªeNodeIãøt‹
* 
åì_ôî©‹
 );

1454 
CVAPI
(*Ë
cvPªvTªeNode
–
CvTªeNodeIãøt‹
* 
åì_ôî©‹
 );

1459 
CVAPI
(Ë
cvIn£πNodeI¡oTªe
–* 
node
, * 
∑ª¡
, * 
‰ame
 );

1462 
CVAPI
(Ë
cvRemoveNodeFromTªe
–* 
node
, * 
‰ame
 );

1466 
CVAPI
(
CvSeq
*Ë
cvTªeToNodeSeq
–c⁄° * 
fú°
, 
hódî_size
,

1467 
CvMemSt‹age
* 
°‹age
 );

1471 
	#CV_KMEANS_USE_INITIAL_LABELS
 1

	)

1472 
CVAPI
(Ë
cvKMóns2
–c⁄° 
CvAº
* 
ßm∂es
, 
˛u°î_cou¡
, CvAº* 
œbñs
,

1473 
CvTîmCrôîü
 
ãrm¸ô
, 
©ãm±s
 
CV_DEFAULT
(1),

1474 
CvRNG
* 
∫g
 
CV_DEFAULT
(0), 
Êags
 CV_DEFAULT(0),

1475 
CvAº
* 
_˚¡îs
 
CV_DEFAULT
(0), * 
com∑˘√ss
 CV_DEFAULT(0) );

1482 
CVAPI
(Ë
cvRegi°îModuÀ
–c⁄° 
CvModuÀInfo
* 
moduÀ_öfo
 );

1485 
CVAPI
(Ë
cvU£O±imized
–
⁄_off
 );

1488 
CVAPI
(Ë
cvGëModuÀInfo
–c⁄° * 
moduÀ_«me
,

1489 c⁄° ** 
vîsi⁄
,

1490 c⁄° ** 
lﬂded_add⁄_∂ugös
 );

1492 * (
	tCV_CDECL
 *
	tCvAŒocFunc
)(
	tsize_t
 
	tsize
, * 
	tu£rd©a
);

1493 (
CV_CDECL
 *
	tCvFªeFunc
)(* 
	tµå
, * 
	tu£rd©a
);

1497 
CVAPI
(Ë
cvSëMem‹yM™agî
–
CvAŒocFunc
 
Æloc_func
 
CV_DEFAULT
(
NULL
),

1498 
CvFªeFunc
 
‰ì_func
 
CV_DEFAULT
(
NULL
),

1499 * 
u£rd©a
 
CV_DEFAULT
(
NULL
));

1502 
I∂Image
* (
	tCV_STDCALL
* 
	tCv_ùlCª©eImageHódî
)

1504 
	tI∂ROI
*,
	tI∂Image
*,*,
	tI∂TûeInfo
*);

1505 (
CV_STDCALL
* 
	tCv_ùlAŒoˇãImageD©a
)(
	tI∂Image
*,,);

1506 (
CV_STDCALL
* 
	tCv_ùlDóŒoˇã
)(
	tI∂Image
*,);

1507 
I∂ROI
* (
	tCV_STDCALL
* 
	tCv_ùlCª©eROI
)(,,,,);

1508 
I∂Image
* (
	tCV_STDCALL
* 
	tCv_ùlCl⁄eImage
)(c⁄° 
	tI∂Image
*);

1511 
CVAPI
(Ë
cvSëIPLAŒoˇt‹s
–
Cv_ùlCª©eImageHódî
 
¸óã_hódî
,

1512 
Cv_ùlAŒoˇãImageD©a
 
Æloˇã_d©a
,

1513 
Cv_ùlDóŒoˇã
 
dóŒoˇã
,

1514 
Cv_ùlCª©eROI
 
¸óã_roi
,

1515 
Cv_ùlCl⁄eImage
 
˛⁄e_image
 );

1517 
	#CV_TURN_ON_IPL_COMPATIBILITY
() \

1518 
	`cvSëIPLAŒoˇt‹s
–
ùlCª©eImageHódî
, 
ùlAŒoˇãImage
, \

1519 
ùlDóŒoˇã
, 
ùlCª©eROI
, 
ùlCl⁄eImage
 )

	)

1528 
CVAPI
(
CvFûeSt‹age
*Ë
cvO≥nFûeSt‹age
–c⁄° * 
fûíame
, 
CvMemSt‹age
* 
mem°‹age
,

1529 
Êags
, c⁄° * 
ícodög
 
CV_DEFAULT
(
NULL
) );

1532 
CVAPI
(Ë
cvRñó£FûeSt‹age
–
CvFûeSt‹age
** 
fs
 );

1535 
CVAPI
(c⁄° *Ë
cvAârVÆue
–c⁄° 
CvAârLi°
* 
©å
, c⁄° * 
©å_«me
 );

1538 
CVAPI
(Ë
cvSèπWrôeSåu˘
–
CvFûeSt‹age
* 
fs
, c⁄° * 
«me
,

1539 
°ru˘_Êags
, c⁄° * 
ty≥_«me
 
CV_DEFAULT
(
NULL
),

1540 
CvAârLi°
 
©åibuãs
 
CV_DEFAULT
(
cvAârLi°
()));

1543 
CVAPI
(Ë
cvEndWrôeSåu˘
–
CvFûeSt‹age
* 
fs
 );

1546 
CVAPI
(Ë
cvWrôeI¡
–
CvFûeSt‹age
* 
fs
, c⁄° * 
«me
, 
vÆue
 );

1549 
CVAPI
(Ë
cvWrôeRól
–
CvFûeSt‹age
* 
fs
, c⁄° * 
«me
, 
vÆue
 );

1552 
CVAPI
(Ë
cvWrôeSåög
–
CvFûeSt‹age
* 
fs
, c⁄° * 
«me
,

1553 c⁄° * 
°r
, 
quŸe
 
CV_DEFAULT
(0) );

1556 
CVAPI
(Ë
cvWrôeCommít
–
CvFûeSt‹age
* 
fs
, c⁄° * 
commít
,

1557 
eﬁ_commít
 );

1561 
CVAPI
(Ë
cvWrôe
–
CvFûeSt‹age
* 
fs
, c⁄° * 
«me
, c⁄° * 
±r
,

1562 
CvAârLi°
 
©åibuãs
 
CV_DEFAULT
(
cvAârLi°
()));

1565 
CVAPI
(Ë
cvSèπNextSåóm
–
CvFûeSt‹age
* 
fs
 );

1568 
CVAPI
(Ë
cvWrôeRawD©a
–
CvFûeSt‹age
* 
fs
, c⁄° * 
§c
,

1569 
Àn
, c⁄° * 
dt
 );

1573 
CVAPI
(
CvSåögHashNode
*Ë
cvGëHashedKey
–
CvFûeSt‹age
* 
fs
, c⁄° * 
«me
,

1574 
Àn
 
CV_DEFAULT
(-1),

1575 
¸óã_missög
 
CV_DEFAULT
(0));

1579 
CVAPI
(
CvFûeNode
*Ë
cvGëRoŸFûeNode
–c⁄° 
CvFûeSt‹age
* 
fs
,

1580 
°ªam_ödex
 
CV_DEFAULT
(0) );

1584 
CVAPI
(
CvFûeNode
*Ë
cvGëFûeNode
–
CvFûeSt‹age
* 
fs
, CvFûeNode* 
m≠
,

1585 c⁄° 
CvSåögHashNode
* 
key
,

1586 
¸óã_missög
 
CV_DEFAULT
(0) );

1589 
CVAPI
(
CvFûeNode
*Ë
cvGëFûeNodeByName
–c⁄° 
CvFûeSt‹age
* 
fs
,

1590 c⁄° 
CvFûeNode
* 
m≠
,

1591 c⁄° * 
«me
 );

1593 
CV_INLINE
 
cvRódI¡
–c⁄° 
CvFûeNode
* 
node
, 
deÁu…_vÆue
 
CV_DEFAULT
(0) )

1595  !
node
 ? 
deÁu…_vÆue
 :

1596 
CV_NODE_IS_INT
(
node
->
èg
Ë?Çode->
d©a
.
i
 :

1597 
CV_NODE_IS_REAL
(
node
->
èg
Ë? 
cvRound
“ode->
d©a
.
f
) : 0x7fffffff;

1601 
CV_INLINE
 
cvRódI¡ByName
–c⁄° 
CvFûeSt‹age
* 
fs
, c⁄° 
CvFûeNode
* 
m≠
,

1602 c⁄° * 
«me
, 
deÁu…_vÆue
 
CV_DEFAULT
(0) )

1604  
cvRódI¡
–
cvGëFûeNodeByName
–
fs
, 
m≠
, 
«me
 ), 
deÁu…_vÆue
 );

1608 
CV_INLINE
 
cvRódRól
–c⁄° 
CvFûeNode
* 
node
, 
deÁu…_vÆue
 
CV_DEFAULT
(0.) )

1610  !
node
 ? 
deÁu…_vÆue
 :

1611 
CV_NODE_IS_INT
(
node
->
èg
Ë? (Íode->
d©a
.
i
 :

1612 
CV_NODE_IS_REAL
(
node
->
èg
Ë?Çode->
d©a
.
f
 : 1e300;

1616 
CV_INLINE
 
cvRódRólByName
–c⁄° 
CvFûeSt‹age
* 
fs
, c⁄° 
CvFûeNode
* 
m≠
,

1617 c⁄° * 
«me
, 
deÁu…_vÆue
 
CV_DEFAULT
(0.) )

1619  
cvRódRól
–
cvGëFûeNodeByName
–
fs
, 
m≠
, 
«me
 ), 
deÁu…_vÆue
 );

1623 
CV_INLINE
 c⁄° * 
cvRódSåög
–c⁄° 
CvFûeNode
* 
node
,

1624 c⁄° * 
deÁu…_vÆue
 
CV_DEFAULT
(
NULL
) )

1626  !
node
 ? 
deÁu…_vÆue
 : 
CV_NODE_IS_STRING
“ode->
èg
Ë?Çode->
d©a
.
°r
.
±r
 : 0;

1630 
CV_INLINE
 c⁄° * 
cvRódSåögByName
–c⁄° 
CvFûeSt‹age
* 
fs
, c⁄° 
CvFûeNode
* 
m≠
,

1631 c⁄° * 
«me
, c⁄° * 
deÁu…_vÆue
 
CV_DEFAULT
(
NULL
) )

1633  
cvRódSåög
–
cvGëFûeNodeByName
–
fs
, 
m≠
, 
«me
 ), 
deÁu…_vÆue
 );

1638 
CVAPI
(*Ë
cvRód
–
CvFûeSt‹age
* 
fs
, 
CvFûeNode
* 
node
,

1639 
CvAârLi°
* 
©åibuãs
 
CV_DEFAULT
(
NULL
));

1642 
CV_INLINE
 * 
cvRódByName
–
CvFûeSt‹age
* 
fs
, c⁄° 
CvFûeNode
* 
m≠
,

1643 c⁄° * 
«me
, 
CvAârLi°
* 
©åibuãs
 
CV_DEFAULT
(
NULL
) )

1645  
cvRód
–
fs
, 
cvGëFûeNodeByName
–fs, 
m≠
, 
«me
 ), 
©åibuãs
 );

1650 
CVAPI
(Ë
cvSèπRódRawD©a
–c⁄° 
CvFûeSt‹age
* 
fs
, c⁄° 
CvFûeNode
* 
§c
,

1651 
CvSeqRódî
* 
ªadî
 );

1654 
CVAPI
(Ë
cvRódRawD©aSli˚
–c⁄° 
CvFûeSt‹age
* 
fs
, 
CvSeqRódî
* 
ªadî
,

1655 
cou¡
, * 
d°
, c⁄° * 
dt
 );

1658 
CVAPI
(Ë
cvRódRawD©a
–c⁄° 
CvFûeSt‹age
* 
fs
, c⁄° 
CvFûeNode
* 
§c
,

1659 * 
d°
, c⁄° * 
dt
 );

1662 
CVAPI
(Ë
cvWrôeFûeNode
–
CvFûeSt‹age
* 
fs
, c⁄° * 
√w_node_«me
,

1663 c⁄° 
CvFûeNode
* 
node
, 
embed
 );

1666 
CVAPI
(c⁄° *Ë
cvGëFûeNodeName
–c⁄° 
CvFûeNode
* 
node
 );

1670 
CVAPI
(Ë
cvRegi°îTy≥
–c⁄° 
CvTy≥Info
* 
öfo
 );

1671 
CVAPI
(Ë
cvUƒegi°îTy≥
–c⁄° * 
ty≥_«me
 );

1672 
CVAPI
(
CvTy≥Info
*Ë
cvFú°Ty≥
();

1673 
CVAPI
(
CvTy≥Info
*Ë
cvFödTy≥
–c⁄° * 
ty≥_«me
 );

1674 
CVAPI
(
CvTy≥Info
*Ë
cvTy≥Of
–c⁄° * 
°ru˘_±r
 );

1677 
CVAPI
(Ë
cvRñó£
–** 
°ru˘_±r
 );

1678 
CVAPI
(*Ë
cvCl⁄e
–c⁄° * 
°ru˘_±r
 );

1681 
CVAPI
(Ë
cvSave
–c⁄° * 
fûíame
, c⁄° * 
°ru˘_±r
,

1682 c⁄° * 
«me
 
CV_DEFAULT
(
NULL
),

1683 c⁄° * 
commít
 
CV_DEFAULT
(
NULL
),

1684 
CvAârLi°
 
©åibuãs
 
CV_DEFAULT
(
cvAârLi°
()));

1685 
CVAPI
(*Ë
cvLﬂd
–c⁄° * 
fûíame
,

1686 
CvMemSt‹age
* 
mem°‹age
 
CV_DEFAULT
(
NULL
),

1687 c⁄° * 
«me
 
CV_DEFAULT
(
NULL
),

1688 c⁄° ** 
ªÆ_«me
 
CV_DEFAULT
(
NULL
) );

1694 
CVAPI
(
öt64
Ë
cvGëTickCou¡
( );

1695 
CVAPI
(Ë
cvGëTickFªquícy
( );

1699 
	#CV_CPU_NONE
 0

	)

1700 
	#CV_CPU_MMX
 1

	)

1701 
	#CV_CPU_SSE
 2

	)

1702 
	#CV_CPU_SSE2
 3

	)

1703 
	#CV_CPU_SSE3
 4

	)

1704 
	#CV_CPU_SSSE3
 5

	)

1705 
	#CV_CPU_SSE4_1
 6

	)

1706 
	#CV_CPU_SSE4_2
 7

	)

1707 
	#CV_CPU_POPCNT
 8

	)

1708 
	#CV_CPU_AVX
 10

	)

1709 
	#CV_HARDWARE_MAX_FEATURE
 255

	)

1711 
CVAPI
(Ë
cvCheckH¨dw¨eSuµ‹t
(
„©uª
);

1716 
CVAPI
(Ë
cvGëNumThªads
( );

1717 
CVAPI
(Ë
cvSëNumThªads
–
thªads
 
CV_DEFAULT
(0) );

1719 
CVAPI
(Ë
cvGëThªadNum
( );

1725 
CVAPI
(Ë
cvGëEºSètus
( );

1728 
CVAPI
(Ë
cvSëEºSètus
–
°©us
 );

1730 
	#CV_EºModeLóf
 0

	)

1731 
	#CV_EºModeP¨ít
 1

	)

1732 
	#CV_EºModeSûít
 2

	)

1735 
CVAPI
(Ë
cvGëEºMode
( );

1738 
CVAPI
(Ë
cvSëEºMode
–
mode
 );

1743 
CVAPI
(Ë
cvEº‹
–
°©us
, c⁄° * 
func_«me
,

1744 c⁄° * 
îr_msg
, c⁄° * 
fûe_«me
, 
löe
 );

1747 
CVAPI
(c⁄° *Ë
cvEº‹Så
–
°©us
 );

1750 
CVAPI
(Ë
cvGëEºInfo
–c⁄° ** 
îrcode_desc
, c⁄° ** 
des¸ùti⁄
,

1751 c⁄° ** 
fûíame
, * 
löe
 );

1754 
CVAPI
(Ë
cvEº‹FromIµSètus
–
ùp_°©us
 );

1756 (
CV_CDECL
 *
	tCvEº‹CÆlback
)–
	t°©us
, c⁄° * 
	tfunc_«me
,

1757 c⁄° * 
	tîr_msg
, c⁄° * 
	tfûe_«me
, 
	tlöe
, * 
	tu£rd©a
 );

1760 
CVAPI
(
CvEº‹CÆlback
Ë
cvRedúe˘Eº‹
–CvEº‹CÆlback 
îr‹_h™dÀr
,

1761 * 
u£rd©a
 
CV_DEFAULT
(
NULL
),

1762 ** 
¥ev_u£rd©a
 
CV_DEFAULT
(
NULL
) );

1770 
CVAPI
(Ë
cvNulDevRï‹t
–
°©us
, c⁄° * 
func_«me
, c⁄° * 
îr_msg
,

1771 c⁄° * 
fûe_«me
, 
löe
, * 
u£rd©a
 );

1773 
CVAPI
(Ë
cvStdEºRï‹t
–
°©us
, c⁄° * 
func_«me
, c⁄° * 
îr_msg
,

1774 c⁄° * 
fûe_«me
, 
löe
, * 
u£rd©a
 );

1776 
CVAPI
(Ë
cvGuiBoxRï‹t
–
°©us
, c⁄° * 
func_«me
, c⁄° * 
îr_msg
,

1777 c⁄° * 
fûe_«me
, 
löe
, * 
u£rd©a
 );

1779 
	#OPENCV_ERROR
(
°©us
,
func
,
c⁄ãxt
) \

1780 
	`cvEº‹
((
°©us
),(
func
),(
c⁄ãxt
),
__FILE__
,
__LINE__
)

	)

1782 
	#OPENCV_ERRCHK
(
func
,
c⁄ãxt
) \

1783 {i‡(
	`cvGëEºSètus
() >= 0) \

1784 {
	`OPENCV_ERROR
(
CV_StsBackTø˚
,(
func
),(
c⁄ãxt
));}}

	)

1786 
	#OPENCV_ASSERT
(
ex¥
,
func
,
c⁄ãxt
) \

1787 {i‡(! (
ex¥
)) \

1788 {
	`OPENCV_ERROR
(
CV_StsI¡î«l
,(
func
),(
c⁄ãxt
));}}

	)

1790 
	#OPENCV_RSTERR
(Ë(
	`cvSëEºSètus
(
CV_StsOk
))

	)

1792 
	#OPENCV_CALL
–
Func
 ) \

1794 
Func
; \

1795 }

	)

1799 #ifde‡
CV_NO_FUNC_NAMES


1800 
	#CV_FUNCNAME
–
Name
 )

	)

1801 
	#cvFuncName
 ""

	)

1803 
	#CV_FUNCNAME
–
Name
 ) \

1804 
cvFuncName
[] = 
Name


	)

1812 
	#CV_ERROR
–
Code
, 
Msg
 ) \

1814 
	`cvEº‹
–(
Code
), 
cvFuncName
, 
Msg
, 
__FILE__
, 
__LINE__
 ); \

1815 
__CV_EXIT__
; \

1816 }

	)

1819 
	#CV_ERROR_FROM_CODE
–
code
 ) \

1820 
	`CV_ERROR
–
code
, "" )

	)

1827 
	#CV_CHECK
() \

1829 if–
	`cvGëEºSètus
() < 0 ) \

1830 
	`CV_ERROR
–
CV_StsBackTø˚
, "Inner function failed." ); \

1831 }

	)

1839 
	#CV_CALL
–
Func
 ) \

1841 
Func
; \

1842 
	`CV_CHECK
(); \

1843 }

	)

1847 
	#CV_ASSERT
–
C⁄dôi⁄
 ) \

1849 if–!(
C⁄dôi⁄
) ) \

1850 
	`CV_ERROR
–
CV_StsI¡î«l
, "Assertion: " #Condition " failed" ); \

1851 }

	)

1853 
	#__CV_BEGIN__
 {

	)

1854 
	#__CV_END__
 
exô
;Éxô: ; }

	)

1855 
	#__CV_EXIT__
 
exô


	)

1857 #ifde‡
__˝lu•lus


1861 
CV_EXPORTS
 
CvModuÀ


1863 
CvModuÀ
–
CvModuÀInfo
* 
_öfo
 );

1864 ~
CvModuÀ
();

1865 
CvModuÀInfo
* 
öfo
;

1867 
CvModuÀInfo
* 
fú°
;

1868 
CvModuÀInfo
* 
œ°
;

1871 
CV_EXPORTS
 
	gCvTy≥


1873 
CvTy≥
–c⁄° * 
ty≥_«me
,

1874 
CvIsIn°™˚Func
 
is_ö°™˚
, 
CvRñó£Func
 
ªÀa£
=0,

1875 
CvRódFunc
 
ªad
=0, 
CvWrôeFunc
 
wrôe
=0, 
CvCl⁄eFunc
 
˛⁄e
=0 );

1876 ~
CvTy≥
();

1877 
CvTy≥Info
* 
	göfo
;

1879 
CvTy≥Info
* 
	gfú°
;

1880 
CvTy≥Info
* 
	gœ°
;

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@
1
.
1
/usr/include
195
20484
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/feature_tracker/feature_tracker.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/feature_tracker/feature_tracker.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/feature_tracker/main_feature_tracker.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/hough_transform/main_hough_transform.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/motion_estimation/iterative_motion_estimator.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/motion_estimation/iterative_motion_estimator.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/motion_estimation/main_motion_estimation.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/stereo_matching/color_disparity_graph.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/stereo_matching/color_disparity_graph.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/stereo_matching/main_stereo_matching.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/stereo_matching/stereo_matching.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/stereo_matching/stereo_matching.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/homography_filter_node.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/main_video_stabilizer.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/smoother_node.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/stabilizer.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/stabilizer.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/truncate_transform_node.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/demos/video_stabilizer/vstab_nodes.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/Application.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/ConfigParser.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/Export.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/FrameSource.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/OptionHandler.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/ProfilerRange.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/Range.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/Render.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/Render3D.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/SyncTimer.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/ThreadSafeQueue.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/Utility.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/NVX/detail/OptionHandler.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/OVX/FrameSourceOVX.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/OVX/Render3DOVX.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/OVX/RenderOVX.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/include/OVX/UtilityOVX.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Application.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/ArgumentParser.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/ArgumentParser.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/ConfigParser.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/ConvertFrame.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/EGLAPIAccessors.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/EGLAPIAccessors.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/FrameSource.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/FrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerBaseFrameSourceImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerBaseFrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerCameraFrameSourceImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerCameraFrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerCommon.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerCommon.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerEGLStreamSinkFrameSourceImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerEGLStreamSinkFrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerImagesFrameSourceImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerImagesFrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerNvCameraFrameSourceImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerNvCameraFrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerNvMediaFrameSourceImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerNvMediaFrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerOpenMAXFrameSourceImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerOpenMAXFrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerVideoFrameSourceImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/GStreamer/GStreamerVideoFrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaCSI10635CameraFrameSourceImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaCSI10635CameraFrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaCSI10640CameraFrameSourceImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaCSI10640CameraFrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaCameraConfigParams.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaVideoFrameSourceImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/NvMediaVideoFrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10635/ImageCapture.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10635/ImageCapture.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/eglstrm_setup.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/eglstrm_setup.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/img_producer.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/img_producer.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/interop.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/interop.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/ipp_component.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/ipp_component.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/ipp_raw.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/ipp_raw.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/NvMedia/OV10640/main.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVBaseFrameSource.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVFrameSourceImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVFrameSourceImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVImageFrameSource.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVImageFrameSource.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVVideoFrameSource.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/OpenCV/OpenCVVideoFrameSource.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/Wrappers/FrameSourceWrapper.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/FrameSource/Wrappers/FrameSourceWrapper.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/NVXIOFeatures.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/OptionHandler.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Private/GStreamerUtils.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Private/LogUtils.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Private/LogUtils.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Private/Types.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Private/Types.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/ProfilerRange.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/BaseRender3DImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/BaseRender3DImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/OpenGL.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/OpenGL.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/OpenGLBasicRenders.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/OpenGLBasicRenders.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/OpenGLRenderImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/OpenGLRenderImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/CUDA-OpenGL/RenderUtils.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/EventLogger.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/EventLogger.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/EventPlayer.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/EventPlayer.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GStreamer/GStreamerBaseRenderImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GStreamer/GStreamerBaseRenderImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GStreamer/GStreamerImagesRenderImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GStreamer/GStreamerImagesRenderImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GStreamer/GStreamerVideoRenderImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GStreamer/GStreamerVideoRenderImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GlfwUIRenderImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/GlfwUIRenderImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/OpenCV/OpenGLOpenCVRenderImpl.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/OpenCV/OpenGLOpenCVRenderImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Render.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Render3D.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Render3DImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/RenderImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/StubRenderImpl.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Wrappers/Render3DWrapper.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Wrappers/Render3DWrapper.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Wrappers/RenderWrapper.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Render/Wrappers/RenderWrapper.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/SyncTimer.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/NVX/Utility.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/FrameSource/FrameSourceOVX.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/FrameSource/Wrappers/FrameSourceOVXWrapper.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/FrameSource/Wrappers/FrameSourceOVXWrapper.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Private/TypesOVX.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Private/TypesOVX.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Render/Render3DOVX.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Render/RenderOVX.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Render/Wrappers/Render3DOVXWrapper.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Render/Wrappers/Render3DOVXWrapper.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Render/Wrappers/RenderOVXWrapper.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/Render/Wrappers/RenderOVXWrapper.hpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OVX/UtilityOVX.cpp
/home/yang/cuda_scheduling_examiner_mirror/src/third_party/VisionWorks-1.6-Demos/nvxio/src/OpenGLShaders.hpp
/usr/include/GL/glcorearb.h
/usr/include/NVX/nvx.h
/usr/include/NVX/nvx_timer.hpp
/usr/include/NVX/nvxcu.h
/usr/include/VX/vx.h
/usr/include/VX/vxu.h
/usr/include/limits.h
/usr/include/locale.h
/usr/include/math.h
/usr/include/opencv2/core/core.hpp
/usr/include/opencv2/highgui/highgui.hpp
/usr/include/opencv2/imgproc/imgproc.hpp
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/NVX/nvx_api_macros.h
/usr/include/NVX/nvx_compatibility.h
/usr/include/VX/vx_api.h
/usr/include/VX/vx_compatibility.h
/usr/include/VX/vx_kernels.h
/usr/include/VX/vx_nodes.h
/usr/include/VX/vx_types.h
/usr/include/VX/vx_vendors.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/libio.h
/usr/include/opencv2/core/mat.hpp
/usr/include/opencv2/core/operations.hpp
/usr/include/opencv2/core/types_c.h
/usr/include/opencv2/core/version.hpp
/usr/include/opencv2/highgui/highgui_c.h
/usr/include/opencv2/imgproc/types_c.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/opencv2/core/core_c.h
/usr/include/stdc-predef.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
